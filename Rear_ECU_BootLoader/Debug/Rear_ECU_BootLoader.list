
Rear_ECU_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002f60  08002f60  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f60  08002f60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000018  08002f7c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002f7c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076e0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001898  00000000  00000000  0002771d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b0  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017308  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c8c  00000000  00000000  000412b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083072  00000000  00000000  00047f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cafb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000208c  00000000  00000000  000cb034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b18 	.word	0x08002b18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002b18 	.word	0x08002b18

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f824 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a0 	bl	800029c <MX_GPIO_Init>
  MX_CRC_Init();
 800015c:	f000 f860 	bl	8000220 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f872 	bl	8000248 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8000164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000168:	4808      	ldr	r0, [pc, #32]	; (800018c <main+0x40>)
 800016a:	f001 fd81 	bl	8001c70 <HAL_GPIO_ReadPin>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d105      	bne.n	8000180 <main+0x34>
		printmsg("BL_DEBUG_MSG: Enter boot..\n\r");
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <main+0x44>)
 8000176:	f000 f8e1 	bl	800033c <printmsg>
		bootloader_uart_read_data();
 800017a:	f000 f8e7 	bl	800034c <bootloader_uart_read_data>
 800017e:	e001      	b.n	8000184 <main+0x38>
	}
	else
	{
		bootloader_jump_to_user_app();
 8000180:	f000 f958 	bl	8000434 <bootloader_jump_to_user_app>
 8000184:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000186:	4618      	mov	r0, r3
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010c00 	.word	0x40010c00
 8000190:	08002b30 	.word	0x08002b30

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fcb0 	bl	8002b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fdf9 	bl	8001dd4 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e8:	f000 fee3 	bl	8000fb2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f864 	bl	80022d4 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000212:	f000 fece 	bl	8000fb2 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_CRC_Init+0x20>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <MX_CRC_Init+0x24>)
 8000228:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <MX_CRC_Init+0x20>)
 800022c:	f001 f8fb 	bl	8001426 <HAL_CRC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000236:	f000 febc 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000078 	.word	0x20000078
 8000244:	40023000 	.word	0x40023000

08000248 <MX_USART3_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart3.Instance = USART3;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MX_USART3_UART_Init+0x50>)
 8000250:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000258:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 800026e:	220c      	movs	r2, #12
 8000270:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_USART3_UART_Init+0x4c>)
 8000280:	f002 f9c4 	bl	800260c <HAL_UART_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800028a:	f000 fe92 	bl	8000fb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000034 	.word	0x20000034
 8000298:	40004800 	.word	0x40004800

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_GPIO_Init+0x98>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <MX_GPIO_Init+0x98>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <MX_GPIO_Init+0x98>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_GPIO_Init+0x98>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a19      	ldr	r2, [pc, #100]	; (8000334 <MX_GPIO_Init+0x98>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_GPIO_Init+0x98>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_GPIO_Init+0x98>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_GPIO_Init+0x98>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_GPIO_Init+0x98>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_GPIO_Init+0x98>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <MX_GPIO_Init+0x98>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_GPIO_Init+0x98>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_GPIO_Init+0x9c>)
 8000326:	f001 fb49 	bl	80019bc <HAL_GPIO_Init>

}
 800032a:	bf00      	nop
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40010c00 	.word	0x40010c00

0800033c <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *format, ...) {
 800033c:	b40f      	push	{r0, r1, r2, r3}
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
	va_start(args, format);
	vsprintf(str, format, args);
	HAL_UART_Transmit(C_UART, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
	va_end(args);
#endif
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <bootloader_uart_read_data>:

void bootloader_uart_read_data(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	71fb      	strb	r3, [r7, #7]

	while(1){
		memset(bl_rx_buffer,0,200);
 8000356:	22c8      	movs	r2, #200	; 0xc8
 8000358:	2100      	movs	r1, #0
 800035a:	4833      	ldr	r0, [pc, #204]	; (8000428 <bootloader_uart_read_data+0xdc>)
 800035c:	f002 fbd4 	bl	8002b08 <memset>
		//Recebe 1 byte para definir a quantidade de bytes posteriores
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	2201      	movs	r2, #1
 8000366:	4930      	ldr	r1, [pc, #192]	; (8000428 <bootloader_uart_read_data+0xdc>)
 8000368:	4830      	ldr	r0, [pc, #192]	; (800042c <bootloader_uart_read_data+0xe0>)
 800036a:	f002 fa2e 	bl	80027ca <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 800036e:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <bootloader_uart_read_data+0xdc>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	b29a      	uxth	r2, r3
 8000378:	f04f 33ff 	mov.w	r3, #4294967295
 800037c:	492c      	ldr	r1, [pc, #176]	; (8000430 <bootloader_uart_read_data+0xe4>)
 800037e:	482b      	ldr	r0, [pc, #172]	; (800042c <bootloader_uart_read_data+0xe0>)
 8000380:	f002 fa23 	bl	80027ca <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000384:	4b28      	ldr	r3, [pc, #160]	; (8000428 <bootloader_uart_read_data+0xdc>)
 8000386:	785b      	ldrb	r3, [r3, #1]
 8000388:	3b51      	subs	r3, #81	; 0x51
 800038a:	2b0b      	cmp	r3, #11
 800038c:	d84a      	bhi.n	8000424 <bootloader_uart_read_data+0xd8>
 800038e:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <bootloader_uart_read_data+0x48>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003c5 	.word	0x080003c5
 8000398:	080003cd 	.word	0x080003cd
 800039c:	080003d5 	.word	0x080003d5
 80003a0:	080003dd 	.word	0x080003dd
 80003a4:	080003e5 	.word	0x080003e5
 80003a8:	080003ed 	.word	0x080003ed
 80003ac:	080003f5 	.word	0x080003f5
 80003b0:	080003fd 	.word	0x080003fd
 80003b4:	08000405 	.word	0x08000405
 80003b8:	0800040d 	.word	0x0800040d
 80003bc:	08000415 	.word	0x08000415
 80003c0:	0800041d 	.word	0x0800041d
		{
				case BL_GET_VER:
	                bootloader_handle_getver_cmd(bl_rx_buffer);
 80003c4:	4818      	ldr	r0, [pc, #96]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003c6:	f000 f8a7 	bl	8000518 <bootloader_handle_getver_cmd>
	                break;
 80003ca:	e02c      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_GET_HELP:
	                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 80003cc:	4816      	ldr	r0, [pc, #88]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003ce:	f000 f8eb 	bl	80005a8 <bootloader_handle_gethelp_cmd>
	                break;
 80003d2:	e028      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_GET_CID:
	                bootloader_handle_getcid_cmd(bl_rx_buffer);
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003d6:	f000 f923 	bl	8000620 <bootloader_handle_getcid_cmd>
	                break;
 80003da:	e024      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_GET_RDP_STATUS:
	                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80003dc:	4812      	ldr	r0, [pc, #72]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003de:	f000 f96b 	bl	80006b8 <bootloader_handle_getrdp_cmd>
	                break;
 80003e2:	e020      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_GO_TO_ADDR:
	                bootloader_handle_go_cmd(bl_rx_buffer);
 80003e4:	4810      	ldr	r0, [pc, #64]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003e6:	f000 f9b3 	bl	8000750 <bootloader_handle_go_cmd>
	                break;
 80003ea:	e01c      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_FLASH_ERASE:
	                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003ee:	f000 fa19 	bl	8000824 <bootloader_handle_flash_erase_cmd>
	                break;
 80003f2:	e018      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_MEM_WRITE:
	                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003f6:	f000 fa73 	bl	80008e0 <bootloader_handle_mem_write_cmd>
	                break;
 80003fa:	e014      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_EN_RW_PROTECT:
	                bootloader_handle_en_rw_protect(bl_rx_buffer);
 80003fc:	480a      	ldr	r0, [pc, #40]	; (8000428 <bootloader_uart_read_data+0xdc>)
 80003fe:	f000 faeb 	bl	80009d8 <bootloader_handle_en_rw_protect>
	                break;
 8000402:	e010      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_MEM_READ:
	                bootloader_handle_mem_read(bl_rx_buffer);
 8000404:	4808      	ldr	r0, [pc, #32]	; (8000428 <bootloader_uart_read_data+0xdc>)
 8000406:	f000 fb85 	bl	8000b14 <bootloader_handle_mem_read>
	                break;
 800040a:	e00c      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_READ_SECTOR_P_STATUS:
	                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <bootloader_uart_read_data+0xdc>)
 800040e:	f000 fb8b 	bl	8000b28 <bootloader_handle_read_sector_protection_status>
	                break;
 8000412:	e008      	b.n	8000426 <bootloader_uart_read_data+0xda>
	            case BL_OTP_READ:
	                bootloader_handle_read_otp(bl_rx_buffer);
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <bootloader_uart_read_data+0xdc>)
 8000416:	f000 fbcf 	bl	8000bb8 <bootloader_handle_read_otp>
	                break;
 800041a:	e004      	b.n	8000426 <bootloader_uart_read_data+0xda>
				case BL_DIS_R_W_PROTECT:
	                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <bootloader_uart_read_data+0xdc>)
 800041e:	f000 fb2d 	bl	8000a7c <bootloader_handle_dis_rw_protect>
	                break;
 8000422:	e000      	b.n	8000426 <bootloader_uart_read_data+0xda>
	             default:
	               // printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
	                break;
 8000424:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000426:	e796      	b.n	8000356 <bootloader_uart_read_data+0xa>
 8000428:	20000084 	.word	0x20000084
 800042c:	20000034 	.word	0x20000034
 8000430:	20000085 	.word	0x20000085

08000434 <bootloader_jump_to_user_app>:


typedef void (*pFunction)(void);
pFunction JumpToApplication;

void bootloader_jump_to_user_app(void){
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0

	JumpToApplication = (pFunction) (*(uint32_t *)(0x08008000 + 4));
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <bootloader_jump_to_user_app+0xc8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <bootloader_jump_to_user_app+0xcc>)
 8000442:	601a      	str	r2, [r3, #0]

	  HAL_RCC_DeInit();
 8000444:	f001 fc2c 	bl	8001ca0 <HAL_RCC_DeInit>

	  /* Disable all enabled interrupts and pending interrupt requests in NVIC */
	  for(uint8_t i = 0; i < 8; i++)
 8000448:	2300      	movs	r3, #0
 800044a:	77fb      	strb	r3, [r7, #31]
 800044c:	e010      	b.n	8000470 <bootloader_jump_to_user_app+0x3c>
	  {
	    /* Disable all enabled interrupts in NVIC */
	    NVIC->ICER[i] = 0xFFFFFFFF;
 800044e:	4a2d      	ldr	r2, [pc, #180]	; (8000504 <bootloader_jump_to_user_app+0xd0>)
 8000450:	7ffb      	ldrb	r3, [r7, #31]
 8000452:	3320      	adds	r3, #32
 8000454:	f04f 31ff 	mov.w	r1, #4294967295
 8000458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    /* Clear all pending interrupt requests in NVIC */
	    NVIC->ICPR[i] = 0xFFFFFFFF;
 800045c:	4a29      	ldr	r2, [pc, #164]	; (8000504 <bootloader_jump_to_user_app+0xd0>)
 800045e:	7ffb      	ldrb	r3, [r7, #31]
 8000460:	3360      	adds	r3, #96	; 0x60
 8000462:	f04f 31ff 	mov.w	r1, #4294967295
 8000466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(uint8_t i = 0; i < 8; i++)
 800046a:	7ffb      	ldrb	r3, [r7, #31]
 800046c:	3301      	adds	r3, #1
 800046e:	77fb      	strb	r3, [r7, #31]
 8000470:	7ffb      	ldrb	r3, [r7, #31]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d9eb      	bls.n	800044e <bootloader_jump_to_user_app+0x1a>

	  /*
	   * Disable SysTick and clear its exception pending bit,
	   * if it is used in the bootloader, e. g. by the RTX.
	   */
	  SysTick->CTRL = 0;
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <bootloader_jump_to_user_app+0xd4>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
	  SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <bootloader_jump_to_user_app+0xd8>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	4a22      	ldr	r2, [pc, #136]	; (800050c <bootloader_jump_to_user_app+0xd8>)
 8000482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000486:	6053      	str	r3, [r2, #4]

	  /* Disable individual fault handlers if the bootloader used them. */
	  SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | \
 8000488:	4b20      	ldr	r3, [pc, #128]	; (800050c <bootloader_jump_to_user_app+0xd8>)
 800048a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <bootloader_jump_to_user_app+0xd8>)
 800048e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000492:	6253      	str	r3, [r2, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000494:	f3ef 8314 	mrs	r3, CONTROL
 8000498:	61bb      	str	r3, [r7, #24]
  return(result);
 800049a:	69bb      	ldr	r3, [r7, #24]
	      SCB_SHCSR_BUSFAULTENA_Msk | \
	      SCB_SHCSR_MEMFAULTENA_Msk);

	  /* Activate the MSP, if the core is found to currently run with the PSP. */
	  if( CONTROL_SPSEL_Msk & __get_CONTROL( ) )
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d011      	beq.n	80004c8 <bootloader_jump_to_user_app+0x94>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80004a4:	f3ef 8309 	mrs	r3, PSP
 80004a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80004b4:	f3ef 8314 	mrs	r3, CONTROL
 80004b8:	613b      	str	r3, [r7, #16]
  return(result);
 80004ba:	693b      	ldr	r3, [r7, #16]
	  {
	    /* MSP is not active */
	    __set_MSP(__get_PSP());
	    __set_CONTROL( __get_CONTROL( ) & ~CONTROL_SPSEL_Msk ) ;
 80004bc:	f023 0302 	bic.w	r3, r3, #2
 80004c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	f383 8814 	msr	CONTROL, r3
	  }

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <bootloader_jump_to_user_app+0xdc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <bootloader_jump_to_user_app+0xdc>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <bootloader_jump_to_user_app+0xdc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]
	#if (SET_VECTOR_TABLE)
	  SCB->VTOR = AppAddress;
	#endif

	  /* Configure the Main Stack Pointer. This function comes from CMSIS. */
	  __set_MSP(*(__IO uint32_t*) 0x08008000);
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <bootloader_jump_to_user_app+0xe0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f383 8808 	msr	MSP, r3

	  JumpToApplication();
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <bootloader_jump_to_user_app+0xcc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4798      	blx	r3
}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	08008004 	.word	0x08008004
 8000500:	20000080 	.word	0x20000080
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000e010 	.word	0xe000e010
 800050c:	e000ed00 	.word	0xe000ed00
 8000510:	40021000 	.word	0x40021000
 8000514:	08008000 	.word	0x08008000

08000518 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    // 1) verify the checksum
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000520:	481d      	ldr	r0, [pc, #116]	; (8000598 <bootloader_handle_getver_cmd+0x80>)
 8000522:	f7ff ff0b 	bl	800033c <printmsg>

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3b04      	subs	r3, #4
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3b04      	subs	r3, #4
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fb6e 	bl	8000c24 <bootloader_verify_crc>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d11a      	bne.n	8000584 <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <bootloader_handle_getver_cmd+0x84>)
 8000550:	f7ff fef4 	bl	800033c <printmsg>
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fb36 	bl	8000bcc <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8000560:	f000 fba8 	bl	8000cb4 <get_bootloader_version>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4619      	mov	r1, r3
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	461a      	mov	r2, r3
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <bootloader_handle_getver_cmd+0x88>)
 8000572:	f7ff fee3 	bl	800033c <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 8000576:	f107 030f 	add.w	r3, r7, #15
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fb85 	bl	8000c8c <bootloader_uart_write_data>
        //checksum is wrong send nack
        bootloader_send_nack();
    }


}
 8000582:	e004      	b.n	800058e <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <bootloader_handle_getver_cmd+0x8c>)
 8000586:	f7ff fed9 	bl	800033c <printmsg>
        bootloader_send_nack();
 800058a:	f000 fb39 	bl	8000c00 <bootloader_send_nack>
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	08002b50 	.word	0x08002b50
 800059c:	08002b7c 	.word	0x08002b7c
 80005a0:	08002ba0 	.word	0x08002ba0
 80005a4:	08002bc0 	.word	0x08002bc0

080005a8 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <bootloader_handle_gethelp_cmd+0x64>)
 80005b2:	f7ff fec3 	bl	800033c <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <bootloader_handle_gethelp_cmd+0x68>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <bootloader_handle_gethelp_cmd+0x68>)
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3b04      	subs	r3, #4
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	4619      	mov	r1, r3
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <bootloader_handle_gethelp_cmd+0x68>)
 80005d4:	f000 fb26 	bl	8000c24 <bootloader_verify_crc>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10d      	bne.n	80005fa <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <bootloader_handle_gethelp_cmd+0x6c>)
 80005e0:	f7ff feac 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2108      	movs	r1, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 faee 	bl	8000bcc <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 80005f0:	2108      	movs	r1, #8
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <bootloader_handle_gethelp_cmd+0x70>)
 80005f4:	f000 fb4a 	bl	8000c8c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80005f8:	e004      	b.n	8000604 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <bootloader_handle_gethelp_cmd+0x74>)
 80005fc:	f7ff fe9e 	bl	800033c <printmsg>
        bootloader_send_nack();
 8000600:	f000 fafe 	bl	8000c00 <bootloader_send_nack>
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08002be0 	.word	0x08002be0
 8000610:	20000084 	.word	0x20000084
 8000614:	08002b7c 	.word	0x08002b7c
 8000618:	20000000 	.word	0x20000000
 800061c:	08002bc0 	.word	0x08002bc0

08000620 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 800062c:	481d      	ldr	r0, [pc, #116]	; (80006a4 <bootloader_handle_getcid_cmd+0x84>)
 800062e:	f7ff fe85 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <bootloader_handle_getcid_cmd+0x88>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3b04      	subs	r3, #4
 800063e:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <bootloader_handle_getcid_cmd+0x88>)
 8000640:	4413      	add	r3, r2
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3b04      	subs	r3, #4
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4619      	mov	r1, r3
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <bootloader_handle_getcid_cmd+0x88>)
 8000650:	f000 fae8 	bl	8000c24 <bootloader_verify_crc>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d11a      	bne.n	8000690 <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <bootloader_handle_getcid_cmd+0x8c>)
 800065c:	f7ff fe6e 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fab0 	bl	8000bcc <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 800066c:	f000 fb2a 	bl	8000cc4 <get_mcu_chip_id>
 8000670:	4603      	mov	r3, r0
 8000672:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	4619      	mov	r1, r3
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	461a      	mov	r2, r3
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <bootloader_handle_getcid_cmd+0x90>)
 800067e:	f7ff fe5d 	bl	800033c <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000682:	f107 030e 	add.w	r3, r7, #14
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f000 faff 	bl	8000c8c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 800068e:	e004      	b.n	800069a <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <bootloader_handle_getcid_cmd+0x94>)
 8000692:	f7ff fe53 	bl	800033c <printmsg>
        bootloader_send_nack();
 8000696:	f000 fab3 	bl	8000c00 <bootloader_send_nack>
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08002c0c 	.word	0x08002c0c
 80006a8:	20000084 	.word	0x20000084
 80006ac:	08002b7c 	.word	0x08002b7c
 80006b0:	08002c38 	.word	0x08002c38
 80006b4:	08002bc0 	.word	0x08002bc0

080006b8 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 80006c4:	481d      	ldr	r0, [pc, #116]	; (800073c <bootloader_handle_getrdp_cmd+0x84>)
 80006c6:	f7ff fe39 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <bootloader_handle_getrdp_cmd+0x88>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3b04      	subs	r3, #4
 80006d6:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <bootloader_handle_getrdp_cmd+0x88>)
 80006d8:	4413      	add	r3, r2
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3b04      	subs	r3, #4
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <bootloader_handle_getrdp_cmd+0x88>)
 80006e8:	f000 fa9c 	bl	8000c24 <bootloader_verify_crc>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11a      	bne.n	8000728 <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <bootloader_handle_getrdp_cmd+0x8c>)
 80006f4:	f7ff fe22 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fa64 	bl	8000bcc <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000704:	f000 faf0 	bl	8000ce8 <get_flash_rdp_level>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4619      	mov	r1, r3
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	461a      	mov	r2, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <bootloader_handle_getrdp_cmd+0x90>)
 8000716:	f7ff fe11 	bl	800033c <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 800071a:	f107 030f 	add.w	r3, r7, #15
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fab3 	bl	8000c8c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000726:	e004      	b.n	8000732 <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <bootloader_handle_getrdp_cmd+0x94>)
 800072a:	f7ff fe07 	bl	800033c <printmsg>
        bootloader_send_nack();
 800072e:	f000 fa67 	bl	8000c00 <bootloader_send_nack>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08002c5c 	.word	0x08002c5c
 8000740:	20000084 	.word	0x20000084
 8000744:	08002b7c 	.word	0x08002b7c
 8000748:	08002c88 	.word	0x08002c88
 800074c:	08002bc0 	.word	0x08002bc0

08000750 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000760:	2301      	movs	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <bootloader_handle_go_cmd+0xb8>)
 8000766:	f7ff fde9 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <bootloader_handle_go_cmd+0xbc>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	3b04      	subs	r3, #4
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <bootloader_handle_go_cmd+0xbc>)
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	3b04      	subs	r3, #4
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	4619      	mov	r1, r3
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <bootloader_handle_go_cmd+0xbc>)
 8000788:	f000 fa4c 	bl	8000c24 <bootloader_verify_crc>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d131      	bne.n	80007f6 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <bootloader_handle_go_cmd+0xc0>)
 8000794:	f7ff fdd2 	bl	800033c <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fa14 	bl	8000bcc <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007aa:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 80007ac:	69f9      	ldr	r1, [r7, #28]
 80007ae:	4819      	ldr	r0, [pc, #100]	; (8000814 <bootloader_handle_go_cmd+0xc4>)
 80007b0:	f7ff fdc4 	bl	800033c <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	f000 faa9 	bl	8000d0c <verify_address>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d110      	bne.n	80007e2 <bootloader_handle_go_cmd+0x92>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 80007c0:	f107 030f 	add.w	r3, r7, #15
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fa60 	bl	8000c8c <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <bootloader_handle_go_cmd+0xc8>)
 80007d8:	f7ff fdb0 	bl	800033c <printmsg>

            lets_jump();
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 80007e0:	e00e      	b.n	8000800 <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <bootloader_handle_go_cmd+0xcc>)
 80007e4:	f7ff fdaa 	bl	800033c <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 80007e8:	f107 030e 	add.w	r3, r7, #14
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fa4c 	bl	8000c8c <bootloader_uart_write_data>
}
 80007f4:	e004      	b.n	8000800 <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <bootloader_handle_go_cmd+0xd0>)
 80007f8:	f7ff fda0 	bl	800033c <printmsg>
        bootloader_send_nack();
 80007fc:	f000 fa00 	bl	8000c00 <bootloader_send_nack>
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08002ca8 	.word	0x08002ca8
 800080c:	20000084 	.word	0x20000084
 8000810:	08002b7c 	.word	0x08002b7c
 8000814:	08002cd0 	.word	0x08002cd0
 8000818:	08002cec 	.word	0x08002cec
 800081c:	08002d14 	.word	0x08002d14
 8000820:	08002bc0 	.word	0x08002bc0

08000824 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <bootloader_handle_flash_erase_cmd+0xa4>)
 8000832:	f7ff fd83 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <bootloader_handle_flash_erase_cmd+0xa8>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3b04      	subs	r3, #4
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <bootloader_handle_flash_erase_cmd+0xa8>)
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3b04      	subs	r3, #4
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4619      	mov	r1, r3
 8000852:	481e      	ldr	r0, [pc, #120]	; (80008cc <bootloader_handle_flash_erase_cmd+0xa8>)
 8000854:	f000 f9e6 	bl	8000c24 <bootloader_verify_crc>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12b      	bne.n	80008b6 <bootloader_handle_flash_erase_cmd+0x92>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <bootloader_handle_flash_erase_cmd+0xac>)
 8000860:	f7ff fd6c 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f9ae 	bl	8000bcc <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3302      	adds	r3, #2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3303      	adds	r3, #3
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <bootloader_handle_flash_erase_cmd+0xb0>)
 8000882:	f7ff fd5b 	bl	800033c <printmsg>

       // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3302      	adds	r3, #2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3303      	adds	r3, #3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4610      	mov	r0, r2
 8000896:	f000 fa5b 	bl	8000d50 <execute_flash_erase>
 800089a:	4603      	mov	r3, r0
 800089c:	73fb      	strb	r3, [r7, #15]
       // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <bootloader_handle_flash_erase_cmd+0xb4>)
 80008a4:	f7ff fd4a 	bl	800033c <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 80008a8:	f107 030f 	add.w	r3, r7, #15
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f9ec 	bl	8000c8c <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 80008b4:	e004      	b.n	80008c0 <bootloader_handle_flash_erase_cmd+0x9c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80008b6:	4809      	ldr	r0, [pc, #36]	; (80008dc <bootloader_handle_flash_erase_cmd+0xb8>)
 80008b8:	f7ff fd40 	bl	800033c <printmsg>
        bootloader_send_nack();
 80008bc:	f000 f9a0 	bl	8000c00 <bootloader_send_nack>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	08002d38 	.word	0x08002d38
 80008cc:	20000084 	.word	0x20000084
 80008d0:	08002b7c 	.word	0x08002b7c
 80008d4:	08002d68 	.word	0x08002d68
 80008d8:	08002d9c 	.word	0x08002d9c
 80008dc:	08002bc0 	.word	0x08002bc0

080008e0 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	77bb      	strb	r3, [r7, #30]
 80008f4:	2300      	movs	r3, #0
 80008f6:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800090a:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 800090c:	7f7b      	ldrb	r3, [r7, #29]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	77bb      	strb	r3, [r7, #30]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000916:	4829      	ldr	r0, [pc, #164]	; (80009bc <bootloader_handle_mem_write_cmd+0xdc>)
 8000918:	f7ff fd10 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <bootloader_handle_mem_write_cmd+0xe0>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3b04      	subs	r3, #4
 8000928:	4a25      	ldr	r2, [pc, #148]	; (80009c0 <bootloader_handle_mem_write_cmd+0xe0>)
 800092a:	4413      	add	r3, r2
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3b04      	subs	r3, #4
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4619      	mov	r1, r3
 8000938:	4821      	ldr	r0, [pc, #132]	; (80009c0 <bootloader_handle_mem_write_cmd+0xe0>)
 800093a:	f000 f973 	bl	8000c24 <bootloader_verify_crc>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d131      	bne.n	80009a8 <bootloader_handle_mem_write_cmd+0xc8>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <bootloader_handle_mem_write_cmd+0xe4>)
 8000946:	f7ff fcf9 	bl	800033c <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2101      	movs	r1, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f93b 	bl	8000bcc <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <bootloader_handle_mem_write_cmd+0xe8>)
 800095a:	f7ff fcef 	bl	800033c <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 800095e:	69b8      	ldr	r0, [r7, #24]
 8000960:	f000 f9d4 	bl	8000d0c <verify_address>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d112      	bne.n	8000990 <bootloader_handle_mem_write_cmd+0xb0>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <bootloader_handle_mem_write_cmd+0xec>)
 800096c:	f7ff fce6 	bl	800033c <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3307      	adds	r3, #7
 8000974:	7f3a      	ldrb	r2, [r7, #28]
 8000976:	69b9      	ldr	r1, [r7, #24]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fa2f 	bl	8000ddc <execute_mem_write>
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
           // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8000982:	f107 030f 	add.w	r3, r7, #15
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f97f 	bl	8000c8c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 800098e:	e010      	b.n	80009b2 <bootloader_handle_mem_write_cmd+0xd2>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <bootloader_handle_mem_write_cmd+0xf0>)
 8000992:	f7ff fcd3 	bl	800033c <printmsg>
            write_status = ADDR_INVALID;
 8000996:	2301      	movs	r3, #1
 8000998:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 800099a:	f107 030f 	add.w	r3, r7, #15
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f973 	bl	8000c8c <bootloader_uart_write_data>
}
 80009a6:	e004      	b.n	80009b2 <bootloader_handle_mem_write_cmd+0xd2>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <bootloader_handle_mem_write_cmd+0xf4>)
 80009aa:	f7ff fcc7 	bl	800033c <printmsg>
        bootloader_send_nack();
 80009ae:	f000 f927 	bl	8000c00 <bootloader_send_nack>
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08002dc4 	.word	0x08002dc4
 80009c0:	20000084 	.word	0x20000084
 80009c4:	08002b7c 	.word	0x08002b7c
 80009c8:	08002df4 	.word	0x08002df4
 80009cc:	08002e1c 	.word	0x08002e1c
 80009d0:	08002e44 	.word	0x08002e44
 80009d4:	08002bc0 	.word	0x08002bc0

080009d8 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 80009e4:	4820      	ldr	r0, [pc, #128]	; (8000a68 <bootloader_handle_en_rw_protect+0x90>)
 80009e6:	f7ff fca9 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <bootloader_handle_en_rw_protect+0x94>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3b04      	subs	r3, #4
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <bootloader_handle_en_rw_protect+0x94>)
 80009f8:	4413      	add	r3, r2
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3b04      	subs	r3, #4
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4819      	ldr	r0, [pc, #100]	; (8000a6c <bootloader_handle_en_rw_protect+0x94>)
 8000a08:	f000 f90c 	bl	8000c24 <bootloader_verify_crc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d120      	bne.n	8000a54 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <bootloader_handle_en_rw_protect+0x98>)
 8000a14:	f7ff fc92 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f8d4 	bl	8000bcc <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3302      	adds	r3, #2
 8000a28:	7818      	ldrb	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3303      	adds	r3, #3
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	f000 fa16 	bl	8000e64 <configure_flash_sector_rw_protection>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <bootloader_handle_en_rw_protect+0x9c>)
 8000a42:	f7ff fc7b 	bl	800033c <printmsg>

        bootloader_uart_write_data(&status,1);
 8000a46:	f107 030f 	add.w	r3, r7, #15
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f91d 	bl	8000c8c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000a52:	e004      	b.n	8000a5e <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <bootloader_handle_en_rw_protect+0xa0>)
 8000a56:	f7ff fc71 	bl	800033c <printmsg>
        bootloader_send_nack();
 8000a5a:	f000 f8d1 	bl	8000c00 <bootloader_send_nack>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	08002e70 	.word	0x08002e70
 8000a6c:	20000084 	.word	0x20000084
 8000a70:	08002b7c 	.word	0x08002b7c
 8000a74:	08002d9c 	.word	0x08002d9c
 8000a78:	08002bc0 	.word	0x08002bc0

08000a7c <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <bootloader_handle_dis_rw_protect+0x84>)
 8000a8a:	f7ff fc57 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <bootloader_handle_dis_rw_protect+0x88>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3b04      	subs	r3, #4
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <bootloader_handle_dis_rw_protect+0x88>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <bootloader_handle_dis_rw_protect+0x88>)
 8000aac:	f000 f8ba 	bl	8000c24 <bootloader_verify_crc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11b      	bne.n	8000aee <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <bootloader_handle_dis_rw_protect+0x8c>)
 8000ab8:	f7ff fc40 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f882 	bl	8000bcc <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f9c9 	bl	8000e64 <configure_flash_sector_rw_protection>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <bootloader_handle_dis_rw_protect+0x90>)
 8000adc:	f7ff fc2e 	bl	800033c <printmsg>

        bootloader_uart_write_data(&status,1);
 8000ae0:	f107 030f 	add.w	r3, r7, #15
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8d0 	bl	8000c8c <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000aec:	e004      	b.n	8000af8 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <bootloader_handle_dis_rw_protect+0x94>)
 8000af0:	f7ff fc24 	bl	800033c <printmsg>
        bootloader_send_nack();
 8000af4:	f000 f884 	bl	8000c00 <bootloader_send_nack>
}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08002ea4 	.word	0x08002ea4
 8000b04:	20000084 	.word	0x20000084
 8000b08:	08002b7c 	.word	0x08002b7c
 8000b0c:	08002d9c 	.word	0x08002d9c
 8000b10:	08002bc0 	.word	0x08002bc0

08000b14 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]


}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
	...

08000b28 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <bootloader_handle_read_sector_protection_status+0x7c>)
 8000b32:	f7ff fc03 	bl	800033c <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <bootloader_handle_read_sector_protection_status+0x80>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3b04      	subs	r3, #4
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <bootloader_handle_read_sector_protection_status+0x80>)
 8000b44:	4413      	add	r3, r2
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3b04      	subs	r3, #4
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <bootloader_handle_read_sector_protection_status+0x80>)
 8000b54:	f000 f866 	bl	8000c24 <bootloader_verify_crc>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d118      	bne.n	8000b90 <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <bootloader_handle_read_sector_protection_status+0x84>)
 8000b60:	f7ff fbec 	bl	800033c <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f82e 	bl	8000bcc <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 8000b70:	f000 fa0e 	bl	8000f90 <read_OB_rw_protection_status>
 8000b74:	4603      	mov	r3, r0
 8000b76:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8000b78:	89fb      	ldrh	r3, [r7, #14]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <bootloader_handle_read_sector_protection_status+0x88>)
 8000b7e:	f7ff fbdd 	bl	800033c <printmsg>
        bootloader_uart_write_data((uint8_t*)&status,2);
 8000b82:	f107 030e 	add.w	r3, r7, #14
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f87f 	bl	8000c8c <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000b8e:	e004      	b.n	8000b9a <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <bootloader_handle_read_sector_protection_status+0x8c>)
 8000b92:	f7ff fbd3 	bl	800033c <printmsg>
        bootloader_send_nack();
 8000b96:	f000 f833 	bl	8000c00 <bootloader_send_nack>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08002ed4 	.word	0x08002ed4
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	08002b7c 	.word	0x08002b7c
 8000bb0:	08002f14 	.word	0x08002f14
 8000bb4:	08002bc0 	.word	0x08002bc0

08000bb8 <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]


}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000bdc:	23a5      	movs	r3, #165	; 0xa5
 8000bde:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	2202      	movs	r2, #2
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <bootloader_send_ack+0x30>)
 8000bf0:	f001 fd59 	bl	80026a6 <HAL_UART_Transmit>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000034 	.word	0x20000034

08000c00 <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000c06:	237f      	movs	r3, #127	; 0x7f
 8000c08:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000c0a:	1df9      	adds	r1, r7, #7
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2201      	movs	r2, #1
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <bootloader_send_nack+0x20>)
 8000c14:	f001 fd47 	bl	80026a6 <HAL_UART_Transmit>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000034 	.word	0x20000034

08000c24 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8000c30:	23ff      	movs	r3, #255	; 0xff
 8000c32:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	e00f      	b.n	8000c5a <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <bootloader_verify_crc+0x64>)
 8000c4e:	f000 fc06 	bl	800145e <HAL_CRC_Accumulate>
 8000c52:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3eb      	bcc.n	8000c3a <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <bootloader_verify_crc+0x64>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <bootloader_verify_crc+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 0201 	orr.w	r2, r2, #1
 8000c70:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d101      	bne.n	8000c7e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000078 	.word	0x20000078

08000c8c <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <bootloader_uart_write_data+0x24>)
 8000ca2:	f001 fd00 	bl	80026a6 <HAL_UART_Transmit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000034 	.word	0x20000034

08000cb4 <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8000cb8:	2310      	movs	r3, #16
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
	...

08000cc4 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <get_mcu_chip_id+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd4:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]

}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e0042000 	.word	0xe0042000

08000ce8 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFF800;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <get_flash_rdp_level+0x20>)
 8000cf4:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr) ;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	1ffff800 	.word	0x1ffff800

08000d0c <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM_BASE && go_address <= SRAM_END)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d1a:	d305      	bcc.n	8000d28 <verify_address+0x1c>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <verify_address+0x3c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d801      	bhi.n	8000d28 <verify_address+0x1c>
	{
		return ADDR_VALID;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e00a      	b.n	8000d3e <verify_address+0x32>
	}

	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000d2e:	d305      	bcc.n	8000d3c <verify_address+0x30>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <verify_address+0x40>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d801      	bhi.n	8000d3c <verify_address+0x30>
	{
		return ADDR_VALID;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e000      	b.n	8000d3e <verify_address+0x32>
	}
	else
		return ADDR_INVALID;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20005000 	.word	0x20005000
 8000d4c:	08020000 	.word	0x08020000

08000d50 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 128 )
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b80      	cmp	r3, #128	; 0x80
 8000d64:	d901      	bls.n	8000d6a <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000d66:	2304      	movs	r3, #4
 8000d68:	e034      	b.n	8000dd4 <execute_flash_erase+0x84>

	if( (sector_number == 0xff ) || (sector_number <= 128) )
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2bff      	cmp	r3, #255	; 0xff
 8000d6e:	d002      	beq.n	8000d76 <execute_flash_erase+0x26>
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b80      	cmp	r3, #128	; 0x80
 8000d74:	d82d      	bhi.n	8000dd2 <execute_flash_erase+0x82>
	{
		if(sector_number == (uint8_t) 0xff)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d102      	bne.n	8000d82 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e015      	b.n	8000dae <execute_flash_erase+0x5e>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 128 - sector_number;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000d88:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000d8c:	3380      	adds	r3, #128	; 0x80
 8000d8e:	77fb      	strb	r3, [r7, #31]
            if( number_of_sector > remanining_sector)
 8000d90:	79ba      	ldrb	r2, [r7, #6]
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d901      	bls.n	8000d9c <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8000d98:	7ffb      	ldrb	r3, [r7, #31]
 8000d9a:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
			flashErase_handle.PageAddress = (0x080000000|(sector_number*1024)); // this is the initial sector
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	029b      	lsls	r3, r3, #10
 8000da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da8:	617b      	str	r3, [r7, #20]
			flashErase_handle.NbPages = number_of_sector;
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	61bb      	str	r3, [r7, #24]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	613b      	str	r3, [r7, #16]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000db2:	f000 fbf5 	bl	80015a0 <HAL_FLASH_Unlock>
		//flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000db6:	f107 0208 	add.w	r2, r7, #8
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fd01 	bl	80017c8 <HAL_FLASHEx_Erase>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	77bb      	strb	r3, [r7, #30]
		HAL_FLASH_Lock();
 8000dca:	f000 fc0f 	bl	80015ec <HAL_FLASH_Lock>

		return status;
 8000dce:	7fbb      	ldrb	r3, [r7, #30]
 8000dd0:	e000      	b.n	8000dd4 <execute_flash_erase+0x84>
	}


	return INVALID_SECTOR;
 8000dd2:	2304      	movs	r3, #4
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	77fb      	strb	r3, [r7, #31]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8000dec:	f000 fbd8 	bl	80015a0 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i+=4)
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e02b      	b.n	8000e4e <execute_mem_write+0x72>
    {
        //Here we program the flash byte by byte
    	uint32_t HW = ((pBuffer[i])|pBuffer[i+1]<<8|pBuffer[i+2]<<16|pBuffer[i+3]<<24);
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3301      	adds	r3, #1
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	ea41 0203 	orr.w	r2, r1, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	3302      	adds	r3, #2
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	440b      	add	r3, r1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	041b      	lsls	r3, r3, #16
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	3303      	adds	r3, #3
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,mem_address+i, HW);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	18d1      	adds	r1, r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f04f 0400 	mov.w	r4, #0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4623      	mov	r3, r4
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f000 fb38 	bl	80014b4 <HAL_FLASH_Program>
 8000e44:	4603      	mov	r3, r0
 8000e46:	77fb      	strb	r3, [r7, #31]
    for(uint32_t i = 0 ; i <len ; i+=4)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3cf      	bcc.n	8000df6 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8000e56:	f000 fbc9 	bl	80015ec <HAL_FLASH_Lock>

    return status;
 8000e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3724      	adds	r7, #36	; 0x24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}

08000e64 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <configure_flash_sector_rw_protection+0x124>)
 8000e78:	60fb      	str	r3, [r7, #12]

	  if(disable)
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d025      	beq.n	8000ecc <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000e80:	f000 fbc4 	bl	800160c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000e84:	bf00      	nop
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f9      	bne.n	8000e86 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 0202 	orr.w	r2, r3, #2
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000eb6:	bf00      	nop
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f9      	bne.n	8000eb8 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8000ec4:	f000 fbbe 	bl	8001644 <HAL_FLASH_OB_Lock>

			return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e058      	b.n	8000f7e <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d126      	bne.n	8000f20 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000ed2:	f000 fb9b 	bl	800160c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000ed6:	bf00      	nop
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f9      	bne.n	8000ed8 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	0412      	lsls	r2, r2, #16
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f043 0202 	orr.w	r2, r3, #2
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f0c:	bf00      	nop
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f9      	bne.n	8000f0e <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 8000f1a:	f000 fb93 	bl	8001644 <HAL_FLASH_OB_Lock>
 8000f1e:	e02d      	b.n	8000f7c <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d12a      	bne.n	8000f7c <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8000f26:	f000 fb71 	bl	800160c <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f2a:	bf00      	nop
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f9      	bne.n	8000f2c <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	0412      	lsls	r2, r2, #16
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f6a:	bf00      	nop
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <configure_flash_sector_rw_protection+0x128>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f9      	bne.n	8000f6c <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8000f78:	f000 fb64 	bl	8001644 <HAL_FLASH_OB_Lock>
    }

		return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c14 	.word	0x40023c14
 8000f8c:	40022000 	.word	0x40022000

08000f90 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8000f96:	f000 fb39 	bl	800160c <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fc7f 	bl	80018a0 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 8000fa2:	f000 fb23 	bl	80015ec <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPPage;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	b29b      	uxth	r3, r3

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x6>
	...

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_CRC_MspInit+0x34>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10b      	bne.n	800104a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_CRC_MspInit+0x38>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_CRC_MspInit+0x38>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_CRC_MspInit+0x38>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40023000 	.word	0x40023000
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d131      	bne.n	80010e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_UART_MspInit+0x90>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_UART_MspInit+0x90>)
 8001082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001086:	61d3      	str	r3, [r2, #28]
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_UART_MspInit+0x90>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_UART_MspInit+0x90>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_UART_MspInit+0x90>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_UART_MspInit+0x90>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <HAL_UART_MspInit+0x94>)
 80010c2:	f000 fc7b 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_UART_MspInit+0x94>)
 80010dc:	f000 fc6e 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004800 	.word	0x40004800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010c00 	.word	0x40010c00

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f875 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
	...

08001150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001176:	f7ff ffe4 	bl	8001142 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f001 fca1 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7fe ffe5 	bl	800014c <main>
  bx lr
 8001182:	4770      	bx	lr
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800118c:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 8001190:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001194:	20000170 	.word	0x20000170

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f907 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff ff00 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f911 	bl	800140e <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f8e7 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000008 	.word	0x20000008
 8001220:	20000010 	.word	0x20000010
 8001224:	2000000c 	.word	0x2000000c

08001228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000010 	.word	0x20000010
 8001248:	2000014c 	.word	0x2000014c

0800124c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	2000014c 	.word	0x2000014c

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff49 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00e      	b.n	8001456 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fde9 	bl	8001020 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2202      	movs	r2, #2
 8001472:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	441a      	add	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3f0      	bcc.n	800147a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80014a6:	693b      	ldr	r3, [r7, #16]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_FLASH_Program>:
 * @param  Data:         Specifies the data to be programmed
 *
 * @retval HAL_StatusTypeDef HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address,
		uint64_t Data) {
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_StatusTypeDef status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
	uint8_t index = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75bb      	strb	r3, [r7, #22]
	uint8_t nbiterations = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	757b      	strb	r3, [r7, #21]

	/* Process Locked */
	__HAL_LOCK(&pFlash);
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_FLASH_Program+0xe4>)
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_FLASH_Program+0x26>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e05a      	b.n	8001590 <HAL_FLASH_Program+0xdc>
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_FLASH_Program+0xe4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
	/* Wait for last operation to be completed */
	status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e4:	f000 f8da 	bl	800169c <FLASH_WaitForLastOperation>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */

	if (status == HAL_OK) {
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d14a      	bne.n	8001588 <HAL_FLASH_Program+0xd4>
		if (TypeProgram == FLASH_TYPEPROGRAM_BYTE) {
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <HAL_FLASH_Program+0x4a>
			/* Program byte (8-bit) at a specified address. */
			nbiterations = 1U;
 80014f8:	2301      	movs	r3, #1
 80014fa:	757b      	strb	r3, [r7, #21]
 80014fc:	e00d      	b.n	800151a <HAL_FLASH_Program+0x66>
		} else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD) {
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_FLASH_Program+0x56>
			/* Program halfword (16-bit) at a specified address. */
			nbiterations = 1U;
 8001504:	2301      	movs	r3, #1
 8001506:	757b      	strb	r3, [r7, #21]
 8001508:	e007      	b.n	800151a <HAL_FLASH_Program+0x66>
		} else if (TypeProgram == FLASH_TYPEPROGRAM_WORD) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d102      	bne.n	8001516 <HAL_FLASH_Program+0x62>
			/* Program word (32-bit = 2*16-bit) at a specified address. */
			nbiterations = 2U;
 8001510:	2302      	movs	r3, #2
 8001512:	757b      	strb	r3, [r7, #21]
 8001514:	e001      	b.n	800151a <HAL_FLASH_Program+0x66>
		} else {
			/* Program double word (64-bit = 4*16-bit) at a specified address. */
			nbiterations = 4U;
 8001516:	2304      	movs	r3, #4
 8001518:	757b      	strb	r3, [r7, #21]
		}

		for (index = 0U; index < nbiterations; index++) {
 800151a:	2300      	movs	r3, #0
 800151c:	75bb      	strb	r3, [r7, #22]
 800151e:	e02d      	b.n	800157c <HAL_FLASH_Program+0xc8>
			FLASH_Program_HalfWord((Address + (2U * index)),
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	005a      	lsls	r2, r3, #1
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	eb02 0c03 	add.w	ip, r2, r3
					(uint32_t) (Data >> (16U * index)));
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	0119      	lsls	r1, r3, #4
 800152e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001532:	f1c1 0620 	rsb	r6, r1, #32
 8001536:	f1a1 0020 	sub.w	r0, r1, #32
 800153a:	fa22 f401 	lsr.w	r4, r2, r1
 800153e:	fa03 f606 	lsl.w	r6, r3, r6
 8001542:	4334      	orrs	r4, r6
 8001544:	fa23 f000 	lsr.w	r0, r3, r0
 8001548:	4304      	orrs	r4, r0
 800154a:	fa23 f501 	lsr.w	r5, r3, r1
			FLASH_Program_HalfWord((Address + (2U * index)),
 800154e:	b2a3      	uxth	r3, r4
 8001550:	4619      	mov	r1, r3
 8001552:	4660      	mov	r0, ip
 8001554:	f000 f886 	bl	8001664 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
			/* Wait for last operation to be completed */
			status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001558:	f24c 3050 	movw	r0, #50000	; 0xc350
 800155c:	f000 f89e 	bl	800169c <FLASH_WaitForLastOperation>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]

			/* If the program operation is completed, disable the PG Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_FLASH_Program+0xe8>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_FLASH_Program+0xe8>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
			/* In case of error, stop programation procedure */
			if (status != HAL_OK) {
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d107      	bne.n	8001586 <HAL_FLASH_Program+0xd2>
		for (index = 0U; index < nbiterations; index++) {
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	3301      	adds	r3, #1
 800157a:	75bb      	strb	r3, [r7, #22]
 800157c:	7dba      	ldrb	r2, [r7, #22]
 800157e:	7d7b      	ldrb	r3, [r7, #21]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3cd      	bcc.n	8001520 <HAL_FLASH_Program+0x6c>
 8001584:	e000      	b.n	8001588 <HAL_FLASH_Program+0xd4>
				break;
 8001586:	bf00      	nop
			}
		}
	}

	/* Process Unlocked */
	__HAL_UNLOCK(&pFlash);
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_FLASH_Program+0xe4>)
 800158a:	2200      	movs	r2, #0
 800158c:	761a      	strb	r2, [r3, #24]

	return status;
 800158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001598:	20000150 	.word	0x20000150
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_FLASH_Unlock>:

/**
 * @brief  Unlock the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Unlock(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]

	if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET) {
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_FLASH_Unlock+0x40>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <HAL_FLASH_Unlock+0x32>
		/* Authorize the FLASH Registers access */
		WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_FLASH_Unlock+0x40>)
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_FLASH_Unlock+0x44>)
 80015ba:	605a      	str	r2, [r3, #4]
		WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_FLASH_Unlock+0x40>)
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_FLASH_Unlock+0x48>)
 80015c0:	605a      	str	r2, [r3, #4]

		/* Verify Flash is unlocked */
		if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET) {
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_FLASH_Unlock+0x40>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_FLASH_Unlock+0x32>
			status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

	return status;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000
 80015e4:	45670123 	.word	0x45670123
 80015e8:	cdef89ab 	.word	0xcdef89ab

080015ec <HAL_FLASH_Lock>:

/**
 * @brief  Locks the FLASH control register access
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_Lock(void) {
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	/* Set the LOCK Bit to lock the FLASH Registers access */
	SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_FLASH_Lock+0x1c>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_FLASH_Lock+0x1c>)
 80015f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
	return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_FLASH_OB_Unlock>:

/**
 * @brief  Unlock the FLASH Option Control Registers access.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void) {
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE)) {
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_FLASH_OB_Unlock+0x2c>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_FLASH_OB_Unlock+0x20>
		/* Authorizes the Option Byte register programming */
		WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_FLASH_OB_Unlock+0x2c>)
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_FLASH_OB_Unlock+0x30>)
 8001620:	609a      	str	r2, [r3, #8]
		WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_FLASH_OB_Unlock+0x2c>)
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_FLASH_OB_Unlock+0x34>)
 8001626:	609a      	str	r2, [r3, #8]
	} else {
		return HAL_ERROR;
	}

	return HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	e000      	b.n	800162e <HAL_FLASH_OB_Unlock+0x22>
		return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000
 800163c:	45670123 	.word	0x45670123
 8001640:	cdef89ab 	.word	0xcdef89ab

08001644 <HAL_FLASH_OB_Lock>:

/**
 * @brief  Lock the FLASH Option Control Registers access.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void) {
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	/* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
	CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_FLASH_OB_Lock+0x1c>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_FLASH_OB_Lock+0x1c>)
 800164e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001652:	6113      	str	r3, [r2, #16]

	return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <FLASH_Program_HalfWord>:
 * @brief  Program a half-word (16-bit) at a specified address.
 * @param  Address specify the address to be programmed.
 * @param  Data    specify the data to be programmed.
 * @retval None
 */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data) {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
	/* Clean the error context */
	pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <FLASH_Program_HalfWord+0x30>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
	/* Proceed to program the new data */
	SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <FLASH_Program_HalfWord+0x34>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <FLASH_Program_HalfWord+0x34>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

	/* Write data in the address */
	*(__IO uint16_t*) Address = Data;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	801a      	strh	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000150 	.word	0x20000150
 8001698:	40022000 	.word	0x40022000

0800169c <FLASH_WaitForLastOperation>:
/**
 * @brief  Wait for a FLASH operation to complete.
 * @param  Timeout  maximum flash operation timeout
 * @retval HAL Status
 */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	/* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
	 Even if the FLASH operation fails, the BUSY flag will be reset and an error
	 flag will be set */

	uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fdd2 	bl	800124c <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 80016aa:	e010      	b.n	80016ce <FLASH_WaitForLastOperation+0x32>
		if (Timeout != HAL_MAX_DELAY) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b2:	d00c      	beq.n	80016ce <FLASH_WaitForLastOperation+0x32>
			if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <FLASH_WaitForLastOperation+0x2e>
 80016ba:	f7ff fdc7 	bl	800124c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d201      	bcs.n	80016ce <FLASH_WaitForLastOperation+0x32>
				return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e025      	b.n	800171a <FLASH_WaitForLastOperation+0x7e>
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1e8      	bne.n	80016ac <FLASH_WaitForLastOperation+0x10>
			}
		}
	}

	/* Check FLASH End of Operation flag  */
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <FLASH_WaitForLastOperation+0x50>
		/* Clear FLASH End of Operation pending bit */
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016e8:	2220      	movs	r2, #32
 80016ea:	60da      	str	r2, [r3, #12]
	}

	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <FLASH_WaitForLastOperation+0x74>
	__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) ||
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	f003 0301 	and.w	r3, r3, #1
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <FLASH_WaitForLastOperation+0x74>
	__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR)) {
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <FLASH_WaitForLastOperation+0x88>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
	__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) ||
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <FLASH_WaitForLastOperation+0x7c>
		/*Save the error code*/
		FLASH_SetErrorCode();
 8001710:	f000 f80a 	bl	8001728 <FLASH_SetErrorCode>
		return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <FLASH_WaitForLastOperation+0x7e>
	}

	/* There is no error flag set */
	return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <FLASH_SetErrorCode>:

/**
 * @brief  Set the specific FLASH error flag.
 * @retval None
 */
static void FLASH_SetErrorCode(void) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
	uint32_t flags = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]

#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
			{
		pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001748:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
		flags |= FLASH_FLAG_WRPERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
	}
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
			{
		pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001768:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
		flags |= FLASH_FLAG_PGERR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
	}
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) {
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <FLASH_SetErrorCode+0x6e>
		pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001788:	61d3      	str	r3, [r2, #28]
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	61d3      	str	r3, [r2, #28]
	}

	/* Clear FLASH error pending bits */
	__HAL_FLASH_CLEAR_FLAG(flags);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f240 1201 	movw	r2, #257	; 0x101
 800179c:	4293      	cmp	r3, r2
 800179e:	d106      	bne.n	80017ae <FLASH_SetErrorCode+0x86>
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	61d3      	str	r3, [r2, #28]
}
 80017ac:	e002      	b.n	80017b4 <FLASH_SetErrorCode+0x8c>
	__HAL_FLASH_CLEAR_FLAG(flags);
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <FLASH_SetErrorCode+0x98>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	20000150 	.word	0x20000150

080017c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_FLASHEx_Erase+0xd0>)
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_FLASHEx_Erase+0x1e>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e053      	b.n	800188e <HAL_FLASHEx_Erase+0xc6>
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_FLASHEx_Erase+0xd0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d116      	bne.n	8001822 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80017f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f8:	f7ff ff50 	bl	800169c <FLASH_WaitForLastOperation>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d141      	bne.n	8001886 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 f868 	bl	80018d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001808:	f24c 3050 	movw	r0, #50000	; 0xc350
 800180c:	f7ff ff46 	bl	800169c <FLASH_WaitForLastOperation>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4a20      	ldr	r2, [pc, #128]	; (800189c <HAL_FLASHEx_Erase+0xd4>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6113      	str	r3, [r2, #16]
 8001820:	e031      	b.n	8001886 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001822:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001826:	f7ff ff39 	bl	800169c <FLASH_WaitForLastOperation>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d12a      	bne.n	8001886 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f04f 32ff 	mov.w	r2, #4294967295
 8001836:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e019      	b.n	8001874 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001840:	68b8      	ldr	r0, [r7, #8]
 8001842:	f000 f89b 	bl	800197c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001846:	f24c 3050 	movw	r0, #50000	; 0xc350
 800184a:	f7ff ff27 	bl	800169c <FLASH_WaitForLastOperation>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001858:	f023 0302 	bic.w	r3, r3, #2
 800185c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	601a      	str	r2, [r3, #0]
            break;
 800186a:	e00c      	b.n	8001886 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001872:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	029a      	lsls	r2, r3, #10
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3dc      	bcc.n	8001840 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_FLASHEx_Erase+0xd0>)
 8001888:	2200      	movs	r2, #0
 800188a:	761a      	strb	r2, [r3, #24]

  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000150 	.word	0x20000150
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2207      	movs	r2, #7
 80018ac:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80018ae:	f000 f82f 	bl	8001910 <FLASH_OB_GetWRP>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80018b8:	f000 f834 	bl	8001924 <FLASH_OB_GetRDP>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80018c4:	f000 f84a 	bl	800195c <FLASH_OB_GetUser>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	745a      	strb	r2, [r3, #17]
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <FLASH_MassErase+0x30>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <FLASH_MassErase+0x34>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <FLASH_MassErase+0x34>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <FLASH_MassErase+0x34>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <FLASH_MassErase+0x34>)
 80018f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000150 	.word	0x20000150
 800190c:	40022000 	.word	0x40022000

08001910 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <FLASH_OB_GetWRP+0x10>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40022000 	.word	0x40022000

08001924 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800192a:	23a5      	movs	r3, #165	; 0xa5
 800192c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <FLASH_OB_GetRDP+0x34>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d102      	bne.n	8001948 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e001      	b.n	800194c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001948:	23a5      	movs	r3, #165	; 0xa5
 800194a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40022000 	.word	0x40022000

0800195c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <FLASH_OB_GetUser+0x1c>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	b2db      	uxtb	r3, r3
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000

0800197c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <FLASH_PageErase+0x38>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <FLASH_PageErase+0x3c>)
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <FLASH_PageErase+0x3c>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <FLASH_PageErase+0x3c>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <FLASH_PageErase+0x3c>)
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <FLASH_PageErase+0x3c>)
 80019a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000150 	.word	0x20000150
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e127      	b.n	8001c20 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8116 	bne.w	8001c1a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d034      	beq.n	8001a60 <HAL_GPIO_Init+0xa4>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d80d      	bhi.n	8001a16 <HAL_GPIO_Init+0x5a>
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_Init+0x9a>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d804      	bhi.n	8001a0c <HAL_GPIO_Init+0x50>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d031      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d01c      	beq.n	8001a44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0a:	e048      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d043      	beq.n	8001a98 <HAL_GPIO_Init+0xdc>
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d01b      	beq.n	8001a4c <HAL_GPIO_Init+0x90>
          break;
 8001a14:	e043      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a16:	4a89      	ldr	r2, [pc, #548]	; (8001c3c <HAL_GPIO_Init+0x280>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d026      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
 8001a1c:	4a87      	ldr	r2, [pc, #540]	; (8001c3c <HAL_GPIO_Init+0x280>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d806      	bhi.n	8001a30 <HAL_GPIO_Init+0x74>
 8001a22:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <HAL_GPIO_Init+0x284>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d020      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
 8001a28:	4a86      	ldr	r2, [pc, #536]	; (8001c44 <HAL_GPIO_Init+0x288>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01d      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
          break;
 8001a2e:	e036      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a30:	4a85      	ldr	r2, [pc, #532]	; (8001c48 <HAL_GPIO_Init+0x28c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
 8001a36:	4a85      	ldr	r2, [pc, #532]	; (8001c4c <HAL_GPIO_Init+0x290>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d016      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
 8001a3c:	4a84      	ldr	r2, [pc, #528]	; (8001c50 <HAL_GPIO_Init+0x294>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0xae>
          break;
 8001a42:	e02c      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e028      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e023      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e01e      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e019      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a72:	2304      	movs	r3, #4
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e012      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	611a      	str	r2, [r3, #16]
          break;
 8001a8a:	e008      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	615a      	str	r2, [r3, #20]
          break;
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d801      	bhi.n	8001aa8 <HAL_GPIO_Init+0xec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	e001      	b.n	8001aac <HAL_GPIO_Init+0xf0>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2bff      	cmp	r3, #255	; 0xff
 8001ab2:	d802      	bhi.n	8001aba <HAL_GPIO_Init+0xfe>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x104>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	3b08      	subs	r3, #8
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	6a39      	ldr	r1, [r7, #32]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8096 	beq.w	8001c1a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_GPIO_Init+0x298>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_GPIO_Init+0x298>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6193      	str	r3, [r2, #24]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_GPIO_Init+0x298>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b06:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <HAL_GPIO_Init+0x29c>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x19e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x19a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x196>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x192>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x1a0>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x1a0>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x1a0>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x1a0>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6c:	493a      	ldr	r1, [pc, #232]	; (8001c58 <HAL_GPIO_Init+0x29c>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4938      	ldr	r1, [pc, #224]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4933      	ldr	r1, [pc, #204]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	492e      	ldr	r1, [pc, #184]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
 8001bba:	e006      	b.n	8001bca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4929      	ldr	r1, [pc, #164]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	4924      	ldr	r1, [pc, #144]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	491f      	ldr	r1, [pc, #124]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	491a      	ldr	r1, [pc, #104]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4915      	ldr	r1, [pc, #84]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f47f aed0 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001c30:	bf00      	nop
 8001c32:	372c      	adds	r7, #44	; 0x2c
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	10210000 	.word	0x10210000
 8001c40:	10110000 	.word	0x10110000
 8001c44:	10120000 	.word	0x10120000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10320000 	.word	0x10320000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40010800 	.word	0x40010800
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40011400 	.word	0x40011400
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fad1 	bl	800124c <HAL_GetTick>
 8001caa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a44      	ldr	r2, [pc, #272]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fac7 	bl	800124c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e077      	b.n	8001dbc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ce0:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ce8:	f7ff fab0 	bl	800124c <HAL_GetTick>
 8001cec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff faa9 	bl	800124c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e057      	b.n	8001dbc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_DeInit+0x128>)
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <HAL_RCC_DeInit+0x12c>)
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_DeInit+0x130>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa50 	bl	80011c8 <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e044      	b.n	8001dbc <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d32:	f7ff fa8b 	bl	800124c <HAL_GetTick>
 8001d36:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff fa81 	bl	800124c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e031      	b.n	8001dbc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fa6f 	bl	800124c <HAL_GetTick>
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d76:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fa65 	bl	800124c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_DeInit+0x124>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	007a1200 	.word	0x007a1200
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e26c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x12c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e246      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x98>
 8001e52:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xbc>
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f9cc 	bl	800124c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f9c8 	bl	800124c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1fa      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe4>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f9b8 	bl	800124c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f9b4 	bl	800124c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1e6      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x10c>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1ba      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f96d 	bl	800124c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff f969 	bl	800124c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e19b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f94c 	bl	800124c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f948 	bl	800124c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e17a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03a      	beq.n	8002058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f92c 	bl	800124c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f928 	bl	800124c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e15a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fada 	bl	80025d0 <RCC_Delay>
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff f912 	bl	800124c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff f90e 	bl	800124c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e140      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	42420000 	.word	0x42420000
 8002048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a6 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b97      	ldr	r3, [pc, #604]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b8e      	ldr	r3, [pc, #568]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f8cf 	bl	800124c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff f8cb 	bl	800124c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0fd      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x334>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x356>
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a63      	ldr	r2, [pc, #396]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff f87f 	bl	800124c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7ff f87b 	bl	800124c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x37e>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff f869 	bl	800124c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7ff f865 	bl	800124c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e095      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8081 	beq.w	80022be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d061      	beq.n	800228c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d146      	bne.n	800225e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff f839 	bl	800124c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff f835 	bl	800124c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e067      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	492d      	ldr	r1, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a19      	ldr	r1, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	430b      	orrs	r3, r1
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff f809 	bl	800124c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff f805 	bl	800124c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e037      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x46a>
 800225c:	e02f      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fff2 	bl	800124c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe ffee 	bl	800124c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e020      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
 800228a:	e018      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42420060 	.word	0x42420060

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d0      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4965      	ldr	r1, [pc, #404]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800233a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d040      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e073      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe ff42 	bl	800124c <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe ff3e 	bl	800124c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e053      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4601      	mov	r1, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	5cd3      	ldrb	r3, [r2, r3]
 8002476:	fa21 f303 	lsr.w	r3, r1, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fea0 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	08002f48 	.word	0x08002f48
 80024a0:	20000008 	.word	0x20000008
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b490      	push	{r4, r7}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024b0:	1d3c      	adds	r4, r7, #4
 80024b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x40>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x46>
 80024e6:	e02d      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	e02d      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024fa:	4413      	add	r3, r2
 80024fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002500:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0c5b      	lsrs	r3, r3, #17
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800251a:	4413      	add	r3, r2
 800251c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002520:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	e004      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	623b      	str	r3, [r7, #32]
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002546:	623b      	str	r3, [r7, #32]
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	6a3b      	ldr	r3, [r7, #32]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc90      	pop	{r4, r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	08002f34 	.word	0x08002f34
 800255c:	08002f44 	.word	0x08002f44
 8002560:	40021000 	.word	0x40021000
 8002564:	007a1200 	.word	0x007a1200
 8002568:	003d0900 	.word	0x003d0900

0800256c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <HAL_RCC_GetHCLKFreq+0x10>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002584:	f7ff fff2 	bl	800256c <HAL_RCC_GetHCLKFreq>
 8002588:	4601      	mov	r1, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08002f58 	.word	0x08002f58

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ac:	f7ff ffde 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b0:	4601      	mov	r1, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0adb      	lsrs	r3, r3, #11
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08002f58 	.word	0x08002f58

080025d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <RCC_Delay+0x34>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <RCC_Delay+0x38>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025ec:	bf00      	nop
  }
  while (Delay --);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	60fa      	str	r2, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <RCC_Delay+0x1c>
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e03f      	b.n	800269e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fd12 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f9a7 	bl	80029a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b08a      	sub	sp, #40	; 0x28
 80026aa:	af02      	add	r7, sp, #8
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d17c      	bne.n	80027c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_Transmit+0x2c>
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e075      	b.n	80027c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x3e>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e06e      	b.n	80027c2 <HAL_UART_Transmit+0x11c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	; 0x21
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fda7 	bl	800124c <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	d108      	bne.n	8002728 <HAL_UART_Transmit+0x82>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e003      	b.n	8002730 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002738:	e02a      	b.n	8002790 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f8e2 	bl	800290e <UART_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e036      	b.n	80027c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	3302      	adds	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e007      	b.n	8002782 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3301      	adds	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cf      	bne.n	800273a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f8b2 	bl	800290e <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e006      	b.n	80027c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b08a      	sub	sp, #40	; 0x28
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	f040 808c 	bne.w	8002904 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_Receive+0x2e>
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e084      	b.n	8002906 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Receive+0x40>
 8002806:	2302      	movs	r3, #2
 8002808:	e07d      	b.n	8002906 <HAL_UART_Receive+0x13c>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2222      	movs	r2, #34	; 0x22
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fe fd11 	bl	800124c <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d108      	bne.n	8002854 <HAL_UART_Receive+0x8a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002864:	e043      	b.n	80028ee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2120      	movs	r1, #32
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f84c 	bl	800290e <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e042      	b.n	8002906 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002892:	b29a      	uxth	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	3302      	adds	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e01f      	b.n	80028e0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d007      	beq.n	80028ba <HAL_UART_Receive+0xf0>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <HAL_UART_Receive+0xfe>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e008      	b.n	80028da <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1b6      	bne.n	8002866 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291e:	e02c      	b.n	800297a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d028      	beq.n	800297a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <UART_WaitOnFlagUntilTimeout+0x30>
 800292e:	f7fe fc8d 	bl	800124c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	429a      	cmp	r2, r3
 800293c:	d21d      	bcs.n	800297a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800294c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e00f      	b.n	800299a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	429a      	cmp	r2, r3
 8002996:	d0c3      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029de:	f023 030c 	bic.w	r3, r3, #12
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <UART_SetConfig+0x114>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d103      	bne.n	8002a14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a0c:	f7ff fdcc 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	e002      	b.n	8002a1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a14:	f7ff fdb4 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <UART_SetConfig+0x118>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	0119      	lsls	r1, r3, #4
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <UART_SetConfig+0x118>)
 8002a52:	fba3 0302 	umull	r0, r3, r3, r2
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2064      	movs	r0, #100	; 0x64
 8002a5a:	fb00 f303 	mul.w	r3, r0, r3
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	3332      	adds	r3, #50	; 0x32
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <UART_SetConfig+0x118>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a70:	4419      	add	r1, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <UART_SetConfig+0x118>)
 8002a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2064      	movs	r0, #100	; 0x64
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	4a07      	ldr	r2, [pc, #28]	; (8002abc <UART_SetConfig+0x118>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	440a      	add	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	51eb851f 	.word	0x51eb851f

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	4e0c      	ldr	r6, [pc, #48]	; (8002af8 <__libc_init_array+0x38>)
 8002ac6:	4c0d      	ldr	r4, [pc, #52]	; (8002afc <__libc_init_array+0x3c>)
 8002ac8:	1ba4      	subs	r4, r4, r6
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	42a5      	cmp	r5, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	f000 f822 	bl	8002b18 <_init>
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	4e0a      	ldr	r6, [pc, #40]	; (8002b00 <__libc_init_array+0x40>)
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	; (8002b04 <__libc_init_array+0x44>)
 8002ada:	1ba4      	subs	r4, r4, r6
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	42a5      	cmp	r5, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae8:	4798      	blx	r3
 8002aea:	3501      	adds	r5, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af2:	4798      	blx	r3
 8002af4:	3501      	adds	r5, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002f60 	.word	0x08002f60
 8002afc:	08002f60 	.word	0x08002f60
 8002b00:	08002f60 	.word	0x08002f60
 8002b04:	08002f64 	.word	0x08002f64

08002b08 <memset>:
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <_init>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr

08002b24 <_fini>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr
