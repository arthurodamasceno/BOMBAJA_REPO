
Front_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008838  08008838  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08008838  08008838  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008838  08008838  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004770  20000014  08008854  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004784  08008854  00024784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d106  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003926  00000000  00000000  0003d143  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001958  00000000  00000000  00040a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  000423c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183f9  00000000  00000000  00043b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014208  00000000  00000000  0005bf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008876c  00000000  00000000  00070169  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f88d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  000f8950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080086d8 	.word	0x080086d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080086d8 	.word	0x080086d8

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200046dc 	.word	0x200046dc

080001dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <vApplicationGetIdleTaskMemory+0x30>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001fa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000030 	.word	0x20000030
 800020c:	20000084 	.word	0x20000084

08000210 <HAL_UART_RxCpltCallback>:
void CAN_Filter_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if (GPS_in[0] == UBX_HEADER[0] && GPS_in[1] == UBX_HEADER[1]) {
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	22b5      	movs	r2, #181	; 0xb5
 800021e:	4293      	cmp	r3, r2
 8000220:	d11b      	bne.n	800025a <HAL_UART_RxCpltCallback+0x4a>
 8000222:	4b14      	ldr	r3, [pc, #80]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2262      	movs	r2, #98	; 0x62
 8000228:	4293      	cmp	r3, r2
 800022a:	d116      	bne.n	800025a <HAL_UART_RxCpltCallback+0x4a>
		for (int k = 0; k < 32; k++) {
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e00a      	b.n	8000248 <HAL_UART_RxCpltCallback+0x38>
			((unsigned char*) (&posllh))[k] = GPS_in[k + 2];
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	1c9a      	adds	r2, r3, #2
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	490f      	ldr	r1, [pc, #60]	; (8000278 <HAL_UART_RxCpltCallback+0x68>)
 800023a:	440b      	add	r3, r1
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 800023e:	5c8a      	ldrb	r2, [r1, r2]
 8000240:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < 32; k++) {
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3301      	adds	r3, #1
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b1f      	cmp	r3, #31
 800024c:	ddf1      	ble.n	8000232 <HAL_UART_RxCpltCallback+0x22>
		}
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 800024e:	2224      	movs	r2, #36	; 0x24
 8000250:	4908      	ldr	r1, [pc, #32]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000252:	480a      	ldr	r0, [pc, #40]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 8000254:	f004 fc2e 	bl	8004ab4 <HAL_UART_Receive_IT>
 8000258:	e007      	b.n	800026a <HAL_UART_RxCpltCallback+0x5a>
	}else{

		HAL_UART_Abort(&huart2);
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 800025c:	f004 fc7e 	bl	8004b5c <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000260:	2224      	movs	r2, #36	; 0x24
 8000262:	4904      	ldr	r1, [pc, #16]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 8000266:	f004 fc25 	bl	8004ab4 <HAL_UART_Receive_IT>
	}
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20004624 	.word	0x20004624
 8000278:	20004584 	.word	0x20004584
 800027c:	2000464c 	.word	0x2000464c

08000280 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000286:	f001 f8bb 	bl	8001400 <HAL_Init>
	HAL_Delay(2000);
 800028a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800028e:	f001 f8e9 	bl	8001464 <HAL_Delay>

	/* Configure the system clock */
	SystemClock_Config();
 8000292:	f000 f8a7 	bl	80003e4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 1 */
	MX_GPIO_Init();
 8000296:	f000 f9ef 	bl	8000678 <MX_GPIO_Init>
	MX_DMA_Init();
 800029a:	f000 f9c7 	bl	800062c <MX_DMA_Init>
	MX_ADC1_Init();
 800029e:	f000 f8fd 	bl	800049c <MX_ADC1_Init>
	MX_CAN_Init();
 80002a2:	f000 f939 	bl	8000518 <MX_CAN_Init>
	MX_I2C1_Init();
 80002a6:	f000 fa55 	bl	8000754 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80002aa:	f000 f995 	bl	80005d8 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80002ae:	f000 f969 	bl	8000584 <MX_USART1_UART_Init>

	DWT_CTRL |= (1 << 0);
 80002b2:	4b3f      	ldr	r3, [pc, #252]	; (80003b0 <main+0x130>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a3e      	ldr	r2, [pc, #248]	; (80003b0 <main+0x130>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6013      	str	r3, [r2, #0]

	CAN_Filter_Config();
 80002be:	f000 fa77 	bl	80007b0 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80002c2:	f240 4103 	movw	r1, #1027	; 0x403
 80002c6:	483b      	ldr	r0, [pc, #236]	; (80003b4 <main+0x134>)
 80002c8:	f002 f89d 	bl	8002406 <HAL_CAN_ActivateNotification>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x56>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80002d2:	f000 fd5f 	bl	8000d94 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 80002d6:	4837      	ldr	r0, [pc, #220]	; (80003b4 <main+0x134>)
 80002d8:	f001 fe66 	bl	8001fa8 <HAL_CAN_Start>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x66>
		Error_Handler();
 80002e2:	f000 fd57 	bl	8000d94 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) gas, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	4933      	ldr	r1, [pc, #204]	; (80003b8 <main+0x138>)
 80002ea:	4834      	ldr	r0, [pc, #208]	; (80003bc <main+0x13c>)
 80002ec:	f001 f9b4 	bl	8001658 <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 80002f0:	2224      	movs	r2, #36	; 0x24
 80002f2:	4933      	ldr	r1, [pc, #204]	; (80003c0 <main+0x140>)
 80002f4:	4833      	ldr	r0, [pc, #204]	; (80003c4 <main+0x144>)
 80002f6:	f004 fbdd 	bl	8004ab4 <HAL_UART_Receive_IT>

	SEGGER_SYSVIEW_Conf();
 80002fa:	f006 fc9d 	bl	8006c38 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80002fe:	f007 fbdb 	bl	8007ab8 <SEGGER_SYSVIEW_Start>

	/* Start scheduler */
	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 8000302:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <main+0x148>)
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2307      	movs	r3, #7
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2300      	movs	r3, #0
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	492f      	ldr	r1, [pc, #188]	; (80003cc <main+0x14c>)
 8000310:	482f      	ldr	r0, [pc, #188]	; (80003d0 <main+0x150>)
 8000312:	f005 f9ca 	bl	80056aa <xTaskCreate>

	vTaskStartScheduler();
 8000316:	f005 fc65 	bl	8005be4 <vTaskStartScheduler>

	/* Infinite loop */
	while (1) {

		//if(!DATAFLAG){
		HAL_Delay(5000); /*JUST IN CASE*/
 800031a:	f241 3088 	movw	r0, #5000	; 0x1388
 800031e:	f001 f8a1 	bl	8001464 <HAL_Delay>
		bsl[1] = 0xAA;
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <main+0x154>)
 8000324:	22aa      	movs	r2, #170	; 0xaa
 8000326:	705a      	strb	r2, [r3, #1]
		bsl[11] = 0xBB;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <main+0x154>)
 800032a:	22bb      	movs	r2, #187	; 0xbb
 800032c:	72da      	strb	r2, [r3, #11]
		bsl[21] = 0xCC;
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <main+0x154>)
 8000330:	22cc      	movs	r2, #204	; 0xcc
 8000332:	755a      	strb	r2, [r3, #21]
		bsl[0] = 0x00;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <main+0x154>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
		bsl[10] = 0x00;
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <main+0x154>)
 800033c:	2200      	movs	r2, #0
 800033e:	729a      	strb	r2, [r3, #10]
		bsl[20] = 0x00;
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <main+0x154>)
 8000342:	2200      	movs	r2, #0
 8000344:	751a      	strb	r2, [r3, #20]
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000346:	230a      	movs	r3, #10
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	231a      	movs	r3, #26
 800034c:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <main+0x154>)
 800034e:	2110      	movs	r1, #16
 8000350:	4821      	ldr	r0, [pc, #132]	; (80003d8 <main+0x158>)
 8000352:	f003 f8d5 	bl	8003500 <HAL_I2C_Master_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035a:	4820      	ldr	r0, [pc, #128]	; (80003dc <main+0x15c>)
 800035c:	f002 ff8f 	bl	800327e <HAL_GPIO_TogglePin>
		HAL_Delay(5000); /*JUST IN CASE*/
 8000360:	f241 3088 	movw	r0, #5000	; 0x1388
 8000364:	f001 f87e 	bl	8001464 <HAL_Delay>
		bsl[0] = 0xDD;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <main+0x154>)
 800036a:	22dd      	movs	r2, #221	; 0xdd
 800036c:	701a      	strb	r2, [r3, #0]
		bsl[10] = 0xEE;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <main+0x154>)
 8000370:	22ee      	movs	r2, #238	; 0xee
 8000372:	729a      	strb	r2, [r3, #10]
		bsl[20] = 0xFF;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <main+0x154>)
 8000376:	22ff      	movs	r2, #255	; 0xff
 8000378:	751a      	strb	r2, [r3, #20]
		bsl[1] = 0x00;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <main+0x154>)
 800037c:	2200      	movs	r2, #0
 800037e:	705a      	strb	r2, [r3, #1]
		bsl[11] = 0x00;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0x154>)
 8000382:	2200      	movs	r2, #0
 8000384:	72da      	strb	r2, [r3, #11]
		bsl[21] = 0x00;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <main+0x154>)
 8000388:	2200      	movs	r2, #0
 800038a:	755a      	strb	r2, [r3, #21]
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 800038c:	230a      	movs	r3, #10
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	231a      	movs	r3, #26
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <main+0x154>)
 8000394:	2110      	movs	r1, #16
 8000396:	4810      	ldr	r0, [pc, #64]	; (80003d8 <main+0x158>)
 8000398:	f003 f8b2 	bl	8003500 <HAL_I2C_Master_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800039c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a0:	480e      	ldr	r0, [pc, #56]	; (80003dc <main+0x15c>)
 80003a2:	f002 ff6c 	bl	800327e <HAL_GPIO_TogglePin>
		DATAFLAG=1;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <main+0x160>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000); /*JUST IN CASE*/
 80003ac:	e7b5      	b.n	800031a <main+0x9a>
 80003ae:	bf00      	nop
 80003b0:	e0001000 	.word	0xe0001000
 80003b4:	200044d0 	.word	0x200044d0
 80003b8:	20004620 	.word	0x20004620
 80003bc:	20004514 	.word	0x20004514
 80003c0:	20004624 	.word	0x20004624
 80003c4:	2000464c 	.word	0x2000464c
 80003c8:	20004648 	.word	0x20004648
 80003cc:	080086f0 	.word	0x080086f0
 80003d0:	080007fd 	.word	0x080007fd
 80003d4:	200044f8 	.word	0x200044f8
 80003d8:	20004478 	.word	0x20004478
 80003dc:	40011000 	.word	0x40011000
 80003e0:	20000486 	.word	0x20000486

080003e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b094      	sub	sp, #80	; 0x50
 80003e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f008 f968 	bl	80086c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000414:	2301      	movs	r3, #1
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000430:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000434:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fb5a 	bl	8003af4 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x66>
		Error_Handler();
 8000446:	f000 fca5 	bl	8000d94 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2102      	movs	r1, #2
 8000466:	4618      	mov	r0, r3
 8000468:	f003 fdc4 	bl	8003ff4 <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x92>
		Error_Handler();
 8000472:	f000 fc8f 	bl	8000d94 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000476:	2302      	movs	r3, #2
 8000478:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800047a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800047e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f003 ff82 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0xae>
		Error_Handler();
 800048e:	f000 fc81 	bl	8000d94 <Error_Handler>
	}
}
 8000492:	bf00      	nop
 8000494:	3750      	adds	r7, #80	; 0x50
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_ADC1_Init+0x74>)
 80004ae:	4a19      	ldr	r2, [pc, #100]	; (8000514 <MX_ADC1_Init+0x78>)
 80004b0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_ADC1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_ADC1_Init+0x74>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_ADC1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_ADC1_Init+0x74>)
 80004c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004ca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MX_ADC1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_ADC1_Init+0x74>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_ADC1_Init+0x74>)
 80004da:	f000 ffe5 	bl	80014a8 <HAL_ADC_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80004e4:	f000 fc56 	bl	8000d94 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004f0:	2307      	movs	r3, #7
 80004f2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_ADC1_Init+0x74>)
 80004fa:	f001 f9a7 	bl	800184c <HAL_ADC_ConfigChannel>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000504:	f000 fc46 	bl	8000d94 <Error_Handler>
	}
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20004514 	.word	0x20004514
 8000514:	40012400 	.word	0x40012400

08000518 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_CAN_Init+0x64>)
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <MX_CAN_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_CAN_Init+0x64>)
 8000524:	2209      	movs	r2, #9
 8000526:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_CAN_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_CAN_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_CAN_Init+0x64>)
 8000536:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800053a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_CAN_Init+0x64>)
 800053e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000542:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <MX_CAN_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_CAN_Init+0x64>)
 800054c:	2201      	movs	r2, #1
 800054e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MX_CAN_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_CAN_Init+0x64>)
 8000558:	2201      	movs	r2, #1
 800055a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_CAN_Init+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_CAN_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_CAN_Init+0x64>)
 800056a:	f001 fb59 	bl	8001c20 <HAL_CAN_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_CAN_Init+0x60>
		Error_Handler();
 8000574:	f000 fc0e 	bl	8000d94 <Error_Handler>
	}
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200044d0 	.word	0x200044d0
 8000580:	40006400 	.word	0x40006400

08000584 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_USART1_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2208      	movs	r2, #8
 80005ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005bc:	f004 f994 	bl	80048e8 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80005c6:	f000 fbe5 	bl	8000d94 <Error_Handler>
	}
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20004544 	.word	0x20004544
 80005d4:	40013800 	.word	0x40013800

080005d8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_USART2_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2204      	movs	r2, #4
 8000600:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000610:	f004 f96a 	bl	80048e8 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800061a:	f000 fbbb 	bl	8000d94 <Error_Handler>
	}
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000464c 	.word	0x2000464c
 8000628:	40004400 	.word	0x40004400

0800062c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_DMA_Init+0x48>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_DMA_Init+0x48>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_DMA_Init+0x48>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2105      	movs	r1, #5
 800064e:	200b      	movs	r0, #11
 8000650:	f002 f9d1 	bl	80029f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000654:	200b      	movs	r0, #11
 8000656:	f002 f9ea 	bl	8002a2e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2105      	movs	r1, #5
 800065e:	2010      	movs	r0, #16
 8000660:	f002 f9c9 	bl	80029f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000664:	2010      	movs	r0, #16
 8000666:	f002 f9e2 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <MX_GPIO_Init+0xd0>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0xd0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : Gear_Pin Brake_Pin */
	GPIO_InitStruct.Pin = Gear_Pin | Brake_Pin;
 80006ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <MX_GPIO_Init+0xd4>)
 8000702:	f002 fc4b 	bl	8002f9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xd8>)
 8000720:	f002 fc3c 	bl	8002f9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000724:	2320      	movs	r3, #32
 8000726:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xd4>)
 800073c:	f002 fc2e 	bl	8002f9c <HAL_GPIO_Init>
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40010c00 	.word	0x40010c00
 8000750:	40011000 	.word	0x40011000

08000754 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_I2C1_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_I2C1_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2C1_Init+0x50>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000792:	f002 fd8d 	bl	80032b0 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800079c:	f000 fafa 	bl	8000d94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20004478 	.word	0x20004478
 80007a8:	40005400 	.word	0x40005400
 80007ac:	00061a80 	.word	0x00061a80

080007b0 <CAN_Filter_Config>:

/*Configure CAN Filter */
void CAN_Filter_Config(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <CAN_Filter_Config+0x48>)
 80007e0:	f001 fb19 	bl	8001e16 <HAL_CAN_ConfigFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <CAN_Filter_Config+0x3e>
		Error_Handler();
 80007ea:	f000 fad3 	bl	8000d94 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200044d0 	.word	0x200044d0

080007fc <Start_taskF>:

/*Start Task */
void Start_taskF(void *pvParameters) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 8000804:	2203      	movs	r2, #3
 8000806:	2100      	movs	r1, #0
 8000808:	2001      	movs	r0, #1
 800080a:	f004 fe93 	bl	8005534 <xQueueGenericCreate>
 800080e:	4602      	mov	r2, r0
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <Start_taskF+0xc0>)
 8000812:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f005 f9ad 	bl	8005b74 <vTaskDelay>
	xTaskCreate(GPS_taskF, "GPSTask", 256, NULL, 3, &GPS_Task);
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <Start_taskF+0xc4>)
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	2303      	movs	r3, #3
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000828:	4926      	ldr	r1, [pc, #152]	; (80008c4 <Start_taskF+0xc8>)
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <Start_taskF+0xcc>)
 800082c:	f004 ff3d 	bl	80056aa <xTaskCreate>
	vTaskDelay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f005 f99f 	bl	8005b74 <vTaskDelay>
	xTaskCreate(Gear_Brake_taskF, "Gear_BrakeTask", 256, NULL, 2,
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <Start_taskF+0xd0>)
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2302      	movs	r3, #2
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2300      	movs	r3, #0
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	4922      	ldr	r1, [pc, #136]	; (80008d0 <Start_taskF+0xd4>)
 8000846:	4823      	ldr	r0, [pc, #140]	; (80008d4 <Start_taskF+0xd8>)
 8000848:	f004 ff2f 	bl	80056aa <xTaskCreate>
			&Gear_Brake_Task);
	vTaskDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f005 f991 	bl	8005b74 <vTaskDelay>
	xTaskCreate(Gas_taskF, "GasTask", 256, NULL, 2, &Gas_Task);
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <Start_taskF+0xdc>)
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2302      	movs	r3, #2
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2300      	movs	r3, #0
 800085c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000860:	491e      	ldr	r1, [pc, #120]	; (80008dc <Start_taskF+0xe0>)
 8000862:	481f      	ldr	r0, [pc, #124]	; (80008e0 <Start_taskF+0xe4>)
 8000864:	f004 ff21 	bl	80056aa <xTaskCreate>
	vTaskDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f005 f983 	bl	8005b74 <vTaskDelay>
	xTaskCreate(Logger_taskF, "LoggerTask", 256, NULL, 1, &Logger_Task);
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <Start_taskF+0xe8>)
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	2301      	movs	r3, #1
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087c:	491a      	ldr	r1, [pc, #104]	; (80008e8 <Start_taskF+0xec>)
 800087e:	481b      	ldr	r0, [pc, #108]	; (80008ec <Start_taskF+0xf0>)
 8000880:	f004 ff13 	bl	80056aa <xTaskCreate>
	vTaskDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f005 f975 	bl	8005b74 <vTaskDelay>
	xTaskCreate(Telemetry_taskF, "TelemetryTask",256, NULL, 6,
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <Start_taskF+0xf4>)
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	2306      	movs	r3, #6
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000898:	4916      	ldr	r1, [pc, #88]	; (80008f4 <Start_taskF+0xf8>)
 800089a:	4817      	ldr	r0, [pc, #92]	; (80008f8 <Start_taskF+0xfc>)
 800089c:	f004 ff05 	bl	80056aa <xTaskCreate>
			&Telemetry_Task);

	if (Start_Task != NULL) {
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <Start_taskF+0x100>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d004      	beq.n	80008b2 <Start_taskF+0xb6>
		vTaskDelete(Start_Task);
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <Start_taskF+0x100>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 f847 	bl	8005940 <vTaskDelete>
	}

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200044cc 	.word	0x200044cc
 80008c0:	20004470 	.word	0x20004470
 80008c4:	080086fc 	.word	0x080086fc
 80008c8:	08000901 	.word	0x08000901
 80008cc:	20004424 	.word	0x20004424
 80008d0:	08008704 	.word	0x08008704
 80008d4:	08000a29 	.word	0x08000a29
 80008d8:	20004694 	.word	0x20004694
 80008dc:	08008714 	.word	0x08008714
 80008e0:	08000ad1 	.word	0x08000ad1
 80008e4:	2000468c 	.word	0x2000468c
 80008e8:	0800871c 	.word	0x0800871c
 80008ec:	08000b55 	.word	0x08000b55
 80008f0:	2000446c 	.word	0x2000446c
 80008f4:	08008728 	.word	0x08008728
 80008f8:	08000c21 	.word	0x08000c21
 80008fc:	20004648 	.word	0x20004648

08000900 <GPS_taskF>:

/*GPS Read Task --- THIS TASK NEEDS TEST WITH HARDWARE */
void GPS_taskF(void *pvParameters) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 8000908:	23c8      	movs	r3, #200	; 0xc8
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 800090c:	f005 fa76 	bl	8005dfc <xTaskGetTickCount>
 8000910:	4603      	mov	r3, r0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
	while (1) {
		uint8_t LAT[4];
		LAT[0] = buffer[18] = posllh.lat >> 24;
 8000914:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <GPS_taskF+0x11c>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	161b      	asrs	r3, r3, #24
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <GPS_taskF+0x120>)
 800091e:	749a      	strb	r2, [r3, #18]
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <GPS_taskF+0x120>)
 8000922:	7c9b      	ldrb	r3, [r3, #18]
 8000924:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		LAT[1] = buffer[19] = posllh.lat >> 16;
 8000928:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <GPS_taskF+0x11c>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	141b      	asrs	r3, r3, #16
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <GPS_taskF+0x120>)
 8000932:	74da      	strb	r2, [r3, #19]
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <GPS_taskF+0x120>)
 8000936:	7cdb      	ldrb	r3, [r3, #19]
 8000938:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		LAT[2] = buffer[20] = posllh.lat >> 8;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <GPS_taskF+0x11c>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	121b      	asrs	r3, r3, #8
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <GPS_taskF+0x120>)
 8000946:	751a      	strb	r2, [r3, #20]
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <GPS_taskF+0x120>)
 800094a:	7d1b      	ldrb	r3, [r3, #20]
 800094c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		LAT[3] = buffer[21] = posllh.lat;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <GPS_taskF+0x11c>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <GPS_taskF+0x120>)
 8000958:	755a      	strb	r2, [r3, #21]
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <GPS_taskF+0x120>)
 800095c:	7d5b      	ldrb	r3, [r3, #21]
 800095e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef LATHeader;

		LATHeader.DLC = 4;
 8000962:	2304      	movs	r3, #4
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
		LATHeader.StdId = 0x664;
 8000966:	f240 6364 	movw	r3, #1636	; 0x664
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
		LATHeader.IDE = CAN_ID_STD;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
		LATHeader.RTR = CAN_RTR_DATA;
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34

		if (HAL_CAN_AddTxMessage(&hcan, &LATHeader, LAT, &TxMailbox)
 8000974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000978:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800097c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000980:	4828      	ldr	r0, [pc, #160]	; (8000a24 <GPS_taskF+0x124>)
 8000982:	f001 fb55 	bl	8002030 <HAL_CAN_AddTxMessage>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <GPS_taskF+0x90>
				!= HAL_OK) {
			Error_Handler();
 800098c:	f000 fa02 	bl	8000d94 <Error_Handler>
		}
		uint8_t LON[4];
		LON[0] = buffer[22] = posllh.lon >> 24;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <GPS_taskF+0x11c>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	161b      	asrs	r3, r3, #24
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <GPS_taskF+0x120>)
 800099a:	759a      	strb	r2, [r3, #22]
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <GPS_taskF+0x120>)
 800099e:	7d9b      	ldrb	r3, [r3, #22]
 80009a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		LON[1] = buffer[23] = posllh.lon >> 16;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <GPS_taskF+0x11c>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	141b      	asrs	r3, r3, #16
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <GPS_taskF+0x120>)
 80009ae:	75da      	strb	r2, [r3, #23]
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <GPS_taskF+0x120>)
 80009b2:	7ddb      	ldrb	r3, [r3, #23]
 80009b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		LON[2] = buffer[24] = posllh.lon >> 8;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <GPS_taskF+0x11c>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	121b      	asrs	r3, r3, #8
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <GPS_taskF+0x120>)
 80009c2:	761a      	strb	r2, [r3, #24]
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <GPS_taskF+0x120>)
 80009c6:	7e1b      	ldrb	r3, [r3, #24]
 80009c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		LON[3] = buffer[25] = posllh.lon;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <GPS_taskF+0x11c>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <GPS_taskF+0x120>)
 80009d4:	765a      	strb	r2, [r3, #25]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <GPS_taskF+0x120>)
 80009d8:	7e5b      	ldrb	r3, [r3, #25]
 80009da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		CAN_TxHeaderTypeDef LONHeader;

		LONHeader.DLC = 4;
 80009de:	2304      	movs	r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
		LONHeader.StdId = 0x665;
 80009e2:	f240 6365 	movw	r3, #1637	; 0x665
 80009e6:	60fb      	str	r3, [r7, #12]
		LONHeader.IDE = CAN_ID_STD;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
		LONHeader.RTR = CAN_RTR_DATA;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &LONHeader, LON, &TxMailbox)
 80009f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009f8:	f107 010c 	add.w	r1, r7, #12
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <GPS_taskF+0x124>)
 80009fe:	f001 fb17 	bl	8002030 <HAL_CAN_AddTxMessage>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <GPS_taskF+0x10c>
				!= HAL_OK) {
			Error_Handler();
 8000a08:	f000 f9c4 	bl	8000d94 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 f830 	bl	8005a78 <vTaskDelayUntil>
	while (1) {
 8000a18:	e77c      	b.n	8000914 <GPS_taskF+0x14>
 8000a1a:	bf00      	nop
 8000a1c:	20004584 	.word	0x20004584
 8000a20:	200045a4 	.word	0x200045a4
 8000a24:	200044d0 	.word	0x200044d0

08000a28 <Gear_Brake_taskF>:
	}
}

/*Gear an Brake Read Task */
void Gear_Brake_taskF(void *pvParameters) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000a30:	230a      	movs	r3, #10
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000a34:	f005 f9e2 	bl	8005dfc <xTaskGetTickCount>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		gear = HAL_GPIO_ReadPin(GPIOB, Gear_Pin);
 8000a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <Gear_Brake_taskF+0x94>)
 8000a42:	f002 fc05 	bl	8003250 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <Gear_Brake_taskF+0x98>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		brake = HAL_GPIO_ReadPin(GPIOB, Brake_Pin);
 8000a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <Gear_Brake_taskF+0x94>)
 8000a54:	f002 fbfc 	bl	8003250 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <Gear_Brake_taskF+0x9c>)
 8000a5e:	701a      	strb	r2, [r3, #0]
		uint8_t GBbuff[2];
		GBbuff[0] = buffer[0] = gear;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <Gear_Brake_taskF+0x98>)
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <Gear_Brake_taskF+0xa0>)
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <Gear_Brake_taskF+0xa0>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GBbuff[1] = buffer[1] = brake;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <Gear_Brake_taskF+0x9c>)
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <Gear_Brake_taskF+0xa0>)
 8000a76:	705a      	strb	r2, [r3, #1]
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <Gear_Brake_taskF+0xa0>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GBHeader;

		GBHeader.DLC = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
		GBHeader.StdId = 0x657;
 8000a84:	f240 6357 	movw	r3, #1623	; 0x657
 8000a88:	60bb      	str	r3, [r7, #8]
		GBHeader.IDE = CAN_ID_STD;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
		GBHeader.RTR = CAN_RTR_DATA;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GBHeader, GBbuff, &TxMailbox)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <Gear_Brake_taskF+0xa4>)
 8000aa0:	f001 fac6 	bl	8002030 <HAL_CAN_AddTxMessage>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <Gear_Brake_taskF+0x86>
				!= HAL_OK) {
			Error_Handler();
 8000aaa:	f000 f973 	bl	8000d94 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 ffdf 	bl	8005a78 <vTaskDelayUntil>
	while (1) {
 8000aba:	e7bf      	b.n	8000a3c <Gear_Brake_taskF+0x14>
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	20004474 	.word	0x20004474
 8000ac4:	20004690 	.word	0x20004690
 8000ac8:	200045a4 	.word	0x200045a4
 8000acc:	200044d0 	.word	0x200044d0

08000ad0 <Gas_taskF>:
	}
}

/*Gas pedal Read Task */
void Gas_taskF(void *pvParameters) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000ad8:	230a      	movs	r3, #10
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000adc:	f005 f98e 	bl	8005dfc <xTaskGetTickCount>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		uint8_t gasbuff[2];
		gasbuff[0] = buffer[2] = (uint8_t) (gas[0] >> 8) & 0xFF;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <Gas_taskF+0x78>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <Gas_taskF+0x7c>)
 8000af0:	709a      	strb	r2, [r3, #2]
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <Gas_taskF+0x7c>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		gasbuff[1] = buffer[3] = (uint8_t) gas[0] & 0xFF;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <Gas_taskF+0x78>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <Gas_taskF+0x7c>)
 8000b02:	70da      	strb	r2, [r3, #3]
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <Gas_taskF+0x7c>)
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GasHeader;

		GasHeader.DLC = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
		GasHeader.StdId = 0x656;
 8000b10:	f240 6356 	movw	r3, #1622	; 0x656
 8000b14:	60bb      	str	r3, [r7, #8]
		GasHeader.IDE = CAN_ID_STD;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
		GasHeader.RTR = CAN_RTR_DATA;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GasHeader, gasbuff, &TxMailbox)
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b26:	f107 0108 	add.w	r1, r7, #8
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <Gas_taskF+0x80>)
 8000b2c:	f001 fa80 	bl	8002030 <HAL_CAN_AddTxMessage>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <Gas_taskF+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000b36:	f000 f92d 	bl	8000d94 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 ff99 	bl	8005a78 <vTaskDelayUntil>
	while (1) {
 8000b46:	e7cd      	b.n	8000ae4 <Gas_taskF+0x14>
 8000b48:	20004620 	.word	0x20004620
 8000b4c:	200045a4 	.word	0x200045a4
 8000b50:	200044d0 	.word	0x200044d0

08000b54 <Logger_taskF>:
	}
}

/*Logger Write Task  --- THIS TASK NEEDS TO IMPLEMENT START AND STOP LOG FUNCTIONS*/
void Logger_taskF(void *pvParameters) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000b60:	f005 f94c 	bl	8005dfc <xTaskGetTickCount>
 8000b64:	4603      	mov	r3, r0
 8000b66:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (startLOG == 1) {
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <Logger_taskF+0xb8>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d11c      	bne.n	8000baa <Logger_taskF+0x56>
			startLOG = 0;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <Logger_taskF+0xb8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			bsl[1] = 0xAA;
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <Logger_taskF+0xbc>)
 8000b78:	22aa      	movs	r2, #170	; 0xaa
 8000b7a:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0xBB;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <Logger_taskF+0xbc>)
 8000b7e:	22bb      	movs	r2, #187	; 0xbb
 8000b80:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0xCC;
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <Logger_taskF+0xbc>)
 8000b84:	22cc      	movs	r2, #204	; 0xcc
 8000b86:	755a      	strb	r2, [r3, #21]
			bsl[0] = 0x00;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <Logger_taskF+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0x00;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <Logger_taskF+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0x00;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <Logger_taskF+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	751a      	strb	r2, [r3, #20]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	231a      	movs	r3, #26
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <Logger_taskF+0xbc>)
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	481b      	ldr	r0, [pc, #108]	; (8000c14 <Logger_taskF+0xc0>)
 8000ba6:	f002 fcab 	bl	8003500 <HAL_I2C_Master_Transmit>
		}
		if (stopLOG == 1) {
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <Logger_taskF+0xc4>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d11c      	bne.n	8000bec <Logger_taskF+0x98>
			stopLOG = 0;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <Logger_taskF+0xc4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
			bsl[0] = 0xDD;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <Logger_taskF+0xbc>)
 8000bba:	22dd      	movs	r2, #221	; 0xdd
 8000bbc:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0xEE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <Logger_taskF+0xbc>)
 8000bc0:	22ee      	movs	r2, #238	; 0xee
 8000bc2:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0xFF;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <Logger_taskF+0xbc>)
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	751a      	strb	r2, [r3, #20]
			bsl[1] = 0x00;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Logger_taskF+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0x00;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <Logger_taskF+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0x00;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <Logger_taskF+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	755a      	strb	r2, [r3, #21]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000bdc:	230a      	movs	r3, #10
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	231a      	movs	r3, #26
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <Logger_taskF+0xbc>)
 8000be4:	2110      	movs	r1, #16
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <Logger_taskF+0xc0>)
 8000be8:	f002 fc8a 	bl	8003500 <HAL_I2C_Master_Transmit>
		}
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 26, 10);
 8000bec:	230a      	movs	r3, #10
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	231a      	movs	r3, #26
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <Logger_taskF+0xc8>)
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <Logger_taskF+0xc0>)
 8000bf8:	f002 fc82 	bl	8003500 <HAL_I2C_Master_Transmit>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 ff38 	bl	8005a78 <vTaskDelayUntil>
		if (startLOG == 1) {
 8000c08:	e7ae      	b.n	8000b68 <Logger_taskF+0x14>
 8000c0a:	bf00      	nop
 8000c0c:	20000484 	.word	0x20000484
 8000c10:	200044f8 	.word	0x200044f8
 8000c14:	20004478 	.word	0x20004478
 8000c18:	20000485 	.word	0x20000485
 8000c1c:	200045a4 	.word	0x200045a4

08000c20 <Telemetry_taskF>:
	}
}

/*LoRa Transceiver Write Task*/
void Telemetry_taskF(void *pvParameters) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000c2c:	f005 f8e6 	bl	8005dfc <xTaskGetTickCount>
 8000c30:	4603      	mov	r3, r0
 8000c32:	60fb      	str	r3, [r7, #12]
	while (1) {
		LoRa[0] = sync;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <Telemetry_taskF+0x5c>)
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <Telemetry_taskF+0x60>)
 8000c3a:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00b      	b.n	8000c5a <Telemetry_taskF+0x3a>
			LoRa[y] = buffer[y - 1];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <Telemetry_taskF+0x64>)
 8000c48:	5cd1      	ldrb	r1, [r2, r3]
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <Telemetry_taskF+0x60>)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	460a      	mov	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2b1a      	cmp	r3, #26
 8000c5e:	ddf0      	ble.n	8000c42 <Telemetry_taskF+0x22>
		}
		HAL_UART_Transmit(&huart1, LoRa, 27, 10);
 8000c60:	230a      	movs	r3, #10
 8000c62:	221b      	movs	r2, #27
 8000c64:	4906      	ldr	r1, [pc, #24]	; (8000c80 <Telemetry_taskF+0x60>)
 8000c66:	4808      	ldr	r0, [pc, #32]	; (8000c88 <Telemetry_taskF+0x68>)
 8000c68:	f003 fe8b 	bl	8004982 <HAL_UART_Transmit>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*10Hz frequency*/
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	6939      	ldr	r1, [r7, #16]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 ff00 	bl	8005a78 <vTaskDelayUntil>
		LoRa[0] = sync;
 8000c78:	e7dc      	b.n	8000c34 <Telemetry_taskF+0x14>
 8000c7a:	bf00      	nop
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	200045c0 	.word	0x200045c0
 8000c84:	200045a4 	.word	0x200045a4
 8000c88:	20004544 	.word	0x20004544

08000c8c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/*CAN Read Callback -- THIS FUNCTION NEEDS TO IMPLEMENT START AND STOP LOG MESSAGES  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcv_msg[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcv_msg)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	f107 0214 	add.w	r2, r7, #20
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 faa0 	bl	80021e4 <HAL_CAN_GetRxMessage>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) {
		Error_Handler();
 8000caa:	f000 f873 	bl	8000d94 <Error_Handler>
	}

	if (RxHeader.StdId == 0x64E) {
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f240 624e 	movw	r2, #1614	; 0x64e
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d102      	bne.n	8000cbe <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		//if (rcv_msg[0] == 0x55) {
		startLOG = 1;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x64F) {
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f240 624f 	movw	r2, #1615	; 0x64f
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d102      	bne.n	8000cce <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//if (rcv_msg[0] == 0x66) {
		stopLOG = 1;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x650) {
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000cd4:	d105      	bne.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		buffer[4] = rcv_msg[0];
 8000cd6:	7b3a      	ldrb	r2, [r7, #12]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cda:	711a      	strb	r2, [r3, #4]
		buffer[5] = rcv_msg[1];
 8000cdc:	7b7a      	ldrb	r2, [r7, #13]
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000ce0:	715a      	strb	r2, [r3, #5]
	}

	if (RxHeader.StdId == 0x651) {
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f240 6251 	movw	r2, #1617	; 0x651
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d105      	bne.n	8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		buffer[6] = rcv_msg[0];
 8000cec:	7b3a      	ldrb	r2, [r7, #12]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cf0:	719a      	strb	r2, [r3, #6]
		buffer[7] = rcv_msg[1];
 8000cf2:	7b7a      	ldrb	r2, [r7, #13]
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cf6:	71da      	strb	r2, [r3, #7]
	}

	if (RxHeader.StdId == 0x652) {
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f240 6252 	movw	r2, #1618	; 0x652
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d105      	bne.n	8000d0e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
		buffer[8] = rcv_msg[0];
 8000d02:	7b3a      	ldrb	r2, [r7, #12]
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d06:	721a      	strb	r2, [r3, #8]
		buffer[9] = rcv_msg[1];
 8000d08:	7b7a      	ldrb	r2, [r7, #13]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d0c:	725a      	strb	r2, [r3, #9]
	}

	if (RxHeader.StdId == 0x653) {
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f240 6253 	movw	r2, #1619	; 0x653
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d105      	bne.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		buffer[10] = rcv_msg[0];
 8000d18:	7b3a      	ldrb	r2, [r7, #12]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d1c:	729a      	strb	r2, [r3, #10]
		buffer[11] = rcv_msg[1];
 8000d1e:	7b7a      	ldrb	r2, [r7, #13]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d22:	72da      	strb	r2, [r3, #11]
	}

	if (RxHeader.StdId == 0x654) {
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f240 6254 	movw	r2, #1620	; 0x654
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d105      	bne.n	8000d3a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		buffer[12] = rcv_msg[0];
 8000d2e:	7b3a      	ldrb	r2, [r7, #12]
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d32:	731a      	strb	r2, [r3, #12]
		buffer[13] = rcv_msg[1];
 8000d34:	7b7a      	ldrb	r2, [r7, #13]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d38:	735a      	strb	r2, [r3, #13]
	}

	if (RxHeader.StdId == 0x655) {
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f240 6255 	movw	r2, #1621	; 0x655
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10b      	bne.n	8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
		buffer[14] = rcv_msg[0];
 8000d44:	7b3a      	ldrb	r2, [r7, #12]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d48:	739a      	strb	r2, [r3, #14]
		buffer[15] = rcv_msg[1];
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d4e:	73da      	strb	r2, [r3, #15]
		buffer[16] = rcv_msg[2];
 8000d50:	7bba      	ldrb	r2, [r7, #14]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d54:	741a      	strb	r2, [r3, #16]
		buffer[17] = rcv_msg[3];
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d5a:	745a      	strb	r2, [r3, #17]
	}

}
 8000d5c:	bf00      	nop
 8000d5e:	3730      	adds	r7, #48	; 0x30
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000484 	.word	0x20000484
 8000d68:	20000485 	.word	0x20000485
 8000d6c:	200045a4 	.word	0x200045a4

08000d70 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d82:	f000 fb53 	bl	800142c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40000800 	.word	0x40000800

08000d94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_MspInit+0x6c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <HAL_MspInit+0x6c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_MspInit+0x6c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_MspInit+0x6c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_MspInit+0x6c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_MspInit+0x6c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210f      	movs	r1, #15
 8000dda:	f06f 0001 	mvn.w	r0, #1
 8000dde:	f001 fe0a 	bl	80029f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_MspInit+0x70>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_MspInit+0x70>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 8000dfe:	f005 fbe3 	bl	80065c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <HAL_ADC_MspInit+0xbc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d149      	bne.n	8000ec8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_ADC_MspInit+0xc0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Gas_Pin;
 8000e64:	2302      	movs	r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Gas_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <HAL_ADC_MspInit+0xc4>)
 8000e74:	f002 f892 	bl	8002f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_ADC_MspInit+0xcc>)
 8000e7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000eae:	f001 fdcd 	bl	8002a4c <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000eb8:	f7ff ff6c 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000ec0:	621a      	str	r2, [r3, #32]
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_ADC_MspInit+0xc8>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40012400 	.word	0x40012400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	200045dc 	.word	0x200045dc
 8000ee0:	40020008 	.word	0x40020008

08000ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <HAL_CAN_MspInit+0xf0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d163      	bne.n	8000fcc <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	61d3      	str	r3, [r2, #28]
 8000f10:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_CAN_MspInit+0xf4>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4824      	ldr	r0, [pc, #144]	; (8000fdc <HAL_CAN_MspInit+0xf8>)
 8000f4a:	f002 f827 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	481e      	ldr	r0, [pc, #120]	; (8000fdc <HAL_CAN_MspInit+0xf8>)
 8000f64:	f002 f81a 	bl	8002f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_CAN_MspInit+0xfc>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <HAL_CAN_MspInit+0xfc>)
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2105      	movs	r1, #5
 8000f90:	2013      	movs	r0, #19
 8000f92:	f001 fd30 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000f96:	2013      	movs	r0, #19
 8000f98:	f001 fd49 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	2014      	movs	r0, #20
 8000fa2:	f001 fd28 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 fd41 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2105      	movs	r1, #5
 8000fb0:	2015      	movs	r0, #21
 8000fb2:	f001 fd20 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fb6:	2015      	movs	r0, #21
 8000fb8:	f001 fd39 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	2016      	movs	r0, #22
 8000fc2:	f001 fd18 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fc6:	2016      	movs	r0, #22
 8000fc8:	f001 fd31 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40006400 	.word	0x40006400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <HAL_I2C_MspInit+0x70>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d123      	bne.n	800104c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_I2C_MspInit+0x74>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_I2C_MspInit+0x74>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_I2C_MspInit+0x74>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_I2C_MspInit+0x74>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001034:	23c0      	movs	r3, #192	; 0xc0
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_I2C_MspInit+0x78>)
 8001048:	f001 ffa8 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	40010c00 	.word	0x40010c00

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_UART_MspInit+0x154>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d132      	bne.n	80010e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001080:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <HAL_UART_MspInit+0x158>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_UART_MspInit+0x158>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <HAL_UART_MspInit+0x158>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_UART_MspInit+0x158>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_UART_MspInit+0x158>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_UART_MspInit+0x158>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	483d      	ldr	r0, [pc, #244]	; (80011bc <HAL_UART_MspInit+0x15c>)
 80010c6:	f001 ff69 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4619      	mov	r1, r3
 80010de:	4837      	ldr	r0, [pc, #220]	; (80011bc <HAL_UART_MspInit+0x15c>)
 80010e0:	f001 ff5c 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e4:	e062      	b.n	80011ac <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <HAL_UART_MspInit+0x160>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d15d      	bne.n	80011ac <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_UART_MspInit+0x158>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <HAL_UART_MspInit+0x158>)
 80010f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_UART_MspInit+0x158>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_UART_MspInit+0x158>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <HAL_UART_MspInit+0x158>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_UART_MspInit+0x158>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001120:	2304      	movs	r3, #4
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4619      	mov	r1, r3
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <HAL_UART_MspInit+0x15c>)
 8001134:	f001 ff32 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001138:	2308      	movs	r3, #8
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4619      	mov	r1, r3
 800114a:	481c      	ldr	r0, [pc, #112]	; (80011bc <HAL_UART_MspInit+0x15c>)
 800114c:	f001 ff26 	bl	8002f9c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_UART_MspInit+0x168>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_UART_MspInit+0x164>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0x164>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_UART_MspInit+0x164>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001182:	f001 fc63 	bl	8002a4c <HAL_DMA_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800118c:	f7ff fe02 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_UART_MspInit+0x164>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2105      	movs	r1, #5
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f001 fc28 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a6:	2026      	movs	r0, #38	; 0x26
 80011a8:	f001 fc41 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40004400 	.word	0x40004400
 80011c4:	20004428 	.word	0x20004428
 80011c8:	4002006c 	.word	0x4002006c

080011cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	201e      	movs	r0, #30
 80011e2:	f001 fc08 	bl	80029f6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011e6:	201e      	movs	r0, #30
 80011e8:	f001 fc21 	bl	8002a2e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_InitTick+0xa0>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_InitTick+0xa0>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	61d3      	str	r3, [r2, #28]
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_InitTick+0xa0>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001204:	f107 0210 	add.w	r2, r7, #16
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f86e 	bl	80042f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001214:	f003 f844 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8001218:	4603      	mov	r3, r0
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_InitTick+0xa4>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3b01      	subs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_InitTick+0xa8>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_InitTick+0xac>)
 8001230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_InitTick+0xa8>)
 8001234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001238:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_InitTick+0xa8>)
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_InitTick+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_InitTick+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <HAL_InitTick+0xa8>)
 800124e:	f003 f953 	bl	80044f8 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_InitTick+0xa8>)
 800125a:	f003 f981 	bl	8004560 <HAL_TIM_Base_Start_IT>
 800125e:	4603      	mov	r3, r0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3730      	adds	r7, #48	; 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	431bde83 	.word	0x431bde83
 8001274:	20004698 	.word	0x20004698
 8001278:	40000800 	.word	0x40000800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <HardFault_Handler+0x4>

0800128e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <BusFault_Handler+0x4>

0800129a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <UsageFault_Handler+0x4>

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <DMA1_Channel1_IRQHandler+0x10>)
 80012b2:	f001 fd35 	bl	8002d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200045dc 	.word	0x200045dc

080012c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <DMA1_Channel6_IRQHandler+0x10>)
 80012c6:	f001 fd2b 	bl	8002d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20004428 	.word	0x20004428

080012d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM4_IRQHandler+0x10>)
 80012da:	f003 f964 	bl	80045a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20004698 	.word	0x20004698

080012e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <USART2_IRQHandler+0x10>)
 80012ee:	f003 fcb7 	bl	8004c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000464c 	.word	0x2000464c

080012fc <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_HP_CAN1_TX_IRQHandler(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001302:	f001 f8a5 	bl	8002450 <HAL_CAN_IRQHandler>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200044d0 	.word	0x200044d0

08001310 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001316:	f001 f89b 	bl	8002450 <HAL_CAN_IRQHandler>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200044d0 	.word	0x200044d0

08001324 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <CAN1_RX1_IRQHandler+0x10>)
 800132a:	f001 f891 	bl	8002450 <HAL_CAN_IRQHandler>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200044d0 	.word	0x200044d0

08001338 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <CAN1_SCE_IRQHandler+0x10>)
 800133e:	f001 f887 	bl	8002450 <HAL_CAN_IRQHandler>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200044d0 	.word	0x200044d0

0800134c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <SystemInit+0x5c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <SystemInit+0x5c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <SystemInit+0x5c>)
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4911      	ldr	r1, [pc, #68]	; (80013a8 <SystemInit+0x5c>)
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0x60>)
 8001364:	4013      	ands	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <SystemInit+0x5c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <SystemInit+0x5c>)
 800136e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <SystemInit+0x5c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SystemInit+0x5c>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <SystemInit+0x5c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <SystemInit+0x5c>)
 800138a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800138e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SystemInit+0x5c>)
 8001392:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001396:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SystemInit+0x64>)
 800139a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139e:	609a      	str	r2, [r3, #8]
#endif 
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	f8ff0000 	.word	0xf8ff0000
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013b6:	e003      	b.n	80013c0 <LoopCopyDataInit>

080013b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013be:	3104      	adds	r1, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013c8:	d3f6      	bcc.n	80013b8 <CopyDataInit>
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013cc:	e002      	b.n	80013d4 <LoopFillZerobss>

080013ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013d0:	f842 3b04 	str.w	r3, [r2], #4

080013d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013d8:	d3f9      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013da:	f7ff ffb7 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f007 f935 	bl	800864c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e2:	f7fe ff4d 	bl	8000280 <main>
  bx lr
 80013e6:	4770      	bx	lr
  ldr r3, =_sidata
 80013e8:	08008840 	.word	0x08008840
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013f0:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80013f4:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80013f8:	20004784 	.word	0x20004784

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f001 fae5 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fed8 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fcc0 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000000c 	.word	0x2000000c
 800144c:	200046d8 	.word	0x200046d8

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200046d8 	.word	0x200046d8

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_Delay+0x40>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000000c 	.word	0x2000000c

080014a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0be      	b.n	8001648 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fc94 	bl	8000e14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 faf7 	bl	8001ae0 <ADC_ConversionStop_Disable>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8099 	bne.w	8001636 <HAL_ADC_Init+0x18e>
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8095 	bne.w	8001636 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001528:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7b1b      	ldrb	r3, [r3, #12]
 800152e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001530:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4313      	orrs	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001540:	d003      	beq.n	800154a <HAL_ADC_Init+0xa2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_ADC_Init+0xa8>
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	e000      	b.n	8001552 <HAL_ADC_Init+0xaa>
 8001550:	2300      	movs	r3, #0
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7d1b      	ldrb	r3, [r3, #20]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d119      	bne.n	8001594 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	3b01      	subs	r3, #1
 800156e:	035a      	lsls	r2, r3, #13
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e00b      	b.n	8001594 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_ADC_Init+0x1a8>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_Init+0x126>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d104      	bne.n	80015d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051b      	lsls	r3, r3, #20
 80015d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_ADC_Init+0x1ac>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10b      	bne.n	8001614 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001612:	e018      	b.n	8001646 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f023 0312 	bic.w	r3, r3, #18
 800161c:	f043 0210 	orr.w	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001634:	e007      	b.n	8001646 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001646:	7dfb      	ldrb	r3, [r7, #23]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	ffe1f7fd 	.word	0xffe1f7fd
 8001654:	ff1f0efe 	.word	0xff1f0efe

08001658 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a64      	ldr	r2, [pc, #400]	; (8001800 <HAL_ADC_Start_DMA+0x1a8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d004      	beq.n	800167c <HAL_ADC_Start_DMA+0x24>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a63      	ldr	r2, [pc, #396]	; (8001804 <HAL_ADC_Start_DMA+0x1ac>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d106      	bne.n	800168a <HAL_ADC_Start_DMA+0x32>
 800167c:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_ADC_Start_DMA+0x1a8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 80b3 	bne.w	80017f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_Start_DMA+0x40>
 8001694:	2302      	movs	r3, #2
 8001696:	e0ae      	b.n	80017f6 <HAL_ADC_Start_DMA+0x19e>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f9cb 	bl	8001a3c <ADC_Enable>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 809a 	bne.w	80017e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_ADC_Start_DMA+0x1ac>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d105      	bne.n	80016dc <HAL_ADC_Start_DMA+0x84>
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_ADC_Start_DMA+0x1a8>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d115      	bne.n	8001708 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d026      	beq.n	8001744 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001706:	e01d      	b.n	8001744 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a39      	ldr	r2, [pc, #228]	; (8001800 <HAL_ADC_Start_DMA+0x1a8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_ADC_Start_DMA+0xd0>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a38      	ldr	r2, [pc, #224]	; (8001804 <HAL_ADC_Start_DMA+0x1ac>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10d      	bne.n	8001744 <HAL_ADC_Start_DMA+0xec>
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_ADC_Start_DMA+0x1a8>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800173c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f023 0206 	bic.w	r2, r3, #6
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
 800175c:	e002      	b.n	8001764 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a25      	ldr	r2, [pc, #148]	; (8001808 <HAL_ADC_Start_DMA+0x1b0>)
 8001772:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a24      	ldr	r2, [pc, #144]	; (800180c <HAL_ADC_Start_DMA+0x1b4>)
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <HAL_ADC_Start_DMA+0x1b8>)
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0202 	mvn.w	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800179c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a18      	ldr	r0, [r3, #32]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	334c      	adds	r3, #76	; 0x4c
 80017a8:	4619      	mov	r1, r3
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f001 f9a7 	bl	8002b00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017c0:	d108      	bne.n	80017d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017d2:	e00f      	b.n	80017f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017e4:	e006      	b.n	80017f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012400 	.word	0x40012400
 8001804:	40012800 	.word	0x40012800
 8001808:	08001b55 	.word	0x08001b55
 800180c:	08001bd1 	.word	0x08001bd1
 8001810:	08001bed 	.word	0x08001bed

08001814 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x20>
 8001868:	2302      	movs	r3, #2
 800186a:	e0dc      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1da>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b06      	cmp	r3, #6
 800187a:	d81c      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b05      	subs	r3, #5
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b05      	subs	r3, #5
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
 80018b4:	e03c      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d81c      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b23      	subs	r3, #35	; 0x23
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b23      	subs	r3, #35	; 0x23
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
 80018f6:	e01b      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	4019      	ands	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	; 0x41
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d91c      	bls.n	8001972 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	3b1e      	subs	r3, #30
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e019      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6919      	ldr	r1, [r3, #16]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6898      	ldr	r0, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	2b11      	cmp	r3, #17
 80019b4:	d132      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_ADC_ConfigChannel+0x1e4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d125      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d126      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_ADC_ConfigChannel+0x1e8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_ADC_ConfigChannel+0x1ec>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9a      	lsrs	r2, r3, #18
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1b2>
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40012400 	.word	0x40012400
 8001a34:	20000004 	.word	0x20000004
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d039      	beq.n	8001ace <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <ADC_Enable+0x9c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <ADC_Enable+0xa0>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a78:	e002      	b.n	8001a80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a86:	f7ff fce3 	bl	8001450 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a8c:	e018      	b.n	8001ac0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a8e:	f7ff fcdf 	bl	8001450 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d911      	bls.n	8001ac0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f043 0210 	orr.w	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e007      	b.n	8001ad0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d1df      	bne.n	8001a8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d127      	bne.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0a:	f7ff fca1 	bl	8001450 <HAL_GetTick>
 8001b0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	e014      	b.n	8001b3c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b12:	f7ff fc9d 	bl	8001450 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d90d      	bls.n	8001b3c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e007      	b.n	8001b4c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d0e3      	beq.n	8001b12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d127      	bne.n	8001bbe <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b88:	d115      	bne.n	8001bb6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d111      	bne.n	8001bb6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fe2c 	bl	8001814 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bbc:	e004      	b.n	8001bc8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fe21 	bl	8001826 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f043 0204 	orr.w	r2, r3, #4
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fe10 	bl	8001838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0ed      	b.n	8001e0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff f950 	bl	8000ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0202 	bic.w	r2, r2, #2
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c54:	f7ff fbfc 	bl	8001450 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c5a:	e012      	b.n	8001c82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c5c:	f7ff fbf8 	bl	8001450 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b0a      	cmp	r3, #10
 8001c68:	d90b      	bls.n	8001c82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0c5      	b.n	8001e0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e5      	bne.n	8001c5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca0:	f7ff fbd6 	bl	8001450 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca6:	e012      	b.n	8001cce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca8:	f7ff fbd2 	bl	8001450 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d90b      	bls.n	8001cce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e09f      	b.n	8001e0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0e5      	beq.n	8001ca8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e1b      	ldrb	r3, [r3, #24]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d108      	bne.n	8001cf6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e5b      	ldrb	r3, [r3, #25]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e007      	b.n	8001d30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e9b      	ldrb	r3, [r3, #26]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d108      	bne.n	8001d4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0220 	bic.w	r2, r2, #32
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7edb      	ldrb	r3, [r3, #27]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0210 	bic.w	r2, r2, #16
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e007      	b.n	8001d84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0210 	orr.w	r2, r2, #16
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7f1b      	ldrb	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0208 	orr.w	r2, r2, #8
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0208 	bic.w	r2, r2, #8
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7f5b      	ldrb	r3, [r3, #29]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0204 	orr.w	r2, r2, #4
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	ea42 0103 	orr.w	r1, r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_ConfigFilter+0x26>
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	f040 80aa 	bne.w	8001f90 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e42:	f043 0201 	orr.w	r2, r3, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d123      	bne.n	8001ebe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3248      	adds	r2, #72	; 0x48
 8001e9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	3348      	adds	r3, #72	; 0x48
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d122      	bne.n	8001f0c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ee6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3248      	adds	r2, #72	; 0x48
 8001eec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	3348      	adds	r3, #72	; 0x48
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f26:	e007      	b.n	8001f38 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f52:	e007      	b.n	8001f64 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f82:	f023 0201 	bic.w	r2, r3, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e006      	b.n	8001f9e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d12e      	bne.n	800201a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fa3c 	bl	8001450 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fda:	e012      	b.n	8002002 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fdc:	f7ff fa38 	bl	8001450 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	d90b      	bls.n	8002002 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e012      	b.n	8002028 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e5      	bne.n	8001fdc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e006      	b.n	8002028 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d003      	beq.n	800205c <HAL_CAN_AddTxMessage+0x2c>
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	2b02      	cmp	r3, #2
 8002058:	f040 80b8 	bne.w	80021cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80a0 	beq.w	80021bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	0e1b      	lsrs	r3, r3, #24
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d907      	bls.n	800209c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e09e      	b.n	80021da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800209c:	2201      	movs	r2, #1
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	409a      	lsls	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3318      	adds	r3, #24
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00f      	b.n	80020ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3318      	adds	r3, #24
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	440b      	add	r3, r1
 80020e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3318      	adds	r3, #24
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	3304      	adds	r3, #4
 80020fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	7d1b      	ldrb	r3, [r3, #20]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d111      	bne.n	800212a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3318      	adds	r3, #24
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3318      	adds	r3, #24
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	3304      	adds	r3, #4
 8002128:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3307      	adds	r3, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	061a      	lsls	r2, r3, #24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3306      	adds	r3, #6
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3305      	adds	r3, #5
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	4313      	orrs	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	3204      	adds	r2, #4
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	4610      	mov	r0, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	6811      	ldr	r1, [r2, #0]
 8002152:	ea43 0200 	orr.w	r2, r3, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	440b      	add	r3, r1
 800215c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002160:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3303      	adds	r3, #3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061a      	lsls	r2, r3, #24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3302      	adds	r3, #2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4313      	orrs	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4610      	mov	r0, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	6811      	ldr	r1, [r2, #0]
 8002188:	ea43 0200 	orr.w	r2, r3, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	440b      	add	r3, r1
 8002192:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002196:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3318      	adds	r3, #24
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	6811      	ldr	r1, [r2, #0]
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3318      	adds	r3, #24
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e00e      	b.n	80021da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e006      	b.n	80021da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d003      	beq.n	8002208 <HAL_CAN_GetRxMessage+0x24>
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 80f3 	bne.w	80023ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10e      	bne.n	800222c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0e7      	b.n	80023fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0d8      	b.n	80023fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	331b      	adds	r3, #27
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0204 	and.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	331b      	adds	r3, #27
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	4413      	add	r3, r2
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0d5b      	lsrs	r3, r3, #21
 8002278:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e00b      	b.n	800229a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	331b      	adds	r3, #27
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	331b      	adds	r3, #27
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0202 	and.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	331b      	adds	r3, #27
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	331b      	adds	r3, #27
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0a1a      	lsrs	r2, r3, #8
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0c1a      	lsrs	r2, r3, #16
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3302      	adds	r3, #2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3303      	adds	r3, #3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3304      	adds	r3, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0a1a      	lsrs	r2, r3, #8
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3305      	adds	r3, #5
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0c1a      	lsrs	r2, r3, #16
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3306      	adds	r3, #6
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e1a      	lsrs	r2, r3, #24
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3307      	adds	r3, #7
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d108      	bne.n	80023da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	e007      	b.n	80023ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d002      	beq.n	8002424 <HAL_CAN_ActivateNotification+0x1e>
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d109      	bne.n	8002438 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6959      	ldr	r1, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e006      	b.n	8002446 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07c      	beq.n	8002590 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d023      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f97d 	bl	80027b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80024b8:	e016      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e00c      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e002      	b.n	80024e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f980 	bl	80027e8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d024      	beq.n	800253c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f95c 	bl	80027c4 <HAL_CAN_TxMailbox1CompleteCallback>
 800250c:	e016      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	e00c      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	e002      	b.n	800253c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f95f 	bl	80027fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f93b 	bl	80027d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002560:	e016      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e00c      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e002      	b.n	8002590 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f93e 	bl	800280c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f924 	bl	800281e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fb4c 	bl	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f904 	bl	8002842 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8ec 	bl	8002830 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8ed 	bl	8002854 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8e5 	bl	8002866 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06c      	beq.n	800278a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03d      	beq.n	800278a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d038      	beq.n	800278a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	d017      	beq.n	8002752 <HAL_CAN_IRQHandler+0x302>
 8002722:	2b30      	cmp	r3, #48	; 0x30
 8002724:	d804      	bhi.n	8002730 <HAL_CAN_IRQHandler+0x2e0>
 8002726:	2b10      	cmp	r3, #16
 8002728:	d009      	beq.n	800273e <HAL_CAN_IRQHandler+0x2ee>
 800272a:	2b20      	cmp	r3, #32
 800272c:	d00c      	beq.n	8002748 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800272e:	e024      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	d018      	beq.n	8002766 <HAL_CAN_IRQHandler+0x316>
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d01b      	beq.n	8002770 <HAL_CAN_IRQHandler+0x320>
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d00f      	beq.n	800275c <HAL_CAN_IRQHandler+0x30c>
            break;
 800273c:	e01d      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f043 0308 	orr.w	r3, r3, #8
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002746:	e018      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002750:	e013      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800275a:	e00e      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002764:	e009      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276e:	e004      	b.n	800277a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002778:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002788:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f867 	bl	8002878 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
	...

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4906      	ldr	r1, [pc, #24]	; (8002924 <__NVIC_EnableIRQ+0x34>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db0a      	blt.n	8002952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	490c      	ldr	r1, [pc, #48]	; (8002974 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	440b      	add	r3, r1
 800294c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002950:	e00a      	b.n	8002968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4908      	ldr	r1, [pc, #32]	; (8002978 <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	440b      	add	r3, r1
 8002966:	761a      	strb	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	bf28      	it	cs
 800299a:	2304      	movcs	r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <NVIC_EncodePriority+0x30>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3b03      	subs	r3, #3
 80029aa:	e000      	b.n	80029ae <NVIC_EncodePriority+0x32>
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
         );
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff4f 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff64 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ffb2 	bl	800297c <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff81 	bl	8002928 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff57 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e043      	b.n	8002aea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_DMA_Init+0xa8>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <HAL_DMA_Init+0xac>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_DMA_Init+0xb0>)
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	bffdfff8 	.word	0xbffdfff8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Start_IT+0x20>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e04a      	b.n	8002bb6 <HAL_DMA_Start_IT+0xb6>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d13a      	bne.n	8002ba8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f9f3 	bl	8002f42 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 020e 	orr.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e00f      	b.n	8002b96 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 020a 	orr.w	r2, r2, #10
 8002b94:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e005      	b.n	8002bb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d008      	beq.n	8002be6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e020      	b.n	8002c28 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020e 	bic.w	r2, r2, #14
 8002bf4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d005      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e051      	b.n	8002cfa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 020e 	bic.w	r2, r2, #14
 8002c64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_DMA_Abort_IT+0xd0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d029      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0xa0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_DMA_Abort_IT+0xd4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x9c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_DMA_Abort_IT+0xd8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01a      	beq.n	8002cca <HAL_DMA_Abort_IT+0x96>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <HAL_DMA_Abort_IT+0xdc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d012      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x90>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_DMA_Abort_IT+0xe0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00a      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x8a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_DMA_Abort_IT+0xe4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d102      	bne.n	8002cb8 <HAL_DMA_Abort_IT+0x84>
 8002cb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cb6:	e00e      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	e00b      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc2:	e008      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc8:	e005      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cce:	e002      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xa2>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <HAL_DMA_Abort_IT+0xe8>)
 8002cd8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
    } 
  }
  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40020008 	.word	0x40020008
 8002d08:	4002001c 	.word	0x4002001c
 8002d0c:	40020030 	.word	0x40020030
 8002d10:	40020044 	.word	0x40020044
 8002d14:	40020058 	.word	0x40020058
 8002d18:	4002006c 	.word	0x4002006c
 8002d1c:	40020000 	.word	0x40020000

08002d20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d04f      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xc8>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04a      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a66      	ldr	r2, [pc, #408]	; (8002f10 <HAL_DMA_IRQHandler+0x1f0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d029      	beq.n	8002dce <HAL_DMA_IRQHandler+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_DMA_IRQHandler+0x1f4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_IRQHandler+0xaa>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_DMA_IRQHandler+0x1f8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xa4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a62      	ldr	r2, [pc, #392]	; (8002f1c <HAL_DMA_IRQHandler+0x1fc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d012      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x9e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a60      	ldr	r2, [pc, #384]	; (8002f20 <HAL_DMA_IRQHandler+0x200>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00a      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x98>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_DMA_IRQHandler+0x204>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d102      	bne.n	8002db2 <HAL_DMA_IRQHandler+0x92>
 8002dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002db0:	e00e      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002db6:	e00b      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002db8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dbc:	e008      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dc2:	e005      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc8:	e002      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	e000      	b.n	8002dd0 <HAL_DMA_IRQHandler+0xb0>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	4a55      	ldr	r2, [pc, #340]	; (8002f28 <HAL_DMA_IRQHandler+0x208>)
 8002dd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8094 	beq.w	8002f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002de6:	e08e      	b.n	8002f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2202      	movs	r2, #2
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d056      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x186>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d051      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020a 	bic.w	r2, r2, #10
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <HAL_DMA_IRQHandler+0x1f0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d029      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x166>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <HAL_DMA_IRQHandler+0x1f4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x162>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_DMA_IRQHandler+0x1f8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01a      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x15c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_DMA_IRQHandler+0x1fc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d012      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x156>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_DMA_IRQHandler+0x200>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00a      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x150>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <HAL_DMA_IRQHandler+0x204>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d102      	bne.n	8002e6a <HAL_DMA_IRQHandler+0x14a>
 8002e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e68:	e00e      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6e:	e00b      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e74:	e008      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7a:	e005      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e80:	e002      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e82:	2320      	movs	r3, #32
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_IRQHandler+0x168>
 8002e86:	2302      	movs	r3, #2
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_DMA_IRQHandler+0x208>)
 8002e8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d034      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ea4:	e02f      	b.n	8002f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d028      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x1e8>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 020e 	bic.w	r2, r2, #14
 8002ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
    }
  }
  return;
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
}
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40020008 	.word	0x40020008
 8002f14:	4002001c 	.word	0x4002001c
 8002f18:	40020030 	.word	0x40020030
 8002f1c:	40020044 	.word	0x40020044
 8002f20:	40020058 	.word	0x40020058
 8002f24:	4002006c 	.word	0x4002006c
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d108      	bne.n	8002f82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f80:	e007      	b.n	8002f92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b08b      	sub	sp, #44	; 0x2c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e127      	b.n	8003200 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8116 	bne.w	80031fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d034      	beq.n	8003040 <HAL_GPIO_Init+0xa4>
 8002fd6:	2b12      	cmp	r3, #18
 8002fd8:	d80d      	bhi.n	8002ff6 <HAL_GPIO_Init+0x5a>
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x9a>
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d804      	bhi.n	8002fec <HAL_GPIO_Init+0x50>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d031      	beq.n	800304a <HAL_GPIO_Init+0xae>
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d01c      	beq.n	8003024 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fea:	e048      	b.n	800307e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d043      	beq.n	8003078 <HAL_GPIO_Init+0xdc>
 8002ff0:	2b11      	cmp	r3, #17
 8002ff2:	d01b      	beq.n	800302c <HAL_GPIO_Init+0x90>
          break;
 8002ff4:	e043      	b.n	800307e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ff6:	4a89      	ldr	r2, [pc, #548]	; (800321c <HAL_GPIO_Init+0x280>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d026      	beq.n	800304a <HAL_GPIO_Init+0xae>
 8002ffc:	4a87      	ldr	r2, [pc, #540]	; (800321c <HAL_GPIO_Init+0x280>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d806      	bhi.n	8003010 <HAL_GPIO_Init+0x74>
 8003002:	4a87      	ldr	r2, [pc, #540]	; (8003220 <HAL_GPIO_Init+0x284>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d020      	beq.n	800304a <HAL_GPIO_Init+0xae>
 8003008:	4a86      	ldr	r2, [pc, #536]	; (8003224 <HAL_GPIO_Init+0x288>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_GPIO_Init+0xae>
          break;
 800300e:	e036      	b.n	800307e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003010:	4a85      	ldr	r2, [pc, #532]	; (8003228 <HAL_GPIO_Init+0x28c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0xae>
 8003016:	4a85      	ldr	r2, [pc, #532]	; (800322c <HAL_GPIO_Init+0x290>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d016      	beq.n	800304a <HAL_GPIO_Init+0xae>
 800301c:	4a84      	ldr	r2, [pc, #528]	; (8003230 <HAL_GPIO_Init+0x294>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_GPIO_Init+0xae>
          break;
 8003022:	e02c      	b.n	800307e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	623b      	str	r3, [r7, #32]
          break;
 800302a:	e028      	b.n	800307e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	3304      	adds	r3, #4
 8003032:	623b      	str	r3, [r7, #32]
          break;
 8003034:	e023      	b.n	800307e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	3308      	adds	r3, #8
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e01e      	b.n	800307e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	330c      	adds	r3, #12
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e019      	b.n	800307e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003052:	2304      	movs	r3, #4
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e012      	b.n	800307e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003060:	2308      	movs	r3, #8
 8003062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	611a      	str	r2, [r3, #16]
          break;
 800306a:	e008      	b.n	800307e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800306c:	2308      	movs	r3, #8
 800306e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	615a      	str	r2, [r3, #20]
          break;
 8003076:	e002      	b.n	800307e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2bff      	cmp	r3, #255	; 0xff
 8003082:	d801      	bhi.n	8003088 <HAL_GPIO_Init+0xec>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e001      	b.n	800308c <HAL_GPIO_Init+0xf0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2bff      	cmp	r3, #255	; 0xff
 8003092:	d802      	bhi.n	800309a <HAL_GPIO_Init+0xfe>
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x104>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	3b08      	subs	r3, #8
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	210f      	movs	r1, #15
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	401a      	ands	r2, r3
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8096 	beq.w	80031fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030ce:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_GPIO_Init+0x298>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_GPIO_Init+0x298>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6193      	str	r3, [r2, #24]
 80030da:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_GPIO_Init+0x298>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030e6:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x29c>)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_GPIO_Init+0x2a0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_GPIO_Init+0x19e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <HAL_GPIO_Init+0x2a4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00d      	beq.n	8003136 <HAL_GPIO_Init+0x19a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a49      	ldr	r2, [pc, #292]	; (8003244 <HAL_GPIO_Init+0x2a8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <HAL_GPIO_Init+0x196>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a48      	ldr	r2, [pc, #288]	; (8003248 <HAL_GPIO_Init+0x2ac>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_GPIO_Init+0x192>
 800312a:	2303      	movs	r3, #3
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x1a0>
 800312e:	2304      	movs	r3, #4
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x1a0>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x1a0>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x1a0>
 800313a:	2300      	movs	r3, #0
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800314c:	493a      	ldr	r1, [pc, #232]	; (8003238 <HAL_GPIO_Init+0x29c>)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_GPIO_Init+0x2b0>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4938      	ldr	r1, [pc, #224]	; (800324c <HAL_GPIO_Init+0x2b0>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
 8003172:	e006      	b.n	8003182 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003174:	4b35      	ldr	r3, [pc, #212]	; (800324c <HAL_GPIO_Init+0x2b0>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	43db      	mvns	r3, r3
 800317c:	4933      	ldr	r1, [pc, #204]	; (800324c <HAL_GPIO_Init+0x2b0>)
 800317e:	4013      	ands	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_GPIO_Init+0x2b0>)
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	492e      	ldr	r1, [pc, #184]	; (800324c <HAL_GPIO_Init+0x2b0>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
 800319a:	e006      	b.n	80031aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_GPIO_Init+0x2b0>)
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4929      	ldr	r1, [pc, #164]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	4924      	ldr	r1, [pc, #144]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
 80031c2:	e006      	b.n	80031d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	491f      	ldr	r1, [pc, #124]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	491a      	ldr	r1, [pc, #104]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
 80031ea:	e006      	b.n	80031fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	4915      	ldr	r1, [pc, #84]	; (800324c <HAL_GPIO_Init+0x2b0>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	3301      	adds	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	f47f aed0 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 8003210:	bf00      	nop
 8003212:	372c      	adds	r7, #44	; 0x2c
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	10210000 	.word	0x10210000
 8003220:	10110000 	.word	0x10110000
 8003224:	10120000 	.word	0x10120000
 8003228:	10310000 	.word	0x10310000
 800322c:	10320000 	.word	0x10320000
 8003230:	10220000 	.word	0x10220000
 8003234:	40021000 	.word	0x40021000
 8003238:	40010000 	.word	0x40010000
 800323c:	40010800 	.word	0x40010800
 8003240:	40010c00 	.word	0x40010c00
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	40010400 	.word	0x40010400

08003250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	887b      	ldrh	r3, [r7, #2]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	e001      	b.n	8003272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800329c:	e002      	b.n	80032a4 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	611a      	str	r2, [r3, #16]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e10f      	b.n	80034e2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fe84 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f4:	f000 ffd4 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 80032f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a7b      	ldr	r2, [pc, #492]	; (80034ec <HAL_I2C_Init+0x23c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d807      	bhi.n	8003314 <HAL_I2C_Init+0x64>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_I2C_Init+0x240>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e006      	b.n	8003322 <HAL_I2C_Init+0x72>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a77      	ldr	r2, [pc, #476]	; (80034f4 <HAL_I2C_Init+0x244>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0db      	b.n	80034e2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <HAL_I2C_Init+0x248>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a64      	ldr	r2, [pc, #400]	; (80034ec <HAL_I2C_Init+0x23c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d802      	bhi.n	8003364 <HAL_I2C_Init+0xb4>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3301      	adds	r3, #1
 8003362:	e009      	b.n	8003378 <HAL_I2C_Init+0xc8>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_I2C_Init+0x24c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	3301      	adds	r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4956      	ldr	r1, [pc, #344]	; (80034ec <HAL_I2C_Init+0x23c>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d80d      	bhi.n	80033b4 <HAL_I2C_Init+0x104>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e59      	subs	r1, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	bf38      	it	cc
 80033b0:	2304      	movcc	r3, #4
 80033b2:	e04f      	b.n	8003454 <HAL_I2C_Init+0x1a4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_I2C_Init+0x130>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	440b      	add	r3, r1
 80033ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e012      	b.n	8003406 <HAL_I2C_Init+0x156>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x15e>
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_I2C_Init+0x1a4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_I2C_Init+0x184>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1e58      	subs	r0, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	440b      	add	r3, r1
 8003424:	fbb0 f3f3 	udiv	r3, r0, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Init+0x1a4>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	6809      	ldr	r1, [r1, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003482:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6911      	ldr	r1, [r2, #16]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	000186a0 	.word	0x000186a0
 80034f0:	001e847f 	.word	0x001e847f
 80034f4:	003d08ff 	.word	0x003d08ff
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7fd ff9c 	bl	8001450 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	f040 80e0 	bne.w	80036e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	4970      	ldr	r1, [pc, #448]	; (80036f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f958 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	e0d3      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x50>
 800354c:	2302      	movs	r3, #2
 800354e:	e0cc      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d007      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2210      	movs	r2, #16
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f89c 	bl	80036fc <I2C_MasterRequestWrite>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08d      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e4:	e066      	b.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f9d2 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d107      	bne.n	800360e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d11b      	bne.n	8003688 <HAL_I2C_Master_Transmit+0x188>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f9c2 	bl	8003a16 <I2C_WaitOnBTFFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01a      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d194      	bne.n	80035e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	00100002 	.word	0x00100002
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d006      	beq.n	8003726 <I2C_MasterRequestWrite+0x2a>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d003      	beq.n	8003726 <I2C_MasterRequestWrite+0x2a>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003724:	d108      	bne.n	8003738 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00b      	b.n	8003750 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b12      	cmp	r3, #18
 800373e:	d107      	bne.n	8003750 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f843 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e035      	b.n	80037d8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d108      	bne.n	8003788 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003784:	611a      	str	r2, [r3, #16]
 8003786:	e01b      	b.n	80037c0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	11db      	asrs	r3, r3, #7
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0306 	and.w	r3, r3, #6
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f063 030f 	orn	r3, r3, #15
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <I2C_MasterRequestWrite+0xe4>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f875 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e010      	b.n	80037d8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <I2C_MasterRequestWrite+0xe8>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f865 	bl	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00010008 	.word	0x00010008
 80037e4:	00010002 	.word	0x00010002

080037e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f8:	e025      	b.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d021      	beq.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fd fe25 	bl	8001450 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10d      	bne.n	800386c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	e00c      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	429a      	cmp	r2, r3
 800388a:	d0b6      	beq.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a4:	e051      	b.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d123      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e046      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d021      	beq.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fd fda3 	bl	8001450 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d116      	bne.n	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e020      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10c      	bne.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e00b      	b.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	43da      	mvns	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d18d      	bne.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	e02d      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f878 	bl	8003a98 <I2C_IsAcknowledgeFailed>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e02d      	b.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d021      	beq.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fd fd49 	bl	8001450 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d1ca      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a22:	e02d      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f837 	bl	8003a98 <I2C_IsAcknowledgeFailed>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e02d      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d021      	beq.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fd fd08 	bl	8001450 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d1ca      	bne.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d11b      	bne.n	8003ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0204 	orr.w	r2, r3, #4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e26c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8087 	beq.w	8003c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b20:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x12c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d168      	bne.n	8003c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e246      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x76>
 8003b5c:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7f      	ldr	r2, [pc, #508]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e02e      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x98>
 8003b72:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7a      	ldr	r2, [pc, #488]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a77      	ldr	r2, [pc, #476]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xbc>
 8003b96:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a71      	ldr	r2, [pc, #452]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003bb0:	4b6b      	ldr	r3, [pc, #428]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fc3e 	bl	8001450 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fc3a 	bl	8001450 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1fa      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe4>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fc2a 	bl	8001450 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd fc26 	bl	8001450 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1e6      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x10c>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2e:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
 8003c46:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1ba      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4939      	ldr	r1, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fbdf 	bl	8001450 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd fbdb 	bl	8001450 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e19b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4927      	ldr	r1, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fbbe 	bl	8001450 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fd fbba 	bl	8001450 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e17a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fd fb9e 	bl	8001450 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fd fb9a 	bl	8001450 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e15a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f000 fb0a 	bl	8004350 <RCC_Delay>
 8003d3c:	e01c      	b.n	8003d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7fd fb84 	bl	8001450 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4a:	e00f      	b.n	8003d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fd fb80 	bl	8001450 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d908      	bls.n	8003d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e140      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	42420000 	.word	0x42420000
 8003d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b9e      	ldr	r3, [pc, #632]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e9      	bne.n	8003d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a6 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b97      	ldr	r3, [pc, #604]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	4b94      	ldr	r3, [pc, #592]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4a93      	ldr	r2, [pc, #588]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	61d3      	str	r3, [r2, #28]
 8003da2:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x4f8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a8a      	ldr	r2, [pc, #552]	; (8003fec <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fd fb41 	bl	8001450 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd fb3d 	bl	8001450 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0fd      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x312>
 8003df8:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a7a      	ldr	r2, [pc, #488]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x334>
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a75      	ldr	r2, [pc, #468]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b73      	ldr	r3, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a72      	ldr	r2, [pc, #456]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	e01c      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x356>
 8003e30:	4b6d      	ldr	r3, [pc, #436]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a6c      	ldr	r2, [pc, #432]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e4a:	4b67      	ldr	r3, [pc, #412]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6213      	str	r3, [r2, #32]
 8003e56:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4a63      	ldr	r2, [pc, #396]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd faf1 	bl	8001450 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd faed 	bl	8001450 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0ab      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCC_OscConfig+0x37e>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fadb 	bl	8001450 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fd fad7 	bl	8001450 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e095      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	4b4c      	ldr	r3, [pc, #304]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a47      	ldr	r2, [pc, #284]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8081 	beq.w	8003fde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003edc:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d061      	beq.n	8003fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d146      	bne.n	8003f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_OscConfig+0x4fc>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fd faab 	bl	8001450 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fd faa7 	bl	8001450 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e067      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d108      	bne.n	8003f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	492d      	ldr	r1, [pc, #180]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a19      	ldr	r1, [r3, #32]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	4927      	ldr	r1, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x4fc>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd fa7b 	bl	8001450 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fa77 	bl	8001450 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e037      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f70:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x46a>
 8003f7c:	e02f      	b.n	8003fde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <HAL_RCC_OscConfig+0x4fc>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd fa64 	bl	8001450 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fd fa60 	bl	8001450 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e020      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x498>
 8003faa:	e018      	b.n	8003fde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e013      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42420060 	.word	0x42420060

08003ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0d0      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4965      	ldr	r1, [pc, #404]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0b8      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a58      	ldr	r2, [pc, #352]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800405a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a52      	ldr	r2, [pc, #328]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004074:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	494d      	ldr	r1, [pc, #308]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d040      	beq.n	8004114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d115      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e07f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e073      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4b3d      	ldr	r3, [pc, #244]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e06b      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4936      	ldr	r1, [pc, #216]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e4:	f7fd f9b4 	bl	8001450 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fd f9b0 	bl	8001450 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e053      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d210      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	4922      	ldr	r1, [pc, #136]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e032      	b.n	80041aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4916      	ldr	r1, [pc, #88]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	490e      	ldr	r1, [pc, #56]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004182:	f000 f821 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004186:	4601      	mov	r1, r0
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	fa21 f303 	lsr.w	r3, r1, r3
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_RCC_ClockConfig+0x1cc>)
 800419c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd f812 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40022000 	.word	0x40022000
 80041b8:	40021000 	.word	0x40021000
 80041bc:	0800880c 	.word	0x0800880c
 80041c0:	20000004 	.word	0x20000004
 80041c4:	20000008 	.word	0x20000008

080041c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b490      	push	{r4, r7}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041d0:	1d3c      	adds	r4, r7, #4
 80041d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041f2:	4b23      	ldr	r3, [pc, #140]	; (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d002      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x40>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d003      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x46>
 8004206:	e02d      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCC_GetSysClockFreq+0xbc>)
 800420a:	623b      	str	r3, [r7, #32]
      break;
 800420c:	e02d      	b.n	800426a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	0c9b      	lsrs	r3, r3, #18
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800421a:	4413      	add	r3, r2
 800421c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004220:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c5b      	lsrs	r3, r3, #17
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800423a:	4413      	add	r3, r2
 800423c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004240:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004246:	fb02 f203 	mul.w	r2, r2, r3
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e004      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	623b      	str	r3, [r7, #32]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004266:	623b      	str	r3, [r7, #32]
      break;
 8004268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426a:	6a3b      	ldr	r3, [r7, #32]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc90      	pop	{r4, r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	08008738 	.word	0x08008738
 800427c:	08008748 	.word	0x08008748
 8004280:	40021000 	.word	0x40021000
 8004284:	007a1200 	.word	0x007a1200
 8004288:	003d0900 	.word	0x003d0900

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <HAL_RCC_GetHCLKFreq+0x10>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	20000004 	.word	0x20000004

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a4:	f7ff fff2 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042a8:	4601      	mov	r1, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4a03      	ldr	r2, [pc, #12]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800881c 	.word	0x0800881c

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042cc:	f7ff ffde 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d0:	4601      	mov	r1, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0adb      	lsrs	r3, r3, #11
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4a03      	ldr	r2, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800881c 	.word	0x0800881c

080042f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	220f      	movs	r2, #15
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_RCC_GetClockConfig+0x58>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <HAL_RCC_GetClockConfig+0x58>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_GetClockConfig+0x58>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCC_GetClockConfig+0x58>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_GetClockConfig+0x5c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0207 	and.w	r2, r3, #7
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40021000 	.word	0x40021000
 800434c:	40022000 	.word	0x40022000

08004350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <RCC_Delay+0x34>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <RCC_Delay+0x38>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0a5b      	lsrs	r3, r3, #9
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800436c:	bf00      	nop
  }
  while (Delay --);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f9      	bne.n	800436c <RCC_Delay+0x1c>
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000004 	.word	0x20000004
 8004388:	10624dd3 	.word	0x10624dd3

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d07d      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d118      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ec:	f7fd f830 	bl	8001450 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fd f82c 	bl	8001450 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e06d      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d027      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443a:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004440:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d014      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fc fffb 	bl	8001450 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fc fff7 	bl	8001450 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e036      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ee      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4917      	ldr	r1, [pc, #92]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	4313      	orrs	r3, r2
 8004490:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	490b      	ldr	r1, [pc, #44]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42420440 	.word	0x42420440

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e01d      	b.n	8004546 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f815 	bl	800454e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 f962 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b06      	cmp	r3, #6
 8004588:	d007      	beq.n	800459a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d122      	bne.n	8004602 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d11b      	bne.n	8004602 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0202 	mvn.w	r2, #2
 80045d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8ed 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 80045ee:	e005      	b.n	80045fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f8e0 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8ef 	bl	80047da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d122      	bne.n	8004656 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b04      	cmp	r3, #4
 800461c:	d11b      	bne.n	8004656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0204 	mvn.w	r2, #4
 8004626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8c3 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 8004642:	e005      	b.n	8004650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8b6 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8c5 	bl	80047da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d122      	bne.n	80046aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11b      	bne.n	80046aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0208 	mvn.w	r2, #8
 800467a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2204      	movs	r2, #4
 8004680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f899 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 8004696:	e005      	b.n	80046a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f88c 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f89b 	bl	80047da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d122      	bne.n	80046fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d11b      	bne.n	80046fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0210 	mvn.w	r2, #16
 80046ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2208      	movs	r2, #8
 80046d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f86f 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 80046ea:	e005      	b.n	80046f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f862 	bl	80047b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f871 	bl	80047da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10e      	bne.n	800472a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d107      	bne.n	800472a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 0201 	mvn.w	r2, #1
 8004722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fb23 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d10e      	bne.n	8004756 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d107      	bne.n	8004756 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f8c0 	bl	80048d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d10e      	bne.n	8004782 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d107      	bne.n	8004782 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800477a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f835 	bl	80047ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b20      	cmp	r3, #32
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d107      	bne.n	80047ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0220 	mvn.w	r2, #32
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f88b 	bl	80048c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
	...

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <TIM_Base_SetConfig+0xb8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a26      	ldr	r2, [pc, #152]	; (80048bc <TIM_Base_SetConfig+0xbc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <TIM_Base_SetConfig+0xc0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <TIM_Base_SetConfig+0xb8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <TIM_Base_SetConfig+0xbc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <TIM_Base_SetConfig+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <TIM_Base_SetConfig+0xb8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	615a      	str	r2, [r3, #20]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800

080048c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e03f      	b.n	800497a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fba6 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc0f 	bl	8005150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	f040 8083 	bne.w	8004aaa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_UART_Transmit+0x2e>
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e07b      	b.n	8004aac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Transmit+0x40>
 80049be:	2302      	movs	r3, #2
 80049c0:	e074      	b.n	8004aac <HAL_UART_Transmit+0x12a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049d8:	f7fc fd3a 	bl	8001450 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049ea:	e042      	b.n	8004a72 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a02:	d122      	bne.n	8004a4a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fa34 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e046      	b.n	8004aac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a30:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	e017      	b.n	8004a72 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3301      	adds	r3, #1
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	e013      	b.n	8004a72 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa11 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e023      	b.n	8004aac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	60ba      	str	r2, [r7, #8]
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1b7      	bne.n	80049ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2140      	movs	r1, #64	; 0x40
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f9f8 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00a      	b.n	8004aac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d140      	bne.n	8004b50 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_UART_Receive_IT+0x26>
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e039      	b.n	8004b52 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Receive_IT+0x38>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e032      	b.n	8004b52 <HAL_UART_Receive_IT+0x9e>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2222      	movs	r2, #34	; 0x22
 8004b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0220 	orr.w	r2, r2, #32
 8004b4a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004b72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d024      	beq.n	8004bdc <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d018      	beq.n	8004bdc <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fe f801 	bl	8002bbe <HAL_DMA_Abort>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe f9b0 	bl	8002f2c <HAL_DMA_GetError>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d104      	bne.n	8004bdc <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e03d      	b.n	8004c58 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d024      	beq.n	8004c34 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	2200      	movs	r2, #0
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd ffd5 	bl	8002bbe <HAL_DMA_Abort>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f984 	bl	8002f2c <HAL_DMA_GetError>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d104      	bne.n	8004c34 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e011      	b.n	8004c58 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x52>
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9ce 	bl	800504c <UART_Receive_IT>
      return;
 8004cb0:	e0cc      	b.n	8004e4c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80ab 	beq.w	8004e10 <HAL_UART_IRQHandler+0x1b0>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x70>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80a0 	beq.w	8004e10 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x90>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_UART_IRQHandler+0xb0>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_UART_IRQHandler+0xd0>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_UART_IRQHandler+0xf0>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d078      	beq.n	8004e4a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_UART_IRQHandler+0x112>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f96d 	bl	800504c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_UART_IRQHandler+0x13a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d031      	beq.n	8004dfe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8b8 	bl	8004f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d023      	beq.n	8004df6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d013      	beq.n	8004dee <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_UART_IRQHandler+0x1f4>)
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd ff2e 	bl	8002c34 <HAL_DMA_Abort_IT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004de8:	4610      	mov	r0, r2
 8004dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00e      	b.n	8004e0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f83b 	bl	8004e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e00a      	b.n	8004e0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f837 	bl	8004e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f833 	bl	8004e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004e0a:	e01e      	b.n	8004e4a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	bf00      	nop
    return;
 8004e0e:	e01c      	b.n	8004e4a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_UART_IRQHandler+0x1cc>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8a4 	bl	8004f72 <UART_Transmit_IT>
    return;
 8004e2a:	e00f      	b.n	8004e4c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_UART_IRQHandler+0x1ec>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8eb 	bl	800501c <UART_EndTransmit_IT>
    return;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_UART_IRQHandler+0x1ec>
    return;
 8004e4a:	bf00      	nop
  }
}
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08004f4b 	.word	0x08004f4b

08004e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e02c      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d028      	beq.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x30>
 8004e9c:	f7fc fad8 	bl	8001450 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d21d      	bcs.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e00f      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d0c3      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff80 	bl	8004e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b21      	cmp	r3, #33	; 0x21
 8004f84:	d144      	bne.n	8005010 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	d11a      	bne.n	8004fc6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d105      	bne.n	8004fba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	621a      	str	r2, [r3, #32]
 8004fb8:	e00e      	b.n	8004fd8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]
 8004fc4:	e008      	b.n	8004fd8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6211      	str	r1, [r2, #32]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff0b 	bl	8004e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b22      	cmp	r3, #34	; 0x22
 800505e:	d171      	bne.n	8005144 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d123      	bne.n	80050b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10e      	bne.n	8005096 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
 8005094:	e029      	b.n	80050ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	b29b      	uxth	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
 80050b0:	e01b      	b.n	80050ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6858      	ldr	r0, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	1c59      	adds	r1, r3, #1
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6291      	str	r1, [r2, #40]	; 0x28
 80050ca:	b2c2      	uxtb	r2, r0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e00c      	b.n	80050ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	1c58      	adds	r0, r3, #1
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	6288      	str	r0, [r1, #40]	; 0x28
 80050e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4619      	mov	r1, r3
 80050f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d120      	bne.n	8005140 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0220 	bic.w	r2, r2, #32
 800510c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800511c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb f86a 	bl	8000210 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e002      	b.n	8005146 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800518a:	f023 030c 	bic.w	r3, r3, #12
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	430b      	orrs	r3, r1
 8005196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a52      	ldr	r2, [pc, #328]	; (80052fc <UART_SetConfig+0x1ac>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d14e      	bne.n	8005256 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7ff f886 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 80051bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009a      	lsls	r2, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	4a4a      	ldr	r2, [pc, #296]	; (8005300 <UART_SetConfig+0x1b0>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	0119      	lsls	r1, r3, #4
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f4:	4b42      	ldr	r3, [pc, #264]	; (8005300 <UART_SetConfig+0x1b0>)
 80051f6:	fba3 0302 	umull	r0, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2064      	movs	r0, #100	; 0x64
 80051fe:	fb00 f303 	mul.w	r3, r0, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	; 0x32
 8005208:	4a3d      	ldr	r2, [pc, #244]	; (8005300 <UART_SetConfig+0x1b0>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005214:	4419      	add	r1, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009a      	lsls	r2, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	fbb2 f2f3 	udiv	r2, r2, r3
 800522c:	4b34      	ldr	r3, [pc, #208]	; (8005300 <UART_SetConfig+0x1b0>)
 800522e:	fba3 0302 	umull	r0, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2064      	movs	r0, #100	; 0x64
 8005236:	fb00 f303 	mul.w	r3, r0, r3
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	3332      	adds	r3, #50	; 0x32
 8005240:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <UART_SetConfig+0x1b0>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	440a      	add	r2, r1
 8005252:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005254:	e04d      	b.n	80052f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005256:	f7ff f823 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 800525a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4a23      	ldr	r2, [pc, #140]	; (8005300 <UART_SetConfig+0x1b0>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	0119      	lsls	r1, r3, #4
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009a      	lsls	r2, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005292:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <UART_SetConfig+0x1b0>)
 8005294:	fba3 0302 	umull	r0, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2064      	movs	r0, #100	; 0x64
 800529c:	fb00 f303 	mul.w	r3, r0, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	3332      	adds	r3, #50	; 0x32
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <UART_SetConfig+0x1b0>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b2:	4419      	add	r1, r3
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009a      	lsls	r2, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <UART_SetConfig+0x1b0>)
 80052cc:	fba3 0302 	umull	r0, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2064      	movs	r0, #100	; 0x64
 80052d4:	fb00 f303 	mul.w	r3, r0, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	; 0x32
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <UART_SetConfig+0x1b0>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	440a      	add	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40013800 	.word	0x40013800
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0208 	add.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 0208 	add.w	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 0208 	add.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d103      	bne.n	80053c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e00c      	b.n	80053da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3308      	adds	r3, #8
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e002      	b.n	80053ce <vListInsert+0x2e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d2f6      	bcs.n	80053c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6892      	ldr	r2, [r2, #8]
 8005426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6852      	ldr	r2, [r2, #4]
 8005430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d103      	bne.n	8005444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	1e5a      	subs	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
	...

08005464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	e7fe      	b.n	800548a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800548c:	f001 f8f2 	bl	8006674 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	3b01      	subs	r3, #1
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	22ff      	movs	r2, #255	; 0xff
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d114      	bne.n	800550c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01a      	beq.n	8005520 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3310      	adds	r3, #16
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fdcc 	bl	800608c <xTaskRemoveFromEventList>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <xQueueGenericReset+0xcc>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	e009      	b.n	8005520 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3310      	adds	r3, #16
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fef7 	bl	8005304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3324      	adds	r3, #36	; 0x24
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fef2 	bl	8005304 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005520:	f001 f8d6 	bl	80066d0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005524:	2301      	movs	r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <xQueueGenericCreate+0x28>
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e7fe      	b.n	800555a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e004      	b.n	8005572 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	fb02 f303 	mul.w	r3, r2, r3
 8005570:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3348      	adds	r3, #72	; 0x48
 8005576:	4618      	mov	r0, r3
 8005578:	f001 f97c 	bl	8006874 <pvPortMalloc>
 800557c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00f      	beq.n	80055a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	3348      	adds	r3, #72	; 0x48
 8005588:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005592:	79fa      	ldrb	r2, [r7, #7]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f805 	bl	80055ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055a4:	69bb      	ldr	r3, [r7, #24]
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055dc:	2101      	movs	r1, #1
 80055de:	69b8      	ldr	r0, [r7, #24]
 80055e0:	f7ff ff40 	bl	8005464 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	2073      	movs	r0, #115	; 0x73
 80055ec:	f002 f9ee 	bl	80079cc <SEGGER_SYSVIEW_RecordU32x3>
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	; 0x38
 80055fc:	af04      	add	r7, sp, #16
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <xTaskCreateStatic+0x28>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	e7fe      	b.n	800561e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <xTaskCreateStatic+0x42>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e7fe      	b.n	8005638 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800563a:	2354      	movs	r3, #84	; 0x54
 800563c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b54      	cmp	r3, #84	; 0x54
 8005642:	d009      	beq.n	8005658 <xTaskCreateStatic+0x60>
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e7fe      	b.n	8005656 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01e      	beq.n	800569c <xTaskCreateStatic+0xa4>
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800566c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005676:	2300      	movs	r3, #0
 8005678:	9303      	str	r3, [sp, #12]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	9302      	str	r3, [sp, #8]
 800567e:	f107 0314 	add.w	r3, r7, #20
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f850 	bl	8005734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005696:	f000 f8cb 	bl	8005830 <prvAddNewTaskToReadyList>
 800569a:	e001      	b.n	80056a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056a0:	697b      	ldr	r3, [r7, #20]
	}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b08c      	sub	sp, #48	; 0x30
 80056ae:	af04      	add	r7, sp, #16
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 f8d8 	bl	8006874 <pvPortMalloc>
 80056c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80056cc:	2054      	movs	r0, #84	; 0x54
 80056ce:	f001 f8d1 	bl	8006874 <pvPortMalloc>
 80056d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
 80056e0:	e005      	b.n	80056ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f001 f988 	bl	80069f8 <vPortFree>
 80056e8:	e001      	b.n	80056ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d017      	beq.n	8005724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	2300      	movs	r3, #0
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f80e 	bl	8005734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005718:	69f8      	ldr	r0, [r7, #28]
 800571a:	f000 f889 	bl	8005830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800571e:	2301      	movs	r3, #1
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e002      	b.n	800572a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005724:	f04f 33ff 	mov.w	r3, #4294967295
 8005728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800572a:	69bb      	ldr	r3, [r7, #24]
	}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800574c:	3b01      	subs	r3, #1
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <prvInitialiseNewTask+0x46>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e7fe      	b.n	8005778 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e012      	b.n	80057a6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	7819      	ldrb	r1, [r3, #0]
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	3334      	adds	r3, #52	; 0x34
 8005790:	460a      	mov	r2, r1
 8005792:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d006      	beq.n	80057ae <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d9e9      	bls.n	8005780 <prvInitialiseNewTask+0x4c>
 80057ac:	e000      	b.n	80057b0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80057ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d901      	bls.n	80057c2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057be:	2306      	movs	r3, #6
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fdb2 	bl	8005342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fdad 	bl	8005342 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	f1c3 0207 	rsb	r2, r3, #7
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2200      	movs	r2, #0
 8005802:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	69b8      	ldr	r0, [r7, #24]
 8005812:	f000 fdef 	bl	80063f4 <pxPortInitialiseStack>
 8005816:	4602      	mov	r2, r0
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005826:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005828:	bf00      	nop
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005830:	b5b0      	push	{r4, r5, r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af02      	add	r7, sp, #8
 8005836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005838:	f000 ff1c 	bl	8006674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800583c:	4b39      	ldr	r3, [pc, #228]	; (8005924 <prvAddNewTaskToReadyList+0xf4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a38      	ldr	r2, [pc, #224]	; (8005924 <prvAddNewTaskToReadyList+0xf4>)
 8005844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005846:	4b38      	ldr	r3, [pc, #224]	; (8005928 <prvAddNewTaskToReadyList+0xf8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800584e:	4a36      	ldr	r2, [pc, #216]	; (8005928 <prvAddNewTaskToReadyList+0xf8>)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005854:	4b33      	ldr	r3, [pc, #204]	; (8005924 <prvAddNewTaskToReadyList+0xf4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d110      	bne.n	800587e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800585c:	f000 fc94 	bl	8006188 <prvInitialiseTaskLists>
 8005860:	e00d      	b.n	800587e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <prvAddNewTaskToReadyList+0xfc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800586a:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <prvAddNewTaskToReadyList+0xf8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d802      	bhi.n	800587e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <prvAddNewTaskToReadyList+0xf8>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800587e:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <prvAddNewTaskToReadyList+0x100>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <prvAddNewTaskToReadyList+0x100>)
 8005886:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <prvAddNewTaskToReadyList+0x8c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	f002 fc6d 	bl	8008170 <SEGGER_SYSVIEW_OnTaskCreate>
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	461d      	mov	r5, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461c      	mov	r4, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	1ae3      	subs	r3, r4, r3
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	462b      	mov	r3, r5
 80058b8:	f001 fa58 	bl	8006d6c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4618      	mov	r0, r3
 80058c0:	f002 fcda 	bl	8008278 <SEGGER_SYSVIEW_OnTaskStartReady>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	4b19      	ldr	r3, [pc, #100]	; (8005934 <prvAddNewTaskToReadyList+0x104>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <prvAddNewTaskToReadyList+0x104>)
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <prvAddNewTaskToReadyList+0x108>)
 80058e4:	441a      	add	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7ff fd34 	bl	800535a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058f2:	f000 feed 	bl	80066d0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <prvAddNewTaskToReadyList+0xfc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <prvAddNewTaskToReadyList+0xf8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d207      	bcs.n	800591c <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvAddNewTaskToReadyList+0x10c>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bdb0      	pop	{r4, r5, r7, pc}
 8005924:	20000588 	.word	0x20000588
 8005928:	20000488 	.word	0x20000488
 800592c:	20000594 	.word	0x20000594
 8005930:	200005a4 	.word	0x200005a4
 8005934:	20000590 	.word	0x20000590
 8005938:	2000048c 	.word	0x2000048c
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005948:	f000 fe94 	bl	8006674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <vTaskDelete+0x18>
 8005952:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <vTaskDelete+0x110>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	e000      	b.n	800595a <vTaskDelete+0x1a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3304      	adds	r3, #4
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fd55 	bl	8005410 <uxListRemove>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4938      	ldr	r1, [pc, #224]	; (8005a54 <vTaskDelete+0x114>)
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <vTaskDelete+0x58>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	2201      	movs	r2, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43da      	mvns	r2, r3
 800598e:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <vTaskDelete+0x118>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4013      	ands	r3, r2
 8005994:	4a30      	ldr	r2, [pc, #192]	; (8005a58 <vTaskDelete+0x118>)
 8005996:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3318      	adds	r3, #24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fd33 	bl	8005410 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80059aa:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <vTaskDelete+0x11c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <vTaskDelete+0x11c>)
 80059b2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <vTaskDelete+0x110>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d10b      	bne.n	80059d6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4826      	ldr	r0, [pc, #152]	; (8005a60 <vTaskDelete+0x120>)
 80059c6:	f7ff fcc8 	bl	800535a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80059ca:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <vTaskDelete+0x124>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <vTaskDelete+0x124>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e009      	b.n	80059ea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <vTaskDelete+0x128>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <vTaskDelete+0x128>)
 80059de:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fc3d 	bl	8006260 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80059e6:	f000 fc69 	bl	80062bc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fce5 	bl	80083bc <SEGGER_SYSVIEW_ShrinkId>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4619      	mov	r1, r3
 80059f6:	2022      	movs	r0, #34	; 0x22
 80059f8:	f001 ff52 	bl	80078a0 <SEGGER_SYSVIEW_RecordU32>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fa1c 	bl	8006e3c <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8005a04:	f000 fe64 	bl	80066d0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005a08:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <vTaskDelete+0x12c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <vTaskDelete+0x110>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d115      	bne.n	8005a46 <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <vTaskDelete+0x130>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <vTaskDelete+0xf6>
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	e7fe      	b.n	8005a34 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <vTaskDelete+0x134>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000488 	.word	0x20000488
 8005a54:	2000048c 	.word	0x2000048c
 8005a58:	20000590 	.word	0x20000590
 8005a5c:	200005a4 	.word	0x200005a4
 8005a60:	2000055c 	.word	0x2000055c
 8005a64:	20000570 	.word	0x20000570
 8005a68:	20000588 	.word	0x20000588
 8005a6c:	20000594 	.word	0x20000594
 8005a70:	200005b0 	.word	0x200005b0
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <vTaskDelayUntil+0x28>
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e7fe      	b.n	8005a9e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <vTaskDelayUntil+0x42>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	e7fe      	b.n	8005ab8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005aba:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <vTaskDelayUntil+0xf0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <vTaskDelayUntil+0x5e>
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e7fe      	b.n	8005ad4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005ad6:	f000 f8e3 	bl	8005ca0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <vTaskDelayUntil+0xf4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d20b      	bcs.n	8005b0c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d211      	bcs.n	8005b22 <vTaskDelayUntil+0xaa>
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d90d      	bls.n	8005b22 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005b06:	2301      	movs	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	e00a      	b.n	8005b22 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d303      	bcc.n	8005b1e <vTaskDelayUntil+0xa6>
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d901      	bls.n	8005b22 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8005b2e:	2024      	movs	r0, #36	; 0x24
 8005b30:	f001 fe98 	bl	8007864 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fbe1 	bl	8006304 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005b42:	f000 f8bb 	bl	8005cbc <xTaskResumeAll>
 8005b46:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <vTaskDelayUntil+0xf8>)
 8005b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b5e:	bf00      	nop
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200005b0 	.word	0x200005b0
 8005b6c:	2000058c 	.word	0x2000058c
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01a      	beq.n	8005bbc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <vTaskDelay+0x68>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <vTaskDelay+0x2e>
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	e7fe      	b.n	8005ba0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ba2:	f000 f87d 	bl	8005ca0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	2023      	movs	r0, #35	; 0x23
 8005baa:	f001 fe79 	bl	80078a0 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fba7 	bl	8006304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb6:	f000 f881 	bl	8005cbc <xTaskResumeAll>
 8005bba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <vTaskDelay+0x6c>)
 8005bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200005b0 	.word	0x200005b0
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	1d39      	adds	r1, r7, #4
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa faee 	bl	80001dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	460a      	mov	r2, r1
 8005c12:	491d      	ldr	r1, [pc, #116]	; (8005c88 <vTaskStartScheduler+0xa4>)
 8005c14:	481d      	ldr	r0, [pc, #116]	; (8005c8c <vTaskStartScheduler+0xa8>)
 8005c16:	f7ff fcef 	bl	80055f8 <xTaskCreateStatic>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <vTaskStartScheduler+0xac>)
 8005c1e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <vTaskStartScheduler+0xac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d115      	bne.n	8005c64 <vTaskStartScheduler+0x80>
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <vTaskStartScheduler+0xb0>)
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vTaskStartScheduler+0xb4>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <vTaskStartScheduler+0xb8>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c5e:	f000 fc43 	bl	80064e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c62:	e00d      	b.n	8005c80 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d109      	bne.n	8005c80 <vTaskStartScheduler+0x9c>
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e7fe      	b.n	8005c7e <vTaskStartScheduler+0x9a>
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0800874c 	.word	0x0800874c
 8005c8c:	08006159 	.word	0x08006159
 8005c90:	200005ac 	.word	0x200005ac
 8005c94:	200005a8 	.word	0x200005a8
 8005c98:	20000594 	.word	0x20000594
 8005c9c:	2000058c 	.word	0x2000058c

08005ca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a03      	ldr	r2, [pc, #12]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200005b0 	.word	0x200005b0

08005cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cca:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <xTaskResumeAll+0x2a>
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	e7fe      	b.n	8005ce4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce6:	f000 fcc5 	bl	8006674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	4a39      	ldr	r2, [pc, #228]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005cf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf4:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d165      	bne.n	8005dc8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfc:	4b37      	ldr	r3, [pc, #220]	; (8005ddc <xTaskResumeAll+0x120>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d061      	beq.n	8005dc8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d04:	e032      	b.n	8005d6c <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <xTaskResumeAll+0x124>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3318      	adds	r3, #24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fb7c 	bl	8005410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fb77 	bl	8005410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f002 faa7 	bl	8008278 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	2201      	movs	r2, #1
 8005d30:	409a      	lsls	r2, r3
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <xTaskResumeAll+0x128>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	4a2a      	ldr	r2, [pc, #168]	; (8005de4 <xTaskResumeAll+0x128>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <xTaskResumeAll+0x12c>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7ff fb01 	bl	800535a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <xTaskResumeAll+0x130>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005d66:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <xTaskResumeAll+0x134>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6c:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <xTaskResumeAll+0x124>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1c8      	bne.n	8005d06 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d7a:	f000 fa9f 	bl	80062bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <xTaskResumeAll+0x138>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d010      	beq.n	8005dac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d8a:	f000 f857 	bl	8005e3c <xTaskIncrementTick>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d94:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <xTaskResumeAll+0x134>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f1      	bne.n	8005d8a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <xTaskResumeAll+0x138>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xTaskResumeAll+0x134>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005db8:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <xTaskResumeAll+0x13c>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dc8:	f000 fc82 	bl	80066d0 <vPortExitCritical>

	return xAlreadyYielded;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200005b0 	.word	0x200005b0
 8005ddc:	20000588 	.word	0x20000588
 8005de0:	20000548 	.word	0x20000548
 8005de4:	20000590 	.word	0x20000590
 8005de8:	2000048c 	.word	0x2000048c
 8005dec:	20000488 	.word	0x20000488
 8005df0:	2000059c 	.word	0x2000059c
 8005df4:	20000598 	.word	0x20000598
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <xTaskGetTickCount+0x18>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e08:	687b      	ldr	r3, [r7, #4]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	2000058c 	.word	0x2000058c

08005e18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e1e:	f000 fced 	bl	80067fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005e26:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <xTaskGetTickCountFromISR+0x20>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e2c:	683b      	ldr	r3, [r7, #0]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2000058c 	.word	0x2000058c

08005e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e46:	4b52      	ldr	r3, [pc, #328]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 8090 	bne.w	8005f70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <xTaskIncrementTick+0x158>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e58:	4a4e      	ldr	r2, [pc, #312]	; (8005f94 <xTaskIncrementTick+0x158>)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11f      	bne.n	8005ea4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e64:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <xTaskIncrementTick+0x46>
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	e7fe      	b.n	8005e80 <xTaskIncrementTick+0x44>
 8005e82:	4b45      	ldr	r3, [pc, #276]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	4b44      	ldr	r3, [pc, #272]	; (8005f9c <xTaskIncrementTick+0x160>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a42      	ldr	r2, [pc, #264]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4a42      	ldr	r2, [pc, #264]	; (8005f9c <xTaskIncrementTick+0x160>)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <xTaskIncrementTick+0x164>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a40      	ldr	r2, [pc, #256]	; (8005fa0 <xTaskIncrementTick+0x164>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	f000 fa0c 	bl	80062bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ea4:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <xTaskIncrementTick+0x168>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d351      	bcc.n	8005f52 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xTaskIncrementTick+0x80>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xTaskIncrementTick+0x82>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec2:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <xTaskIncrementTick+0x168>)
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	601a      	str	r2, [r3, #0]
					break;
 8005eca:	e042      	b.n	8005f52 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d203      	bcs.n	8005eec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <xTaskIncrementTick+0x168>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6013      	str	r3, [r2, #0]
						break;
 8005eea:	e032      	b.n	8005f52 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fa8d 	bl	8005410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3318      	adds	r3, #24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fa84 	bl	8005410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f002 f9b4 	bl	8008278 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	2201      	movs	r2, #1
 8005f16:	409a      	lsls	r2, r3
 8005f18:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <xTaskIncrementTick+0x16c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <xTaskIncrementTick+0x16c>)
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <xTaskIncrementTick+0x170>)
 8005f30:	441a      	add	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7ff fa0e 	bl	800535a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <xTaskIncrementTick+0x174>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3b0      	bcc.n	8005eae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f50:	e7ad      	b.n	8005eae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <xTaskIncrementTick+0x174>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4914      	ldr	r1, [pc, #80]	; (8005fac <xTaskIncrementTick+0x170>)
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d907      	bls.n	8005f7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e004      	b.n	8005f7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <xTaskIncrementTick+0x178>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a0f      	ldr	r2, [pc, #60]	; (8005fb4 <xTaskIncrementTick+0x178>)
 8005f78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <xTaskIncrementTick+0x17c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f86:	697b      	ldr	r3, [r7, #20]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	200005b0 	.word	0x200005b0
 8005f94:	2000058c 	.word	0x2000058c
 8005f98:	20000540 	.word	0x20000540
 8005f9c:	20000544 	.word	0x20000544
 8005fa0:	200005a0 	.word	0x200005a0
 8005fa4:	200005a8 	.word	0x200005a8
 8005fa8:	20000590 	.word	0x20000590
 8005fac:	2000048c 	.word	0x2000048c
 8005fb0:	20000488 	.word	0x20000488
 8005fb4:	20000598 	.word	0x20000598
 8005fb8:	2000059c 	.word	0x2000059c

08005fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <vTaskSwitchContext+0xb8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <vTaskSwitchContext+0xbc>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fd0:	e04c      	b.n	800606c <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <vTaskSwitchContext+0xbc>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fd8:	4b28      	ldr	r3, [pc, #160]	; (800607c <vTaskSwitchContext+0xc0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	f1c3 031f 	rsb	r3, r3, #31
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	4924      	ldr	r1, [pc, #144]	; (8006080 <vTaskSwitchContext+0xc4>)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	e7fe      	b.n	8006014 <vTaskSwitchContext+0x58>
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4a17      	ldr	r2, [pc, #92]	; (8006080 <vTaskSwitchContext+0xc4>)
 8006022:	4413      	add	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	3308      	adds	r3, #8
 8006038:	429a      	cmp	r2, r3
 800603a:	d104      	bne.n	8006046 <vTaskSwitchContext+0x8a>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <vTaskSwitchContext+0xc8>)
 800604e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <vTaskSwitchContext+0xc8>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <vTaskSwitchContext+0xcc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d102      	bne.n	8006062 <vTaskSwitchContext+0xa6>
 800605c:	f002 f86c 	bl	8008138 <SEGGER_SYSVIEW_OnIdle>
}
 8006060:	e004      	b.n	800606c <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8006062:	4b08      	ldr	r3, [pc, #32]	; (8006084 <vTaskSwitchContext+0xc8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f002 f8c4 	bl	80081f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200005b0 	.word	0x200005b0
 8006078:	2000059c 	.word	0x2000059c
 800607c:	20000590 	.word	0x20000590
 8006080:	2000048c 	.word	0x2000048c
 8006084:	20000488 	.word	0x20000488
 8006088:	200005ac 	.word	0x200005ac

0800608c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <xTaskRemoveFromEventList+0x2a>
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e7fe      	b.n	80060b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	3318      	adds	r3, #24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff f9a8 	bl	8005410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c0:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <xTaskRemoveFromEventList+0xb4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d120      	bne.n	800610a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff f99f 	bl	8005410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 f8cf 	bl	8008278 <SEGGER_SYSVIEW_OnTaskStartReady>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	2201      	movs	r2, #1
 80060e0:	409a      	lsls	r2, r3
 80060e2:	4b18      	ldr	r3, [pc, #96]	; (8006144 <xTaskRemoveFromEventList+0xb8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	4a16      	ldr	r2, [pc, #88]	; (8006144 <xTaskRemoveFromEventList+0xb8>)
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <xTaskRemoveFromEventList+0xbc>)
 80060fa:	441a      	add	r2, r3
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7ff f929 	bl	800535a <vListInsertEnd>
 8006108:	e005      	b.n	8006116 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	3318      	adds	r3, #24
 800610e:	4619      	mov	r1, r3
 8006110:	480e      	ldr	r0, [pc, #56]	; (800614c <xTaskRemoveFromEventList+0xc0>)
 8006112:	f7ff f922 	bl	800535a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <xTaskRemoveFromEventList+0xc4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	429a      	cmp	r2, r3
 8006122:	d905      	bls.n	8006130 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <xTaskRemoveFromEventList+0xc8>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e001      	b.n	8006134 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006134:	697b      	ldr	r3, [r7, #20]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200005b0 	.word	0x200005b0
 8006144:	20000590 	.word	0x20000590
 8006148:	2000048c 	.word	0x2000048c
 800614c:	20000548 	.word	0x20000548
 8006150:	20000488 	.word	0x20000488
 8006154:	2000059c 	.word	0x2000059c

08006158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006160:	f000 f852 	bl	8006208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <prvIdleTask+0x28>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d9f9      	bls.n	8006160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <prvIdleTask+0x2c>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800617c:	e7f0      	b.n	8006160 <prvIdleTask+0x8>
 800617e:	bf00      	nop
 8006180:	2000048c 	.word	0x2000048c
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618e:	2300      	movs	r3, #0
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	e00c      	b.n	80061ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a12      	ldr	r2, [pc, #72]	; (80061e8 <prvInitialiseTaskLists+0x60>)
 80061a0:	4413      	add	r3, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f8ae 	bl	8005304 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3301      	adds	r3, #1
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d9ef      	bls.n	8006194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061b4:	480d      	ldr	r0, [pc, #52]	; (80061ec <prvInitialiseTaskLists+0x64>)
 80061b6:	f7ff f8a5 	bl	8005304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ba:	480d      	ldr	r0, [pc, #52]	; (80061f0 <prvInitialiseTaskLists+0x68>)
 80061bc:	f7ff f8a2 	bl	8005304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061c0:	480c      	ldr	r0, [pc, #48]	; (80061f4 <prvInitialiseTaskLists+0x6c>)
 80061c2:	f7ff f89f 	bl	8005304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061c6:	480c      	ldr	r0, [pc, #48]	; (80061f8 <prvInitialiseTaskLists+0x70>)
 80061c8:	f7ff f89c 	bl	8005304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061cc:	480b      	ldr	r0, [pc, #44]	; (80061fc <prvInitialiseTaskLists+0x74>)
 80061ce:	f7ff f899 	bl	8005304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvInitialiseTaskLists+0x78>)
 80061d4:	4a05      	ldr	r2, [pc, #20]	; (80061ec <prvInitialiseTaskLists+0x64>)
 80061d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <prvInitialiseTaskLists+0x7c>)
 80061da:	4a05      	ldr	r2, [pc, #20]	; (80061f0 <prvInitialiseTaskLists+0x68>)
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2000048c 	.word	0x2000048c
 80061ec:	20000518 	.word	0x20000518
 80061f0:	2000052c 	.word	0x2000052c
 80061f4:	20000548 	.word	0x20000548
 80061f8:	2000055c 	.word	0x2000055c
 80061fc:	20000574 	.word	0x20000574
 8006200:	20000540 	.word	0x20000540
 8006204:	20000544 	.word	0x20000544

08006208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800620e:	e019      	b.n	8006244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006210:	f000 fa30 	bl	8006674 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <prvCheckTasksWaitingTermination+0x4c>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff f8f5 	bl	8005410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvCheckTasksWaitingTermination+0x50>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3b01      	subs	r3, #1
 800622c:	4a0a      	ldr	r2, [pc, #40]	; (8006258 <prvCheckTasksWaitingTermination+0x50>)
 800622e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <prvCheckTasksWaitingTermination+0x54>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3b01      	subs	r3, #1
 8006236:	4a09      	ldr	r2, [pc, #36]	; (800625c <prvCheckTasksWaitingTermination+0x54>)
 8006238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800623a:	f000 fa49 	bl	80066d0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f80e 	bl	8006260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <prvCheckTasksWaitingTermination+0x54>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e1      	bne.n	8006210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	2000055c 	.word	0x2000055c
 8006258:	20000588 	.word	0x20000588
 800625c:	20000570 	.word	0x20000570

08006260 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fbbe 	bl	80069f8 <vPortFree>
				vPortFree( pxTCB );
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fbbb 	bl	80069f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006282:	e017      	b.n	80062b4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800628a:	2b01      	cmp	r3, #1
 800628c:	d103      	bne.n	8006296 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fbb2 	bl	80069f8 <vPortFree>
	}
 8006294:	e00e      	b.n	80062b4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629c:	2b02      	cmp	r3, #2
 800629e:	d009      	beq.n	80062b4 <prvDeleteTCB+0x54>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e7fe      	b.n	80062b2 <prvDeleteTCB+0x52>
	}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c2:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <prvResetNextTaskUnblockTime+0x40>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <prvResetNextTaskUnblockTime+0x14>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <prvResetNextTaskUnblockTime+0x16>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <prvResetNextTaskUnblockTime+0x44>)
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295
 80062dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062de:	e008      	b.n	80062f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062e0:	4b06      	ldr	r3, [pc, #24]	; (80062fc <prvResetNextTaskUnblockTime+0x40>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4a04      	ldr	r2, [pc, #16]	; (8006300 <prvResetNextTaskUnblockTime+0x44>)
 80062f0:	6013      	str	r3, [r2, #0]
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	20000540 	.word	0x20000540
 8006300:	200005a8 	.word	0x200005a8

08006304 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800630e:	4b32      	ldr	r3, [pc, #200]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006314:	4b31      	ldr	r3, [pc, #196]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f878 	bl	8005410 <uxListRemove>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006326:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	2201      	movs	r2, #1
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43da      	mvns	r2, r3
 8006334:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4013      	ands	r3, r2
 800633a:	4a29      	ldr	r2, [pc, #164]	; (80063e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800633c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d110      	bne.n	8006368 <prvAddCurrentTaskToDelayedList+0x64>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800634c:	4b23      	ldr	r3, [pc, #140]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	211b      	movs	r1, #27
 8006352:	4618      	mov	r0, r3
 8006354:	f001 ffd2 	bl	80082fc <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006358:	4b20      	ldr	r3, [pc, #128]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4820      	ldr	r0, [pc, #128]	; (80063e4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006362:	f7fe fffa 	bl	800535a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006366:	e032      	b.n	80063ce <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d20f      	bcs.n	80063a0 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006380:	4b16      	ldr	r3, [pc, #88]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2104      	movs	r1, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f001 ffb8 	bl	80082fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b12      	ldr	r3, [pc, #72]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7ff f801 	bl	80053a0 <vListInsert>
}
 800639e:	e016      	b.n	80063ce <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2104      	movs	r1, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 ffa8 	bl	80082fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ac:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7fe fff1 	bl	80053a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d202      	bcs.n	80063ce <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80063c8:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2000058c 	.word	0x2000058c
 80063dc:	20000488 	.word	0x20000488
 80063e0:	20000590 	.word	0x20000590
 80063e4:	20000574 	.word	0x20000574
 80063e8:	20000544 	.word	0x20000544
 80063ec:	20000540 	.word	0x20000540
 80063f0:	200005a8 	.word	0x200005a8

080063f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3b04      	subs	r3, #4
 8006404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800640c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b04      	subs	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3b04      	subs	r3, #4
 8006422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <pxPortInitialiseStack+0x54>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b14      	subs	r3, #20
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b20      	subs	r3, #32
 800643a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	0800644d 	.word	0x0800644d

0800644c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <prvTaskExitError+0x4c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d009      	beq.n	8006474 <prvTaskExitError+0x28>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e7fe      	b.n	8006472 <prvTaskExitError+0x26>
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006486:	bf00      	nop
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0fc      	beq.n	8006488 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	20000010 	.word	0x20000010
 800649c:	00000000 	.word	0x00000000

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80064be:	4770      	bx	lr

080064c0 <pxCurrentTCBConst2>:
 80064c0:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064c8:	4806      	ldr	r0, [pc, #24]	; (80064e4 <prvPortStartFirstTask+0x1c>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	b662      	cpsie	i
 80064d4:	b661      	cpsie	f
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	df00      	svc	0
 80064e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064e2:	bf00      	nop
 80064e4:	e000ed08 	.word	0xe000ed08

080064e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <xPortStartScheduler+0xcc>)
 80064f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006510:	b2da      	uxtb	r2, r3
 8006512:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <xPortStartScheduler+0xd0>)
 8006514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006516:	4b29      	ldr	r3, [pc, #164]	; (80065bc <xPortStartScheduler+0xd4>)
 8006518:	2207      	movs	r2, #7
 800651a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800651c:	e009      	b.n	8006532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <xPortStartScheduler+0xd4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	4a25      	ldr	r2, [pc, #148]	; (80065bc <xPortStartScheduler+0xd4>)
 8006526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d0ef      	beq.n	800651e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800653e:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <xPortStartScheduler+0xd4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1c3 0307 	rsb	r3, r3, #7
 8006546:	2b04      	cmp	r3, #4
 8006548:	d009      	beq.n	800655e <xPortStartScheduler+0x76>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
 800655c:	e7fe      	b.n	800655c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800655e:	4b17      	ldr	r3, [pc, #92]	; (80065bc <xPortStartScheduler+0xd4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <xPortStartScheduler+0xd4>)
 8006566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006568:	4b14      	ldr	r3, [pc, #80]	; (80065bc <xPortStartScheduler+0xd4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006570:	4a12      	ldr	r2, [pc, #72]	; (80065bc <xPortStartScheduler+0xd4>)
 8006572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <xPortStartScheduler+0xd8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <xPortStartScheduler+0xd8>)
 8006582:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006588:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <xPortStartScheduler+0xd8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0c      	ldr	r2, [pc, #48]	; (80065c0 <xPortStartScheduler+0xd8>)
 800658e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006594:	f000 f910 	bl	80067b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <xPortStartScheduler+0xdc>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800659e:	f7ff ff93 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065a2:	f7ff fd0b 	bl	8005fbc <vTaskSwitchContext>
	prvTaskExitError();
 80065a6:	f7ff ff51 	bl	800644c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	e000e400 	.word	0xe000e400
 80065b8:	200005b4 	.word	0x200005b4
 80065bc:	200005b8 	.word	0x200005b8
 80065c0:	e000ed20 	.word	0xe000ed20
 80065c4:	20000010 	.word	0x20000010

080065c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ce:	4b26      	ldr	r3, [pc, #152]	; (8006668 <vInitPrioGroupValue+0xa0>)
 80065d0:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <vInitPrioGroupValue+0xa4>)
 80065f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065f6:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <vInitPrioGroupValue+0xa8>)
 80065f8:	2207      	movs	r2, #7
 80065fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fc:	e009      	b.n	8006612 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80065fe:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006606:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d0ef      	beq.n	80065fe <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1c3 0307 	rsb	r3, r3, #7
 8006626:	2b04      	cmp	r3, #4
 8006628:	d009      	beq.n	800663e <vInitPrioGroupValue+0x76>
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	e7fe      	b.n	800663c <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800663e:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006646:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <vInitPrioGroupValue+0xa8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <vInitPrioGroupValue+0xa8>)
 8006652:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000e400 	.word	0xe000e400
 800666c:	200005b4 	.word	0x200005b4
 8006670:	200005b8 	.word	0x200005b8

08006674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <vPortEnterCritical+0x54>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <vPortEnterCritical+0x54>)
 8006694:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <vPortEnterCritical+0x54>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10e      	bne.n	80066bc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <vPortEnterCritical+0x58>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d009      	beq.n	80066bc <vPortEnterCritical+0x48>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	e7fe      	b.n	80066ba <vPortEnterCritical+0x46>
	}
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000010 	.word	0x20000010
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <vPortExitCritical+0x48>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <vPortExitCritical+0x22>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e7fe      	b.n	80066f0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <vPortExitCritical+0x48>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <vPortExitCritical+0x48>)
 80066fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <vPortExitCritical+0x48>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <vPortExitCritical+0x3e>
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	20000010 	.word	0x20000010
 800671c:	00000000 	.word	0x00000000

08006720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006720:	f3ef 8009 	mrs	r0, PSP
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <pxCurrentTCBConst>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006730:	6010      	str	r0, [r2, #0]
 8006732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006736:	f04f 0050 	mov.w	r0, #80	; 0x50
 800673a:	f380 8811 	msr	BASEPRI, r0
 800673e:	f7ff fc3d 	bl	8005fbc <vTaskSwitchContext>
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	6808      	ldr	r0, [r1, #0]
 8006752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006756:	f380 8809 	msr	PSP, r0
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	4770      	bx	lr

08006760 <pxCurrentTCBConst>:
 8006760:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006780:	f001 fc60 	bl	8008044 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006784:	f7ff fb5a 	bl	8005e3c <xTaskIncrementTick>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800678e:	f001 fcb7 	bl	8008100 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <SysTick_Handler+0x4c>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e001      	b.n	80067a0 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800679c:	f001 fc94 	bl	80080c8 <SEGGER_SYSVIEW_RecordExitISR>
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <vPortSetupTimerInterrupt+0x30>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <vPortSetupTimerInterrupt+0x34>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <vPortSetupTimerInterrupt+0x38>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <vPortSetupTimerInterrupt+0x3c>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <vPortSetupTimerInterrupt+0x40>)
 80067d6:	3b01      	subs	r3, #1
 80067d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067da:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <vPortSetupTimerInterrupt+0x30>)
 80067dc:	2207      	movs	r2, #7
 80067de:	601a      	str	r2, [r3, #0]
}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	e000e010 	.word	0xe000e010
 80067ec:	e000e018 	.word	0xe000e018
 80067f0:	20000004 	.word	0x20000004
 80067f4:	10624dd3 	.word	0x10624dd3
 80067f8:	e000e014 	.word	0xe000e014

080067fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006802:	f3ef 8305 	mrs	r3, IPSR
 8006806:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b0f      	cmp	r3, #15
 800680c:	d913      	bls.n	8006836 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <vPortValidateInterruptPriority+0x68>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006818:	4b13      	ldr	r3, [pc, #76]	; (8006868 <vPortValidateInterruptPriority+0x6c>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	7afa      	ldrb	r2, [r7, #11]
 800681e:	429a      	cmp	r2, r3
 8006820:	d209      	bcs.n	8006836 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	e7fe      	b.n	8006834 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <vPortValidateInterruptPriority+0x70>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <vPortValidateInterruptPriority+0x74>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d909      	bls.n	800685a <vPortValidateInterruptPriority+0x5e>
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	e7fe      	b.n	8006858 <vPortValidateInterruptPriority+0x5c>
	}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	e000e3f0 	.word	0xe000e3f0
 8006868:	200005b4 	.word	0x200005b4
 800686c:	e000ed0c 	.word	0xe000ed0c
 8006870:	200005b8 	.word	0x200005b8

08006874 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006880:	f7ff fa0e 	bl	8005ca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006884:	4b57      	ldr	r3, [pc, #348]	; (80069e4 <pvPortMalloc+0x170>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800688c:	f000 f90c 	bl	8006aa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006890:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <pvPortMalloc+0x174>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 808c 	bne.w	80069b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01c      	beq.n	80068de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80068a4:	2208      	movs	r2, #8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f023 0307 	bic.w	r3, r3, #7
 80068bc:	3308      	adds	r3, #8
 80068be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <pvPortMalloc+0x6a>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e7fe      	b.n	80068dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d068      	beq.n	80069b6 <pvPortMalloc+0x142>
 80068e4:	4b41      	ldr	r3, [pc, #260]	; (80069ec <pvPortMalloc+0x178>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d863      	bhi.n	80069b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068ee:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <pvPortMalloc+0x17c>)
 80068f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068f2:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <pvPortMalloc+0x17c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068f8:	e004      	b.n	8006904 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <pvPortMalloc+0xa2>
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f1      	bne.n	80068fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006916:	4b33      	ldr	r3, [pc, #204]	; (80069e4 <pvPortMalloc+0x170>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	429a      	cmp	r2, r3
 800691e:	d04a      	beq.n	80069b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2208      	movs	r2, #8
 8006926:	4413      	add	r3, r2
 8006928:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	2308      	movs	r3, #8
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	429a      	cmp	r2, r3
 8006940:	d91e      	bls.n	8006980 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <pvPortMalloc+0xf4>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e7fe      	b.n	8006966 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800697a:	69b8      	ldr	r0, [r7, #24]
 800697c:	f000 f8f6 	bl	8006b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <pvPortMalloc+0x178>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <pvPortMalloc+0x178>)
 800698c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <pvPortMalloc+0x178>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <pvPortMalloc+0x180>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d203      	bcs.n	80069a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <pvPortMalloc+0x178>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <pvPortMalloc+0x180>)
 80069a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <pvPortMalloc+0x174>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069b6:	f7ff f981 	bl	8005cbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <pvPortMalloc+0x164>
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e7fe      	b.n	80069d6 <pvPortMalloc+0x162>
	return pvReturn;
 80069d8:	69fb      	ldr	r3, [r7, #28]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	; 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20003dc4 	.word	0x20003dc4
 80069e8:	20003dd0 	.word	0x20003dd0
 80069ec:	20003dc8 	.word	0x20003dc8
 80069f0:	20003dbc 	.word	0x20003dbc
 80069f4:	20003dcc 	.word	0x20003dcc

080069f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d046      	beq.n	8006a98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	425b      	negs	r3, r3
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <vPortFree+0xa8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <vPortFree+0x42>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e7fe      	b.n	8006a38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <vPortFree+0x5e>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	e7fe      	b.n	8006a54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <vPortFree+0xa8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d019      	beq.n	8006a98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d115      	bne.n	8006a98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortFree+0xa8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a7c:	f7ff f910 	bl	8005ca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <vPortFree+0xac>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4413      	add	r3, r2
 8006a8a:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vPortFree+0xac>)
 8006a8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f000 f86c 	bl	8006b6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a94:	f7ff f912 	bl	8005cbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20003dd0 	.word	0x20003dd0
 8006aa4:	20003dc8 	.word	0x20003dc8

08006aa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006ab2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ab4:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <prvHeapInit+0xac>)
 8006ab6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <prvHeapInit+0xac>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006af4:	2208      	movs	r2, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0307 	bic.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <prvHeapInit+0xb4>)
 8006b08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <prvHeapInit+0xb4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvHeapInit+0xb4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <prvHeapInit+0xb4>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <prvHeapInit+0xb8>)
 8006b36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <prvHeapInit+0xbc>)
 8006b3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <prvHeapInit+0xc0>)
 8006b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b46:	601a      	str	r2, [r3, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	200005bc 	.word	0x200005bc
 8006b58:	20003dbc 	.word	0x20003dbc
 8006b5c:	20003dc4 	.word	0x20003dc4
 8006b60:	20003dcc 	.word	0x20003dcc
 8006b64:	20003dc8 	.word	0x20003dc8
 8006b68:	20003dd0 	.word	0x20003dd0

08006b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b74:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <prvInsertBlockIntoFreeList+0xa8>)
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e002      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x14>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d8f7      	bhi.n	8006b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d108      	bne.n	8006bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d118      	bne.n	8006bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <prvInsertBlockIntoFreeList+0xac>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d00d      	beq.n	8006bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e008      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <prvInsertBlockIntoFreeList+0xac>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e003      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d002      	beq.n	8006c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr
 8006c14:	20003dbc 	.word	0x20003dbc
 8006c18:	20003dc4 	.word	0x20003dc4

08006c1c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006c20:	4803      	ldr	r0, [pc, #12]	; (8006c30 <_cbSendSystemDesc+0x14>)
 8006c22:	f001 f9bb 	bl	8007f9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006c26:	4803      	ldr	r0, [pc, #12]	; (8006c34 <_cbSendSystemDesc+0x18>)
 8006c28:	f001 f9b8 	bl	8007f9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	08008754 	.word	0x08008754
 8006c34:	08008784 	.word	0x08008784

08006c38 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <SEGGER_SYSVIEW_Conf+0x24>)
 8006c46:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <SEGGER_SYSVIEW_Conf+0x28>)
 8006c48:	f000 fdba 	bl	80077c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006c4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006c50:	f000 fdfa 	bl	8007848 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006c54:	bf00      	nop
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20000004 	.word	0x20000004
 8006c5c:	08006c1d 	.word	0x08006c1d
 8006c60:	08008824 	.word	0x08008824

08006c64 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	607b      	str	r3, [r7, #4]
 8006c6e:	e034      	b.n	8006cda <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006c70:	491e      	ldr	r1, [pc, #120]	; (8006cec <_cbSendTaskList+0x88>)
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	491a      	ldr	r1, [pc, #104]	; (8006cec <_cbSendTaskList+0x88>)
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3304      	adds	r3, #4
 8006c90:	681c      	ldr	r4, [r3, #0]
 8006c92:	4916      	ldr	r1, [pc, #88]	; (8006cec <_cbSendTaskList+0x88>)
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	681d      	ldr	r5, [r3, #0]
 8006ca4:	4911      	ldr	r1, [pc, #68]	; (8006cec <_cbSendTaskList+0x88>)
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	681e      	ldr	r6, [r3, #0]
 8006cb6:	490d      	ldr	r1, [pc, #52]	; (8006cec <_cbSendTaskList+0x88>)
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4633      	mov	r3, r6
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4621      	mov	r1, r4
 8006cd0:	f000 f970 	bl	8006fb4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <_cbSendTaskList+0x8c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3c5      	bcc.n	8006c70 <_cbSendTaskList+0xc>
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cec:	20003dd4 	.word	0x20003dd4
 8006cf0:	20003e74 	.word	0x20003e74

08006cf4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006cfa:	f7ff f88d 	bl	8005e18 <xTaskGetTickCountFromISR>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f04f 0400 	mov.w	r4, #0
 8006d04:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006d08:	e9d7 5600 	ldrd	r5, r6, [r7]
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	4634      	mov	r4, r6
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	0162      	lsls	r2, r4, #5
 8006d1a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006d1e:	0159      	lsls	r1, r3, #5
 8006d20:	460b      	mov	r3, r1
 8006d22:	4614      	mov	r4, r2
 8006d24:	1b5b      	subs	r3, r3, r5
 8006d26:	eb64 0406 	sbc.w	r4, r4, r6
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	00a2      	lsls	r2, r4, #2
 8006d34:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006d38:	0099      	lsls	r1, r3, #2
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	195b      	adds	r3, r3, r5
 8006d40:	eb44 0406 	adc.w	r4, r4, r6
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	00e2      	lsls	r2, r4, #3
 8006d4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d52:	00d9      	lsls	r1, r3, #3
 8006d54:	460b      	mov	r3, r1
 8006d56:	4614      	mov	r4, r2
 8006d58:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8006d5c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	4621      	mov	r1, r4
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006d6c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006d7a:	2205      	movs	r2, #5
 8006d7c:	492b      	ldr	r1, [pc, #172]	; (8006e2c <SYSVIEW_AddTask+0xc0>)
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f001 fc88 	bl	8008694 <memcmp>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04b      	beq.n	8006e22 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006d8a:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b07      	cmp	r3, #7
 8006d90:	d903      	bls.n	8006d9a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006d92:	4828      	ldr	r0, [pc, #160]	; (8006e34 <SYSVIEW_AddTask+0xc8>)
 8006d94:	f001 fbfe 	bl	8008594 <SEGGER_SYSVIEW_Warn>
    return;
 8006d98:	e044      	b.n	8006e24 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006d9a:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4926      	ldr	r1, [pc, #152]	; (8006e38 <SYSVIEW_AddTask+0xcc>)
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006dae:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4921      	ldr	r1, [pc, #132]	; (8006e38 <SYSVIEW_AddTask+0xcc>)
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	491b      	ldr	r1, [pc, #108]	; (8006e38 <SYSVIEW_AddTask+0xcc>)
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4916      	ldr	r1, [pc, #88]	; (8006e38 <SYSVIEW_AddTask+0xcc>)
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	330c      	adds	r3, #12
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4910      	ldr	r1, [pc, #64]	; (8006e38 <SYSVIEW_AddTask+0xcc>)
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3310      	adds	r3, #16
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006e06:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <SYSVIEW_AddTask+0xc4>)
 8006e0e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f8ca 	bl	8006fb4 <SYSVIEW_SendTaskInfo>
 8006e20:	e000      	b.n	8006e24 <SYSVIEW_AddTask+0xb8>
    return;
 8006e22:	bf00      	nop

}
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08008794 	.word	0x08008794
 8006e30:	20003e74 	.word	0x20003e74
 8006e34:	0800879c 	.word	0x0800879c
 8006e38:	20003dd4 	.word	0x20003dd4

08006e3c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8006e44:	4b59      	ldr	r3, [pc, #356]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80ab 	beq.w	8006fa4 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e00d      	b.n	8006e70 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006e54:	4956      	ldr	r1, [pc, #344]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d008      	beq.n	8006e7c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	4b4e      	ldr	r3, [pc, #312]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d3ec      	bcc.n	8006e54 <SYSVIEW_DeleteTask+0x18>
 8006e7a:	e000      	b.n	8006e7e <SYSVIEW_DeleteTask+0x42>
      break;
 8006e7c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006e7e:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d111      	bne.n	8006eae <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4a46      	ldr	r2, [pc, #280]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006e96:	4413      	add	r3, r2
 8006e98:	2214      	movs	r2, #20
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fc13 	bl	80086c8 <memset>
    _NumTasks--;
 8006ea2:	4b42      	ldr	r3, [pc, #264]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	4a40      	ldr	r2, [pc, #256]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	e07b      	b.n	8006fa6 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006eae:	4b3f      	ldr	r3, [pc, #252]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d276      	bcs.n	8006fa6 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006eb8:	4b3c      	ldr	r3, [pc, #240]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1e5a      	subs	r2, r3, #1
 8006ebe:	493c      	ldr	r1, [pc, #240]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	4838      	ldr	r0, [pc, #224]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4403      	add	r3, r0
 8006eda:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006edc:	4b33      	ldr	r3, [pc, #204]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	4933      	ldr	r1, [pc, #204]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	3304      	adds	r3, #4
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	482f      	ldr	r0, [pc, #188]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4403      	add	r3, r0
 8006f00:	3304      	adds	r3, #4
 8006f02:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006f04:	4b29      	ldr	r3, [pc, #164]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	4929      	ldr	r1, [pc, #164]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	3308      	adds	r3, #8
 8006f18:	6819      	ldr	r1, [r3, #0]
 8006f1a:	4825      	ldr	r0, [pc, #148]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4403      	add	r3, r0
 8006f28:	3308      	adds	r3, #8
 8006f2a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	491f      	ldr	r1, [pc, #124]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	330c      	adds	r3, #12
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	481b      	ldr	r0, [pc, #108]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4403      	add	r3, r0
 8006f50:	330c      	adds	r3, #12
 8006f52:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	4915      	ldr	r1, [pc, #84]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	3310      	adds	r3, #16
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	4811      	ldr	r0, [pc, #68]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4403      	add	r3, r0
 8006f78:	3310      	adds	r3, #16
 8006f7a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1e5a      	subs	r2, r3, #1
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <SYSVIEW_DeleteTask+0x174>)
 8006f8c:	4413      	add	r3, r2
 8006f8e:	2214      	movs	r2, #20
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fb98 	bl	80086c8 <memset>
    _NumTasks--;
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4a03      	ldr	r2, [pc, #12]	; (8006fac <SYSVIEW_DeleteTask+0x170>)
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e000      	b.n	8006fa6 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006fa4:	bf00      	nop
  }
}
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20003e74 	.word	0x20003e74
 8006fb0:	20003dd4 	.word	0x20003dd4

08006fb4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006fc2:	f107 0314 	add.w	r3, r7, #20
 8006fc6:	2214      	movs	r2, #20
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fb7c 	bl	80086c8 <memset>
  TaskInfo.TaskID     = TaskID;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fedf 	bl	8007dac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006fee:	bf00      	nop
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <_DoInit+0x8c>)
 8007000:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2203      	movs	r2, #3
 8007006:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2203      	movs	r2, #3
 800700c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <_DoInit+0x90>)
 8007012:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <_DoInit+0x94>)
 8007018:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007020:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a14      	ldr	r2, [pc, #80]	; (8007088 <_DoInit+0x90>)
 8007038:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a14      	ldr	r2, [pc, #80]	; (8007090 <_DoInit+0x98>)
 800703e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2210      	movs	r2, #16
 8007044:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3307      	adds	r3, #7
 800705c:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <_DoInit+0x9c>)
 800705e:	6810      	ldr	r0, [r2, #0]
 8007060:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a0c      	ldr	r2, [pc, #48]	; (8007098 <_DoInit+0xa0>)
 8007066:	6810      	ldr	r0, [r2, #0]
 8007068:	6018      	str	r0, [r3, #0]
 800706a:	8891      	ldrh	r1, [r2, #4]
 800706c:	7992      	ldrb	r2, [r2, #6]
 800706e:	8099      	strh	r1, [r3, #4]
 8007070:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	200046dc 	.word	0x200046dc
 8007088:	080087ec 	.word	0x080087ec
 800708c:	20003e78 	.word	0x20003e78
 8007090:	20004278 	.word	0x20004278
 8007094:	080087f8 	.word	0x080087f8
 8007098:	080087fc 	.word	0x080087fc

0800709c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	; 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80070a8:	4b3e      	ldr	r3, [pc, #248]	; (80071a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80070aa:	623b      	str	r3, [r7, #32]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <SEGGER_RTT_ReadNoLock+0x1e>
 80070b6:	f7ff ff9f 	bl	8006ff8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	3360      	adds	r3, #96	; 0x60
 80070c6:	4a37      	ldr	r2, [pc, #220]	; (80071a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80070c8:	4413      	add	r3, r2
 80070ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80070dc:	2300      	movs	r3, #0
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80070e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d92b      	bls.n	8007140 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bf28      	it	cs
 80070fa:	4613      	movcs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	4413      	add	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	6939      	ldr	r1, [r7, #16]
 800710c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800710e:	f001 fad0 	bl	80086b2 <memcpy>
    NumBytesRead += NumBytesRem;
 8007112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800711a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800712a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007138:	429a      	cmp	r2, r3
 800713a:	d101      	bne.n	8007140 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800713c:	2300      	movs	r3, #0
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4293      	cmp	r3, r2
 800714e:	bf28      	it	cs
 8007150:	4613      	movcs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d019      	beq.n	800718e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	4413      	add	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	6939      	ldr	r1, [r7, #16]
 8007168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716a:	f001 faa2 	bl	80086b2 <memcpy>
    NumBytesRead += NumBytesRem;
 800716e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4413      	add	r3, r2
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007198:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800719c:	4618      	mov	r0, r3
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200046dc 	.word	0x200046dc

080071a8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80071b6:	4b3c      	ldr	r3, [pc, #240]	; (80072a8 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80071c4:	f7ff ff18 	bl	8006ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 80071c8:	f3ef 8311 	mrs	r3, BASEPRI
 80071cc:	f04f 0120 	mov.w	r1, #32
 80071d0:	f381 8811 	msr	BASEPRI, r1
 80071d4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80071d6:	4b34      	ldr	r3, [pc, #208]	; (80072a8 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80071d8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80071de:	6939      	ldr	r1, [r7, #16]
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	4613      	mov	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	4413      	add	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	440b      	add	r3, r1
 80071ee:	3304      	adds	r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3301      	adds	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	429a      	cmp	r2, r3
 8007204:	dbeb      	blt.n	80071de <SEGGER_RTT_AllocUpBuffer+0x36>
 8007206:	e000      	b.n	800720a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007208:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	429a      	cmp	r2, r3
 8007212:	da3d      	bge.n	8007290 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007214:	6939      	ldr	r1, [r7, #16]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	4613      	mov	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4413      	add	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	440b      	add	r3, r1
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007228:	6939      	ldr	r1, [r7, #16]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	4613      	mov	r3, r2
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	4413      	add	r3, r2
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	440b      	add	r3, r1
 8007238:	3304      	adds	r3, #4
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800723e:	6939      	ldr	r1, [r7, #16]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	440b      	add	r3, r1
 800724c:	3320      	adds	r3, #32
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007252:	6939      	ldr	r1, [r7, #16]
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	4613      	mov	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4413      	add	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	440b      	add	r3, r1
 8007260:	3328      	adds	r3, #40	; 0x28
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007266:	6939      	ldr	r1, [r7, #16]
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	4613      	mov	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	4413      	add	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	440b      	add	r3, r1
 8007274:	3324      	adds	r3, #36	; 0x24
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800727a:	6939      	ldr	r1, [r7, #16]
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	440b      	add	r3, r1
 8007288:	332c      	adds	r3, #44	; 0x2c
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e002      	b.n	8007296 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800729c:	69fb      	ldr	r3, [r7, #28]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200046dc 	.word	0x200046dc

080072ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80072ba:	4b32      	ldr	r3, [pc, #200]	; (8007384 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80072c8:	f7ff fe96 	bl	8006ff8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80072cc:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 80072ce:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	461a      	mov	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4293      	cmp	r3, r2
 80072da:	d24b      	bcs.n	8007374 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 80072dc:	f3ef 8311 	mrs	r3, BASEPRI
 80072e0:	f04f 0120 	mov.w	r1, #32
 80072e4:	f381 8811 	msr	BASEPRI, r1
 80072e8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d031      	beq.n	8007354 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3360      	adds	r3, #96	; 0x60
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	440b      	add	r3, r1
 8007312:	3364      	adds	r3, #100	; 0x64
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007318:	6979      	ldr	r1, [r7, #20]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4613      	mov	r3, r2
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	440b      	add	r3, r1
 8007326:	3368      	adds	r3, #104	; 0x68
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800732c:	6979      	ldr	r1, [r7, #20]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4613      	mov	r3, r2
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4413      	add	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	440b      	add	r3, r1
 800733a:	3370      	adds	r3, #112	; 0x70
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4613      	mov	r3, r2
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	4413      	add	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	440b      	add	r3, r1
 800734e:	336c      	adds	r3, #108	; 0x6c
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	440b      	add	r3, r1
 8007362:	3374      	adds	r3, #116	; 0x74
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e002      	b.n	800737a <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8007374:	f04f 33ff 	mov.w	r3, #4294967295
 8007378:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800737a:	69fb      	ldr	r3, [r7, #28]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200046dc 	.word	0x200046dc

08007388 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007398:	e002      	b.n	80073a0 <_EncodeStr+0x18>
    Len++;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3301      	adds	r3, #1
 800739e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f6      	bne.n	800739a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d901      	bls.n	80073b8 <_EncodeStr+0x30>
    Len = Limit;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2bfe      	cmp	r3, #254	; 0xfe
 80073bc:	d806      	bhi.n	80073cc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	60fa      	str	r2, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e011      	b.n	80073f0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	60fa      	str	r2, [r7, #12]
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	60fa      	str	r2, [r7, #12]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	0a19      	lsrs	r1, r3, #8
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	60fa      	str	r2, [r7, #12]
 80073ec:	b2ca      	uxtb	r2, r1
 80073ee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80073f4:	e00a      	b.n	800740c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	1c53      	adds	r3, r2, #1
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1c59      	adds	r1, r3, #1
 8007400:	60f9      	str	r1, [r7, #12]
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	701a      	strb	r2, [r3, #0]
    n++;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	3301      	adds	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3f0      	bcc.n	80073f6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
	...

08007438 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800743e:	4b33      	ldr	r3, [pc, #204]	; (800750c <_HandleIncomingPacket+0xd4>)
 8007440:	7e1b      	ldrb	r3, [r3, #24]
 8007442:	4618      	mov	r0, r3
 8007444:	1cfb      	adds	r3, r7, #3
 8007446:	2201      	movs	r2, #1
 8007448:	4619      	mov	r1, r3
 800744a:	f7ff fe27 	bl	800709c <SEGGER_RTT_ReadNoLock>
 800744e:	4603      	mov	r3, r0
 8007450:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dd4d      	ble.n	80074f4 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2b05      	cmp	r3, #5
 800745c:	d022      	beq.n	80074a4 <_HandleIncomingPacket+0x6c>
 800745e:	2b05      	cmp	r3, #5
 8007460:	dc0b      	bgt.n	800747a <_HandleIncomingPacket+0x42>
 8007462:	2b02      	cmp	r3, #2
 8007464:	d015      	beq.n	8007492 <_HandleIncomingPacket+0x5a>
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc02      	bgt.n	8007470 <_HandleIncomingPacket+0x38>
 800746a:	2b01      	cmp	r3, #1
 800746c:	d00e      	beq.n	800748c <_HandleIncomingPacket+0x54>
 800746e:	e034      	b.n	80074da <_HandleIncomingPacket+0xa2>
 8007470:	2b03      	cmp	r3, #3
 8007472:	d011      	beq.n	8007498 <_HandleIncomingPacket+0x60>
 8007474:	2b04      	cmp	r3, #4
 8007476:	d012      	beq.n	800749e <_HandleIncomingPacket+0x66>
 8007478:	e02f      	b.n	80074da <_HandleIncomingPacket+0xa2>
 800747a:	2b07      	cmp	r3, #7
 800747c:	d018      	beq.n	80074b0 <_HandleIncomingPacket+0x78>
 800747e:	2b07      	cmp	r3, #7
 8007480:	db13      	blt.n	80074aa <_HandleIncomingPacket+0x72>
 8007482:	2b7f      	cmp	r3, #127	; 0x7f
 8007484:	d038      	beq.n	80074f8 <_HandleIncomingPacket+0xc0>
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d015      	beq.n	80074b6 <_HandleIncomingPacket+0x7e>
 800748a:	e026      	b.n	80074da <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800748c:	f000 fb14 	bl	8007ab8 <SEGGER_SYSVIEW_Start>
      break;
 8007490:	e037      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007492:	f000 fbcb 	bl	8007c2c <SEGGER_SYSVIEW_Stop>
      break;
 8007496:	e034      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007498:	f000 fda4 	bl	8007fe4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800749c:	e031      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800749e:	f000 fd69 	bl	8007f74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80074a2:	e02e      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80074a4:	f000 fbe8 	bl	8007c78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80074a8:	e02b      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80074aa:	f001 f835 	bl	8008518 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80074ae:	e028      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80074b0:	f001 f814 	bl	80084dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80074b4:	e025      	b.n	8007502 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <_HandleIncomingPacket+0xd4>)
 80074b8:	7e1b      	ldrb	r3, [r3, #24]
 80074ba:	4618      	mov	r0, r3
 80074bc:	1cfb      	adds	r3, r7, #3
 80074be:	2201      	movs	r2, #1
 80074c0:	4619      	mov	r1, r3
 80074c2:	f7ff fdeb 	bl	800709c <SEGGER_RTT_ReadNoLock>
 80074c6:	4603      	mov	r3, r0
 80074c8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd15      	ble.n	80074fc <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 ff82 	bl	80083dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80074d8:	e010      	b.n	80074fc <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da0e      	bge.n	8007500 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <_HandleIncomingPacket+0xd4>)
 80074e4:	7e1b      	ldrb	r3, [r3, #24]
 80074e6:	4618      	mov	r0, r3
 80074e8:	1cfb      	adds	r3, r7, #3
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	f7ff fdd5 	bl	800709c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80074f2:	e005      	b.n	8007500 <_HandleIncomingPacket+0xc8>
    }
  }
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <_HandleIncomingPacket+0xca>
      break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <_HandleIncomingPacket+0xca>
      break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <_HandleIncomingPacket+0xca>
      break;
 8007500:	bf00      	nop
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20004310 	.word	0x20004310

08007510 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	b08c      	sub	sp, #48	; 0x30
 8007514:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007516:	2301      	movs	r3, #1
 8007518:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	3301      	adds	r3, #1
 800751e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007524:	4b31      	ldr	r3, [pc, #196]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
 800752a:	e00b      	b.n	8007544 <_TrySendOverflowPacket+0x34>
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	b2da      	uxtb	r2, r3
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	09db      	lsrs	r3, r3, #7
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	2b7f      	cmp	r3, #127	; 0x7f
 8007548:	d8f0      	bhi.n	800752c <_TrySendOverflowPacket+0x1c>
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800755a:	4b25      	ldr	r3, [pc, #148]	; (80075f0 <_TrySendOverflowPacket+0xe0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	623b      	str	r3, [r7, #32]
 8007572:	e00b      	b.n	800758c <_TrySendOverflowPacket+0x7c>
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	1c59      	adds	r1, r3, #1
 800757c:	6279      	str	r1, [r7, #36]	; 0x24
 800757e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	09db      	lsrs	r3, r3, #7
 800758a:	623b      	str	r3, [r7, #32]
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b7f      	cmp	r3, #127	; 0x7f
 8007590:	d8f0      	bhi.n	8007574 <_TrySendOverflowPacket+0x64>
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	627a      	str	r2, [r7, #36]	; 0x24
 8007598:	6a3a      	ldr	r2, [r7, #32]
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	4618      	mov	r0, r3
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	1d3b      	adds	r3, r7, #4
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	1d3b      	adds	r3, r7, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	f7f8 fdcc 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80075b8:	4603      	mov	r3, r0
 80075ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80075c8:	4b08      	ldr	r3, [pc, #32]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e004      	b.n	80075e0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a03      	ldr	r2, [pc, #12]	; (80075ec <_TrySendOverflowPacket+0xdc>)
 80075de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80075e0:	693b      	ldr	r3, [r7, #16]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20004310 	.word	0x20004310
 80075f0:	e0001004 	.word	0xe0001004

080075f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007600:	4b6c      	ldr	r3, [pc, #432]	; (80077b4 <_SendPacket+0x1c0>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d010      	beq.n	800762a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007608:	4b6a      	ldr	r3, [pc, #424]	; (80077b4 <_SendPacket+0x1c0>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80a3 	beq.w	8007758 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007612:	4b68      	ldr	r3, [pc, #416]	; (80077b4 <_SendPacket+0x1c0>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d109      	bne.n	800762e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800761a:	f7ff ff79 	bl	8007510 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800761e:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <_SendPacket+0x1c0>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	f040 809a 	bne.w	800775c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007628:	e001      	b.n	800762e <_SendPacket+0x3a>
    goto Send;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <_SendPacket+0x3c>
Send:
 800762e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b1f      	cmp	r3, #31
 8007634:	d809      	bhi.n	800764a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007636:	4b5f      	ldr	r3, [pc, #380]	; (80077b4 <_SendPacket+0x1c0>)
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 808b 	bne.w	8007760 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b17      	cmp	r3, #23
 800764e:	d807      	bhi.n	8007660 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3b01      	subs	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e03d      	b.n	80076dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b7f      	cmp	r3, #127	; 0x7f
 800766c:	d912      	bls.n	8007694 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	09da      	lsrs	r2, r3, #7
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3b01      	subs	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	3a01      	subs	r2, #1
 8007686:	60fa      	str	r2, [r7, #12]
 8007688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800768c:	b2da      	uxtb	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e006      	b.n	80076a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3b01      	subs	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b7f      	cmp	r3, #127	; 0x7f
 80076a6:	d912      	bls.n	80076ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	09da      	lsrs	r2, r3, #7
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	3a01      	subs	r2, #1
 80076c0:	60fa      	str	r2, [r7, #12]
 80076c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e006      	b.n	80076dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80076dc:	4b36      	ldr	r3, [pc, #216]	; (80077b8 <_SendPacket+0x1c4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80076e2:	4b34      	ldr	r3, [pc, #208]	; (80077b4 <_SendPacket+0x1c0>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	623b      	str	r3, [r7, #32]
 80076f4:	e00b      	b.n	800770e <_SendPacket+0x11a>
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	1c59      	adds	r1, r3, #1
 80076fe:	6279      	str	r1, [r7, #36]	; 0x24
 8007700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	09db      	lsrs	r3, r3, #7
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	2b7f      	cmp	r3, #127	; 0x7f
 8007712:	d8f0      	bhi.n	80076f6 <_SendPacket+0x102>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	627a      	str	r2, [r7, #36]	; 0x24
 800771a:	6a3a      	ldr	r2, [r7, #32]
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <_SendPacket+0x1c0>)
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	4618      	mov	r0, r3
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	461a      	mov	r2, r3
 8007732:	68f9      	ldr	r1, [r7, #12]
 8007734:	f7f8 fd0c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007738:	4603      	mov	r3, r0
 800773a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007742:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <_SendPacket+0x1c0>)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	60d3      	str	r3, [r2, #12]
 8007748:	e00b      	b.n	8007762 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <_SendPacket+0x1c0>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <_SendPacket+0x1c0>)
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e004      	b.n	8007762 <_SendPacket+0x16e>
    goto SendDone;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <_SendPacket+0x16e>
      goto SendDone;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <_SendPacket+0x16e>
      goto SendDone;
 8007760:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <_SendPacket+0x1c0>)
 8007764:	7e1b      	ldrb	r3, [r3, #24]
 8007766:	4619      	mov	r1, r3
 8007768:	4a14      	ldr	r2, [pc, #80]	; (80077bc <_SendPacket+0x1c8>)
 800776a:	460b      	mov	r3, r1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	440b      	add	r3, r1
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4413      	add	r3, r2
 8007774:	336c      	adds	r3, #108	; 0x6c
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <_SendPacket+0x1c0>)
 800777a:	7e1b      	ldrb	r3, [r3, #24]
 800777c:	4618      	mov	r0, r3
 800777e:	490f      	ldr	r1, [pc, #60]	; (80077bc <_SendPacket+0x1c8>)
 8007780:	4603      	mov	r3, r0
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4403      	add	r3, r0
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	440b      	add	r3, r1
 800778a:	3370      	adds	r3, #112	; 0x70
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d00b      	beq.n	80077aa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007792:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <_SendPacket+0x1c0>)
 8007794:	789b      	ldrb	r3, [r3, #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d107      	bne.n	80077aa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <_SendPacket+0x1c0>)
 800779c:	2201      	movs	r2, #1
 800779e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80077a0:	f7ff fe4a 	bl	8007438 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80077a4:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <_SendPacket+0x1c0>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80077aa:	bf00      	nop
 80077ac:	3728      	adds	r7, #40	; 0x28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20004310 	.word	0x20004310
 80077b8:	e0001004 	.word	0xe0001004
 80077bc:	200046dc 	.word	0x200046dc

080077c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80077ce:	2300      	movs	r3, #0
 80077d0:	2280      	movs	r2, #128	; 0x80
 80077d2:	4918      	ldr	r1, [pc, #96]	; (8007834 <SEGGER_SYSVIEW_Init+0x74>)
 80077d4:	4818      	ldr	r0, [pc, #96]	; (8007838 <SEGGER_SYSVIEW_Init+0x78>)
 80077d6:	f7ff fce7 	bl	80071a8 <SEGGER_RTT_AllocUpBuffer>
 80077da:	4603      	mov	r3, r0
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	4b17      	ldr	r3, [pc, #92]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 80077e0:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 80077e4:	785a      	ldrb	r2, [r3, #1]
 80077e6:	4b15      	ldr	r3, [pc, #84]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 80077e8:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 80077ec:	7e1b      	ldrb	r3, [r3, #24]
 80077ee:	4618      	mov	r0, r3
 80077f0:	2300      	movs	r3, #0
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	2308      	movs	r3, #8
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <SEGGER_SYSVIEW_Init+0x80>)
 80077f8:	490f      	ldr	r1, [pc, #60]	; (8007838 <SEGGER_SYSVIEW_Init+0x78>)
 80077fa:	f7ff fd57 	bl	80072ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 8007800:	2200      	movs	r2, #0
 8007802:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <SEGGER_SYSVIEW_Init+0x84>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a0c      	ldr	r2, [pc, #48]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 800780a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800780c:	4a0b      	ldr	r2, [pc, #44]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007812:	4a0a      	ldr	r2, [pc, #40]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007818:	4a08      	ldr	r2, [pc, #32]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800781e:	4a07      	ldr	r2, [pc, #28]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <SEGGER_SYSVIEW_Init+0x7c>)
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20004288 	.word	0x20004288
 8007838:	08008804 	.word	0x08008804
 800783c:	20004310 	.word	0x20004310
 8007840:	20004308 	.word	0x20004308
 8007844:	e0001004 	.word	0xe0001004

08007848 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007850:	4a03      	ldr	r2, [pc, #12]	; (8007860 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6113      	str	r3, [r2, #16]
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	20004310 	.word	0x20004310

08007864 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800786c:	f3ef 8311 	mrs	r3, BASEPRI
 8007870:	f04f 0120 	mov.w	r1, #32
 8007874:	f381 8811 	msr	BASEPRI, r1
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	4808      	ldr	r0, [pc, #32]	; (800789c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800787c:	f7ff fdd0 	bl	8007420 <_PreparePacket>
 8007880:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	68b8      	ldr	r0, [r7, #8]
 8007888:	f7ff feb4 	bl	80075f4 <_SendPacket>
  RECORD_END();
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f383 8811 	msr	BASEPRI, r3
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20004340 	.word	0x20004340

080078a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80078aa:	f3ef 8311 	mrs	r3, BASEPRI
 80078ae:	f04f 0120 	mov.w	r1, #32
 80078b2:	f381 8811 	msr	BASEPRI, r1
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	4816      	ldr	r0, [pc, #88]	; (8007914 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80078ba:	f7ff fdb1 	bl	8007420 <_PreparePacket>
 80078be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	e00b      	b.n	80078e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	1c59      	adds	r1, r3, #1
 80078d6:	61f9      	str	r1, [r7, #28]
 80078d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	09db      	lsrs	r3, r3, #7
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b7f      	cmp	r3, #127	; 0x7f
 80078ea:	d8f0      	bhi.n	80078ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	61fa      	str	r2, [r7, #28]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	6938      	ldr	r0, [r7, #16]
 8007902:	f7ff fe77 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f383 8811 	msr	BASEPRI, r3
}
 800790c:	bf00      	nop
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20004340 	.word	0x20004340

08007918 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b08c      	sub	sp, #48	; 0x30
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007924:	f3ef 8311 	mrs	r3, BASEPRI
 8007928:	f04f 0120 	mov.w	r1, #32
 800792c:	f381 8811 	msr	BASEPRI, r1
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	4825      	ldr	r0, [pc, #148]	; (80079c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007934:	f7ff fd74 	bl	8007420 <_PreparePacket>
 8007938:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
 8007946:	e00b      	b.n	8007960 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	b2da      	uxtb	r2, r3
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	1c59      	adds	r1, r3, #1
 8007950:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	09db      	lsrs	r3, r3, #7
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b7f      	cmp	r3, #127	; 0x7f
 8007964:	d8f0      	bhi.n	8007948 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800796c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	623b      	str	r3, [r7, #32]
 800797e:	e00b      	b.n	8007998 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1c59      	adds	r1, r3, #1
 8007988:	6279      	str	r1, [r7, #36]	; 0x24
 800798a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	09db      	lsrs	r3, r3, #7
 8007996:	623b      	str	r3, [r7, #32]
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	2b7f      	cmp	r3, #127	; 0x7f
 800799c:	d8f0      	bhi.n	8007980 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	627a      	str	r2, [r7, #36]	; 0x24
 80079a4:	6a3a      	ldr	r2, [r7, #32]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	6979      	ldr	r1, [r7, #20]
 80079b2:	69b8      	ldr	r0, [r7, #24]
 80079b4:	f7ff fe1e 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
 80079c0:	3730      	adds	r7, #48	; 0x30
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20004340 	.word	0x20004340

080079cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08e      	sub	sp, #56	; 0x38
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80079da:	f3ef 8311 	mrs	r3, BASEPRI
 80079de:	f04f 0120 	mov.w	r1, #32
 80079e2:	f381 8811 	msr	BASEPRI, r1
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	4832      	ldr	r0, [pc, #200]	; (8007ab4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80079ea:	f7ff fd19 	bl	8007420 <_PreparePacket>
 80079ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30
 80079fc:	e00b      	b.n	8007a16 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	1c59      	adds	r1, r3, #1
 8007a06:	6379      	str	r1, [r7, #52]	; 0x34
 8007a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	09db      	lsrs	r3, r3, #7
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1a:	d8f0      	bhi.n	80079fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	637a      	str	r2, [r7, #52]	; 0x34
 8007a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a34:	e00b      	b.n	8007a4e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	1c59      	adds	r1, r3, #1
 8007a3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	09db      	lsrs	r3, r3, #7
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	2b7f      	cmp	r3, #127	; 0x7f
 8007a52:	d8f0      	bhi.n	8007a36 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	623b      	str	r3, [r7, #32]
 8007a6c:	e00b      	b.n	8007a86 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1c59      	adds	r1, r3, #1
 8007a76:	6279      	str	r1, [r7, #36]	; 0x24
 8007a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	09db      	lsrs	r3, r3, #7
 8007a84:	623b      	str	r3, [r7, #32]
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	2b7f      	cmp	r3, #127	; 0x7f
 8007a8a:	d8f0      	bhi.n	8007a6e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	627a      	str	r2, [r7, #36]	; 0x24
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	69b8      	ldr	r0, [r7, #24]
 8007aa2:	f7ff fda7 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f383 8811 	msr	BASEPRI, r3
}
 8007aac:	bf00      	nop
 8007aae:	3738      	adds	r7, #56	; 0x38
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20004340 	.word	0x20004340

08007ab8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007abe:	4b58      	ldr	r3, [pc, #352]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ac8:	f04f 0120 	mov.w	r1, #32
 8007acc:	f381 8811 	msr	BASEPRI, r1
 8007ad0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007ad2:	4b53      	ldr	r3, [pc, #332]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4952      	ldr	r1, [pc, #328]	; (8007c24 <SEGGER_SYSVIEW_Start+0x16c>)
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7f8 fb38 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007ae6:	200a      	movs	r0, #10
 8007ae8:	f7ff febc 	bl	8007864 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007aec:	f3ef 8311 	mrs	r3, BASEPRI
 8007af0:	f04f 0120 	mov.w	r1, #32
 8007af4:	f381 8811 	msr	BASEPRI, r1
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	484b      	ldr	r0, [pc, #300]	; (8007c28 <SEGGER_SYSVIEW_Start+0x170>)
 8007afc:	f7ff fc90 	bl	8007420 <_PreparePacket>
 8007b00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0a:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b10:	e00b      	b.n	8007b2a <SEGGER_SYSVIEW_Start+0x72>
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	1c59      	adds	r1, r3, #1
 8007b1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	09db      	lsrs	r3, r3, #7
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b2e:	d8f0      	bhi.n	8007b12 <SEGGER_SYSVIEW_Start+0x5a>
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
 8007b44:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	623b      	str	r3, [r7, #32]
 8007b4a:	e00b      	b.n	8007b64 <SEGGER_SYSVIEW_Start+0xac>
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	1c59      	adds	r1, r3, #1
 8007b54:	6279      	str	r1, [r7, #36]	; 0x24
 8007b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	09db      	lsrs	r3, r3, #7
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2b7f      	cmp	r3, #127	; 0x7f
 8007b68:	d8f0      	bhi.n	8007b4c <SEGGER_SYSVIEW_Start+0x94>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	627a      	str	r2, [r7, #36]	; 0x24
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	4b28      	ldr	r3, [pc, #160]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	e00b      	b.n	8007b9e <SEGGER_SYSVIEW_Start+0xe6>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	1c59      	adds	r1, r3, #1
 8007b8e:	61f9      	str	r1, [r7, #28]
 8007b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	09db      	lsrs	r3, r3, #7
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba2:	d8f0      	bhi.n	8007b86 <SEGGER_SYSVIEW_Start+0xce>
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	61fa      	str	r2, [r7, #28]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	e00b      	b.n	8007bd6 <SEGGER_SYSVIEW_Start+0x11e>
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	1c59      	adds	r1, r3, #1
 8007bc6:	6179      	str	r1, [r7, #20]
 8007bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	09db      	lsrs	r3, r3, #7
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007bda:	d8f0      	bhi.n	8007bbe <SEGGER_SYSVIEW_Start+0x106>
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	617a      	str	r2, [r7, #20]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007bec:	2218      	movs	r2, #24
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff fcff 	bl	80075f4 <_SendPacket>
      RECORD_END();
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007bfc:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <SEGGER_SYSVIEW_Start+0x168>)
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007c0a:	f000 f9eb 	bl	8007fe4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007c0e:	f000 f9b1 	bl	8007f74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007c12:	f000 fc81 	bl	8008518 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007c16:	bf00      	nop
 8007c18:	3730      	adds	r7, #48	; 0x30
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20004310 	.word	0x20004310
 8007c24:	0800882c 	.word	0x0800882c
 8007c28:	20004340 	.word	0x20004340

08007c2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c32:	f3ef 8311 	mrs	r3, BASEPRI
 8007c36:	f04f 0120 	mov.w	r1, #32
 8007c3a:	f381 8811 	msr	BASEPRI, r1
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	480b      	ldr	r0, [pc, #44]	; (8007c70 <SEGGER_SYSVIEW_Stop+0x44>)
 8007c42:	f7ff fbed 	bl	8007420 <_PreparePacket>
 8007c46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <SEGGER_SYSVIEW_Stop+0x48>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007c50:	220b      	movs	r2, #11
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6838      	ldr	r0, [r7, #0]
 8007c56:	f7ff fccd 	bl	80075f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <SEGGER_SYSVIEW_Stop+0x48>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f383 8811 	msr	BASEPRI, r3
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20004340 	.word	0x20004340
 8007c74:	20004310 	.word	0x20004310

08007c78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c82:	f04f 0120 	mov.w	r1, #32
 8007c86:	f381 8811 	msr	BASEPRI, r1
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	4845      	ldr	r0, [pc, #276]	; (8007da4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007c8e:	f7ff fbc7 	bl	8007420 <_PreparePacket>
 8007c92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9c:	4b42      	ldr	r3, [pc, #264]	; (8007da8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca2:	e00b      	b.n	8007cbc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	09db      	lsrs	r3, r3, #7
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc0:	d8f0      	bhi.n	8007ca4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd6:	4b34      	ldr	r3, [pc, #208]	; (8007da8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	e00b      	b.n	8007cf6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1c59      	adds	r1, r3, #1
 8007ce6:	6279      	str	r1, [r7, #36]	; 0x24
 8007ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	09db      	lsrs	r3, r3, #7
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8007cfa:	d8f0      	bhi.n	8007cde <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	627a      	str	r2, [r7, #36]	; 0x24
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	e00b      	b.n	8007d30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	61f9      	str	r1, [r7, #28]
 8007d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	09db      	lsrs	r3, r3, #7
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b7f      	cmp	r3, #127	; 0x7f
 8007d34:	d8f0      	bhi.n	8007d18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	61fa      	str	r2, [r7, #28]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	e00b      	b.n	8007d68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	1c59      	adds	r1, r3, #1
 8007d58:	6179      	str	r1, [r7, #20]
 8007d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d5e:	b2d2      	uxtb	r2, r2
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	09db      	lsrs	r3, r3, #7
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d6c:	d8f0      	bhi.n	8007d50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	617a      	str	r2, [r7, #20]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007d7e:	2218      	movs	r2, #24
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	68b8      	ldr	r0, [r7, #8]
 8007d84:	f7ff fc36 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	4798      	blx	r3
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3730      	adds	r7, #48	; 0x30
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20004340 	.word	0x20004340
 8007da8:	20004310 	.word	0x20004310

08007dac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b092      	sub	sp, #72	; 0x48
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007db4:	f3ef 8311 	mrs	r3, BASEPRI
 8007db8:	f04f 0120 	mov.w	r1, #32
 8007dbc:	f381 8811 	msr	BASEPRI, r1
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	486a      	ldr	r0, [pc, #424]	; (8007f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007dc4:	f7ff fb2c 	bl	8007420 <_PreparePacket>
 8007dc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b66      	ldr	r3, [pc, #408]	; (8007f70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8007dde:	e00b      	b.n	8007df8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de6:	1c59      	adds	r1, r3, #1
 8007de8:	6479      	str	r1, [r7, #68]	; 0x44
 8007dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df4:	09db      	lsrs	r3, r3, #7
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
 8007df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007dfc:	d8f0      	bhi.n	8007de0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	647a      	str	r2, [r7, #68]	; 0x44
 8007e04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e18:	e00b      	b.n	8007e32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e20:	1c59      	adds	r1, r3, #1
 8007e22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	09db      	lsrs	r3, r3, #7
 8007e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	2b7f      	cmp	r3, #127	; 0x7f
 8007e36:	d8f0      	bhi.n	8007e1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e40:	b2d2      	uxtb	r2, r2
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fa99 	bl	8007388 <_EncodeStr>
 8007e56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007e58:	2209      	movs	r2, #9
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	6938      	ldr	r0, [r7, #16]
 8007e5e:	f7ff fbc9 	bl	80075f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
 8007e76:	e00b      	b.n	8007e90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7e:	1c59      	adds	r1, r3, #1
 8007e80:	6379      	str	r1, [r7, #52]	; 0x34
 8007e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	09db      	lsrs	r3, r3, #7
 8007e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	2b7f      	cmp	r3, #127	; 0x7f
 8007e94:	d8f0      	bhi.n	8007e78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	637a      	str	r2, [r7, #52]	; 0x34
 8007e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eb0:	e00b      	b.n	8007eca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	1c59      	adds	r1, r3, #1
 8007eba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	09db      	lsrs	r3, r3, #7
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ece:	d8f0      	bhi.n	8007eb2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	e00b      	b.n	8007f04 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	6279      	str	r1, [r7, #36]	; 0x24
 8007ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	09db      	lsrs	r3, r3, #7
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b7f      	cmp	r3, #127	; 0x7f
 8007f08:	d8f0      	bhi.n	8007eec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e00b      	b.n	8007f3c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	1c59      	adds	r1, r3, #1
 8007f2c:	61f9      	str	r1, [r7, #28]
 8007f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	09db      	lsrs	r3, r3, #7
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f40:	d8f0      	bhi.n	8007f24 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	61fa      	str	r2, [r7, #28]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007f52:	2215      	movs	r2, #21
 8007f54:	68f9      	ldr	r1, [r7, #12]
 8007f56:	6938      	ldr	r0, [r7, #16]
 8007f58:	f7ff fb4c 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f383 8811 	msr	BASEPRI, r3
}
 8007f62:	bf00      	nop
 8007f64:	3748      	adds	r7, #72	; 0x48
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20004340 	.word	0x20004340
 8007f70:	20004310 	.word	0x20004310

08007f74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007f78:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007f80:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4798      	blx	r3
  }
}
 8007f92:	bf00      	nop
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20004310 	.word	0x20004310

08007f9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8007fa8:	f04f 0120 	mov.w	r1, #32
 8007fac:	f381 8811 	msr	BASEPRI, r1
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	480b      	ldr	r0, [pc, #44]	; (8007fe0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007fb4:	f7ff fa34 	bl	8007420 <_PreparePacket>
 8007fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007fba:	2280      	movs	r2, #128	; 0x80
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	6938      	ldr	r0, [r7, #16]
 8007fc0:	f7ff f9e2 	bl	8007388 <_EncodeStr>
 8007fc4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007fc6:	220e      	movs	r2, #14
 8007fc8:	68f9      	ldr	r1, [r7, #12]
 8007fca:	6938      	ldr	r0, [r7, #16]
 8007fcc:	f7ff fb12 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f383 8811 	msr	BASEPRI, r3
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20004340 	.word	0x20004340

08007fe4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d019      	beq.n	8008026 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d014      	beq.n	8008026 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4798      	blx	r3
 8008004:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008008:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800800a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	f04f 0400 	mov.w	r4, #0
 8008016:	0013      	movs	r3, r2
 8008018:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800801a:	461a      	mov	r2, r3
 800801c:	4601      	mov	r1, r0
 800801e:	200d      	movs	r0, #13
 8008020:	f7ff fc7a 	bl	8007918 <SEGGER_SYSVIEW_RecordU32x2>
 8008024:	e005      	b.n	8008032 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4619      	mov	r1, r3
 800802c:	200c      	movs	r0, #12
 800802e:	f7ff fc37 	bl	80078a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	bf00      	nop
 800803c:	20004310 	.word	0x20004310
 8008040:	e0001004 	.word	0xe0001004

08008044 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800804a:	f3ef 8311 	mrs	r3, BASEPRI
 800804e:	f04f 0120 	mov.w	r1, #32
 8008052:	f381 8811 	msr	BASEPRI, r1
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	4819      	ldr	r0, [pc, #100]	; (80080c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800805a:	f7ff f9e1 	bl	8007420 <_PreparePacket>
 800805e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e00b      	b.n	8008090 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	1c59      	adds	r1, r3, #1
 8008080:	6179      	str	r1, [r7, #20]
 8008082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	09db      	lsrs	r3, r3, #7
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b7f      	cmp	r3, #127	; 0x7f
 8008094:	d8f0      	bhi.n	8008078 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	617a      	str	r2, [r7, #20]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80080a6:	2202      	movs	r2, #2
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	68b8      	ldr	r0, [r7, #8]
 80080ac:	f7ff faa2 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f383 8811 	msr	BASEPRI, r3
}
 80080b6:	bf00      	nop
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20004340 	.word	0x20004340
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80080ce:	f3ef 8311 	mrs	r3, BASEPRI
 80080d2:	f04f 0120 	mov.w	r1, #32
 80080d6:	f381 8811 	msr	BASEPRI, r1
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	4807      	ldr	r0, [pc, #28]	; (80080fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80080de:	f7ff f99f 	bl	8007420 <_PreparePacket>
 80080e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80080e4:	2203      	movs	r2, #3
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6838      	ldr	r0, [r7, #0]
 80080ea:	f7ff fa83 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f383 8811 	msr	BASEPRI, r3
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20004340 	.word	0x20004340

08008100 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008106:	f3ef 8311 	mrs	r3, BASEPRI
 800810a:	f04f 0120 	mov.w	r1, #32
 800810e:	f381 8811 	msr	BASEPRI, r1
 8008112:	607b      	str	r3, [r7, #4]
 8008114:	4807      	ldr	r0, [pc, #28]	; (8008134 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008116:	f7ff f983 	bl	8007420 <_PreparePacket>
 800811a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800811c:	2212      	movs	r2, #18
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6838      	ldr	r0, [r7, #0]
 8008122:	f7ff fa67 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f383 8811 	msr	BASEPRI, r3
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20004340 	.word	0x20004340

08008138 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800813e:	f3ef 8311 	mrs	r3, BASEPRI
 8008142:	f04f 0120 	mov.w	r1, #32
 8008146:	f381 8811 	msr	BASEPRI, r1
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	4807      	ldr	r0, [pc, #28]	; (800816c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800814e:	f7ff f967 	bl	8007420 <_PreparePacket>
 8008152:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008154:	2211      	movs	r2, #17
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6838      	ldr	r0, [r7, #0]
 800815a:	f7ff fa4b 	bl	80075f4 <_SendPacket>
  RECORD_END();
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f383 8811 	msr	BASEPRI, r3
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20004340 	.word	0x20004340

08008170 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008178:	f3ef 8311 	mrs	r3, BASEPRI
 800817c:	f04f 0120 	mov.w	r1, #32
 8008180:	f381 8811 	msr	BASEPRI, r1
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	4819      	ldr	r0, [pc, #100]	; (80081ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008188:	f7ff f94a 	bl	8007420 <_PreparePacket>
 800818c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008192:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	61bb      	str	r3, [r7, #24]
 80081a4:	e00b      	b.n	80081be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	1c59      	adds	r1, r3, #1
 80081ae:	61f9      	str	r1, [r7, #28]
 80081b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	09db      	lsrs	r3, r3, #7
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2b7f      	cmp	r3, #127	; 0x7f
 80081c2:	d8f0      	bhi.n	80081a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	61fa      	str	r2, [r7, #28]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80081d4:	2208      	movs	r2, #8
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	6938      	ldr	r0, [r7, #16]
 80081da:	f7ff fa0b 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	bf00      	nop
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20004340 	.word	0x20004340
 80081f0:	20004310 	.word	0x20004310

080081f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80081fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008200:	f04f 0120 	mov.w	r1, #32
 8008204:	f381 8811 	msr	BASEPRI, r1
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	4819      	ldr	r0, [pc, #100]	; (8008270 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800820c:	f7ff f908 	bl	8007420 <_PreparePacket>
 8008210:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008216:	4b17      	ldr	r3, [pc, #92]	; (8008274 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	e00b      	b.n	8008242 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	b2da      	uxtb	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	1c59      	adds	r1, r3, #1
 8008232:	61f9      	str	r1, [r7, #28]
 8008234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	09db      	lsrs	r3, r3, #7
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b7f      	cmp	r3, #127	; 0x7f
 8008246:	d8f0      	bhi.n	800822a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	61fa      	str	r2, [r7, #28]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008258:	2204      	movs	r2, #4
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	6938      	ldr	r0, [r7, #16]
 800825e:	f7ff f9c9 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f383 8811 	msr	BASEPRI, r3
}
 8008268:	bf00      	nop
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20004340 	.word	0x20004340
 8008274:	20004310 	.word	0x20004310

08008278 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008280:	f3ef 8311 	mrs	r3, BASEPRI
 8008284:	f04f 0120 	mov.w	r1, #32
 8008288:	f381 8811 	msr	BASEPRI, r1
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	4819      	ldr	r0, [pc, #100]	; (80082f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008290:	f7ff f8c6 	bl	8007420 <_PreparePacket>
 8008294:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800829a:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e00b      	b.n	80082c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	1c59      	adds	r1, r3, #1
 80082b6:	61f9      	str	r1, [r7, #28]
 80082b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	09db      	lsrs	r3, r3, #7
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b7f      	cmp	r3, #127	; 0x7f
 80082ca:	d8f0      	bhi.n	80082ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	61fa      	str	r2, [r7, #28]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80082dc:	2206      	movs	r2, #6
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	6938      	ldr	r0, [r7, #16]
 80082e2:	f7ff f987 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f383 8811 	msr	BASEPRI, r3
}
 80082ec:	bf00      	nop
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20004340 	.word	0x20004340
 80082f8:	20004310 	.word	0x20004310

080082fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	; 0x28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008306:	f3ef 8311 	mrs	r3, BASEPRI
 800830a:	f04f 0120 	mov.w	r1, #32
 800830e:	f381 8811 	msr	BASEPRI, r1
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	4827      	ldr	r0, [pc, #156]	; (80083b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008316:	f7ff f883 	bl	8007420 <_PreparePacket>
 800831a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	623b      	str	r3, [r7, #32]
 8008332:	e00b      	b.n	800834c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	b2da      	uxtb	r2, r3
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	1c59      	adds	r1, r3, #1
 800833c:	6279      	str	r1, [r7, #36]	; 0x24
 800833e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	09db      	lsrs	r3, r3, #7
 800834a:	623b      	str	r3, [r7, #32]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	2b7f      	cmp	r3, #127	; 0x7f
 8008350:	d8f0      	bhi.n	8008334 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	627a      	str	r2, [r7, #36]	; 0x24
 8008358:	6a3a      	ldr	r2, [r7, #32]
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	61fb      	str	r3, [r7, #28]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	e00b      	b.n	8008384 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	1c59      	adds	r1, r3, #1
 8008374:	61f9      	str	r1, [r7, #28]
 8008376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	09db      	lsrs	r3, r3, #7
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	2b7f      	cmp	r3, #127	; 0x7f
 8008388:	d8f0      	bhi.n	800836c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	61fa      	str	r2, [r7, #28]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800839a:	2207      	movs	r2, #7
 800839c:	68f9      	ldr	r1, [r7, #12]
 800839e:	6938      	ldr	r0, [r7, #16]
 80083a0:	f7ff f928 	bl	80075f4 <_SendPacket>
  RECORD_END();
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f383 8811 	msr	BASEPRI, r3
}
 80083aa:	bf00      	nop
 80083ac:	3728      	adds	r7, #40	; 0x28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20004340 	.word	0x20004340
 80083b8:	20004310 	.word	0x20004310

080083bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80083c4:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	1ad3      	subs	r3, r2, r3
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20004310 	.word	0x20004310

080083dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08c      	sub	sp, #48	; 0x30
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80083e6:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d06d      	beq.n	80084ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80083ee:	4b39      	ldr	r3, [pc, #228]	; (80084d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80083f4:	2300      	movs	r3, #0
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f8:	e008      	b.n	800840c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	3301      	adds	r3, #1
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008410:	429a      	cmp	r2, r3
 8008412:	d3f2      	bcc.n	80083fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8008414:	e000      	b.n	8008418 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008416:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d055      	beq.n	80084ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800841e:	f3ef 8311 	mrs	r3, BASEPRI
 8008422:	f04f 0120 	mov.w	r1, #32
 8008426:	f381 8811 	msr	BASEPRI, r1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	482a      	ldr	r0, [pc, #168]	; (80084d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800842e:	f7fe fff7 	bl	8007420 <_PreparePacket>
 8008432:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	623b      	str	r3, [r7, #32]
 8008440:	e00b      	b.n	800845a <SEGGER_SYSVIEW_SendModule+0x7e>
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	6279      	str	r1, [r7, #36]	; 0x24
 800844c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	09db      	lsrs	r3, r3, #7
 8008458:	623b      	str	r3, [r7, #32]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	2b7f      	cmp	r3, #127	; 0x7f
 800845e:	d8f0      	bhi.n	8008442 <SEGGER_SYSVIEW_SendModule+0x66>
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	627a      	str	r2, [r7, #36]	; 0x24
 8008466:	6a3a      	ldr	r2, [r7, #32]
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	e00b      	b.n	8008494 <SEGGER_SYSVIEW_SendModule+0xb8>
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	b2da      	uxtb	r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	1c59      	adds	r1, r3, #1
 8008484:	61f9      	str	r1, [r7, #28]
 8008486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	09db      	lsrs	r3, r3, #7
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	2b7f      	cmp	r3, #127	; 0x7f
 8008498:	d8f0      	bhi.n	800847c <SEGGER_SYSVIEW_SendModule+0xa0>
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	61fa      	str	r2, [r7, #28]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2280      	movs	r2, #128	; 0x80
 80084b0:	4619      	mov	r1, r3
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7fe ff68 	bl	8007388 <_EncodeStr>
 80084b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80084ba:	2216      	movs	r2, #22
 80084bc:	68f9      	ldr	r1, [r7, #12]
 80084be:	6938      	ldr	r0, [r7, #16]
 80084c0:	f7ff f898 	bl	80075f4 <_SendPacket>
      RECORD_END();
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80084ca:	bf00      	nop
 80084cc:	3730      	adds	r7, #48	; 0x30
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20004338 	.word	0x20004338
 80084d8:	20004340 	.word	0x20004340

080084dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00f      	beq.n	800850a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f2      	bne.n	80084f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20004338 	.word	0x20004338

08008518 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800851e:	f3ef 8311 	mrs	r3, BASEPRI
 8008522:	f04f 0120 	mov.w	r1, #32
 8008526:	f381 8811 	msr	BASEPRI, r1
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	4817      	ldr	r0, [pc, #92]	; (800858c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800852e:	f7fe ff77 	bl	8007420 <_PreparePacket>
 8008532:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	4b14      	ldr	r3, [pc, #80]	; (8008590 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	e00b      	b.n	800855c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	b2da      	uxtb	r2, r3
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1c59      	adds	r1, r3, #1
 800854c:	6179      	str	r1, [r7, #20]
 800854e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	09db      	lsrs	r3, r3, #7
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2b7f      	cmp	r3, #127	; 0x7f
 8008560:	d8f0      	bhi.n	8008544 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	617a      	str	r2, [r7, #20]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008572:	221b      	movs	r2, #27
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f7ff f83c 	bl	80075f4 <_SendPacket>
  RECORD_END();
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f383 8811 	msr	BASEPRI, r3
}
 8008582:	bf00      	nop
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20004340 	.word	0x20004340
 8008590:	2000433c 	.word	0x2000433c

08008594 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800859c:	f3ef 8311 	mrs	r3, BASEPRI
 80085a0:	f04f 0120 	mov.w	r1, #32
 80085a4:	f381 8811 	msr	BASEPRI, r1
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	4827      	ldr	r0, [pc, #156]	; (8008648 <SEGGER_SYSVIEW_Warn+0xb4>)
 80085ac:	f7fe ff38 	bl	8007420 <_PreparePacket>
 80085b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80085b2:	2280      	movs	r2, #128	; 0x80
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	6938      	ldr	r0, [r7, #16]
 80085b8:	f7fe fee6 	bl	8007388 <_EncodeStr>
 80085bc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	627b      	str	r3, [r7, #36]	; 0x24
 80085c2:	2301      	movs	r3, #1
 80085c4:	623b      	str	r3, [r7, #32]
 80085c6:	e00b      	b.n	80085e0 <SEGGER_SYSVIEW_Warn+0x4c>
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	1c59      	adds	r1, r3, #1
 80085d0:	6279      	str	r1, [r7, #36]	; 0x24
 80085d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	09db      	lsrs	r3, r3, #7
 80085de:	623b      	str	r3, [r7, #32]
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b7f      	cmp	r3, #127	; 0x7f
 80085e4:	d8f0      	bhi.n	80085c8 <SEGGER_SYSVIEW_Warn+0x34>
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	627a      	str	r2, [r7, #36]	; 0x24
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	2300      	movs	r3, #0
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	e00b      	b.n	8008618 <SEGGER_SYSVIEW_Warn+0x84>
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	1c59      	adds	r1, r3, #1
 8008608:	61f9      	str	r1, [r7, #28]
 800860a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	09db      	lsrs	r3, r3, #7
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b7f      	cmp	r3, #127	; 0x7f
 800861c:	d8f0      	bhi.n	8008600 <SEGGER_SYSVIEW_Warn+0x6c>
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	61fa      	str	r2, [r7, #28]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800862e:	221a      	movs	r2, #26
 8008630:	68f9      	ldr	r1, [r7, #12]
 8008632:	6938      	ldr	r0, [r7, #16]
 8008634:	f7fe ffde 	bl	80075f4 <_SendPacket>
  RECORD_END();
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20004340 	.word	0x20004340

0800864c <__libc_init_array>:
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	2500      	movs	r5, #0
 8008650:	4e0c      	ldr	r6, [pc, #48]	; (8008684 <__libc_init_array+0x38>)
 8008652:	4c0d      	ldr	r4, [pc, #52]	; (8008688 <__libc_init_array+0x3c>)
 8008654:	1ba4      	subs	r4, r4, r6
 8008656:	10a4      	asrs	r4, r4, #2
 8008658:	42a5      	cmp	r5, r4
 800865a:	d109      	bne.n	8008670 <__libc_init_array+0x24>
 800865c:	f000 f83c 	bl	80086d8 <_init>
 8008660:	2500      	movs	r5, #0
 8008662:	4e0a      	ldr	r6, [pc, #40]	; (800868c <__libc_init_array+0x40>)
 8008664:	4c0a      	ldr	r4, [pc, #40]	; (8008690 <__libc_init_array+0x44>)
 8008666:	1ba4      	subs	r4, r4, r6
 8008668:	10a4      	asrs	r4, r4, #2
 800866a:	42a5      	cmp	r5, r4
 800866c:	d105      	bne.n	800867a <__libc_init_array+0x2e>
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008674:	4798      	blx	r3
 8008676:	3501      	adds	r5, #1
 8008678:	e7ee      	b.n	8008658 <__libc_init_array+0xc>
 800867a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800867e:	4798      	blx	r3
 8008680:	3501      	adds	r5, #1
 8008682:	e7f2      	b.n	800866a <__libc_init_array+0x1e>
 8008684:	08008838 	.word	0x08008838
 8008688:	08008838 	.word	0x08008838
 800868c:	08008838 	.word	0x08008838
 8008690:	0800883c 	.word	0x0800883c

08008694 <memcmp>:
 8008694:	b530      	push	{r4, r5, lr}
 8008696:	2400      	movs	r4, #0
 8008698:	42a2      	cmp	r2, r4
 800869a:	d101      	bne.n	80086a0 <memcmp+0xc>
 800869c:	2000      	movs	r0, #0
 800869e:	e007      	b.n	80086b0 <memcmp+0x1c>
 80086a0:	5d03      	ldrb	r3, [r0, r4]
 80086a2:	3401      	adds	r4, #1
 80086a4:	190d      	adds	r5, r1, r4
 80086a6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80086aa:	42ab      	cmp	r3, r5
 80086ac:	d0f4      	beq.n	8008698 <memcmp+0x4>
 80086ae:	1b58      	subs	r0, r3, r5
 80086b0:	bd30      	pop	{r4, r5, pc}

080086b2 <memcpy>:
 80086b2:	b510      	push	{r4, lr}
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	440a      	add	r2, r1
 80086b8:	4291      	cmp	r1, r2
 80086ba:	d100      	bne.n	80086be <memcpy+0xc>
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c6:	e7f7      	b.n	80086b8 <memcpy+0x6>

080086c8 <memset>:
 80086c8:	4603      	mov	r3, r0
 80086ca:	4402      	add	r2, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
