
Front_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c8  080087c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080087c8  080087c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087c8  080087c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080087d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004770  20000014  080087e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004784  080087e4  00024784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d106  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003926  00000000  00000000  0003d143  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001958  00000000  00000000  00040a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  000423c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183f9  00000000  00000000  00043b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014209  00000000  00000000  0005bf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008876c  00000000  00000000  0007016a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f88d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  000f8954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08008668 	.word	0x08008668

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08008668 	.word	0x08008668

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200046dc 	.word	0x200046dc

080001dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <vApplicationGetIdleTaskMemory+0x30>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001fa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000030 	.word	0x20000030
 800020c:	20000084 	.word	0x20000084

08000210 <HAL_UART_RxCpltCallback>:
void CAN_Filter_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if (GPS_in[0] == UBX_HEADER[0] && GPS_in[1] == UBX_HEADER[1]) {
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	22b5      	movs	r2, #181	; 0xb5
 800021e:	4293      	cmp	r3, r2
 8000220:	d11b      	bne.n	800025a <HAL_UART_RxCpltCallback+0x4a>
 8000222:	4b14      	ldr	r3, [pc, #80]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2262      	movs	r2, #98	; 0x62
 8000228:	4293      	cmp	r3, r2
 800022a:	d116      	bne.n	800025a <HAL_UART_RxCpltCallback+0x4a>
		for (int k = 0; k < 32; k++) {
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e00a      	b.n	8000248 <HAL_UART_RxCpltCallback+0x38>
			((unsigned char*) (&posllh))[k] = GPS_in[k + 2];
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	1c9a      	adds	r2, r3, #2
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	490f      	ldr	r1, [pc, #60]	; (8000278 <HAL_UART_RxCpltCallback+0x68>)
 800023a:	440b      	add	r3, r1
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 800023e:	5c8a      	ldrb	r2, [r1, r2]
 8000240:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < 32; k++) {
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3301      	adds	r3, #1
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b1f      	cmp	r3, #31
 800024c:	ddf1      	ble.n	8000232 <HAL_UART_RxCpltCallback+0x22>
		}
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 800024e:	2224      	movs	r2, #36	; 0x24
 8000250:	4908      	ldr	r1, [pc, #32]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000252:	480a      	ldr	r0, [pc, #40]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 8000254:	f004 fbf8 	bl	8004a48 <HAL_UART_Receive_IT>
 8000258:	e007      	b.n	800026a <HAL_UART_RxCpltCallback+0x5a>
	}else{

		HAL_UART_Abort(&huart2);
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 800025c:	f004 fc48 	bl	8004af0 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000260:	2224      	movs	r2, #36	; 0x24
 8000262:	4904      	ldr	r1, [pc, #16]	; (8000274 <HAL_UART_RxCpltCallback+0x64>)
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <HAL_UART_RxCpltCallback+0x6c>)
 8000266:	f004 fbef 	bl	8004a48 <HAL_UART_Receive_IT>
	}
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20004624 	.word	0x20004624
 8000278:	20004584 	.word	0x20004584
 800027c:	2000464c 	.word	0x2000464c

08000280 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000286:	f001 f885 	bl	8001394 <HAL_Init>
	HAL_Delay(2000);
 800028a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800028e:	f001 f8b3 	bl	80013f8 <HAL_Delay>

	/* Configure the system clock */
	SystemClock_Config();
 8000292:	f000 f8a1 	bl	80003d8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 1 */
	MX_GPIO_Init();
 8000296:	f000 f9e9 	bl	800066c <MX_GPIO_Init>
	MX_DMA_Init();
 800029a:	f000 f9c1 	bl	8000620 <MX_DMA_Init>
	MX_ADC1_Init();
 800029e:	f000 f8f7 	bl	8000490 <MX_ADC1_Init>
	MX_CAN_Init();
 80002a2:	f000 f933 	bl	800050c <MX_CAN_Init>
	MX_I2C1_Init();
 80002a6:	f000 fa4f 	bl	8000748 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80002aa:	f000 f98f 	bl	80005cc <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80002ae:	f000 f963 	bl	8000578 <MX_USART1_UART_Init>

	DWT_CTRL |= (1 << 0);
 80002b2:	4b3d      	ldr	r3, [pc, #244]	; (80003a8 <main+0x128>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a3c      	ldr	r2, [pc, #240]	; (80003a8 <main+0x128>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6013      	str	r3, [r2, #0]

	CAN_Filter_Config();
 80002be:	f000 fa71 	bl	80007a4 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80002c2:	f240 4103 	movw	r1, #1027	; 0x403
 80002c6:	4839      	ldr	r0, [pc, #228]	; (80003ac <main+0x12c>)
 80002c8:	f002 f867 	bl	800239a <HAL_CAN_ActivateNotification>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x56>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80002d2:	f000 fd29 	bl	8000d28 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 80002d6:	4835      	ldr	r0, [pc, #212]	; (80003ac <main+0x12c>)
 80002d8:	f001 fe30 	bl	8001f3c <HAL_CAN_Start>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x66>
		Error_Handler();
 80002e2:	f000 fd21 	bl	8000d28 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) gas, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	4931      	ldr	r1, [pc, #196]	; (80003b0 <main+0x130>)
 80002ea:	4832      	ldr	r0, [pc, #200]	; (80003b4 <main+0x134>)
 80002ec:	f001 f97e 	bl	80015ec <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 80002f0:	2224      	movs	r2, #36	; 0x24
 80002f2:	4931      	ldr	r1, [pc, #196]	; (80003b8 <main+0x138>)
 80002f4:	4831      	ldr	r0, [pc, #196]	; (80003bc <main+0x13c>)
 80002f6:	f004 fba7 	bl	8004a48 <HAL_UART_Receive_IT>

	SEGGER_SYSVIEW_Conf();
 80002fa:	f006 fc65 	bl	8006bc8 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80002fe:	f007 fba3 	bl	8007a48 <SEGGER_SYSVIEW_Start>

	/* Start scheduler */
	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <main+0x140>)
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2307      	movs	r3, #7
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2300      	movs	r3, #0
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	492d      	ldr	r1, [pc, #180]	; (80003c4 <main+0x144>)
 8000310:	482d      	ldr	r0, [pc, #180]	; (80003c8 <main+0x148>)
 8000312:	f005 f994 	bl	800563e <xTaskCreate>

	vTaskStartScheduler();
 8000316:	f005 fc2f 	bl	8005b78 <vTaskStartScheduler>

	/* Infinite loop */
	while (1) {

		//if(!DATAFLAG){
		HAL_Delay(5000); /*JUST IN CASE*/
 800031a:	f241 3088 	movw	r0, #5000	; 0x1388
 800031e:	f001 f86b 	bl	80013f8 <HAL_Delay>
		bsl[1] = 0xAA;
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <main+0x14c>)
 8000324:	22aa      	movs	r2, #170	; 0xaa
 8000326:	705a      	strb	r2, [r3, #1]
		bsl[11] = 0xBB;
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <main+0x14c>)
 800032a:	22bb      	movs	r2, #187	; 0xbb
 800032c:	72da      	strb	r2, [r3, #11]
		bsl[21] = 0xCC;
 800032e:	4b27      	ldr	r3, [pc, #156]	; (80003cc <main+0x14c>)
 8000330:	22cc      	movs	r2, #204	; 0xcc
 8000332:	755a      	strb	r2, [r3, #21]
		bsl[0] = 0x00;
 8000334:	4b25      	ldr	r3, [pc, #148]	; (80003cc <main+0x14c>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
		bsl[10] = 0x00;
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <main+0x14c>)
 800033c:	2200      	movs	r2, #0
 800033e:	729a      	strb	r2, [r3, #10]
		bsl[20] = 0x00;
 8000340:	4b22      	ldr	r3, [pc, #136]	; (80003cc <main+0x14c>)
 8000342:	2200      	movs	r2, #0
 8000344:	751a      	strb	r2, [r3, #20]
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000346:	230a      	movs	r3, #10
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	231a      	movs	r3, #26
 800034c:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <main+0x14c>)
 800034e:	2110      	movs	r1, #16
 8000350:	481f      	ldr	r0, [pc, #124]	; (80003d0 <main+0x150>)
 8000352:	f003 f89f 	bl	8003494 <HAL_I2C_Master_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035a:	481e      	ldr	r0, [pc, #120]	; (80003d4 <main+0x154>)
 800035c:	f002 ff59 	bl	8003212 <HAL_GPIO_TogglePin>
		HAL_Delay(5000); /*JUST IN CASE*/
 8000360:	f241 3088 	movw	r0, #5000	; 0x1388
 8000364:	f001 f848 	bl	80013f8 <HAL_Delay>
		bsl[0] = 0xDD;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <main+0x14c>)
 800036a:	22dd      	movs	r2, #221	; 0xdd
 800036c:	701a      	strb	r2, [r3, #0]
		bsl[10] = 0xEE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <main+0x14c>)
 8000370:	22ee      	movs	r2, #238	; 0xee
 8000372:	729a      	strb	r2, [r3, #10]
		bsl[20] = 0xFF;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <main+0x14c>)
 8000376:	22ff      	movs	r2, #255	; 0xff
 8000378:	751a      	strb	r2, [r3, #20]
		bsl[1] = 0x00;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <main+0x14c>)
 800037c:	2200      	movs	r2, #0
 800037e:	705a      	strb	r2, [r3, #1]
		bsl[11] = 0x00;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <main+0x14c>)
 8000382:	2200      	movs	r2, #0
 8000384:	72da      	strb	r2, [r3, #11]
		bsl[21] = 0x00;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <main+0x14c>)
 8000388:	2200      	movs	r2, #0
 800038a:	755a      	strb	r2, [r3, #21]
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 800038c:	230a      	movs	r3, #10
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	231a      	movs	r3, #26
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <main+0x14c>)
 8000394:	2110      	movs	r1, #16
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <main+0x150>)
 8000398:	f003 f87c 	bl	8003494 <HAL_I2C_Master_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800039c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <main+0x154>)
 80003a2:	f002 ff36 	bl	8003212 <HAL_GPIO_TogglePin>
		HAL_Delay(5000); /*JUST IN CASE*/
 80003a6:	e7b8      	b.n	800031a <main+0x9a>
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	200044d0 	.word	0x200044d0
 80003b0:	20004620 	.word	0x20004620
 80003b4:	20004514 	.word	0x20004514
 80003b8:	20004624 	.word	0x20004624
 80003bc:	2000464c 	.word	0x2000464c
 80003c0:	20004648 	.word	0x20004648
 80003c4:	08008680 	.word	0x08008680
 80003c8:	080007f1 	.word	0x080007f1
 80003cc:	200044f8 	.word	0x200044f8
 80003d0:	20004478 	.word	0x20004478
 80003d4:	40011000 	.word	0x40011000

080003d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b094      	sub	sp, #80	; 0x50
 80003dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f008 f936 	bl	8008658 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000408:	2301      	movs	r3, #1
 800040a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000422:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000424:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb2a 	bl	8003a88 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x66>
		Error_Handler();
 800043a:	f000 fc75 	bl	8000d28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fd94 	bl	8003f88 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x92>
		Error_Handler();
 8000466:	f000 fc5f 	bl	8000d28 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800046a:	2302      	movs	r3, #2
 800046c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800046e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000472:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f003 ff52 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xae>
		Error_Handler();
 8000482:	f000 fc51 	bl	8000d28 <Error_Handler>
	}
}
 8000486:	bf00      	nop
 8000488:	3750      	adds	r7, #80	; 0x50
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_ADC1_Init+0x74>)
 80004a2:	4a19      	ldr	r2, [pc, #100]	; (8000508 <MX_ADC1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_ADC1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_ADC1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_ADC1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_ADC1_Init+0x74>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ce:	f000 ffb5 	bl	800143c <HAL_ADC_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0x4c>
		Error_Handler();
 80004d8:	f000 fc26 	bl	8000d28 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80004dc:	2301      	movs	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004e4:	2307      	movs	r3, #7
 80004e6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ee:	f001 f977 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x6c>
		Error_Handler();
 80004f8:	f000 fc16 	bl	8000d28 <Error_Handler>
	}
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20004514 	.word	0x20004514
 8000508:	40012400 	.word	0x40012400

0800050c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_CAN_Init+0x64>)
 8000512:	4a18      	ldr	r2, [pc, #96]	; (8000574 <MX_CAN_Init+0x68>)
 8000514:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_CAN_Init+0x64>)
 8000518:	2209      	movs	r2, #9
 800051a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_CAN_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_CAN_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_CAN_Init+0x64>)
 800052a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800052e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_CAN_Init+0x64>)
 8000532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000536:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_CAN_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_CAN_Init+0x64>)
 8000540:	2201      	movs	r2, #1
 8000542:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_CAN_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_CAN_Init+0x64>)
 800054c:	2201      	movs	r2, #1
 800054e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_CAN_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_CAN_Init+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_CAN_Init+0x64>)
 800055e:	f001 fb29 	bl	8001bb4 <HAL_CAN_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_CAN_Init+0x60>
		Error_Handler();
 8000568:	f000 fbde 	bl	8000d28 <Error_Handler>
	}
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200044d0 	.word	0x200044d0
 8000574:	40006400 	.word	0x40006400

08000578 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART1_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800059e:	2208      	movs	r2, #8
 80005a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005b0:	f004 f964 	bl	800487c <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80005ba:	f000 fbb5 	bl	8000d28 <Error_Handler>
	}
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20004544 	.word	0x20004544
 80005c8:	40013800 	.word	0x40013800

080005cc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART2_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 8000604:	f004 f93a 	bl	800487c <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800060e:	f000 fb8b 	bl	8000d28 <Error_Handler>
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000464c 	.word	0x2000464c
 800061c:	40004400 	.word	0x40004400

08000620 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_DMA_Init+0x48>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_DMA_Init+0x48>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_DMA_Init+0x48>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2105      	movs	r1, #5
 8000642:	200b      	movs	r0, #11
 8000644:	f002 f9a1 	bl	800298a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000648:	200b      	movs	r0, #11
 800064a:	f002 f9ba 	bl	80029c2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	2010      	movs	r0, #16
 8000654:	f002 f999 	bl	800298a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000658:	2010      	movs	r0, #16
 800065a:	f002 f9b2 	bl	80029c2 <HAL_NVIC_EnableIRQ>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <MX_GPIO_Init+0xd0>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <MX_GPIO_Init+0xd0>)
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xd0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_GPIO_Init+0xd0>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : Gear_Pin Brake_Pin */
	GPIO_InitStruct.Pin = Gear_Pin | Brake_Pin;
 80006e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006f6:	f002 fc1b 	bl	8002f30 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0xd8>)
 8000714:	f002 fc0c 	bl	8002f30 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000718:	2320      	movs	r3, #32
 800071a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xd4>)
 8000730:	f002 fbfe 	bl	8002f30 <HAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	40010c00 	.word	0x40010c00
 8000744:	40011000 	.word	0x40011000

08000748 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f002 fd5d 	bl	8003244 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000790:	f000 faca 	bl	8000d28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20004478 	.word	0x20004478
 800079c:	40005400 	.word	0x40005400
 80007a0:	00061a80 	.word	0x00061a80

080007a4 <CAN_Filter_Config>:

/*Configure CAN Filter */
void CAN_Filter_Config(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <CAN_Filter_Config+0x48>)
 80007d4:	f001 fae9 	bl	8001daa <HAL_CAN_ConfigFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <CAN_Filter_Config+0x3e>
		Error_Handler();
 80007de:	f000 faa3 	bl	8000d28 <Error_Handler>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200044d0 	.word	0x200044d0

080007f0 <Start_taskF>:

/*Start Task */
void Start_taskF(void *pvParameters) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 80007f8:	2203      	movs	r2, #3
 80007fa:	2100      	movs	r1, #0
 80007fc:	2001      	movs	r0, #1
 80007fe:	f004 fe63 	bl	80054c8 <xQueueGenericCreate>
 8000802:	4602      	mov	r2, r0
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <Start_taskF+0xc0>)
 8000806:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f005 f97d 	bl	8005b08 <vTaskDelay>
	xTaskCreate(GPS_taskF, "GPSTask", 256, NULL, 3, &GPS_Task);
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <Start_taskF+0xc4>)
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	2303      	movs	r3, #3
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2300      	movs	r3, #0
 8000818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081c:	4926      	ldr	r1, [pc, #152]	; (80008b8 <Start_taskF+0xc8>)
 800081e:	4827      	ldr	r0, [pc, #156]	; (80008bc <Start_taskF+0xcc>)
 8000820:	f004 ff0d 	bl	800563e <xTaskCreate>
	vTaskDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f005 f96f 	bl	8005b08 <vTaskDelay>
	xTaskCreate(Gear_Brake_taskF, "Gear_BrakeTask", 256, NULL, 2,
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <Start_taskF+0xd0>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000838:	4922      	ldr	r1, [pc, #136]	; (80008c4 <Start_taskF+0xd4>)
 800083a:	4823      	ldr	r0, [pc, #140]	; (80008c8 <Start_taskF+0xd8>)
 800083c:	f004 feff 	bl	800563e <xTaskCreate>
			&Gear_Brake_Task);
	vTaskDelay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f005 f961 	bl	8005b08 <vTaskDelay>
	xTaskCreate(Gas_taskF, "GasTask", 256, NULL, 2, &Gas_Task);
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <Start_taskF+0xdc>)
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2302      	movs	r3, #2
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000854:	491e      	ldr	r1, [pc, #120]	; (80008d0 <Start_taskF+0xe0>)
 8000856:	481f      	ldr	r0, [pc, #124]	; (80008d4 <Start_taskF+0xe4>)
 8000858:	f004 fef1 	bl	800563e <xTaskCreate>
	vTaskDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f005 f953 	bl	8005b08 <vTaskDelay>
	xTaskCreate(Logger_taskF, "LoggerTask", 256, NULL, 1, &Logger_Task);
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <Start_taskF+0xe8>)
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	2301      	movs	r3, #1
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000870:	491a      	ldr	r1, [pc, #104]	; (80008dc <Start_taskF+0xec>)
 8000872:	481b      	ldr	r0, [pc, #108]	; (80008e0 <Start_taskF+0xf0>)
 8000874:	f004 fee3 	bl	800563e <xTaskCreate>
	vTaskDelay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f005 f945 	bl	8005b08 <vTaskDelay>
	xTaskCreate(Telemetry_taskF, "TelemetryTask",256, NULL, 6,
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <Start_taskF+0xf4>)
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2306      	movs	r3, #6
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088c:	4916      	ldr	r1, [pc, #88]	; (80008e8 <Start_taskF+0xf8>)
 800088e:	4817      	ldr	r0, [pc, #92]	; (80008ec <Start_taskF+0xfc>)
 8000890:	f004 fed5 	bl	800563e <xTaskCreate>
			&Telemetry_Task);

	if (Start_Task != NULL) {
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <Start_taskF+0x100>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <Start_taskF+0xb6>
		vTaskDelete(Start_Task);
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <Start_taskF+0x100>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 f817 	bl	80058d4 <vTaskDelete>
	}

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200044cc 	.word	0x200044cc
 80008b4:	20004470 	.word	0x20004470
 80008b8:	0800868c 	.word	0x0800868c
 80008bc:	080008f5 	.word	0x080008f5
 80008c0:	20004424 	.word	0x20004424
 80008c4:	08008694 	.word	0x08008694
 80008c8:	08000979 	.word	0x08000979
 80008cc:	20004694 	.word	0x20004694
 80008d0:	080086a4 	.word	0x080086a4
 80008d4:	08000a21 	.word	0x08000a21
 80008d8:	2000468c 	.word	0x2000468c
 80008dc:	080086ac 	.word	0x080086ac
 80008e0:	08000aa5 	.word	0x08000aa5
 80008e4:	2000446c 	.word	0x2000446c
 80008e8:	080086b8 	.word	0x080086b8
 80008ec:	08000b71 	.word	0x08000b71
 80008f0:	20004648 	.word	0x20004648

080008f4 <GPS_taskF>:

/*GPS Read Task --- THIS TASK NEEDS TEST WITH HARDWARE */
void GPS_taskF(void *pvParameters) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 80008fc:	23c8      	movs	r3, #200	; 0xc8
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 8000900:	f005 fa46 	bl	8005d90 <xTaskGetTickCount>
 8000904:	4603      	mov	r3, r0
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef LATHeader;

		LATHeader.DLC = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
		LATHeader.StdId = 0x664;
 800090c:	f240 6364 	movw	r3, #1636	; 0x664
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
		LATHeader.IDE = CAN_ID_STD;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
		LATHeader.RTR = CAN_RTR_DATA;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34

		if (HAL_CAN_AddTxMessage(&hcan, &LATHeader, LAT, &TxMailbox)
 800091a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000922:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <GPS_taskF+0x80>)
 8000928:	f001 fb4c 	bl	8001fc4 <HAL_CAN_AddTxMessage>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <GPS_taskF+0x42>
				!= HAL_OK) {
			Error_Handler();
 8000932:	f000 f9f9 	bl	8000d28 <Error_Handler>
		LON[2] = buffer[24] = posllh.lon >> 8;
		LON[3] = buffer[25] = posllh.lon;*/

		CAN_TxHeaderTypeDef LONHeader;

		LONHeader.DLC = 4;
 8000936:	2304      	movs	r3, #4
 8000938:	61fb      	str	r3, [r7, #28]
		LONHeader.StdId = 0x665;
 800093a:	f240 6365 	movw	r3, #1637	; 0x665
 800093e:	60fb      	str	r3, [r7, #12]
		LONHeader.IDE = CAN_ID_STD;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
		LONHeader.RTR = CAN_RTR_DATA;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &LONHeader, LON, &TxMailbox)
 8000948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000950:	f107 010c 	add.w	r1, r7, #12
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <GPS_taskF+0x80>)
 8000956:	f001 fb35 	bl	8001fc4 <HAL_CAN_AddTxMessage>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <GPS_taskF+0x70>
				!= HAL_OK) {
			Error_Handler();
 8000960:	f000 f9e2 	bl	8000d28 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000968:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800096a:	4618      	mov	r0, r3
 800096c:	f005 f84e 	bl	8005a0c <vTaskDelayUntil>
	while (1) {
 8000970:	e7ca      	b.n	8000908 <GPS_taskF+0x14>
 8000972:	bf00      	nop
 8000974:	200044d0 	.word	0x200044d0

08000978 <Gear_Brake_taskF>:
	}
}

/*Gear an Brake Read Task */
void Gear_Brake_taskF(void *pvParameters) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000980:	230a      	movs	r3, #10
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000984:	f005 fa04 	bl	8005d90 <xTaskGetTickCount>
 8000988:	4603      	mov	r3, r0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		gear = HAL_GPIO_ReadPin(GPIOB, Gear_Pin);
 800098c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <Gear_Brake_taskF+0x94>)
 8000992:	f002 fc27 	bl	80031e4 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <Gear_Brake_taskF+0x98>)
 800099c:	701a      	strb	r2, [r3, #0]
		brake = HAL_GPIO_ReadPin(GPIOB, Brake_Pin);
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	481a      	ldr	r0, [pc, #104]	; (8000a0c <Gear_Brake_taskF+0x94>)
 80009a4:	f002 fc1e 	bl	80031e4 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <Gear_Brake_taskF+0x9c>)
 80009ae:	701a      	strb	r2, [r3, #0]
		uint8_t GBbuff[2];
		GBbuff[0] = buffer[0] = gear;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <Gear_Brake_taskF+0x98>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <Gear_Brake_taskF+0xa0>)
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <Gear_Brake_taskF+0xa0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GBbuff[1] = buffer[1] = brake;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <Gear_Brake_taskF+0x9c>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <Gear_Brake_taskF+0xa0>)
 80009c6:	705a      	strb	r2, [r3, #1]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <Gear_Brake_taskF+0xa0>)
 80009ca:	785b      	ldrb	r3, [r3, #1]
 80009cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GBHeader;

		GBHeader.DLC = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
		GBHeader.StdId = 0x657;
 80009d4:	f240 6357 	movw	r3, #1623	; 0x657
 80009d8:	60bb      	str	r3, [r7, #8]
		GBHeader.IDE = CAN_ID_STD;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
		GBHeader.RTR = CAN_RTR_DATA;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GBHeader, GBbuff, &TxMailbox)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009ea:	f107 0108 	add.w	r1, r7, #8
 80009ee:	480b      	ldr	r0, [pc, #44]	; (8000a1c <Gear_Brake_taskF+0xa4>)
 80009f0:	f001 fae8 	bl	8001fc4 <HAL_CAN_AddTxMessage>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <Gear_Brake_taskF+0x86>
				!= HAL_OK) {
			Error_Handler();
 80009fa:	f000 f995 	bl	8000d28 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 f801 	bl	8005a0c <vTaskDelayUntil>
	while (1) {
 8000a0a:	e7bf      	b.n	800098c <Gear_Brake_taskF+0x14>
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	20004474 	.word	0x20004474
 8000a14:	20004690 	.word	0x20004690
 8000a18:	200045a4 	.word	0x200045a4
 8000a1c:	200044d0 	.word	0x200044d0

08000a20 <Gas_taskF>:
	}
}

/*Gas pedal Read Task */
void Gas_taskF(void *pvParameters) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000a28:	230a      	movs	r3, #10
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000a2c:	f005 f9b0 	bl	8005d90 <xTaskGetTickCount>
 8000a30:	4603      	mov	r3, r0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		uint8_t gasbuff[2];
		gasbuff[0] = buffer[2] = (uint8_t) (gas[0] >> 8) & 0xFF;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <Gas_taskF+0x78>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <Gas_taskF+0x7c>)
 8000a40:	709a      	strb	r2, [r3, #2]
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <Gas_taskF+0x7c>)
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		gasbuff[1] = buffer[3] = (uint8_t) gas[0] & 0xFF;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <Gas_taskF+0x78>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <Gas_taskF+0x7c>)
 8000a52:	70da      	strb	r2, [r3, #3]
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <Gas_taskF+0x7c>)
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GasHeader;

		GasHeader.DLC = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
		GasHeader.StdId = 0x656;
 8000a60:	f240 6356 	movw	r3, #1622	; 0x656
 8000a64:	60bb      	str	r3, [r7, #8]
		GasHeader.IDE = CAN_ID_STD;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
		GasHeader.RTR = CAN_RTR_DATA;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GasHeader, gasbuff, &TxMailbox)
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a76:	f107 0108 	add.w	r1, r7, #8
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <Gas_taskF+0x80>)
 8000a7c:	f001 faa2 	bl	8001fc4 <HAL_CAN_AddTxMessage>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <Gas_taskF+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000a86:	f000 f94f 	bl	8000d28 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 ffbb 	bl	8005a0c <vTaskDelayUntil>
	while (1) {
 8000a96:	e7cd      	b.n	8000a34 <Gas_taskF+0x14>
 8000a98:	20004620 	.word	0x20004620
 8000a9c:	200045a4 	.word	0x200045a4
 8000aa0:	200044d0 	.word	0x200044d0

08000aa4 <Logger_taskF>:
	}
}

/*Logger Write Task  --- THIS TASK NEEDS TO IMPLEMENT START AND STOP LOG FUNCTIONS*/
void Logger_taskF(void *pvParameters) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000aac:	230a      	movs	r3, #10
 8000aae:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000ab0:	f005 f96e 	bl	8005d90 <xTaskGetTickCount>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (startLOG == 1) {
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <Logger_taskF+0xb8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d11c      	bne.n	8000afa <Logger_taskF+0x56>
			startLOG = 0;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <Logger_taskF+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
			bsl[1] = 0xAA;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <Logger_taskF+0xbc>)
 8000ac8:	22aa      	movs	r2, #170	; 0xaa
 8000aca:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0xBB;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <Logger_taskF+0xbc>)
 8000ace:	22bb      	movs	r2, #187	; 0xbb
 8000ad0:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0xCC;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <Logger_taskF+0xbc>)
 8000ad4:	22cc      	movs	r2, #204	; 0xcc
 8000ad6:	755a      	strb	r2, [r3, #21]
			bsl[0] = 0x00;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <Logger_taskF+0xbc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0x00;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <Logger_taskF+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0x00;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <Logger_taskF+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	751a      	strb	r2, [r3, #20]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000aea:	230a      	movs	r3, #10
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	231a      	movs	r3, #26
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <Logger_taskF+0xbc>)
 8000af2:	2110      	movs	r1, #16
 8000af4:	481b      	ldr	r0, [pc, #108]	; (8000b64 <Logger_taskF+0xc0>)
 8000af6:	f002 fccd 	bl	8003494 <HAL_I2C_Master_Transmit>
		}
		if (stopLOG == 1) {
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <Logger_taskF+0xc4>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d11c      	bne.n	8000b3c <Logger_taskF+0x98>
			stopLOG = 0;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <Logger_taskF+0xc4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
			bsl[0] = 0xDD;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <Logger_taskF+0xbc>)
 8000b0a:	22dd      	movs	r2, #221	; 0xdd
 8000b0c:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0xEE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <Logger_taskF+0xbc>)
 8000b10:	22ee      	movs	r2, #238	; 0xee
 8000b12:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0xFF;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <Logger_taskF+0xbc>)
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	751a      	strb	r2, [r3, #20]
			bsl[1] = 0x00;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <Logger_taskF+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0x00;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <Logger_taskF+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0x00;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <Logger_taskF+0xbc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	755a      	strb	r2, [r3, #21]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	231a      	movs	r3, #26
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <Logger_taskF+0xbc>)
 8000b34:	2110      	movs	r1, #16
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <Logger_taskF+0xc0>)
 8000b38:	f002 fcac 	bl	8003494 <HAL_I2C_Master_Transmit>
		}
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 26, 10);
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	231a      	movs	r3, #26
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <Logger_taskF+0xc8>)
 8000b44:	2110      	movs	r1, #16
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <Logger_taskF+0xc0>)
 8000b48:	f002 fca4 	bl	8003494 <HAL_I2C_Master_Transmit>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	68f9      	ldr	r1, [r7, #12]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 ff5a 	bl	8005a0c <vTaskDelayUntil>
		if (startLOG == 1) {
 8000b58:	e7ae      	b.n	8000ab8 <Logger_taskF+0x14>
 8000b5a:	bf00      	nop
 8000b5c:	20000484 	.word	0x20000484
 8000b60:	200044f8 	.word	0x200044f8
 8000b64:	20004478 	.word	0x20004478
 8000b68:	20000485 	.word	0x20000485
 8000b6c:	200045a4 	.word	0x200045a4

08000b70 <Telemetry_taskF>:
	}
}

/*LoRa Transceiver Write Task*/
void Telemetry_taskF(void *pvParameters) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000b7c:	f005 f908 	bl	8005d90 <xTaskGetTickCount>
 8000b80:	4603      	mov	r3, r0
 8000b82:	60fb      	str	r3, [r7, #12]
	while (1) {
		LoRa[0] = sync;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <Telemetry_taskF+0x5c>)
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <Telemetry_taskF+0x60>)
 8000b8a:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00b      	b.n	8000baa <Telemetry_taskF+0x3a>
			LoRa[y] = buffer[y - 1];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <Telemetry_taskF+0x64>)
 8000b98:	5cd1      	ldrb	r1, [r2, r3]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <Telemetry_taskF+0x60>)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2b1a      	cmp	r3, #26
 8000bae:	ddf0      	ble.n	8000b92 <Telemetry_taskF+0x22>
		}
		HAL_UART_Transmit(&huart1, LoRa, 27, 10);
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	221b      	movs	r2, #27
 8000bb4:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <Telemetry_taskF+0x60>)
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <Telemetry_taskF+0x68>)
 8000bb8:	f003 fead 	bl	8004916 <HAL_UART_Transmit>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*10Hz frequency*/
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 ff22 	bl	8005a0c <vTaskDelayUntil>
		LoRa[0] = sync;
 8000bc8:	e7dc      	b.n	8000b84 <Telemetry_taskF+0x14>
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	200045c0 	.word	0x200045c0
 8000bd4:	200045a4 	.word	0x200045a4
 8000bd8:	20004544 	.word	0x20004544

08000bdc <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/*CAN Read Callback -- THIS FUNCTION NEEDS TO IMPLEMENT START AND STOP LOG MESSAGES  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcv_msg[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcv_msg)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	f107 0214 	add.w	r2, r7, #20
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f001 fac2 	bl	8002178 <HAL_CAN_GetRxMessage>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) {
		Error_Handler();
 8000bfa:	f000 f895 	bl	8000d28 <Error_Handler>
	}

	if (RxHeader.StdId == 0x64E) {
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f240 624e 	movw	r2, #1614	; 0x64e
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d102      	bne.n	8000c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		//if (rcv_msg[0] == 0x55) {
		startLOG = 1;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x64F) {
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f240 624f 	movw	r2, #1615	; 0x64f
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//if (rcv_msg[0] == 0x66) {
		stopLOG = 1;
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x650) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000c24:	d105      	bne.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		buffer[4] = rcv_msg[0];
 8000c26:	7b3a      	ldrb	r2, [r7, #12]
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c2a:	711a      	strb	r2, [r3, #4]
		buffer[5] = rcv_msg[1];
 8000c2c:	7b7a      	ldrb	r2, [r7, #13]
 8000c2e:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c30:	715a      	strb	r2, [r3, #5]
	}

	if (RxHeader.StdId == 0x651) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f240 6251 	movw	r2, #1617	; 0x651
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d105      	bne.n	8000c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		buffer[6] = rcv_msg[0];
 8000c3c:	7b3a      	ldrb	r2, [r7, #12]
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c40:	719a      	strb	r2, [r3, #6]
		buffer[7] = rcv_msg[1];
 8000c42:	7b7a      	ldrb	r2, [r7, #13]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c46:	71da      	strb	r2, [r3, #7]
	}

	if (RxHeader.StdId == 0x652) {
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f240 6252 	movw	r2, #1618	; 0x652
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d105      	bne.n	8000c5e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
		buffer[8] = rcv_msg[0];
 8000c52:	7b3a      	ldrb	r2, [r7, #12]
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c56:	721a      	strb	r2, [r3, #8]
		buffer[9] = rcv_msg[1];
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c5c:	725a      	strb	r2, [r3, #9]
	}

	if (RxHeader.StdId == 0x653) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f240 6253 	movw	r2, #1619	; 0x653
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d105      	bne.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		buffer[10] = rcv_msg[0];
 8000c68:	7b3a      	ldrb	r2, [r7, #12]
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c6c:	729a      	strb	r2, [r3, #10]
		buffer[11] = rcv_msg[1];
 8000c6e:	7b7a      	ldrb	r2, [r7, #13]
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c72:	72da      	strb	r2, [r3, #11]
	}

	if (RxHeader.StdId == 0x654) {
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f240 6254 	movw	r2, #1620	; 0x654
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d105      	bne.n	8000c8a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		buffer[12] = rcv_msg[0];
 8000c7e:	7b3a      	ldrb	r2, [r7, #12]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c82:	731a      	strb	r2, [r3, #12]
		buffer[13] = rcv_msg[1];
 8000c84:	7b7a      	ldrb	r2, [r7, #13]
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c88:	735a      	strb	r2, [r3, #13]
	}

	if (RxHeader.StdId == 0x655) {
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f240 6255 	movw	r2, #1621	; 0x655
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d10b      	bne.n	8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
		buffer[14] = rcv_msg[0];
 8000c94:	7b3a      	ldrb	r2, [r7, #12]
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c98:	739a      	strb	r2, [r3, #14]
		buffer[15] = rcv_msg[1];
 8000c9a:	7b7a      	ldrb	r2, [r7, #13]
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000c9e:	73da      	strb	r2, [r3, #15]
		buffer[16] = rcv_msg[2];
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000ca4:	741a      	strb	r2, [r3, #16]
		buffer[17] = rcv_msg[3];
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000caa:	745a      	strb	r2, [r3, #17]
	}
	if (RxHeader.StdId == 0x668) {
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f5b3 6fcd 	cmp.w	r3, #1640	; 0x668
 8000cb2:	d10b      	bne.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
		buffer[18] = 0;//rcv_msg[0];
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	749a      	strb	r2, [r3, #18]
		buffer[19] = 0;//rcv_msg[1];
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	74da      	strb	r2, [r3, #19]
		buffer[20] = rcv_msg[0];
 8000cc0:	7b3a      	ldrb	r2, [r7, #12]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cc4:	751a      	strb	r2, [r3, #20]
		buffer[21] = rcv_msg[1];
 8000cc6:	7b7a      	ldrb	r2, [r7, #13]
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cca:	755a      	strb	r2, [r3, #21]
	}
	if (RxHeader.StdId == 0x669) {
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f240 6269 	movw	r2, #1641	; 0x669
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10b      	bne.n	8000cee <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		buffer[22] = 0;//rcv_msg[0];
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	759a      	strb	r2, [r3, #22]
		buffer[23] = 0;//rcv_msg[1];
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	75da      	strb	r2, [r3, #23]
		buffer[24] = rcv_msg[0];
 8000ce2:	7b3a      	ldrb	r2, [r7, #12]
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000ce6:	761a      	strb	r2, [r3, #24]
		buffer[25] = rcv_msg[1];
 8000ce8:	7b7a      	ldrb	r2, [r7, #13]
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000cec:	765a      	strb	r2, [r3, #25]
	}

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000484 	.word	0x20000484
 8000cfc:	20000485 	.word	0x20000485
 8000d00:	200045a4 	.word	0x200045a4

08000d04 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d16:	f000 fb53 	bl	80013c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40000800 	.word	0x40000800

08000d28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x6c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	f06f 0001 	mvn.w	r0, #1
 8000d72:	f001 fe0a 	bl	800298a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x70>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_MspInit+0x70>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 8000d92:	f005 fbe1 	bl	8006558 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <HAL_ADC_MspInit+0xbc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d149      	bne.n	8000e5c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_ADC_MspInit+0xc0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Gas_Pin;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Gas_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <HAL_ADC_MspInit+0xc4>)
 8000e08:	f002 f892 	bl	8002f30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e0e:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_ADC_MspInit+0xcc>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e42:	f001 fdcd 	bl	80029e0 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e4c:	f7ff ff6c 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_ADC_MspInit+0xc8>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40012400 	.word	0x40012400
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	200045dc 	.word	0x200045dc
 8000e74:	40020008 	.word	0x40020008

08000e78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a35      	ldr	r2, [pc, #212]	; (8000f68 <HAL_CAN_MspInit+0xf0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d163      	bne.n	8000f60 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e98:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	61d3      	str	r3, [r2, #28]
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_CAN_MspInit+0xf4>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4824      	ldr	r0, [pc, #144]	; (8000f70 <HAL_CAN_MspInit+0xf8>)
 8000ede:	f002 f827 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <HAL_CAN_MspInit+0xf8>)
 8000ef8:	f002 f81a 	bl	8002f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_CAN_MspInit+0xfc>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_CAN_MspInit+0xfc>)
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	2013      	movs	r0, #19
 8000f26:	f001 fd30 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000f2a:	2013      	movs	r0, #19
 8000f2c:	f001 fd49 	bl	80029c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2105      	movs	r1, #5
 8000f34:	2014      	movs	r0, #20
 8000f36:	f001 fd28 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f001 fd41 	bl	80029c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	2015      	movs	r0, #21
 8000f46:	f001 fd20 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f4a:	2015      	movs	r0, #21
 8000f4c:	f001 fd39 	bl	80029c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2016      	movs	r0, #22
 8000f56:	f001 fd18 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f5a:	2016      	movs	r0, #22
 8000f5c:	f001 fd31 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40006400 	.word	0x40006400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40010000 	.word	0x40010000

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_I2C_MspInit+0x70>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d123      	bne.n	8000fe0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa2:	61d3      	str	r3, [r2, #28]
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_I2C_MspInit+0x74>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc8:	23c0      	movs	r3, #192	; 0xc0
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_I2C_MspInit+0x78>)
 8000fdc:	f001 ffa8 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <HAL_UART_MspInit+0x154>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d132      	bne.n	800107a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001014:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_UART_MspInit+0x158>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_UART_MspInit+0x158>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_UART_MspInit+0x158>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_UART_MspInit+0x158>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a46      	ldr	r2, [pc, #280]	; (800114c <HAL_UART_MspInit+0x158>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b44      	ldr	r3, [pc, #272]	; (800114c <HAL_UART_MspInit+0x158>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4619      	mov	r1, r3
 8001058:	483d      	ldr	r0, [pc, #244]	; (8001150 <HAL_UART_MspInit+0x15c>)
 800105a:	f001 ff69 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	4619      	mov	r1, r3
 8001072:	4837      	ldr	r0, [pc, #220]	; (8001150 <HAL_UART_MspInit+0x15c>)
 8001074:	f001 ff5c 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001078:	e062      	b.n	8001140 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a35      	ldr	r2, [pc, #212]	; (8001154 <HAL_UART_MspInit+0x160>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d15d      	bne.n	8001140 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_UART_MspInit+0x158>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4a30      	ldr	r2, [pc, #192]	; (800114c <HAL_UART_MspInit+0x158>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	61d3      	str	r3, [r2, #28]
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_UART_MspInit+0x158>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_UART_MspInit+0x158>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a2a      	ldr	r2, [pc, #168]	; (800114c <HAL_UART_MspInit+0x158>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <HAL_UART_MspInit+0x158>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b4:	2304      	movs	r3, #4
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4822      	ldr	r0, [pc, #136]	; (8001150 <HAL_UART_MspInit+0x15c>)
 80010c8:	f001 ff32 	bl	8002f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010cc:	2308      	movs	r3, #8
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4619      	mov	r1, r3
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <HAL_UART_MspInit+0x15c>)
 80010e0:	f001 ff26 	bl	8002f30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_UART_MspInit+0x164>)
 80010e6:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_UART_MspInit+0x168>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_UART_MspInit+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x164>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UART_MspInit+0x164>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_UART_MspInit+0x164>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0x164>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UART_MspInit+0x164>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_UART_MspInit+0x164>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <HAL_UART_MspInit+0x164>)
 8001116:	f001 fc63 	bl	80029e0 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001120:	f7ff fe02 	bl	8000d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_UART_MspInit+0x164>)
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_UART_MspInit+0x164>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2105      	movs	r1, #5
 8001134:	2026      	movs	r0, #38	; 0x26
 8001136:	f001 fc28 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113a:	2026      	movs	r0, #38	; 0x26
 800113c:	f001 fc41 	bl	80029c2 <HAL_NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40013800 	.word	0x40013800
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800
 8001154:	40004400 	.word	0x40004400
 8001158:	20004428 	.word	0x20004428
 800115c:	4002006c 	.word	0x4002006c

08001160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	201e      	movs	r0, #30
 8001176:	f001 fc08 	bl	800298a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800117a:	201e      	movs	r0, #30
 800117c:	f001 fc21 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_InitTick+0xa0>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_InitTick+0xa0>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_InitTick+0xa0>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f86e 	bl	8004284 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011a8:	f003 f844 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80011ac:	4603      	mov	r3, r0
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_InitTick+0xa4>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	3b01      	subs	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_InitTick+0xa8>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_InitTick+0xac>)
 80011c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_InitTick+0xa8>)
 80011c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_InitTick+0xa8>)
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_InitTick+0xa8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_InitTick+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_InitTick+0xa8>)
 80011e2:	f003 f953 	bl	800448c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d104      	bne.n	80011f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_InitTick+0xa8>)
 80011ee:	f003 f981 	bl	80044f4 <HAL_TIM_Base_Start_IT>
 80011f2:	4603      	mov	r3, r0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	431bde83 	.word	0x431bde83
 8001208:	20004698 	.word	0x20004698
 800120c:	40000800 	.word	0x40000800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <HardFault_Handler+0x4>

08001222 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <BusFault_Handler+0x4>

0800122e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <UsageFault_Handler+0x4>

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Channel1_IRQHandler+0x10>)
 8001246:	f001 fd35 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200045dc 	.word	0x200045dc

08001254 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <DMA1_Channel6_IRQHandler+0x10>)
 800125a:	f001 fd2b 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20004428 	.word	0x20004428

08001268 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM4_IRQHandler+0x10>)
 800126e:	f003 f964 	bl	800453a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20004698 	.word	0x20004698

0800127c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USART2_IRQHandler+0x10>)
 8001282:	f003 fcb7 	bl	8004bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000464c 	.word	0x2000464c

08001290 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_HP_CAN1_TX_IRQHandler(void){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001296:	f001 f8a5 	bl	80023e4 <HAL_CAN_IRQHandler>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200044d0 	.word	0x200044d0

080012a4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012aa:	f001 f89b 	bl	80023e4 <HAL_CAN_IRQHandler>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200044d0 	.word	0x200044d0

080012b8 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <CAN1_RX1_IRQHandler+0x10>)
 80012be:	f001 f891 	bl	80023e4 <HAL_CAN_IRQHandler>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200044d0 	.word	0x200044d0

080012cc <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <CAN1_SCE_IRQHandler+0x10>)
 80012d2:	f001 f887 	bl	80023e4 <HAL_CAN_IRQHandler>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200044d0 	.word	0x200044d0

080012e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <SystemInit+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <SystemInit+0x5c>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <SystemInit+0x5c>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4911      	ldr	r1, [pc, #68]	; (800133c <SystemInit+0x5c>)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0x60>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <SystemInit+0x5c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <SystemInit+0x5c>)
 8001302:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <SystemInit+0x5c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SystemInit+0x5c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x5c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x5c>)
 800131e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001322:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SystemInit+0x5c>)
 8001326:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800132a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SystemInit+0x64>)
 800132e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001332:	609a      	str	r2, [r3, #8]
#endif 
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	f8ff0000 	.word	0xf8ff0000
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001348:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800135a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136e:	f7ff ffb7 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f007 f933 	bl	80085dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7fe ff83 	bl	8000280 <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r3, =_sidata
 800137c:	080087d0 	.word	0x080087d0
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001384:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001388:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800138c:	20004784 	.word	0x20004784

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f001 fae5 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fed8 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fcc0 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_IncTick+0x20>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	200046d8 	.word	0x200046d8

080013e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	200046d8 	.word	0x200046d8

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fff0 	bl	80013e4 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_Delay+0x40>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffe0 	bl	80013e4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000000c 	.word	0x2000000c

0800143c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0be      	b.n	80015dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc94 	bl	8000da8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 faf7 	bl	8001a74 <ADC_ConversionStop_Disable>
 8001486:	4603      	mov	r3, r0
 8001488:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 8099 	bne.w	80015ca <HAL_ADC_Init+0x18e>
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8095 	bne.w	80015ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	f043 0202 	orr.w	r2, r3, #2
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7b1b      	ldrb	r3, [r3, #12]
 80014c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d4:	d003      	beq.n	80014de <HAL_ADC_Init+0xa2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_ADC_Init+0xa8>
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	e000      	b.n	80014e6 <HAL_ADC_Init+0xaa>
 80014e4:	2300      	movs	r3, #0
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7d1b      	ldrb	r3, [r3, #20]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d119      	bne.n	8001528 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7b1b      	ldrb	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	3b01      	subs	r3, #1
 8001502:	035a      	lsls	r2, r3, #13
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	e00b      	b.n	8001528 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f043 0220 	orr.w	r2, r3, #32
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_ADC_Init+0x1a8>)
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	430b      	orrs	r3, r1
 800154e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001558:	d003      	beq.n	8001562 <HAL_ADC_Init+0x126>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d104      	bne.n	800156c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	3b01      	subs	r3, #1
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	430a      	orrs	r2, r1
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_ADC_Init+0x1ac>)
 8001588:	4013      	ands	r3, r2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	d10b      	bne.n	80015a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a6:	e018      	b.n	80015da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f023 0312 	bic.w	r3, r3, #18
 80015b0:	f043 0210 	orr.w	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c8:	e007      	b.n	80015da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015da:	7dfb      	ldrb	r3, [r7, #23]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	ffe1f7fd 	.word	0xffe1f7fd
 80015e8:	ff1f0efe 	.word	0xff1f0efe

080015ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a64      	ldr	r2, [pc, #400]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_ADC_Start_DMA+0x24>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a63      	ldr	r2, [pc, #396]	; (8001798 <HAL_ADC_Start_DMA+0x1ac>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d106      	bne.n	800161e <HAL_ADC_Start_DMA+0x32>
 8001610:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 80b3 	bne.w	8001784 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_Start_DMA+0x40>
 8001628:	2302      	movs	r3, #2
 800162a:	e0ae      	b.n	800178a <HAL_ADC_Start_DMA+0x19e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f9cb 	bl	80019d0 <ADC_Enable>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 809a 	bne.w	800177a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <HAL_ADC_Start_DMA+0x1ac>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d105      	bne.n	8001670 <HAL_ADC_Start_DMA+0x84>
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d115      	bne.n	800169c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001686:	2b00      	cmp	r3, #0
 8001688:	d026      	beq.n	80016d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001692:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800169a:	e01d      	b.n	80016d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <HAL_ADC_Start_DMA+0xd0>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_ADC_Start_DMA+0x1ac>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10d      	bne.n	80016d8 <HAL_ADC_Start_DMA+0xec>
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f023 0206 	bic.w	r2, r3, #6
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a25      	ldr	r2, [pc, #148]	; (800179c <HAL_ADC_Start_DMA+0x1b0>)
 8001706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <HAL_ADC_Start_DMA+0x1b4>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_ADC_Start_DMA+0x1b8>)
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0202 	mvn.w	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001730:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a18      	ldr	r0, [r3, #32]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	334c      	adds	r3, #76	; 0x4c
 800173c:	4619      	mov	r1, r3
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f001 f9a7 	bl	8002a94 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001750:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001754:	d108      	bne.n	8001768 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001764:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001766:	e00f      	b.n	8001788 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001776:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001778:	e006      	b.n	8001788 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001782:	e001      	b.n	8001788 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40012400 	.word	0x40012400
 8001798:	40012800 	.word	0x40012800
 800179c:	08001ae9 	.word	0x08001ae9
 80017a0:	08001b65 	.word	0x08001b65
 80017a4:	08001b81 	.word	0x08001b81

080017a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x20>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0dc      	b.n	80019ba <HAL_ADC_ConfigChannel+0x1da>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b06      	cmp	r3, #6
 800180e:	d81c      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b05      	subs	r3, #5
 8001822:	221f      	movs	r2, #31
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b05      	subs	r3, #5
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
 8001848:	e03c      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d81c      	bhi.n	800188c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b23      	subs	r3, #35	; 0x23
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	4019      	ands	r1, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b23      	subs	r3, #35	; 0x23
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
 800188a:	e01b      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	3b41      	subs	r3, #65	; 0x41
 800189e:	221f      	movs	r2, #31
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4019      	ands	r1, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b41      	subs	r3, #65	; 0x41
 80018b8:	fa00 f203 	lsl.w	r2, r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d91c      	bls.n	8001906 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4019      	ands	r1, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6898      	ldr	r0, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e019      	b.n	800193a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	2207      	movs	r2, #7
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b10      	cmp	r3, #16
 8001940:	d003      	beq.n	800194a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001946:	2b11      	cmp	r3, #17
 8001948:	d132      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d125      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d126      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001970:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d11a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_ADC_ConfigChannel+0x1ec>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9a      	lsrs	r2, r3, #18
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001990:	e002      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3b01      	subs	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f9      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1b2>
 800199e:	e007      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012400 	.word	0x40012400
 80019c8:	20000004 	.word	0x20000004
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d039      	beq.n	8001a62 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <ADC_Enable+0x9c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <ADC_Enable+0xa0>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9b      	lsrs	r3, r3, #18
 8001a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a0c:	e002      	b.n	8001a14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a1a:	f7ff fce3 	bl	80013e4 <HAL_GetTick>
 8001a1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a20:	e018      	b.n	8001a54 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a22:	f7ff fcdf 	bl	80013e4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d911      	bls.n	8001a54 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e007      	b.n	8001a64 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d1df      	bne.n	8001a22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d127      	bne.n	8001ade <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a9e:	f7ff fca1 	bl	80013e4 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa4:	e014      	b.n	8001ad0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aa6:	f7ff fc9d 	bl	80013e4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d90d      	bls.n	8001ad0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e007      	b.n	8001ae0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d0e3      	beq.n	8001aa6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d127      	bne.n	8001b52 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b1c:	d115      	bne.n	8001b4a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d111      	bne.n	8001b4a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe2c 	bl	80017a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b50:	e004      	b.n	8001b5c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4798      	blx	r3
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff fe21 	bl	80017ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	f043 0204 	orr.w	r2, r3, #4
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fe10 	bl	80017cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0ed      	b.n	8001da2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff f950 	bl	8000e78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0202 	bic.w	r2, r2, #2
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7ff fbfc 	bl	80013e4 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bee:	e012      	b.n	8001c16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bf0:	f7ff fbf8 	bl	80013e4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b0a      	cmp	r3, #10
 8001bfc:	d90b      	bls.n	8001c16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0c5      	b.n	8001da2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e5      	bne.n	8001bf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c34:	f7ff fbd6 	bl	80013e4 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c3a:	e012      	b.n	8001c62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c3c:	f7ff fbd2 	bl	80013e4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d90b      	bls.n	8001c62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e09f      	b.n	8001da2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0e5      	beq.n	8001c3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e007      	b.n	8001c9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e5b      	ldrb	r3, [r3, #25]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e9b      	ldrb	r3, [r3, #26]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0220 	bic.w	r2, r2, #32
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7edb      	ldrb	r3, [r3, #27]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0210 	bic.w	r2, r2, #16
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e007      	b.n	8001d18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0210 	orr.w	r2, r2, #16
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7f1b      	ldrb	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d108      	bne.n	8001d32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0208 	orr.w	r2, r2, #8
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e007      	b.n	8001d42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7f5b      	ldrb	r3, [r3, #29]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0204 	orr.w	r2, r2, #4
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0204 	bic.w	r2, r2, #4
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	ea42 0103 	orr.w	r1, r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc2:	7cfb      	ldrb	r3, [r7, #19]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d003      	beq.n	8001dd0 <HAL_CAN_ConfigFilter+0x26>
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 80aa 	bne.w	8001f24 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2201      	movs	r2, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d123      	bne.n	8001e52 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3248      	adds	r2, #72	; 0x48
 8001e32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d122      	bne.n	8001ea0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3248      	adds	r2, #72	; 0x48
 8001e80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e96:	6979      	ldr	r1, [r7, #20]
 8001e98:	3348      	adds	r3, #72	; 0x48
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ee6:	e007      	b.n	8001ef8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f16:	f023 0201 	bic.w	r2, r3, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e006      	b.n	8001f32 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d12e      	bne.n	8001fae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f68:	f7ff fa3c 	bl	80013e4 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f6e:	e012      	b.n	8001f96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f70:	f7ff fa38 	bl	80013e4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b0a      	cmp	r3, #10
 8001f7c:	d90b      	bls.n	8001f96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e012      	b.n	8001fbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e5      	bne.n	8001f70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e006      	b.n	8001fbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_AddTxMessage+0x2c>
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 80b8 	bne.w	8002160 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80a0 	beq.w	8002150 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	0e1b      	lsrs	r3, r3, #24
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e09e      	b.n	800216e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002030:	2201      	movs	r2, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	409a      	lsls	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3318      	adds	r3, #24
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	440b      	add	r3, r1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e00f      	b.n	800207e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002068:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002072:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3318      	adds	r3, #24
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	440b      	add	r3, r1
 800207c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3318      	adds	r3, #24
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	440b      	add	r3, r1
 800208e:	3304      	adds	r3, #4
 8002090:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	7d1b      	ldrb	r3, [r3, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d111      	bne.n	80020be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3318      	adds	r3, #24
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	6811      	ldr	r1, [r2, #0]
 80020ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3318      	adds	r3, #24
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	440b      	add	r3, r1
 80020ba:	3304      	adds	r3, #4
 80020bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3307      	adds	r3, #7
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	061a      	lsls	r2, r3, #24
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3306      	adds	r3, #6
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3305      	adds	r3, #5
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	3204      	adds	r2, #4
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	4610      	mov	r0, r2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6811      	ldr	r1, [r2, #0]
 80020e6:	ea43 0200 	orr.w	r2, r3, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3303      	adds	r3, #3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	061a      	lsls	r2, r3, #24
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3302      	adds	r3, #2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3301      	adds	r3, #1
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4313      	orrs	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	4610      	mov	r0, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6811      	ldr	r1, [r2, #0]
 800211c:	ea43 0200 	orr.w	r2, r3, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800212a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3318      	adds	r3, #24
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	6811      	ldr	r1, [r2, #0]
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3318      	adds	r3, #24
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	440b      	add	r3, r1
 800214a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e00e      	b.n	800216e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e006      	b.n	800216e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d003      	beq.n	800219c <HAL_CAN_GetRxMessage+0x24>
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b02      	cmp	r3, #2
 8002198:	f040 80f3 	bne.w	8002382 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10e      	bne.n	80021c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0e7      	b.n	8002390 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0d8      	b.n	8002390 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	331b      	adds	r3, #27
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0204 	and.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10c      	bne.n	8002216 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	331b      	adds	r3, #27
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4413      	add	r3, r2
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0d5b      	lsrs	r3, r3, #21
 800220c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e00b      	b.n	800222e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	331b      	adds	r3, #27
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	331b      	adds	r3, #27
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0202 	and.w	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	331b      	adds	r3, #27
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	331b      	adds	r3, #27
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	b2da      	uxtb	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	331b      	adds	r3, #27
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0a1a      	lsrs	r2, r3, #8
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0c1a      	lsrs	r2, r3, #16
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3302      	adds	r3, #2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e1a      	lsrs	r2, r3, #24
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	3303      	adds	r3, #3
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3304      	adds	r3, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0a1a      	lsrs	r2, r3, #8
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3305      	adds	r3, #5
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0c1a      	lsrs	r2, r3, #16
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3306      	adds	r3, #6
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e1a      	lsrs	r2, r3, #24
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	3307      	adds	r3, #7
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e007      	b.n	800237e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e006      	b.n	8002390 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d002      	beq.n	80023b8 <HAL_CAN_ActivateNotification+0x1e>
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d109      	bne.n	80023cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6959      	ldr	r1, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e006      	b.n	80023da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d07c      	beq.n	8002524 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d023      	beq.n	800247c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2201      	movs	r2, #1
 800243a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f97d 	bl	8002746 <HAL_CAN_TxMailbox0CompleteCallback>
 800244c:	e016      	b.n	800247c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	e00c      	b.n	800247c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	e002      	b.n	800247c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f980 	bl	800277c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d024      	beq.n	80024d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f95c 	bl	8002758 <HAL_CAN_TxMailbox1CompleteCallback>
 80024a0:	e016      	b.n	80024d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	e00c      	b.n	80024d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e002      	b.n	80024d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f95f 	bl	800278e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f93b 	bl	800276a <HAL_CAN_TxMailbox2CompleteCallback>
 80024f4:	e016      	b.n	8002524 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
 8002508:	e00c      	b.n	8002524 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	e002      	b.n	8002524 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f93e 	bl	80027a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2210      	movs	r2, #16
 8002546:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2208      	movs	r2, #8
 8002562:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f924 	bl	80027b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb2a 	bl	8000bdc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2208      	movs	r2, #8
 80025c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f904 	bl	80027d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8ec 	bl	80027c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8ed 	bl	80027e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2208      	movs	r2, #8
 8002628:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8e5 	bl	80027fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06c      	beq.n	800271e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03d      	beq.n	800271e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d038      	beq.n	800271e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b2:	2b30      	cmp	r3, #48	; 0x30
 80026b4:	d017      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x302>
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d804      	bhi.n	80026c4 <HAL_CAN_IRQHandler+0x2e0>
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d009      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x2ee>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d00c      	beq.n	80026dc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026c2:	e024      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d018      	beq.n	80026fa <HAL_CAN_IRQHandler+0x316>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d01b      	beq.n	8002704 <HAL_CAN_IRQHandler+0x320>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d00f      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x30c>
            break;
 80026d0:	e01d      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f043 0308 	orr.w	r3, r3, #8
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026da:	e018      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026e4:	e013      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ee:	e00e      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026f8:	e009      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002702:	e004      	b.n	800270e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800270c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800271c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f867 	bl	800280c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800273e:	bf00      	nop
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <__NVIC_EnableIRQ+0x34>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff4f 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff64 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ffb2 	bl	8002910 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff81 	bl	80028bc <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff57 	bl	8002884 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e043      	b.n	8002a7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_DMA_Init+0xa8>)
 80029fe:	4413      	add	r3, r2
 8002a00:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <HAL_DMA_Init+0xac>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	009a      	lsls	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_DMA_Init+0xb0>)
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	bffdfff8 	.word	0xbffdfff8
 8002a8c:	cccccccd 	.word	0xcccccccd
 8002a90:	40020000 	.word	0x40020000

08002a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x20>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e04a      	b.n	8002b4a <HAL_DMA_Start_IT+0xb6>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d13a      	bne.n	8002b3c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f9f3 	bl	8002ed6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 020e 	orr.w	r2, r2, #14
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e00f      	b.n	8002b2a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 020a 	orr.w	r2, r2, #10
 8002b28:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d008      	beq.n	8002b7a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e020      	b.n	8002bbc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 020e 	bic.w	r2, r2, #14
 8002b88:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d005      	beq.n	8002bea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e051      	b.n	8002c8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 020e 	bic.w	r2, r2, #14
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_DMA_Abort_IT+0xd0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d029      	beq.n	8002c68 <HAL_DMA_Abort_IT+0xa0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_DMA_Abort_IT+0xd4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d022      	beq.n	8002c64 <HAL_DMA_Abort_IT+0x9c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_DMA_Abort_IT+0xd8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d01a      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x96>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_DMA_Abort_IT+0xdc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d012      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x90>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <HAL_DMA_Abort_IT+0xe0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00a      	beq.n	8002c52 <HAL_DMA_Abort_IT+0x8a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <HAL_DMA_Abort_IT+0xe4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <HAL_DMA_Abort_IT+0x84>
 8002c46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c4a:	e00e      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c50:	e00b      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c56:	e008      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c62:	e002      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c64:	2310      	movs	r3, #16
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_Abort_IT+0xa2>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_DMA_Abort_IT+0xe8>)
 8002c6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
    } 
  }
  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40020008 	.word	0x40020008
 8002c9c:	4002001c 	.word	0x4002001c
 8002ca0:	40020030 	.word	0x40020030
 8002ca4:	40020044 	.word	0x40020044
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	4002006c 	.word	0x4002006c
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d04f      	beq.n	8002d7c <HAL_DMA_IRQHandler+0xc8>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d04a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a66      	ldr	r2, [pc, #408]	; (8002ea4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d029      	beq.n	8002d62 <HAL_DMA_IRQHandler+0xae>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xaa>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_DMA_IRQHandler+0x1f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xa4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a62      	ldr	r2, [pc, #392]	; (8002eb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x9e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <HAL_DMA_IRQHandler+0x200>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x98>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5f      	ldr	r2, [pc, #380]	; (8002eb8 <HAL_DMA_IRQHandler+0x204>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x92>
 8002d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d44:	e00e      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d4a:	e00b      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d50:	e008      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d56:	e005      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d5c:	e002      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_IRQHandler+0xb0>
 8002d62:	2304      	movs	r3, #4
 8002d64:	4a55      	ldr	r2, [pc, #340]	; (8002ebc <HAL_DMA_IRQHandler+0x208>)
 8002d66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8094 	beq.w	8002e9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	e08e      	b.n	8002e9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2202      	movs	r2, #2
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d056      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x186>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d051      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020a 	bic.w	r2, r2, #10
 8002db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <HAL_DMA_IRQHandler+0x1f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d029      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x166>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <HAL_DMA_IRQHandler+0x1f4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x162>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a35      	ldr	r2, [pc, #212]	; (8002eac <HAL_DMA_IRQHandler+0x1f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01a      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x15c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x156>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <HAL_DMA_IRQHandler+0x200>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x150>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a31      	ldr	r2, [pc, #196]	; (8002eb8 <HAL_DMA_IRQHandler+0x204>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x14a>
 8002df8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dfc:	e00e      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	e00b      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e08:	e008      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0e:	e005      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e14:	e002      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002e16:	2320      	movs	r3, #32
 8002e18:	e000      	b.n	8002e1c <HAL_DMA_IRQHandler+0x168>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_DMA_IRQHandler+0x208>)
 8002e1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d034      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e38:	e02f      	b.n	8002e9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2208      	movs	r2, #8
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d028      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x1e8>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 020e 	bic.w	r2, r2, #14
 8002e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
    }
  }
  return;
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
}
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40020008 	.word	0x40020008
 8002ea8:	4002001c 	.word	0x4002001c
 8002eac:	40020030 	.word	0x40020030
 8002eb0:	40020044 	.word	0x40020044
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	4002006c 	.word	0x4002006c
 8002ebc:	40020000 	.word	0x40020000

08002ec0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d108      	bne.n	8002f16 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f14:	e007      	b.n	8002f26 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	60da      	str	r2, [r3, #12]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b08b      	sub	sp, #44	; 0x2c
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	e127      	b.n	8003194 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f44:	2201      	movs	r2, #1
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8116 	bne.w	800318e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b12      	cmp	r3, #18
 8002f68:	d034      	beq.n	8002fd4 <HAL_GPIO_Init+0xa4>
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d80d      	bhi.n	8002f8a <HAL_GPIO_Init+0x5a>
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d02b      	beq.n	8002fca <HAL_GPIO_Init+0x9a>
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d804      	bhi.n	8002f80 <HAL_GPIO_Init+0x50>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d031      	beq.n	8002fde <HAL_GPIO_Init+0xae>
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d01c      	beq.n	8002fb8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f7e:	e048      	b.n	8003012 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d043      	beq.n	800300c <HAL_GPIO_Init+0xdc>
 8002f84:	2b11      	cmp	r3, #17
 8002f86:	d01b      	beq.n	8002fc0 <HAL_GPIO_Init+0x90>
          break;
 8002f88:	e043      	b.n	8003012 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f8a:	4a89      	ldr	r2, [pc, #548]	; (80031b0 <HAL_GPIO_Init+0x280>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d026      	beq.n	8002fde <HAL_GPIO_Init+0xae>
 8002f90:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_GPIO_Init+0x280>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d806      	bhi.n	8002fa4 <HAL_GPIO_Init+0x74>
 8002f96:	4a87      	ldr	r2, [pc, #540]	; (80031b4 <HAL_GPIO_Init+0x284>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d020      	beq.n	8002fde <HAL_GPIO_Init+0xae>
 8002f9c:	4a86      	ldr	r2, [pc, #536]	; (80031b8 <HAL_GPIO_Init+0x288>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_GPIO_Init+0xae>
          break;
 8002fa2:	e036      	b.n	8003012 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fa4:	4a85      	ldr	r2, [pc, #532]	; (80031bc <HAL_GPIO_Init+0x28c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_Init+0xae>
 8002faa:	4a85      	ldr	r2, [pc, #532]	; (80031c0 <HAL_GPIO_Init+0x290>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d016      	beq.n	8002fde <HAL_GPIO_Init+0xae>
 8002fb0:	4a84      	ldr	r2, [pc, #528]	; (80031c4 <HAL_GPIO_Init+0x294>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0xae>
          break;
 8002fb6:	e02c      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e028      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	e023      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	623b      	str	r3, [r7, #32]
          break;
 8002fd2:	e01e      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e019      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	623b      	str	r3, [r7, #32]
          break;
 8002fea:	e012      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	611a      	str	r2, [r3, #16]
          break;
 8002ffe:	e008      	b.n	8003012 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003000:	2308      	movs	r3, #8
 8003002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	615a      	str	r2, [r3, #20]
          break;
 800300a:	e002      	b.n	8003012 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
          break;
 8003010:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d801      	bhi.n	800301c <HAL_GPIO_Init+0xec>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	e001      	b.n	8003020 <HAL_GPIO_Init+0xf0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2bff      	cmp	r3, #255	; 0xff
 8003026:	d802      	bhi.n	800302e <HAL_GPIO_Init+0xfe>
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x104>
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	3b08      	subs	r3, #8
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	210f      	movs	r1, #15
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	401a      	ands	r2, r3
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	431a      	orrs	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8096 	beq.w	800318e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003062:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_GPIO_Init+0x298>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4a58      	ldr	r2, [pc, #352]	; (80031c8 <HAL_GPIO_Init+0x298>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6193      	str	r3, [r2, #24]
 800306e:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_GPIO_Init+0x298>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800307a:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_GPIO_Init+0x29c>)
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_GPIO_Init+0x2a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_GPIO_Init+0x19e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_GPIO_Init+0x2a4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00d      	beq.n	80030ca <HAL_GPIO_Init+0x19a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_GPIO_Init+0x2a8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <HAL_GPIO_Init+0x196>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2ac>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_GPIO_Init+0x192>
 80030be:	2303      	movs	r3, #3
 80030c0:	e006      	b.n	80030d0 <HAL_GPIO_Init+0x1a0>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e004      	b.n	80030d0 <HAL_GPIO_Init+0x1a0>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e002      	b.n	80030d0 <HAL_GPIO_Init+0x1a0>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_GPIO_Init+0x1a0>
 80030ce:	2300      	movs	r3, #0
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	f002 0203 	and.w	r2, r2, #3
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	4093      	lsls	r3, r2
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030e0:	493a      	ldr	r1, [pc, #232]	; (80031cc <HAL_GPIO_Init+0x29c>)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4938      	ldr	r1, [pc, #224]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
 8003106:	e006      	b.n	8003116 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4933      	ldr	r1, [pc, #204]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003122:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	492e      	ldr	r1, [pc, #184]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
 800312e:	e006      	b.n	800313e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	43db      	mvns	r3, r3
 8003138:	4929      	ldr	r1, [pc, #164]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 800313a:	4013      	ands	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	43db      	mvns	r3, r3
 8003160:	491f      	ldr	r1, [pc, #124]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003162:	4013      	ands	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	491a      	ldr	r1, [pc, #104]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	60cb      	str	r3, [r1, #12]
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	43db      	mvns	r3, r3
 8003188:	4915      	ldr	r1, [pc, #84]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 800318a:	4013      	ands	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f aed0 	bne.w	8002f44 <HAL_GPIO_Init+0x14>
  }
}
 80031a4:	bf00      	nop
 80031a6:	372c      	adds	r7, #44	; 0x2c
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	10210000 	.word	0x10210000
 80031b4:	10110000 	.word	0x10110000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10310000 	.word	0x10310000
 80031c0:	10320000 	.word	0x10320000
 80031c4:	10220000 	.word	0x10220000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40010800 	.word	0x40010800
 80031d4:	40010c00 	.word	0x40010c00
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40011400 	.word	0x40011400
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003230:	e002      	b.n	8003238 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	611a      	str	r2, [r3, #16]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e10f      	b.n	8003476 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fe84 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003288:	f000 ffd4 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 800328c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4a7b      	ldr	r2, [pc, #492]	; (8003480 <HAL_I2C_Init+0x23c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d807      	bhi.n	80032a8 <HAL_I2C_Init+0x64>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a7a      	ldr	r2, [pc, #488]	; (8003484 <HAL_I2C_Init+0x240>)
 800329c:	4293      	cmp	r3, r2
 800329e:	bf94      	ite	ls
 80032a0:	2301      	movls	r3, #1
 80032a2:	2300      	movhi	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	e006      	b.n	80032b6 <HAL_I2C_Init+0x72>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a77      	ldr	r2, [pc, #476]	; (8003488 <HAL_I2C_Init+0x244>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bf94      	ite	ls
 80032b0:	2301      	movls	r3, #1
 80032b2:	2300      	movhi	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0db      	b.n	8003476 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a72      	ldr	r2, [pc, #456]	; (800348c <HAL_I2C_Init+0x248>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0c9b      	lsrs	r3, r3, #18
 80032c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a64      	ldr	r2, [pc, #400]	; (8003480 <HAL_I2C_Init+0x23c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d802      	bhi.n	80032f8 <HAL_I2C_Init+0xb4>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3301      	adds	r3, #1
 80032f6:	e009      	b.n	800330c <HAL_I2C_Init+0xc8>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	4a63      	ldr	r2, [pc, #396]	; (8003490 <HAL_I2C_Init+0x24c>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	3301      	adds	r3, #1
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800331e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4956      	ldr	r1, [pc, #344]	; (8003480 <HAL_I2C_Init+0x23c>)
 8003328:	428b      	cmp	r3, r1
 800332a:	d80d      	bhi.n	8003348 <HAL_I2C_Init+0x104>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e59      	subs	r1, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fbb1 f3f3 	udiv	r3, r1, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	bf38      	it	cc
 8003344:	2304      	movcc	r3, #4
 8003346:	e04f      	b.n	80033e8 <HAL_I2C_Init+0x1a4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_I2C_Init+0x130>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e012      	b.n	800339a <HAL_I2C_Init+0x156>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	0099      	lsls	r1, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	fbb0 f3f3 	udiv	r3, r0, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x15e>
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_I2C_Init+0x1a4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <HAL_I2C_Init+0x184>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e58      	subs	r0, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c6:	e00f      	b.n	80033e8 <HAL_I2C_Init+0x1a4>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	6809      	ldr	r1, [r1, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6911      	ldr	r1, [r2, #16]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	000186a0 	.word	0x000186a0
 8003484:	001e847f 	.word	0x001e847f
 8003488:	003d08ff 	.word	0x003d08ff
 800348c:	431bde83 	.word	0x431bde83
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	460b      	mov	r3, r1
 80034a2:	817b      	strh	r3, [r7, #10]
 80034a4:	4613      	mov	r3, r2
 80034a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7fd ff9c 	bl	80013e4 <HAL_GetTick>
 80034ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 80e0 	bne.w	800367c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4970      	ldr	r1, [pc, #448]	; (8003688 <HAL_I2C_Master_Transmit+0x1f4>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f958 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0d3      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0x50>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0cc      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d007      	beq.n	800350a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2221      	movs	r2, #33	; 0x21
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2210      	movs	r2, #16
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_I2C_Master_Transmit+0x1f8>)
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f89c 	bl	8003690 <I2C_MasterRequestWrite>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08d      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003578:	e066      	b.n	8003648 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f9d2 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b04      	cmp	r3, #4
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06b      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d11b      	bne.n	800361c <HAL_I2C_Master_Transmit+0x188>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6a39      	ldr	r1, [r7, #32]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f9c2 	bl	80039aa <I2C_WaitOnBTFFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e01a      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d194      	bne.n	800357a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	00100002 	.word	0x00100002
 800368c:	ffff0000 	.word	0xffff0000

08003690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d006      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b12      	cmp	r3, #18
 80036d2:	d107      	bne.n	80036e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f843 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e035      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d108      	bne.n	800371c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e01b      	b.n	8003754 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	11db      	asrs	r3, r3, #7
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0306 	and.w	r3, r3, #6
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f063 030f 	orn	r3, r3, #15
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <I2C_MasterRequestWrite+0xe4>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f875 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e010      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <I2C_MasterRequestWrite+0xe8>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f865 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010008 	.word	0x00010008
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378c:	e025      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d021      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd fe25 	bl	80013e4 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e023      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10d      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	e00c      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0b6      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	e051      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d123      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e046      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d021      	beq.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fd fda3 	bl	80013e4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e020      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10c      	bne.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e00b      	b.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	43da      	mvns	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d18d      	bne.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	e02d      	b.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f878 	bl	8003a2c <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e02d      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d021      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fd fd49 	bl	80013e4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d1ca      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b6:	e02d      	b.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f837 	bl	8003a2c <I2C_IsAcknowledgeFailed>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d021      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fd fd08 	bl	80013e4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d1ca      	bne.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d11b      	bne.n	8003a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e26c      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8087 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa8:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d00c      	beq.n	8003ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ab4:	4b8f      	ldr	r3, [pc, #572]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d112      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x5e>
 8003ac0:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ace:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d06c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x12c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d168      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e246      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x76>
 8003af0:	4b80      	ldr	r3, [pc, #512]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a7f      	ldr	r2, [pc, #508]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e02e      	b.n	8003b5c <HAL_RCC_OscConfig+0xd4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7a      	ldr	r2, [pc, #488]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b78      	ldr	r3, [pc, #480]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a77      	ldr	r2, [pc, #476]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e01d      	b.n	8003b5c <HAL_RCC_OscConfig+0xd4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0xbc>
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a71      	ldr	r2, [pc, #452]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6e      	ldr	r2, [pc, #440]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xd4>
 8003b44:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a67      	ldr	r2, [pc, #412]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fc3e 	bl	80013e4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fc3a 	bl	80013e4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1fa      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe4>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fc2a 	bl	80013e4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fd fc26 	bl	80013e4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1e6      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x10c>
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d063      	beq.n	8003c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bce:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d11c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x18c>
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_RCC_OscConfig+0x176>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1ba      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4939      	ldr	r1, [pc, #228]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	e03a      	b.n	8003c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fd fbdf 	bl	80013e4 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7fd fbdb 	bl	80013e4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e19b      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4927      	ldr	r1, [pc, #156]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd fbbe 	bl	80013e4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fbba 	bl	80013e4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e17a      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d03a      	beq.n	8003d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d019      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fb9e 	bl	80013e4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fd fb9a 	bl	80013e4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e15a      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f000 fb0a 	bl	80042e4 <RCC_Delay>
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fb84 	bl	80013e4 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cde:	e00f      	b.n	8003d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fb80 	bl	80013e4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d908      	bls.n	8003d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e140      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	42420000 	.word	0x42420000
 8003cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b9e      	ldr	r3, [pc, #632]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e9      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a6 	beq.w	8003e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b97      	ldr	r3, [pc, #604]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	4b94      	ldr	r3, [pc, #592]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a93      	ldr	r2, [pc, #588]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d34:	61d3      	str	r3, [r2, #28]
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b8e      	ldr	r3, [pc, #568]	; (8003f80 <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d118      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d52:	4b8b      	ldr	r3, [pc, #556]	; (8003f80 <HAL_RCC_OscConfig+0x4f8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a8a      	ldr	r2, [pc, #552]	; (8003f80 <HAL_RCC_OscConfig+0x4f8>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fb41 	bl	80013e4 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d66:	f7fd fb3d 	bl	80013e4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b64      	cmp	r3, #100	; 0x64
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0fd      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x4f8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x312>
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	e02d      	b.n	8003df6 <HAL_RCC_OscConfig+0x36e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x334>
 8003da2:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a75      	ldr	r2, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6213      	str	r3, [r2, #32]
 8003dae:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	e01c      	b.n	8003df6 <HAL_RCC_OscConfig+0x36e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_OscConfig+0x356>
 8003dc4:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4a6c      	ldr	r2, [pc, #432]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6213      	str	r3, [r2, #32]
 8003ddc:	e00b      	b.n	8003df6 <HAL_RCC_OscConfig+0x36e>
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6213      	str	r3, [r2, #32]
 8003dea:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d015      	beq.n	8003e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd faf1 	bl	80013e4 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd faed 	bl	80013e4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e0ab      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	4b57      	ldr	r3, [pc, #348]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ee      	beq.n	8003e06 <HAL_RCC_OscConfig+0x37e>
 8003e28:	e014      	b.n	8003e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd fadb 	bl	80013e4 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd fad7 	bl	80013e4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e095      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ee      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4a47      	ldr	r2, [pc, #284]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8081 	beq.w	8003f72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e70:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d061      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d146      	bne.n	8003f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <HAL_RCC_OscConfig+0x4fc>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fd faab 	bl	80013e4 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fd faa7 	bl	80013e4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e067      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d108      	bne.n	8003ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	492d      	ldr	r1, [pc, #180]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a19      	ldr	r1, [r3, #32]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	430b      	orrs	r3, r1
 8003ede:	4927      	ldr	r1, [pc, #156]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x4fc>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fd fa7b 	bl	80013e4 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fd fa77 	bl	80013e4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e037      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x46a>
 8003f10:	e02f      	b.n	8003f72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <HAL_RCC_OscConfig+0x4fc>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd fa64 	bl	80013e4 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd fa60 	bl	80013e4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e020      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x498>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e013      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42420060 	.word	0x42420060

08003f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0d0      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b67      	ldr	r3, [pc, #412]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 0207 	bic.w	r2, r3, #7
 8003fb2:	4965      	ldr	r1, [pc, #404]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b8      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	494d      	ldr	r1, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d040      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07f      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e073      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06b      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4936      	ldr	r1, [pc, #216]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd f9b4 	bl	80013e4 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd f9b0 	bl	80013e4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e053      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d210      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	4922      	ldr	r1, [pc, #136]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e032      	b.n	800413e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4916      	ldr	r1, [pc, #88]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004116:	f000 f821 	bl	800415c <HAL_RCC_GetSysClockFreq>
 800411a:	4601      	mov	r1, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	fa21 f303 	lsr.w	r3, r1, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1cc>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1d0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd f812 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40022000 	.word	0x40022000
 800414c:	40021000 	.word	0x40021000
 8004150:	0800879c 	.word	0x0800879c
 8004154:	20000004 	.word	0x20000004
 8004158:	20000008 	.word	0x20000008

0800415c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	b490      	push	{r4, r7}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004164:	1d3c      	adds	r4, r7, #4
 8004166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800416c:	4b28      	ldr	r3, [pc, #160]	; (8004210 <HAL_RCC_GetSysClockFreq+0xb4>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d002      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x40>
 8004196:	2b08      	cmp	r3, #8
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x46>
 800419a:	e02d      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <HAL_RCC_GetSysClockFreq+0xbc>)
 800419e:	623b      	str	r3, [r7, #32]
      break;
 80041a0:	e02d      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	0c9b      	lsrs	r3, r3, #18
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ae:	4413      	add	r3, r2
 80041b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	0c5b      	lsrs	r3, r3, #17
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ce:	4413      	add	r3, r2
 80041d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041da:	fb02 f203 	mul.w	r2, r2, r3
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	e004      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	623b      	str	r3, [r7, #32]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041fa:	623b      	str	r3, [r7, #32]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc90      	pop	{r4, r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	080086c8 	.word	0x080086c8
 8004210:	080086d8 	.word	0x080086d8
 8004214:	40021000 	.word	0x40021000
 8004218:	007a1200 	.word	0x007a1200
 800421c:	003d0900 	.word	0x003d0900

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <HAL_RCC_GetHCLKFreq+0x10>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff2 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 800423c:	4601      	mov	r1, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	080087ac 	.word	0x080087ac

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004260:	f7ff ffde 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004264:	4601      	mov	r1, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	0adb      	lsrs	r3, r3, #11
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4a03      	ldr	r2, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	080087ac 	.word	0x080087ac

08004284 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	220f      	movs	r2, #15
 8004292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_GetClockConfig+0x58>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCC_GetClockConfig+0x58>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetClockConfig+0x58>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RCC_GetClockConfig+0x58>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40022000 	.word	0x40022000

080042e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <RCC_Delay+0x34>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <RCC_Delay+0x38>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	0a5b      	lsrs	r3, r3, #9
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004300:	bf00      	nop
  }
  while (Delay --);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1e5a      	subs	r2, r3, #1
 8004306:	60fa      	str	r2, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f9      	bne.n	8004300 <RCC_Delay+0x1c>
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000004 	.word	0x20000004
 800431c:	10624dd3 	.word	0x10624dd3

08004320 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d07d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004340:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	61d3      	str	r3, [r2, #28]
 8004358:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d118      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a42      	ldr	r2, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800437a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004380:	f7fd f830 	bl	80013e4 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004386:	e008      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fd f82c 	bl	80013e4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e06d      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d027      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043da:	4a29      	ldr	r2, [pc, #164]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d014      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fc fffb 	bl	80013e4 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fc fff7 	bl	80013e4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e036      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ee      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004414:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4917      	ldr	r1, [pc, #92]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	4313      	orrs	r3, r2
 8004424:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004462:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
 8004488:	42420440 	.word	0x42420440

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e01d      	b.n	80044da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f815 	bl	80044e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 f962 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d007      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d122      	bne.n	8004596 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8ed 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8e0 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8ef 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d122      	bne.n	80045ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d11b      	bne.n	80045ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0204 	mvn.w	r2, #4
 80045ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8c3 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 80045d6:	e005      	b.n	80045e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8b6 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8c5 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d122      	bne.n	800463e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b08      	cmp	r3, #8
 8004604:	d11b      	bne.n	800463e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0208 	mvn.w	r2, #8
 800460e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2204      	movs	r2, #4
 8004614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f899 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 800462a:	e005      	b.n	8004638 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f88c 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f89b 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b10      	cmp	r3, #16
 800464a:	d122      	bne.n	8004692 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b10      	cmp	r3, #16
 8004658:	d11b      	bne.n	8004692 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0210 	mvn.w	r2, #16
 8004662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2208      	movs	r2, #8
 8004668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f86f 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 800467e:	e005      	b.n	800468c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f862 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f871 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0201 	mvn.w	r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fc fb23 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8c0 	bl	800486a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f835 	bl	8004780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d10e      	bne.n	8004742 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0220 	mvn.w	r2, #32
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f88b 	bl	8004858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
	...

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <TIM_Base_SetConfig+0xb8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <TIM_Base_SetConfig+0x30>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d007      	beq.n	80047c4 <TIM_Base_SetConfig+0x30>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a26      	ldr	r2, [pc, #152]	; (8004850 <TIM_Base_SetConfig+0xbc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_Base_SetConfig+0x30>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a25      	ldr	r2, [pc, #148]	; (8004854 <TIM_Base_SetConfig+0xc0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d108      	bne.n	80047d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <TIM_Base_SetConfig+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_Base_SetConfig+0x62>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d007      	beq.n	80047f6 <TIM_Base_SetConfig+0x62>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <TIM_Base_SetConfig+0xbc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_Base_SetConfig+0x62>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a18      	ldr	r2, [pc, #96]	; (8004854 <TIM_Base_SetConfig+0xc0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a07      	ldr	r2, [pc, #28]	; (800484c <TIM_Base_SetConfig+0xb8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d103      	bne.n	800483c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	615a      	str	r2, [r3, #20]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800

08004858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e03f      	b.n	800490e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc fba6 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fc0f 	bl	80050e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b088      	sub	sp, #32
 800491a:	af02      	add	r7, sp, #8
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	f040 8083 	bne.w	8004a3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_UART_Transmit+0x2e>
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e07b      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit+0x40>
 8004952:	2302      	movs	r3, #2
 8004954:	e074      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800496c:	f7fc fd3a 	bl	80013e4 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800497e:	e042      	b.n	8004a06 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004996:	d122      	bne.n	80049de <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fa34 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e046      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3302      	adds	r3, #2
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	e017      	b.n	8004a06 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3301      	adds	r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e013      	b.n	8004a06 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fa11 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e023      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	60ba      	str	r2, [r7, #8]
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1b7      	bne.n	8004980 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f9f8 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00a      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d140      	bne.n	8004ae4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_UART_Receive_IT+0x26>
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e039      	b.n	8004ae6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Receive_IT+0x38>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e032      	b.n	8004ae6 <HAL_UART_Receive_IT+0x9e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2222      	movs	r2, #34	; 0x22
 8004aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0220 	orr.w	r2, r2, #32
 8004ade:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d024      	beq.n	8004b70 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b34:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	2200      	movs	r2, #0
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f801 	bl	8002b52 <HAL_DMA_Abort>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe f9b0 	bl	8002ec0 <HAL_DMA_GetError>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d104      	bne.n	8004b70 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e03d      	b.n	8004bec <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d024      	beq.n	8004bc8 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd ffd5 	bl	8002b52 <HAL_DMA_Abort>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe f984 	bl	8002ec0 <HAL_DMA_GetError>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d104      	bne.n	8004bc8 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e011      	b.n	8004bec <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10d      	bne.n	8004c46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_UART_IRQHandler+0x52>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9ce 	bl	8004fe0 <UART_Receive_IT>
      return;
 8004c44:	e0cc      	b.n	8004de0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80ab 	beq.w	8004da4 <HAL_UART_IRQHandler+0x1b0>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_UART_IRQHandler+0x70>
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a0 	beq.w	8004da4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_UART_IRQHandler+0x90>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	f043 0201 	orr.w	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_UART_IRQHandler+0xb0>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	f043 0202 	orr.w	r2, r3, #2
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_UART_IRQHandler+0xd0>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	f043 0204 	orr.w	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xf0>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	f043 0208 	orr.w	r2, r3, #8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d078      	beq.n	8004dde <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_UART_IRQHandler+0x112>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f96d 	bl	8004fe0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_UART_IRQHandler+0x13a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d031      	beq.n	8004d92 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8b8 	bl	8004ea4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d023      	beq.n	8004d8a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <HAL_UART_IRQHandler+0x1f4>)
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd ff2e 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	e00e      	b.n	8004da0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f83b 	bl	8004dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	e00a      	b.n	8004da0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f837 	bl	8004dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e006      	b.n	8004da0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f833 	bl	8004dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d9e:	e01e      	b.n	8004dde <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	bf00      	nop
    return;
 8004da2:	e01c      	b.n	8004dde <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x1cc>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8a4 	bl	8004f06 <UART_Transmit_IT>
    return;
 8004dbe:	e00f      	b.n	8004de0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_UART_IRQHandler+0x1ec>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8eb 	bl	8004fb0 <UART_EndTransmit_IT>
    return;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004dde:	bf00      	nop
  }
}
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08004edf 	.word	0x08004edf

08004dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	e02c      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d028      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e30:	f7fc fad8 	bl	80013e4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d21d      	bcs.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e00f      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d0c3      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff ff80 	bl	8004dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b21      	cmp	r3, #33	; 0x21
 8004f18:	d144      	bne.n	8004fa4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	d11a      	bne.n	8004f5a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]
 8004f4c:	e00e      	b.n	8004f6c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]
 8004f58:	e008      	b.n	8004f6c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6211      	str	r1, [r2, #32]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff0b 	bl	8004dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b22      	cmp	r3, #34	; 0x22
 8004ff2:	d171      	bne.n	80050d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffc:	d123      	bne.n	8005046 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10e      	bne.n	800502a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
 8005028:	e029      	b.n	800507e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	b29b      	uxth	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
 8005044:	e01b      	b.n	800507e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6858      	ldr	r0, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6291      	str	r1, [r2, #40]	; 0x28
 800505e:	b2c2      	uxtb	r2, r0
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e00c      	b.n	800507e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	1c58      	adds	r0, r3, #1
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	6288      	str	r0, [r1, #40]	; 0x28
 8005076:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4619      	mov	r1, r3
 800508c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800508e:	2b00      	cmp	r3, #0
 8005090:	d120      	bne.n	80050d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0220 	bic.w	r2, r2, #32
 80050a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb f8a0 	bl	8000210 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e002      	b.n	80050da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800511e:	f023 030c 	bic.w	r3, r3, #12
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	430b      	orrs	r3, r1
 800512a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a52      	ldr	r2, [pc, #328]	; (8005290 <UART_SetConfig+0x1ac>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d14e      	bne.n	80051ea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7ff f886 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8005150:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009a      	lsls	r2, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	4a4a      	ldr	r2, [pc, #296]	; (8005294 <UART_SetConfig+0x1b0>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	0119      	lsls	r1, r3, #4
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009a      	lsls	r2, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	fbb2 f2f3 	udiv	r2, r2, r3
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <UART_SetConfig+0x1b0>)
 800518a:	fba3 0302 	umull	r0, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2064      	movs	r0, #100	; 0x64
 8005192:	fb00 f303 	mul.w	r3, r0, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a3d      	ldr	r2, [pc, #244]	; (8005294 <UART_SetConfig+0x1b0>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	4419      	add	r1, r3
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	4b34      	ldr	r3, [pc, #208]	; (8005294 <UART_SetConfig+0x1b0>)
 80051c2:	fba3 0302 	umull	r0, r3, r3, r2
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2064      	movs	r0, #100	; 0x64
 80051ca:	fb00 f303 	mul.w	r3, r0, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	3332      	adds	r3, #50	; 0x32
 80051d4:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <UART_SetConfig+0x1b0>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 020f 	and.w	r2, r3, #15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	440a      	add	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80051e8:	e04d      	b.n	8005286 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80051ea:	f7ff f823 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80051ee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009a      	lsls	r2, r3, #2
 80051fa:	441a      	add	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <UART_SetConfig+0x1b0>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	0119      	lsls	r1, r3, #4
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009a      	lsls	r2, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	fbb2 f2f3 	udiv	r2, r2, r3
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <UART_SetConfig+0x1b0>)
 8005228:	fba3 0302 	umull	r0, r3, r3, r2
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	2064      	movs	r0, #100	; 0x64
 8005230:	fb00 f303 	mul.w	r3, r0, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	3332      	adds	r3, #50	; 0x32
 800523a:	4a16      	ldr	r2, [pc, #88]	; (8005294 <UART_SetConfig+0x1b0>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005246:	4419      	add	r1, r3
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009a      	lsls	r2, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	fbb2 f2f3 	udiv	r2, r2, r3
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <UART_SetConfig+0x1b0>)
 8005260:	fba3 0302 	umull	r0, r3, r3, r2
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	2064      	movs	r0, #100	; 0x64
 8005268:	fb00 f303 	mul.w	r3, r0, r3
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	3332      	adds	r3, #50	; 0x32
 8005272:	4a08      	ldr	r2, [pc, #32]	; (8005294 <UART_SetConfig+0x1b0>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	440a      	add	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40013800 	.word	0x40013800
 8005294:	51eb851f 	.word	0x51eb851f

08005298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f103 0208 	add.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
 80052b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f103 0208 	add.w	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f103 0208 	add.w	r2, r3, #8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d103      	bne.n	8005354 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e00c      	b.n	800536e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3308      	adds	r3, #8
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e002      	b.n	8005362 <vListInsert+0x2e>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d2f6      	bcs.n	800535c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	601a      	str	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6892      	ldr	r2, [r2, #8]
 80053ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6852      	ldr	r2, [r2, #4]
 80053c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d103      	bne.n	80053d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1e5a      	subs	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
	...

080053f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	e7fe      	b.n	800541e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005420:	f001 f8f0 	bl	8006604 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	3b01      	subs	r3, #1
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	441a      	add	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	22ff      	movs	r2, #255	; 0xff
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d114      	bne.n	80054a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01a      	beq.n	80054b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3310      	adds	r3, #16
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fdcc 	bl	8006020 <xTaskRemoveFromEventList>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d012      	beq.n	80054b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <xQueueGenericReset+0xcc>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	e009      	b.n	80054b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3310      	adds	r3, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fef7 	bl	8005298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fef2 	bl	8005298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054b4:	f001 f8d4 	bl	8006660 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054b8:	2301      	movs	r3, #1
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <xQueueGenericCreate+0x28>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e7fe      	b.n	80054ee <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e004      	b.n	8005506 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3348      	adds	r3, #72	; 0x48
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f97a 	bl	8006804 <pvPortMalloc>
 8005510:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00f      	beq.n	8005538 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	3348      	adds	r3, #72	; 0x48
 800551c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005526:	79fa      	ldrb	r2, [r7, #7]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f805 	bl	8005542 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005538:	69bb      	ldr	r3, [r7, #24]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e002      	b.n	8005564 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005570:	2101      	movs	r1, #1
 8005572:	69b8      	ldr	r0, [r7, #24]
 8005574:	f7ff ff40 	bl	80053f8 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	2073      	movs	r0, #115	; 0x73
 8005580:	f002 f9ec 	bl	800795c <SEGGER_SYSVIEW_RecordU32x3>
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af04      	add	r7, sp, #16
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <xTaskCreateStatic+0x28>
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	e7fe      	b.n	80055b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <xTaskCreateStatic+0x42>
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e7fe      	b.n	80055cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ce:	2354      	movs	r3, #84	; 0x54
 80055d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b54      	cmp	r3, #84	; 0x54
 80055d6:	d009      	beq.n	80055ec <xTaskCreateStatic+0x60>
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e7fe      	b.n	80055ea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01e      	beq.n	8005630 <xTaskCreateStatic+0xa4>
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005600:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800560a:	2300      	movs	r3, #0
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f850 	bl	80056c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800562a:	f000 f8cb 	bl	80057c4 <prvAddNewTaskToReadyList>
 800562e:	e001      	b.n	8005634 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005634:	697b      	ldr	r3, [r7, #20]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08c      	sub	sp, #48	; 0x30
 8005642:	af04      	add	r7, sp, #16
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f001 f8d6 	bl	8006804 <pvPortMalloc>
 8005658:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005660:	2054      	movs	r0, #84	; 0x54
 8005662:	f001 f8cf 	bl	8006804 <pvPortMalloc>
 8005666:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
 8005674:	e005      	b.n	8005682 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005676:	6978      	ldr	r0, [r7, #20]
 8005678:	f001 f986 	bl	8006988 <vPortFree>
 800567c:	e001      	b.n	8005682 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d017      	beq.n	80056b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	2300      	movs	r3, #0
 8005694:	9303      	str	r3, [sp, #12]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f80e 	bl	80056c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ac:	69f8      	ldr	r0, [r7, #28]
 80056ae:	f000 f889 	bl	80057c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e002      	b.n	80056be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056be:	69bb      	ldr	r3, [r7, #24]
	}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056e0:	3b01      	subs	r3, #1
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <prvInitialiseNewTask+0x46>
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e7fe      	b.n	800570c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e012      	b.n	800573a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	7819      	ldrb	r1, [r3, #0]
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	3334      	adds	r3, #52	; 0x34
 8005724:	460a      	mov	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3301      	adds	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d9e9      	bls.n	8005714 <prvInitialiseNewTask+0x4c>
 8005740:	e000      	b.n	8005744 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005742:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b06      	cmp	r3, #6
 8005750:	d901      	bls.n	8005756 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005752:	2306      	movs	r3, #6
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fdb2 	bl	80052d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	3318      	adds	r3, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fdad 	bl	80052d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005780:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	f1c3 0207 	rsb	r2, r3, #7
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	2200      	movs	r2, #0
 8005796:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	69b8      	ldr	r0, [r7, #24]
 80057a6:	f000 fdef 	bl	8006388 <pxPortInitialiseStack>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057bc:	bf00      	nop
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057c4:	b5b0      	push	{r4, r5, r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057cc:	f000 ff1a 	bl	8006604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057d0:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <prvAddNewTaskToReadyList+0xf4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <prvAddNewTaskToReadyList+0xf4>)
 80057d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <prvAddNewTaskToReadyList+0xf8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057e2:	4a36      	ldr	r2, [pc, #216]	; (80058bc <prvAddNewTaskToReadyList+0xf8>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057e8:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <prvAddNewTaskToReadyList+0xf4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d110      	bne.n	8005812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057f0:	f000 fc94 	bl	800611c <prvInitialiseTaskLists>
 80057f4:	e00d      	b.n	8005812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057f6:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <prvAddNewTaskToReadyList+0xfc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057fe:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <prvAddNewTaskToReadyList+0xf8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d802      	bhi.n	8005812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <prvAddNewTaskToReadyList+0xf8>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005812:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <prvAddNewTaskToReadyList+0x100>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <prvAddNewTaskToReadyList+0x100>)
 800581a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <prvAddNewTaskToReadyList+0x8c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	f002 fc6b 	bl	8008100 <SEGGER_SYSVIEW_OnTaskCreate>
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	461d      	mov	r5, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461c      	mov	r4, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	1ae3      	subs	r3, r4, r3
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	462b      	mov	r3, r5
 800584c:	f001 fa56 	bl	8006cfc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	f002 fcd8 	bl	8008208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <prvAddNewTaskToReadyList+0x104>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <prvAddNewTaskToReadyList+0x104>)
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <prvAddNewTaskToReadyList+0x108>)
 8005878:	441a      	add	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7ff fd34 	bl	80052ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005886:	f000 feeb 	bl	8006660 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <prvAddNewTaskToReadyList+0xfc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvAddNewTaskToReadyList+0xf8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d207      	bcs.n	80058b0 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <prvAddNewTaskToReadyList+0x10c>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bdb0      	pop	{r4, r5, r7, pc}
 80058b8:	20000588 	.word	0x20000588
 80058bc:	20000488 	.word	0x20000488
 80058c0:	20000594 	.word	0x20000594
 80058c4:	200005a4 	.word	0x200005a4
 80058c8:	20000590 	.word	0x20000590
 80058cc:	2000048c 	.word	0x2000048c
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058dc:	f000 fe92 	bl	8006604 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <vTaskDelete+0x18>
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <vTaskDelete+0x110>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	e000      	b.n	80058ee <vTaskDelete+0x1a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd55 	bl	80053a4 <uxListRemove>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d115      	bne.n	800592c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	4938      	ldr	r1, [pc, #224]	; (80059e8 <vTaskDelete+0x114>)
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <vTaskDelete+0x58>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	2201      	movs	r2, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43da      	mvns	r2, r3
 8005922:	4b32      	ldr	r3, [pc, #200]	; (80059ec <vTaskDelete+0x118>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4013      	ands	r3, r2
 8005928:	4a30      	ldr	r2, [pc, #192]	; (80059ec <vTaskDelete+0x118>)
 800592a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3318      	adds	r3, #24
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fd33 	bl	80053a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <vTaskDelete+0x11c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <vTaskDelete+0x11c>)
 8005946:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005948:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <vTaskDelete+0x110>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d10b      	bne.n	800596a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4826      	ldr	r0, [pc, #152]	; (80059f4 <vTaskDelete+0x120>)
 800595a:	f7ff fcc8 	bl	80052ee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <vTaskDelete+0x124>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	4a24      	ldr	r2, [pc, #144]	; (80059f8 <vTaskDelete+0x124>)
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e009      	b.n	800597e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <vTaskDelete+0x128>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3b01      	subs	r3, #1
 8005970:	4a22      	ldr	r2, [pc, #136]	; (80059fc <vTaskDelete+0x128>)
 8005972:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fc3d 	bl	80061f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800597a:	f000 fc69 	bl	8006250 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4618      	mov	r0, r3
 8005982:	f002 fce3 	bl	800834c <SEGGER_SYSVIEW_ShrinkId>
 8005986:	4603      	mov	r3, r0
 8005988:	4619      	mov	r1, r3
 800598a:	2022      	movs	r0, #34	; 0x22
 800598c:	f001 ff50 	bl	8007830 <SEGGER_SYSVIEW_RecordU32>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fa1a 	bl	8006dcc <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8005998:	f000 fe62 	bl	8006660 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <vTaskDelete+0x12c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01a      	beq.n	80059da <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <vTaskDelete+0x110>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d115      	bne.n	80059da <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <vTaskDelete+0x130>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <vTaskDelete+0xf6>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	e7fe      	b.n	80059c8 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <vTaskDelete+0x134>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000488 	.word	0x20000488
 80059e8:	2000048c 	.word	0x2000048c
 80059ec:	20000590 	.word	0x20000590
 80059f0:	200005a4 	.word	0x200005a4
 80059f4:	2000055c 	.word	0x2000055c
 80059f8:	20000570 	.word	0x20000570
 80059fc:	20000588 	.word	0x20000588
 8005a00:	20000594 	.word	0x20000594
 8005a04:	200005b0 	.word	0x200005b0
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <vTaskDelayUntil+0x28>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e7fe      	b.n	8005a32 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <vTaskDelayUntil+0x42>
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	e7fe      	b.n	8005a4c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <vTaskDelayUntil+0xf0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <vTaskDelayUntil+0x5e>
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e7fe      	b.n	8005a68 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005a6a:	f000 f8e3 	bl	8005c34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <vTaskDelayUntil+0xf4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d20b      	bcs.n	8005aa0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d211      	bcs.n	8005ab6 <vTaskDelayUntil+0xaa>
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d90d      	bls.n	8005ab6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9e:	e00a      	b.n	8005ab6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d303      	bcc.n	8005ab2 <vTaskDelayUntil+0xa6>
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d901      	bls.n	8005ab6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8005ac2:	2024      	movs	r0, #36	; 0x24
 8005ac4:	f001 fe96 	bl	80077f4 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fbe1 	bl	8006298 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005ad6:	f000 f8bb 	bl	8005c50 <xTaskResumeAll>
 8005ada:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <vTaskDelayUntil+0xf8>)
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005af2:	bf00      	nop
 8005af4:	3728      	adds	r7, #40	; 0x28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	200005b0 	.word	0x200005b0
 8005b00:	2000058c 	.word	0x2000058c
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01a      	beq.n	8005b50 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b1a:	4b15      	ldr	r3, [pc, #84]	; (8005b70 <vTaskDelay+0x68>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <vTaskDelay+0x2e>
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	e7fe      	b.n	8005b34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b36:	f000 f87d 	bl	8005c34 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	2023      	movs	r0, #35	; 0x23
 8005b3e:	f001 fe77 	bl	8007830 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b42:	2100      	movs	r1, #0
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fba7 	bl	8006298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b4a:	f000 f881 	bl	8005c50 <xTaskResumeAll>
 8005b4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <vTaskDelay+0x6c>)
 8005b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200005b0 	.word	0x200005b0
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b86:	463a      	mov	r2, r7
 8005b88:	1d39      	adds	r1, r7, #4
 8005b8a:	f107 0308 	add.w	r3, r7, #8
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fa fb24 	bl	80001dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	9202      	str	r2, [sp, #8]
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	460a      	mov	r2, r1
 8005ba6:	491d      	ldr	r1, [pc, #116]	; (8005c1c <vTaskStartScheduler+0xa4>)
 8005ba8:	481d      	ldr	r0, [pc, #116]	; (8005c20 <vTaskStartScheduler+0xa8>)
 8005baa:	f7ff fcef 	bl	800558c <xTaskCreateStatic>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <vTaskStartScheduler+0xac>)
 8005bb2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <vTaskStartScheduler+0xac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e001      	b.n	8005bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d115      	bne.n	8005bf8 <vTaskStartScheduler+0x80>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <vTaskStartScheduler+0xb0>)
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <vTaskStartScheduler+0xb4>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <vTaskStartScheduler+0xb8>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bf2:	f000 fc41 	bl	8006478 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bf6:	e00d      	b.n	8005c14 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d109      	bne.n	8005c14 <vTaskStartScheduler+0x9c>
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e7fe      	b.n	8005c12 <vTaskStartScheduler+0x9a>
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	080086dc 	.word	0x080086dc
 8005c20:	080060ed 	.word	0x080060ed
 8005c24:	200005ac 	.word	0x200005ac
 8005c28:	200005a8 	.word	0x200005a8
 8005c2c:	20000594 	.word	0x20000594
 8005c30:	2000058c 	.word	0x2000058c

08005c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <vTaskSuspendAll+0x18>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a03      	ldr	r2, [pc, #12]	; (8005c4c <vTaskSuspendAll+0x18>)
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	200005b0 	.word	0x200005b0

08005c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c5e:	4b43      	ldr	r3, [pc, #268]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <xTaskResumeAll+0x2a>
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	e7fe      	b.n	8005c78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c7a:	f000 fcc3 	bl	8006604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	4a39      	ldr	r2, [pc, #228]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005c86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d165      	bne.n	8005d5c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <xTaskResumeAll+0x120>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d061      	beq.n	8005d5c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c98:	e032      	b.n	8005d00 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <xTaskResumeAll+0x124>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fb7c 	bl	80053a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fb77 	bl	80053a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f002 faa5 	bl	8008208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <xTaskResumeAll+0x128>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <xTaskResumeAll+0x128>)
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <xTaskResumeAll+0x12c>)
 8005cde:	441a      	add	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7ff fb01 	bl	80052ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <xTaskResumeAll+0x130>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d302      	bcc.n	8005d00 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005cfa:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <xTaskResumeAll+0x134>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xTaskResumeAll+0x124>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1c8      	bne.n	8005c9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d0e:	f000 fa9f 	bl	8006250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d12:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <xTaskResumeAll+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d010      	beq.n	8005d40 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d1e:	f000 f857 	bl	8005dd0 <xTaskIncrementTick>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d28:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <xTaskResumeAll+0x134>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f1      	bne.n	8005d1e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <xTaskResumeAll+0x138>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <xTaskResumeAll+0x134>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <xTaskResumeAll+0x13c>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d5c:	f000 fc80 	bl	8006660 <vPortExitCritical>

	return xAlreadyYielded;
 8005d60:	68bb      	ldr	r3, [r7, #8]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	200005b0 	.word	0x200005b0
 8005d70:	20000588 	.word	0x20000588
 8005d74:	20000548 	.word	0x20000548
 8005d78:	20000590 	.word	0x20000590
 8005d7c:	2000048c 	.word	0x2000048c
 8005d80:	20000488 	.word	0x20000488
 8005d84:	2000059c 	.word	0x2000059c
 8005d88:	20000598 	.word	0x20000598
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <xTaskGetTickCount+0x18>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d9c:	687b      	ldr	r3, [r7, #4]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	2000058c 	.word	0x2000058c

08005dac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db2:	f000 fceb 	bl	800678c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005db6:	2300      	movs	r3, #0
 8005db8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005dba:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <xTaskGetTickCountFromISR+0x20>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dc0:	683b      	ldr	r3, [r7, #0]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2000058c 	.word	0x2000058c

08005dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dda:	4b52      	ldr	r3, [pc, #328]	; (8005f24 <xTaskIncrementTick+0x154>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8090 	bne.w	8005f04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005de4:	4b50      	ldr	r3, [pc, #320]	; (8005f28 <xTaskIncrementTick+0x158>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dec:	4a4e      	ldr	r2, [pc, #312]	; (8005f28 <xTaskIncrementTick+0x158>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11f      	bne.n	8005e38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005df8:	4b4c      	ldr	r3, [pc, #304]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <xTaskIncrementTick+0x46>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	e7fe      	b.n	8005e14 <xTaskIncrementTick+0x44>
 8005e16:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <xTaskIncrementTick+0x160>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a42      	ldr	r2, [pc, #264]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4a42      	ldr	r2, [pc, #264]	; (8005f30 <xTaskIncrementTick+0x160>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <xTaskIncrementTick+0x164>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	4a40      	ldr	r2, [pc, #256]	; (8005f34 <xTaskIncrementTick+0x164>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	f000 fa0c 	bl	8006250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e38:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <xTaskIncrementTick+0x168>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d351      	bcc.n	8005ee6 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e42:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xTaskIncrementTick+0x80>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xTaskIncrementTick+0x82>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e56:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <xTaskIncrementTick+0x168>)
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	601a      	str	r2, [r3, #0]
					break;
 8005e5e:	e042      	b.n	8005ee6 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e60:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d203      	bcs.n	8005e80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e78:	4a2f      	ldr	r2, [pc, #188]	; (8005f38 <xTaskIncrementTick+0x168>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6013      	str	r3, [r2, #0]
						break;
 8005e7e:	e032      	b.n	8005ee6 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fa8d 	bl	80053a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fa84 	bl	80053a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f002 f9b2 	bl	8008208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <xTaskIncrementTick+0x16c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <xTaskIncrementTick+0x16c>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <xTaskIncrementTick+0x170>)
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7ff fa0e 	bl	80052ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <xTaskIncrementTick+0x174>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3b0      	bcc.n	8005e42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee4:	e7ad      	b.n	8005e42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee6:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <xTaskIncrementTick+0x174>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4914      	ldr	r1, [pc, #80]	; (8005f40 <xTaskIncrementTick+0x170>)
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d907      	bls.n	8005f0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005efe:	2301      	movs	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e004      	b.n	8005f0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <xTaskIncrementTick+0x178>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <xTaskIncrementTick+0x178>)
 8005f0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <xTaskIncrementTick+0x17c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f1a:	697b      	ldr	r3, [r7, #20]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	200005b0 	.word	0x200005b0
 8005f28:	2000058c 	.word	0x2000058c
 8005f2c:	20000540 	.word	0x20000540
 8005f30:	20000544 	.word	0x20000544
 8005f34:	200005a0 	.word	0x200005a0
 8005f38:	200005a8 	.word	0x200005a8
 8005f3c:	20000590 	.word	0x20000590
 8005f40:	2000048c 	.word	0x2000048c
 8005f44:	20000488 	.word	0x20000488
 8005f48:	20000598 	.word	0x20000598
 8005f4c:	2000059c 	.word	0x2000059c

08005f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <vTaskSwitchContext+0xb8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5e:	4b2b      	ldr	r3, [pc, #172]	; (800600c <vTaskSwitchContext+0xbc>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f64:	e04c      	b.n	8006000 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8005f66:	4b29      	ldr	r3, [pc, #164]	; (800600c <vTaskSwitchContext+0xbc>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f6c:	4b28      	ldr	r3, [pc, #160]	; (8006010 <vTaskSwitchContext+0xc0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	fab3 f383 	clz	r3, r3
 8005f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f1c3 031f 	rsb	r3, r3, #31
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	4924      	ldr	r1, [pc, #144]	; (8006014 <vTaskSwitchContext+0xc4>)
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <vTaskSwitchContext+0x5a>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	e7fe      	b.n	8005fa8 <vTaskSwitchContext+0x58>
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a17      	ldr	r2, [pc, #92]	; (8006014 <vTaskSwitchContext+0xc4>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d104      	bne.n	8005fda <vTaskSwitchContext+0x8a>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a0d      	ldr	r2, [pc, #52]	; (8006018 <vTaskSwitchContext+0xc8>)
 8005fe2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <vTaskSwitchContext+0xc8>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <vTaskSwitchContext+0xcc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d102      	bne.n	8005ff6 <vTaskSwitchContext+0xa6>
 8005ff0:	f002 f86a 	bl	80080c8 <SEGGER_SYSVIEW_OnIdle>
}
 8005ff4:	e004      	b.n	8006000 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <vTaskSwitchContext+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f002 f8c2 	bl	8008184 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006000:	bf00      	nop
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200005b0 	.word	0x200005b0
 800600c:	2000059c 	.word	0x2000059c
 8006010:	20000590 	.word	0x20000590
 8006014:	2000048c 	.word	0x2000048c
 8006018:	20000488 	.word	0x20000488
 800601c:	200005ac 	.word	0x200005ac

08006020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <xTaskRemoveFromEventList+0x2a>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e7fe      	b.n	8006048 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3318      	adds	r3, #24
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f9a8 	bl	80053a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006054:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <xTaskRemoveFromEventList+0xb4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d120      	bne.n	800609e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f99f 	bl	80053a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4618      	mov	r0, r3
 800606a:	f002 f8cd 	bl	8008208 <SEGGER_SYSVIEW_OnTaskStartReady>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	2201      	movs	r2, #1
 8006074:	409a      	lsls	r2, r3
 8006076:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <xTaskRemoveFromEventList+0xb8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <xTaskRemoveFromEventList+0xb8>)
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <xTaskRemoveFromEventList+0xbc>)
 800608e:	441a      	add	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f7ff f929 	bl	80052ee <vListInsertEnd>
 800609c:	e005      	b.n	80060aa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3318      	adds	r3, #24
 80060a2:	4619      	mov	r1, r3
 80060a4:	480e      	ldr	r0, [pc, #56]	; (80060e0 <xTaskRemoveFromEventList+0xc0>)
 80060a6:	f7ff f922 	bl	80052ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <xTaskRemoveFromEventList+0xc4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d905      	bls.n	80060c4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <xTaskRemoveFromEventList+0xc8>)
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e001      	b.n	80060c8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80060c8:	697b      	ldr	r3, [r7, #20]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200005b0 	.word	0x200005b0
 80060d8:	20000590 	.word	0x20000590
 80060dc:	2000048c 	.word	0x2000048c
 80060e0:	20000548 	.word	0x20000548
 80060e4:	20000488 	.word	0x20000488
 80060e8:	2000059c 	.word	0x2000059c

080060ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f4:	f000 f852 	bl	800619c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvIdleTask+0x28>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d9f9      	bls.n	80060f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <prvIdleTask+0x2c>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006110:	e7f0      	b.n	80060f4 <prvIdleTask+0x8>
 8006112:	bf00      	nop
 8006114:	2000048c 	.word	0x2000048c
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e00c      	b.n	8006142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <prvInitialiseTaskLists+0x60>)
 8006134:	4413      	add	r3, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff f8ae 	bl	8005298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3301      	adds	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b06      	cmp	r3, #6
 8006146:	d9ef      	bls.n	8006128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006148:	480d      	ldr	r0, [pc, #52]	; (8006180 <prvInitialiseTaskLists+0x64>)
 800614a:	f7ff f8a5 	bl	8005298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800614e:	480d      	ldr	r0, [pc, #52]	; (8006184 <prvInitialiseTaskLists+0x68>)
 8006150:	f7ff f8a2 	bl	8005298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006154:	480c      	ldr	r0, [pc, #48]	; (8006188 <prvInitialiseTaskLists+0x6c>)
 8006156:	f7ff f89f 	bl	8005298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615a:	480c      	ldr	r0, [pc, #48]	; (800618c <prvInitialiseTaskLists+0x70>)
 800615c:	f7ff f89c 	bl	8005298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006160:	480b      	ldr	r0, [pc, #44]	; (8006190 <prvInitialiseTaskLists+0x74>)
 8006162:	f7ff f899 	bl	8005298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <prvInitialiseTaskLists+0x78>)
 8006168:	4a05      	ldr	r2, [pc, #20]	; (8006180 <prvInitialiseTaskLists+0x64>)
 800616a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvInitialiseTaskLists+0x7c>)
 800616e:	4a05      	ldr	r2, [pc, #20]	; (8006184 <prvInitialiseTaskLists+0x68>)
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	2000048c 	.word	0x2000048c
 8006180:	20000518 	.word	0x20000518
 8006184:	2000052c 	.word	0x2000052c
 8006188:	20000548 	.word	0x20000548
 800618c:	2000055c 	.word	0x2000055c
 8006190:	20000574 	.word	0x20000574
 8006194:	20000540 	.word	0x20000540
 8006198:	20000544 	.word	0x20000544

0800619c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a2:	e019      	b.n	80061d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a4:	f000 fa2e 	bl	8006604 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <prvCheckTasksWaitingTermination+0x4c>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff f8f5 	bl	80053a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvCheckTasksWaitingTermination+0x50>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <prvCheckTasksWaitingTermination+0x50>)
 80061c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <prvCheckTasksWaitingTermination+0x54>)
 80061cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ce:	f000 fa47 	bl	8006660 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f80e 	bl	80061f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <prvCheckTasksWaitingTermination+0x54>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e1      	bne.n	80061a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	2000055c 	.word	0x2000055c
 80061ec:	20000588 	.word	0x20000588
 80061f0:	20000570 	.word	0x20000570

080061f4 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fbbc 	bl	8006988 <vPortFree>
				vPortFree( pxTCB );
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fbb9 	bl	8006988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006216:	e017      	b.n	8006248 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800621e:	2b01      	cmp	r3, #1
 8006220:	d103      	bne.n	800622a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fbb0 	bl	8006988 <vPortFree>
	}
 8006228:	e00e      	b.n	8006248 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006230:	2b02      	cmp	r3, #2
 8006232:	d009      	beq.n	8006248 <prvDeleteTCB+0x54>
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e7fe      	b.n	8006246 <prvDeleteTCB+0x52>
	}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <prvResetNextTaskUnblockTime+0x40>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <prvResetNextTaskUnblockTime+0x14>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <prvResetNextTaskUnblockTime+0x16>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <prvResetNextTaskUnblockTime+0x44>)
 800626c:	f04f 32ff 	mov.w	r2, #4294967295
 8006270:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006272:	e008      	b.n	8006286 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <prvResetNextTaskUnblockTime+0x40>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <prvResetNextTaskUnblockTime+0x44>)
 8006284:	6013      	str	r3, [r2, #0]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	20000540 	.word	0x20000540
 8006294:	200005a8 	.word	0x200005a8

08006298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062a2:	4b32      	ldr	r3, [pc, #200]	; (800636c <prvAddCurrentTaskToDelayedList+0xd4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff f878 	bl	80053a4 <uxListRemove>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062ba:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	2201      	movs	r2, #1
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43da      	mvns	r2, r3
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <prvAddCurrentTaskToDelayedList+0xdc>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4013      	ands	r3, r2
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <prvAddCurrentTaskToDelayedList+0xdc>)
 80062d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d110      	bne.n	80062fc <prvAddCurrentTaskToDelayedList+0x64>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80062e0:	4b23      	ldr	r3, [pc, #140]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	211b      	movs	r1, #27
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 ffd0 	bl	800828c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ec:	4b20      	ldr	r3, [pc, #128]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4820      	ldr	r0, [pc, #128]	; (8006378 <prvAddCurrentTaskToDelayedList+0xe0>)
 80062f6:	f7fe fffa 	bl	80052ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062fa:	e032      	b.n	8006362 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d20f      	bcs.n	8006334 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2104      	movs	r1, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f001 ffb6 	bl	800828c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <prvAddCurrentTaskToDelayedList+0xe4>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7ff f801 	bl	8005334 <vListInsert>
}
 8006332:	e016      	b.n	8006362 <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2104      	movs	r1, #4
 800633a:	4618      	mov	r0, r3
 800633c:	f001 ffa6 	bl	800828c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe fff1 	bl	8005334 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <prvAddCurrentTaskToDelayedList+0xec>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d202      	bcs.n	8006362 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <prvAddCurrentTaskToDelayedList+0xec>)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6013      	str	r3, [r2, #0]
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	2000058c 	.word	0x2000058c
 8006370:	20000488 	.word	0x20000488
 8006374:	20000590 	.word	0x20000590
 8006378:	20000574 	.word	0x20000574
 800637c:	20000544 	.word	0x20000544
 8006380:	20000540 	.word	0x20000540
 8006384:	200005a8 	.word	0x200005a8

08006388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3b04      	subs	r3, #4
 8006398:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 0201 	bic.w	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <pxPortInitialiseStack+0x54>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3b14      	subs	r3, #20
 80063c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b20      	subs	r3, #32
 80063ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063d0:	68fb      	ldr	r3, [r7, #12]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	080063e1 	.word	0x080063e1

080063e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvTaskExitError+0x4c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d009      	beq.n	8006408 <prvTaskExitError+0x28>
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e7fe      	b.n	8006406 <prvTaskExitError+0x26>
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800641a:	bf00      	nop
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0fc      	beq.n	800641c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	20000010 	.word	0x20000010

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	f04e 0e0d 	orr.w	lr, lr, #13
 800644e:	4770      	bx	lr

08006450 <pxCurrentTCBConst2>:
 8006450:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006458:	4806      	ldr	r0, [pc, #24]	; (8006474 <prvPortStartFirstTask+0x1c>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	b662      	cpsie	i
 8006464:	b661      	cpsie	f
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	df00      	svc	0
 8006470:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006472:	bf00      	nop
 8006474:	e000ed08 	.word	0xe000ed08

08006478 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800647e:	4b31      	ldr	r3, [pc, #196]	; (8006544 <xPortStartScheduler+0xcc>)
 8006480:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	22ff      	movs	r2, #255	; 0xff
 800648e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	4b29      	ldr	r3, [pc, #164]	; (8006548 <xPortStartScheduler+0xd0>)
 80064a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064a6:	4b29      	ldr	r3, [pc, #164]	; (800654c <xPortStartScheduler+0xd4>)
 80064a8:	2207      	movs	r2, #7
 80064aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ac:	e009      	b.n	80064c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80064ae:	4b27      	ldr	r3, [pc, #156]	; (800654c <xPortStartScheduler+0xd4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <xPortStartScheduler+0xd4>)
 80064b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b80      	cmp	r3, #128	; 0x80
 80064cc:	d0ef      	beq.n	80064ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064ce:	4b1f      	ldr	r3, [pc, #124]	; (800654c <xPortStartScheduler+0xd4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1c3 0307 	rsb	r3, r3, #7
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d009      	beq.n	80064ee <xPortStartScheduler+0x76>
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	e7fe      	b.n	80064ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <xPortStartScheduler+0xd4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <xPortStartScheduler+0xd4>)
 80064f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064f8:	4b14      	ldr	r3, [pc, #80]	; (800654c <xPortStartScheduler+0xd4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006500:	4a12      	ldr	r2, [pc, #72]	; (800654c <xPortStartScheduler+0xd4>)
 8006502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <xPortStartScheduler+0xd8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <xPortStartScheduler+0xd8>)
 8006512:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <xPortStartScheduler+0xd8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <xPortStartScheduler+0xd8>)
 800651e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006524:	f000 f910 	bl	8006748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <xPortStartScheduler+0xdc>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800652e:	f7ff ff93 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006532:	f7ff fd0d 	bl	8005f50 <vTaskSwitchContext>
	prvTaskExitError();
 8006536:	f7ff ff53 	bl	80063e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	e000e400 	.word	0xe000e400
 8006548:	200005b4 	.word	0x200005b4
 800654c:	200005b8 	.word	0x200005b8
 8006550:	e000ed20 	.word	0xe000ed20
 8006554:	20000010 	.word	0x20000010

08006558 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800655e:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <vInitPrioGroupValue+0xa0>)
 8006560:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <vInitPrioGroupValue+0xa4>)
 8006584:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006586:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <vInitPrioGroupValue+0xa8>)
 8006588:	2207      	movs	r2, #7
 800658a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800658c:	e009      	b.n	80065a2 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800658e:	4b1c      	ldr	r3, [pc, #112]	; (8006600 <vInitPrioGroupValue+0xa8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3b01      	subs	r3, #1
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <vInitPrioGroupValue+0xa8>)
 8006596:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d0ef      	beq.n	800658e <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <vInitPrioGroupValue+0xa8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1c3 0307 	rsb	r3, r3, #7
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d009      	beq.n	80065ce <vInitPrioGroupValue+0x76>
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	e7fe      	b.n	80065cc <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <vInitPrioGroupValue+0xa8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	4a0a      	ldr	r2, [pc, #40]	; (8006600 <vInitPrioGroupValue+0xa8>)
 80065d6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <vInitPrioGroupValue+0xa8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065e0:	4a07      	ldr	r2, [pc, #28]	; (8006600 <vInitPrioGroupValue+0xa8>)
 80065e2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000e400 	.word	0xe000e400
 80065fc:	200005b4 	.word	0x200005b4
 8006600:	200005b8 	.word	0x200005b8

08006604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <vPortEnterCritical+0x54>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <vPortEnterCritical+0x54>)
 8006624:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <vPortEnterCritical+0x54>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10e      	bne.n	800664c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800662e:	4b0b      	ldr	r3, [pc, #44]	; (800665c <vPortEnterCritical+0x58>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <vPortEnterCritical+0x48>
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	e7fe      	b.n	800664a <vPortEnterCritical+0x46>
	}
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000010 	.word	0x20000010
 800665c:	e000ed04 	.word	0xe000ed04

08006660 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <vPortExitCritical+0x48>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <vPortExitCritical+0x22>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	e7fe      	b.n	8006680 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <vPortExitCritical+0x48>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3b01      	subs	r3, #1
 8006688:	4a07      	ldr	r2, [pc, #28]	; (80066a8 <vPortExitCritical+0x48>)
 800668a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <vPortExitCritical+0x48>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <vPortExitCritical+0x3e>
 8006694:	2300      	movs	r3, #0
 8006696:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	20000010 	.word	0x20000010
 80066ac:	00000000 	.word	0x00000000

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066ca:	f380 8811 	msr	BASEPRI, r0
 80066ce:	f7ff fc3f 	bl	8005f50 <vTaskSwitchContext>
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066e6:	f380 8809 	msr	PSP, r0
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	4770      	bx	lr

080066f0 <pxCurrentTCBConst>:
 80066f0:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006710:	f001 fc60 	bl	8007fd4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006714:	f7ff fb5c 	bl	8005dd0 <xTaskIncrementTick>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d006      	beq.n	800672c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800671e:	f001 fcb7 	bl	8008090 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <SysTick_Handler+0x4c>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e001      	b.n	8006730 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800672c:	f001 fc94 	bl	8008058 <SEGGER_SYSVIEW_RecordExitISR>
 8006730:	2300      	movs	r3, #0
 8006732:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortSetupTimerInterrupt+0x30>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <vPortSetupTimerInterrupt+0x34>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006758:	4b09      	ldr	r3, [pc, #36]	; (8006780 <vPortSetupTimerInterrupt+0x38>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	099b      	lsrs	r3, r3, #6
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <vPortSetupTimerInterrupt+0x40>)
 8006766:	3b01      	subs	r3, #1
 8006768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <vPortSetupTimerInterrupt+0x30>)
 800676c:	2207      	movs	r2, #7
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	e000e010 	.word	0xe000e010
 800677c:	e000e018 	.word	0xe000e018
 8006780:	20000004 	.word	0x20000004
 8006784:	10624dd3 	.word	0x10624dd3
 8006788:	e000e014 	.word	0xe000e014

0800678c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006792:	f3ef 8305 	mrs	r3, IPSR
 8006796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d913      	bls.n	80067c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800679e:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <vPortValidateInterruptPriority+0x68>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <vPortValidateInterruptPriority+0x6c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	7afa      	ldrb	r2, [r7, #11]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d209      	bcs.n	80067c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e7fe      	b.n	80067c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <vPortValidateInterruptPriority+0x70>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <vPortValidateInterruptPriority+0x74>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d909      	bls.n	80067ea <vPortValidateInterruptPriority+0x5e>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	e7fe      	b.n	80067e8 <vPortValidateInterruptPriority+0x5c>
	}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	e000e3f0 	.word	0xe000e3f0
 80067f8:	200005b4 	.word	0x200005b4
 80067fc:	e000ed0c 	.word	0xe000ed0c
 8006800:	200005b8 	.word	0x200005b8

08006804 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006810:	f7ff fa10 	bl	8005c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <pvPortMalloc+0x170>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800681c:	f000 f90c 	bl	8006a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006820:	4b55      	ldr	r3, [pc, #340]	; (8006978 <pvPortMalloc+0x174>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 808c 	bne.w	8006946 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006834:	2208      	movs	r2, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f023 0307 	bic.w	r3, r3, #7
 800684c:	3308      	adds	r3, #8
 800684e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <pvPortMalloc+0x6a>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e7fe      	b.n	800686c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d068      	beq.n	8006946 <pvPortMalloc+0x142>
 8006874:	4b41      	ldr	r3, [pc, #260]	; (800697c <pvPortMalloc+0x178>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d863      	bhi.n	8006946 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800687e:	4b40      	ldr	r3, [pc, #256]	; (8006980 <pvPortMalloc+0x17c>)
 8006880:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006882:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <pvPortMalloc+0x17c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006888:	e004      	b.n	8006894 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d903      	bls.n	80068a6 <pvPortMalloc+0xa2>
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f1      	bne.n	800688a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068a6:	4b33      	ldr	r3, [pc, #204]	; (8006974 <pvPortMalloc+0x170>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d04a      	beq.n	8006946 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	4413      	add	r3, r2
 80068b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	2308      	movs	r3, #8
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d91e      	bls.n	8006910 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4413      	add	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <pvPortMalloc+0xf4>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	e7fe      	b.n	80068f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800690a:	69b8      	ldr	r0, [r7, #24]
 800690c:	f000 f8f6 	bl	8006afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <pvPortMalloc+0x178>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	4a18      	ldr	r2, [pc, #96]	; (800697c <pvPortMalloc+0x178>)
 800691c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <pvPortMalloc+0x178>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b18      	ldr	r3, [pc, #96]	; (8006984 <pvPortMalloc+0x180>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d203      	bcs.n	8006932 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <pvPortMalloc+0x178>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a15      	ldr	r2, [pc, #84]	; (8006984 <pvPortMalloc+0x180>)
 8006930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <pvPortMalloc+0x174>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	431a      	orrs	r2, r3
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006946:	f7ff f983 	bl	8005c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <pvPortMalloc+0x164>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e7fe      	b.n	8006966 <pvPortMalloc+0x162>
	return pvReturn;
 8006968:	69fb      	ldr	r3, [r7, #28]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20003dc4 	.word	0x20003dc4
 8006978:	20003dd0 	.word	0x20003dd0
 800697c:	20003dc8 	.word	0x20003dc8
 8006980:	20003dbc 	.word	0x20003dbc
 8006984:	20003dcc 	.word	0x20003dcc

08006988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d046      	beq.n	8006a28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800699a:	2308      	movs	r3, #8
 800699c:	425b      	negs	r3, r3
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <vPortFree+0xa8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <vPortFree+0x42>
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	e7fe      	b.n	80069c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <vPortFree+0x5e>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	e7fe      	b.n	80069e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <vPortFree+0xa8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d019      	beq.n	8006a28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d115      	bne.n	8006a28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortFree+0xa8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	401a      	ands	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a0c:	f7ff f912 	bl	8005c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <vPortFree+0xac>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4413      	add	r3, r2
 8006a1a:	4a06      	ldr	r2, [pc, #24]	; (8006a34 <vPortFree+0xac>)
 8006a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f000 f86c 	bl	8006afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a24:	f7ff f914 	bl	8005c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20003dd0 	.word	0x20003dd0
 8006a34:	20003dc8 	.word	0x20003dc8

08006a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a44:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <prvHeapInit+0xac>)
 8006a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <prvHeapInit+0xac>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <prvHeapInit+0xb0>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <prvHeapInit+0xb0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a15      	ldr	r2, [pc, #84]	; (8006aec <prvHeapInit+0xb4>)
 8006a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <prvHeapInit+0xb4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <prvHeapInit+0xb4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <prvHeapInit+0xb4>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <prvHeapInit+0xb8>)
 8006ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <prvHeapInit+0xbc>)
 8006ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <prvHeapInit+0xc0>)
 8006ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	200005bc 	.word	0x200005bc
 8006ae8:	20003dbc 	.word	0x20003dbc
 8006aec:	20003dc4 	.word	0x20003dc4
 8006af0:	20003dcc 	.word	0x20003dcc
 8006af4:	20003dc8 	.word	0x20003dc8
 8006af8:	20003dd0 	.word	0x20003dd0

08006afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e002      	b.n	8006b10 <prvInsertBlockIntoFreeList+0x14>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d8f7      	bhi.n	8006b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d108      	bne.n	8006b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d118      	bne.n	8006b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d00d      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	441a      	add	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e008      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e003      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	20003dbc 	.word	0x20003dbc
 8006ba8:	20003dc4 	.word	0x20003dc4

08006bac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006bb0:	4803      	ldr	r0, [pc, #12]	; (8006bc0 <_cbSendSystemDesc+0x14>)
 8006bb2:	f001 f9bb 	bl	8007f2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006bb6:	4803      	ldr	r0, [pc, #12]	; (8006bc4 <_cbSendSystemDesc+0x18>)
 8006bb8:	f001 f9b8 	bl	8007f2c <SEGGER_SYSVIEW_SendSysDesc>
}
 8006bbc:	bf00      	nop
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	080086e4 	.word	0x080086e4
 8006bc4:	08008714 	.word	0x08008714

08006bc8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <SEGGER_SYSVIEW_Conf+0x24>)
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <SEGGER_SYSVIEW_Conf+0x28>)
 8006bd8:	f000 fdba 	bl	8007750 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006bdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006be0:	f000 fdfa 	bl	80077d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006be4:	bf00      	nop
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000004 	.word	0x20000004
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	080087b4 	.word	0x080087b4

08006bf4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	e034      	b.n	8006c6a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006c00:	491e      	ldr	r1, [pc, #120]	; (8006c7c <_cbSendTaskList+0x88>)
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	491a      	ldr	r1, [pc, #104]	; (8006c7c <_cbSendTaskList+0x88>)
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3304      	adds	r3, #4
 8006c20:	681c      	ldr	r4, [r3, #0]
 8006c22:	4916      	ldr	r1, [pc, #88]	; (8006c7c <_cbSendTaskList+0x88>)
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	3308      	adds	r3, #8
 8006c32:	681d      	ldr	r5, [r3, #0]
 8006c34:	4911      	ldr	r1, [pc, #68]	; (8006c7c <_cbSendTaskList+0x88>)
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	330c      	adds	r3, #12
 8006c44:	681e      	ldr	r6, [r3, #0]
 8006c46:	490d      	ldr	r1, [pc, #52]	; (8006c7c <_cbSendTaskList+0x88>)
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3310      	adds	r3, #16
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	4633      	mov	r3, r6
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4621      	mov	r1, r4
 8006c60:	f000 f970 	bl	8006f44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <_cbSendTaskList+0x8c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d3c5      	bcc.n	8006c00 <_cbSendTaskList+0xc>
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7c:	20003dd4 	.word	0x20003dd4
 8006c80:	20003e74 	.word	0x20003e74

08006c84 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006c8a:	f7ff f88f 	bl	8005dac <xTaskGetTickCountFromISR>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f04f 0400 	mov.w	r4, #0
 8006c94:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006c98:	e9d7 5600 	ldrd	r5, r6, [r7]
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	4634      	mov	r4, r6
 8006ca0:	f04f 0100 	mov.w	r1, #0
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	0162      	lsls	r2, r4, #5
 8006caa:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006cae:	0159      	lsls	r1, r3, #5
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	1b5b      	subs	r3, r3, r5
 8006cb6:	eb64 0406 	sbc.w	r4, r4, r6
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	00a2      	lsls	r2, r4, #2
 8006cc4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006cc8:	0099      	lsls	r1, r3, #2
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	195b      	adds	r3, r3, r5
 8006cd0:	eb44 0406 	adc.w	r4, r4, r6
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	00e2      	lsls	r2, r4, #3
 8006cde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ce2:	00d9      	lsls	r1, r3, #3
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8006cec:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006cfc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	492b      	ldr	r1, [pc, #172]	; (8006dbc <SYSVIEW_AddTask+0xc0>)
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f001 fc88 	bl	8008624 <memcmp>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04b      	beq.n	8006db2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b07      	cmp	r3, #7
 8006d20:	d903      	bls.n	8006d2a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006d22:	4828      	ldr	r0, [pc, #160]	; (8006dc4 <SYSVIEW_AddTask+0xc8>)
 8006d24:	f001 fbfe 	bl	8008524 <SEGGER_SYSVIEW_Warn>
    return;
 8006d28:	e044      	b.n	8006db4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006d2a:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4926      	ldr	r1, [pc, #152]	; (8006dc8 <SYSVIEW_AddTask+0xcc>)
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4921      	ldr	r1, [pc, #132]	; (8006dc8 <SYSVIEW_AddTask+0xcc>)
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3304      	adds	r3, #4
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006d54:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	491b      	ldr	r1, [pc, #108]	; (8006dc8 <SYSVIEW_AddTask+0xcc>)
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3308      	adds	r3, #8
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4916      	ldr	r1, [pc, #88]	; (8006dc8 <SYSVIEW_AddTask+0xcc>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4910      	ldr	r1, [pc, #64]	; (8006dc8 <SYSVIEW_AddTask+0xcc>)
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	3310      	adds	r3, #16
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <SYSVIEW_AddTask+0xc4>)
 8006d9e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f8ca 	bl	8006f44 <SYSVIEW_SendTaskInfo>
 8006db0:	e000      	b.n	8006db4 <SYSVIEW_AddTask+0xb8>
    return;
 8006db2:	bf00      	nop

}
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	08008724 	.word	0x08008724
 8006dc0:	20003e74 	.word	0x20003e74
 8006dc4:	0800872c 	.word	0x0800872c
 8006dc8:	20003dd4 	.word	0x20003dd4

08006dcc <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8006dd4:	4b59      	ldr	r3, [pc, #356]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80ab 	beq.w	8006f34 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e00d      	b.n	8006e00 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006de4:	4956      	ldr	r1, [pc, #344]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d008      	beq.n	8006e0c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	4b4e      	ldr	r3, [pc, #312]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3ec      	bcc.n	8006de4 <SYSVIEW_DeleteTask+0x18>
 8006e0a:	e000      	b.n	8006e0e <SYSVIEW_DeleteTask+0x42>
      break;
 8006e0c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006e0e:	4b4b      	ldr	r3, [pc, #300]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d111      	bne.n	8006e3e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4a46      	ldr	r2, [pc, #280]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e26:	4413      	add	r3, r2
 8006e28:	2214      	movs	r2, #20
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fc13 	bl	8008658 <memset>
    _NumTasks--;
 8006e32:	4b42      	ldr	r3, [pc, #264]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	e07b      	b.n	8006f36 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006e3e:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d276      	bcs.n	8006f36 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006e48:	4b3c      	ldr	r3, [pc, #240]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	493c      	ldr	r1, [pc, #240]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	6819      	ldr	r1, [r3, #0]
 8006e5c:	4838      	ldr	r0, [pc, #224]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4403      	add	r3, r0
 8006e6a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006e6c:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	4933      	ldr	r1, [pc, #204]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3304      	adds	r3, #4
 8006e80:	6819      	ldr	r1, [r3, #0]
 8006e82:	482f      	ldr	r0, [pc, #188]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4403      	add	r3, r0
 8006e90:	3304      	adds	r3, #4
 8006e92:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006e94:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	4929      	ldr	r1, [pc, #164]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	4825      	ldr	r0, [pc, #148]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	3308      	adds	r3, #8
 8006eba:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006ebc:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	491f      	ldr	r1, [pc, #124]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	330c      	adds	r3, #12
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	481b      	ldr	r0, [pc, #108]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4403      	add	r3, r0
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006ee4:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	4915      	ldr	r1, [pc, #84]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3310      	adds	r3, #16
 8006ef8:	6819      	ldr	r1, [r3, #0]
 8006efa:	4811      	ldr	r0, [pc, #68]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4403      	add	r3, r0
 8006f08:	3310      	adds	r3, #16
 8006f0a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <SYSVIEW_DeleteTask+0x174>)
 8006f1c:	4413      	add	r3, r2
 8006f1e:	2214      	movs	r2, #20
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fb98 	bl	8008658 <memset>
    _NumTasks--;
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4a03      	ldr	r2, [pc, #12]	; (8006f3c <SYSVIEW_DeleteTask+0x170>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e000      	b.n	8006f36 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006f34:	bf00      	nop
  }
}
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20003e74 	.word	0x20003e74
 8006f40:	20003dd4 	.word	0x20003dd4

08006f44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	2214      	movs	r2, #20
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fb7c 	bl	8008658 <memset>
  TaskInfo.TaskID     = TaskID;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fedf 	bl	8007d3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f7e:	bf00      	nop
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006f8e:	4b21      	ldr	r3, [pc, #132]	; (8007014 <_DoInit+0x8c>)
 8006f90:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2203      	movs	r2, #3
 8006f96:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <_DoInit+0x90>)
 8006fa2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	; (800701c <_DoInit+0x94>)
 8006fa8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fb0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <_DoInit+0x90>)
 8006fc8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a14      	ldr	r2, [pc, #80]	; (8007020 <_DoInit+0x98>)
 8006fce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3307      	adds	r3, #7
 8006fec:	4a0d      	ldr	r2, [pc, #52]	; (8007024 <_DoInit+0x9c>)
 8006fee:	6810      	ldr	r0, [r2, #0]
 8006ff0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a0c      	ldr	r2, [pc, #48]	; (8007028 <_DoInit+0xa0>)
 8006ff6:	6810      	ldr	r0, [r2, #0]
 8006ff8:	6018      	str	r0, [r3, #0]
 8006ffa:	8891      	ldrh	r1, [r2, #4]
 8006ffc:	7992      	ldrb	r2, [r2, #6]
 8006ffe:	8099      	strh	r1, [r3, #4]
 8007000:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	200046dc 	.word	0x200046dc
 8007018:	0800877c 	.word	0x0800877c
 800701c:	20003e78 	.word	0x20003e78
 8007020:	20004278 	.word	0x20004278
 8007024:	08008788 	.word	0x08008788
 8007028:	0800878c 	.word	0x0800878c

0800702c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	; 0x30
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007038:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <SEGGER_RTT_ReadNoLock+0x108>)
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <SEGGER_RTT_ReadNoLock+0x1e>
 8007046:	f7ff ff9f 	bl	8006f88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	3360      	adds	r3, #96	; 0x60
 8007056:	4a37      	ldr	r2, [pc, #220]	; (8007134 <SEGGER_RTT_ReadNoLock+0x108>)
 8007058:	4413      	add	r3, r2
 800705a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d92b      	bls.n	80070d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4293      	cmp	r3, r2
 8007088:	bf28      	it	cs
 800708a:	4613      	movcs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	4413      	add	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	6939      	ldr	r1, [r7, #16]
 800709c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800709e:	f001 fad0 	bl	8008642 <memcpy>
    NumBytesRead += NumBytesRem;
 80070a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4413      	add	r3, r2
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80070aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80070ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d101      	bne.n	80070d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4293      	cmp	r3, r2
 80070de:	bf28      	it	cs
 80070e0:	4613      	movcs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d019      	beq.n	800711e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	4413      	add	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	6939      	ldr	r1, [r7, #16]
 80070f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070fa:	f001 faa2 	bl	8008642 <memcpy>
    NumBytesRead += NumBytesRem;
 80070fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4413      	add	r3, r2
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007128:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	; 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	200046dc 	.word	0x200046dc

08007138 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007146:	4b3c      	ldr	r3, [pc, #240]	; (8007238 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007154:	f7ff ff18 	bl	8006f88 <_DoInit>
  SEGGER_RTT_LOCK();
 8007158:	f3ef 8311 	mrs	r3, BASEPRI
 800715c:	f04f 0120 	mov.w	r1, #32
 8007160:	f381 8811 	msr	BASEPRI, r1
 8007164:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007166:	4b34      	ldr	r3, [pc, #208]	; (8007238 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8007168:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800716e:	6939      	ldr	r1, [r7, #16]
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	4613      	mov	r3, r2
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	440b      	add	r3, r1
 800717e:	3304      	adds	r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	429a      	cmp	r2, r3
 8007194:	dbeb      	blt.n	800716e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007196:	e000      	b.n	800719a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007198:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	da3d      	bge.n	8007220 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80071a4:	6939      	ldr	r1, [r7, #16]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	4613      	mov	r3, r2
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	440b      	add	r3, r1
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80071b8:	6939      	ldr	r1, [r7, #16]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	440b      	add	r3, r1
 80071c8:	3304      	adds	r3, #4
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80071ce:	6939      	ldr	r1, [r7, #16]
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	440b      	add	r3, r1
 80071dc:	3320      	adds	r3, #32
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	440b      	add	r3, r1
 80071f0:	3328      	adds	r3, #40	; 0x28
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80071f6:	6939      	ldr	r1, [r7, #16]
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	4613      	mov	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4413      	add	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	440b      	add	r3, r1
 8007204:	3324      	adds	r3, #36	; 0x24
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800720a:	6939      	ldr	r1, [r7, #16]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	440b      	add	r3, r1
 8007218:	332c      	adds	r3, #44	; 0x2c
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e002      	b.n	8007226 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8007220:	f04f 33ff 	mov.w	r3, #4294967295
 8007224:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200046dc 	.word	0x200046dc

0800723c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800724a:	4b32      	ldr	r3, [pc, #200]	; (8007314 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007258:	f7ff fe96 	bl	8006f88 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800725c:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800725e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	461a      	mov	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4293      	cmp	r3, r2
 800726a:	d24b      	bcs.n	8007304 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 800726c:	f3ef 8311 	mrs	r3, BASEPRI
 8007270:	f04f 0120 	mov.w	r1, #32
 8007274:	f381 8811 	msr	BASEPRI, r1
 8007278:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d031      	beq.n	80072e4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4613      	mov	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4413      	add	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	440b      	add	r3, r1
 800728e:	3360      	adds	r3, #96	; 0x60
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007294:	6979      	ldr	r1, [r7, #20]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	440b      	add	r3, r1
 80072a2:	3364      	adds	r3, #100	; 0x64
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80072a8:	6979      	ldr	r1, [r7, #20]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4613      	mov	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	440b      	add	r3, r1
 80072b6:	3368      	adds	r3, #104	; 0x68
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80072bc:	6979      	ldr	r1, [r7, #20]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4613      	mov	r3, r2
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	4413      	add	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	440b      	add	r3, r1
 80072ca:	3370      	adds	r3, #112	; 0x70
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4613      	mov	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	440b      	add	r3, r1
 80072de:	336c      	adds	r3, #108	; 0x6c
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80072e4:	6979      	ldr	r1, [r7, #20]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	440b      	add	r3, r1
 80072f2:	3374      	adds	r3, #116	; 0x74
 80072f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	e002      	b.n	800730a <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800730a:	69fb      	ldr	r3, [r7, #28]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200046dc 	.word	0x200046dc

08007318 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007328:	e002      	b.n	8007330 <_EncodeStr+0x18>
    Len++;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3301      	adds	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4413      	add	r3, r2
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f6      	bne.n	800732a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d901      	bls.n	8007348 <_EncodeStr+0x30>
    Len = Limit;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2bfe      	cmp	r3, #254	; 0xfe
 800734c:	d806      	bhi.n	800735c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	60fa      	str	r2, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e011      	b.n	8007380 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	60fa      	str	r2, [r7, #12]
 8007362:	22ff      	movs	r2, #255	; 0xff
 8007364:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	60fa      	str	r2, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	0a19      	lsrs	r1, r3, #8
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	60fa      	str	r2, [r7, #12]
 800737c:	b2ca      	uxtb	r2, r1
 800737e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007384:	e00a      	b.n	800739c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	1c53      	adds	r3, r2, #1
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	60f9      	str	r1, [r7, #12]
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	701a      	strb	r2, [r3, #0]
    n++;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	3301      	adds	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d3f0      	bcc.n	8007386 <_EncodeStr+0x6e>
  }
  return pPayload;
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr
	...

080073c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80073ce:	4b33      	ldr	r3, [pc, #204]	; (800749c <_HandleIncomingPacket+0xd4>)
 80073d0:	7e1b      	ldrb	r3, [r3, #24]
 80073d2:	4618      	mov	r0, r3
 80073d4:	1cfb      	adds	r3, r7, #3
 80073d6:	2201      	movs	r2, #1
 80073d8:	4619      	mov	r1, r3
 80073da:	f7ff fe27 	bl	800702c <SEGGER_RTT_ReadNoLock>
 80073de:	4603      	mov	r3, r0
 80073e0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd4d      	ble.n	8007484 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d022      	beq.n	8007434 <_HandleIncomingPacket+0x6c>
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	dc0b      	bgt.n	800740a <_HandleIncomingPacket+0x42>
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d015      	beq.n	8007422 <_HandleIncomingPacket+0x5a>
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc02      	bgt.n	8007400 <_HandleIncomingPacket+0x38>
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d00e      	beq.n	800741c <_HandleIncomingPacket+0x54>
 80073fe:	e034      	b.n	800746a <_HandleIncomingPacket+0xa2>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d011      	beq.n	8007428 <_HandleIncomingPacket+0x60>
 8007404:	2b04      	cmp	r3, #4
 8007406:	d012      	beq.n	800742e <_HandleIncomingPacket+0x66>
 8007408:	e02f      	b.n	800746a <_HandleIncomingPacket+0xa2>
 800740a:	2b07      	cmp	r3, #7
 800740c:	d018      	beq.n	8007440 <_HandleIncomingPacket+0x78>
 800740e:	2b07      	cmp	r3, #7
 8007410:	db13      	blt.n	800743a <_HandleIncomingPacket+0x72>
 8007412:	2b7f      	cmp	r3, #127	; 0x7f
 8007414:	d038      	beq.n	8007488 <_HandleIncomingPacket+0xc0>
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d015      	beq.n	8007446 <_HandleIncomingPacket+0x7e>
 800741a:	e026      	b.n	800746a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800741c:	f000 fb14 	bl	8007a48 <SEGGER_SYSVIEW_Start>
      break;
 8007420:	e037      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007422:	f000 fbcb 	bl	8007bbc <SEGGER_SYSVIEW_Stop>
      break;
 8007426:	e034      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007428:	f000 fda4 	bl	8007f74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800742c:	e031      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800742e:	f000 fd69 	bl	8007f04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007432:	e02e      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007434:	f000 fbe8 	bl	8007c08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007438:	e02b      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800743a:	f001 f835 	bl	80084a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800743e:	e028      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007440:	f001 f814 	bl	800846c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007444:	e025      	b.n	8007492 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007446:	4b15      	ldr	r3, [pc, #84]	; (800749c <_HandleIncomingPacket+0xd4>)
 8007448:	7e1b      	ldrb	r3, [r3, #24]
 800744a:	4618      	mov	r0, r3
 800744c:	1cfb      	adds	r3, r7, #3
 800744e:	2201      	movs	r2, #1
 8007450:	4619      	mov	r1, r3
 8007452:	f7ff fdeb 	bl	800702c <SEGGER_RTT_ReadNoLock>
 8007456:	4603      	mov	r3, r0
 8007458:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd15      	ble.n	800748c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 ff82 	bl	800836c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007468:	e010      	b.n	800748c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	b25b      	sxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	da0e      	bge.n	8007490 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <_HandleIncomingPacket+0xd4>)
 8007474:	7e1b      	ldrb	r3, [r3, #24]
 8007476:	4618      	mov	r0, r3
 8007478:	1cfb      	adds	r3, r7, #3
 800747a:	2201      	movs	r2, #1
 800747c:	4619      	mov	r1, r3
 800747e:	f7ff fdd5 	bl	800702c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007482:	e005      	b.n	8007490 <_HandleIncomingPacket+0xc8>
    }
  }
 8007484:	bf00      	nop
 8007486:	e004      	b.n	8007492 <_HandleIncomingPacket+0xca>
      break;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <_HandleIncomingPacket+0xca>
      break;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <_HandleIncomingPacket+0xca>
      break;
 8007490:	bf00      	nop
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20004310 	.word	0x20004310

080074a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08c      	sub	sp, #48	; 0x30
 80074a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80074a6:	2301      	movs	r3, #1
 80074a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80074aa:	1d3b      	adds	r3, r7, #4
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b4:	4b31      	ldr	r3, [pc, #196]	; (800757c <_TrySendOverflowPacket+0xdc>)
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ba:	e00b      	b.n	80074d4 <_TrySendOverflowPacket+0x34>
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80074c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	09db      	lsrs	r3, r3, #7
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	2b7f      	cmp	r3, #127	; 0x7f
 80074d8:	d8f0      	bhi.n	80074bc <_TrySendOverflowPacket+0x1c>
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80074ea:	4b25      	ldr	r3, [pc, #148]	; (8007580 <_TrySendOverflowPacket+0xe0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <_TrySendOverflowPacket+0xdc>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	e00b      	b.n	800751c <_TrySendOverflowPacket+0x7c>
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	6279      	str	r1, [r7, #36]	; 0x24
 800750e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	09db      	lsrs	r3, r3, #7
 800751a:	623b      	str	r3, [r7, #32]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2b7f      	cmp	r3, #127	; 0x7f
 8007520:	d8f0      	bhi.n	8007504 <_TrySendOverflowPacket+0x64>
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	627a      	str	r2, [r7, #36]	; 0x24
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <_TrySendOverflowPacket+0xdc>)
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	4618      	mov	r0, r3
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	461a      	mov	r2, r3
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	4619      	mov	r1, r3
 8007544:	f7f8 fe04 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007548:	4603      	mov	r3, r0
 800754a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007552:	4a0a      	ldr	r2, [pc, #40]	; (800757c <_TrySendOverflowPacket+0xdc>)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007558:	4b08      	ldr	r3, [pc, #32]	; (800757c <_TrySendOverflowPacket+0xdc>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <_TrySendOverflowPacket+0xdc>)
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	e004      	b.n	8007570 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <_TrySendOverflowPacket+0xdc>)
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	3301      	adds	r3, #1
 800756c:	4a03      	ldr	r2, [pc, #12]	; (800757c <_TrySendOverflowPacket+0xdc>)
 800756e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007570:	693b      	ldr	r3, [r7, #16]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3730      	adds	r7, #48	; 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20004310 	.word	0x20004310
 8007580:	e0001004 	.word	0xe0001004

08007584 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007590:	4b6c      	ldr	r3, [pc, #432]	; (8007744 <_SendPacket+0x1c0>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d010      	beq.n	80075ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007598:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <_SendPacket+0x1c0>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80a3 	beq.w	80076e8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80075a2:	4b68      	ldr	r3, [pc, #416]	; (8007744 <_SendPacket+0x1c0>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d109      	bne.n	80075be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80075aa:	f7ff ff79 	bl	80074a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80075ae:	4b65      	ldr	r3, [pc, #404]	; (8007744 <_SendPacket+0x1c0>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	f040 809a 	bne.w	80076ec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80075b8:	e001      	b.n	80075be <_SendPacket+0x3a>
    goto Send;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <_SendPacket+0x3c>
Send:
 80075be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b1f      	cmp	r3, #31
 80075c4:	d809      	bhi.n	80075da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80075c6:	4b5f      	ldr	r3, [pc, #380]	; (8007744 <_SendPacket+0x1c0>)
 80075c8:	69da      	ldr	r2, [r3, #28]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	fa22 f303 	lsr.w	r3, r2, r3
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 808b 	bne.w	80076f0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b17      	cmp	r3, #23
 80075de:	d807      	bhi.n	80075f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	e03d      	b.n	800766c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b7f      	cmp	r3, #127	; 0x7f
 80075fc:	d912      	bls.n	8007624 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	09da      	lsrs	r2, r3, #7
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b01      	subs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	3a01      	subs	r2, #1
 8007616:	60fa      	str	r2, [r7, #12]
 8007618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800761c:	b2da      	uxtb	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e006      	b.n	8007632 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b01      	subs	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b7f      	cmp	r3, #127	; 0x7f
 8007636:	d912      	bls.n	800765e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	09da      	lsrs	r2, r3, #7
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3b01      	subs	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	3a01      	subs	r2, #1
 8007650:	60fa      	str	r2, [r7, #12]
 8007652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	e006      	b.n	800766c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3b01      	subs	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800766c:	4b36      	ldr	r3, [pc, #216]	; (8007748 <_SendPacket+0x1c4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007672:	4b34      	ldr	r3, [pc, #208]	; (8007744 <_SendPacket+0x1c0>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	623b      	str	r3, [r7, #32]
 8007684:	e00b      	b.n	800769e <_SendPacket+0x11a>
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	1c59      	adds	r1, r3, #1
 800768e:	6279      	str	r1, [r7, #36]	; 0x24
 8007690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	09db      	lsrs	r3, r3, #7
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	2b7f      	cmp	r3, #127	; 0x7f
 80076a2:	d8f0      	bhi.n	8007686 <_SendPacket+0x102>
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	627a      	str	r2, [r7, #36]	; 0x24
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80076b4:	4b23      	ldr	r3, [pc, #140]	; (8007744 <_SendPacket+0x1c0>)
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	4618      	mov	r0, r3
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	f7f8 fd44 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80076c8:	4603      	mov	r3, r0
 80076ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <_SendPacket+0x1c0>)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	60d3      	str	r3, [r2, #12]
 80076d8:	e00b      	b.n	80076f2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80076da:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <_SendPacket+0x1c0>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4b18      	ldr	r3, [pc, #96]	; (8007744 <_SendPacket+0x1c0>)
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e004      	b.n	80076f2 <_SendPacket+0x16e>
    goto SendDone;
 80076e8:	bf00      	nop
 80076ea:	e002      	b.n	80076f2 <_SendPacket+0x16e>
      goto SendDone;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <_SendPacket+0x16e>
      goto SendDone;
 80076f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_SendPacket+0x1c0>)
 80076f4:	7e1b      	ldrb	r3, [r3, #24]
 80076f6:	4619      	mov	r1, r3
 80076f8:	4a14      	ldr	r2, [pc, #80]	; (800774c <_SendPacket+0x1c8>)
 80076fa:	460b      	mov	r3, r1
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	440b      	add	r3, r1
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	4413      	add	r3, r2
 8007704:	336c      	adds	r3, #108	; 0x6c
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <_SendPacket+0x1c0>)
 800770a:	7e1b      	ldrb	r3, [r3, #24]
 800770c:	4618      	mov	r0, r3
 800770e:	490f      	ldr	r1, [pc, #60]	; (800774c <_SendPacket+0x1c8>)
 8007710:	4603      	mov	r3, r0
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4403      	add	r3, r0
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	440b      	add	r3, r1
 800771a:	3370      	adds	r3, #112	; 0x70
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d00b      	beq.n	800773a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <_SendPacket+0x1c0>)
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d107      	bne.n	800773a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <_SendPacket+0x1c0>)
 800772c:	2201      	movs	r2, #1
 800772e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007730:	f7ff fe4a 	bl	80073c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007734:	4b03      	ldr	r3, [pc, #12]	; (8007744 <_SendPacket+0x1c0>)
 8007736:	2200      	movs	r2, #0
 8007738:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800773a:	bf00      	nop
 800773c:	3728      	adds	r7, #40	; 0x28
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20004310 	.word	0x20004310
 8007748:	e0001004 	.word	0xe0001004
 800774c:	200046dc 	.word	0x200046dc

08007750 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800775e:	2300      	movs	r3, #0
 8007760:	2280      	movs	r2, #128	; 0x80
 8007762:	4918      	ldr	r1, [pc, #96]	; (80077c4 <SEGGER_SYSVIEW_Init+0x74>)
 8007764:	4818      	ldr	r0, [pc, #96]	; (80077c8 <SEGGER_SYSVIEW_Init+0x78>)
 8007766:	f7ff fce7 	bl	8007138 <SEGGER_RTT_AllocUpBuffer>
 800776a:	4603      	mov	r3, r0
 800776c:	b2da      	uxtb	r2, r3
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 8007770:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007772:	4b16      	ldr	r3, [pc, #88]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 8007774:	785a      	ldrb	r2, [r3, #1]
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 8007778:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 800777c:	7e1b      	ldrb	r3, [r3, #24]
 800777e:	4618      	mov	r0, r3
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2308      	movs	r3, #8
 8007786:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <SEGGER_SYSVIEW_Init+0x80>)
 8007788:	490f      	ldr	r1, [pc, #60]	; (80077c8 <SEGGER_SYSVIEW_Init+0x78>)
 800778a:	f7ff fd57 	bl	800723c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800778e:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 8007790:	2200      	movs	r2, #0
 8007792:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <SEGGER_SYSVIEW_Init+0x84>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a0c      	ldr	r2, [pc, #48]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 800779a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800779c:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80077a2:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80077a8:	4a08      	ldr	r2, [pc, #32]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80077ae:	4a07      	ldr	r2, [pc, #28]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <SEGGER_SYSVIEW_Init+0x7c>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20004288 	.word	0x20004288
 80077c8:	08008794 	.word	0x08008794
 80077cc:	20004310 	.word	0x20004310
 80077d0:	20004308 	.word	0x20004308
 80077d4:	e0001004 	.word	0xe0001004

080077d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80077e0:	4a03      	ldr	r2, [pc, #12]	; (80077f0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6113      	str	r3, [r2, #16]
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr
 80077f0:	20004310 	.word	0x20004310

080077f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007800:	f04f 0120 	mov.w	r1, #32
 8007804:	f381 8811 	msr	BASEPRI, r1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	4808      	ldr	r0, [pc, #32]	; (800782c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800780c:	f7ff fdd0 	bl	80073b0 <_PreparePacket>
 8007810:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	68b8      	ldr	r0, [r7, #8]
 8007818:	f7ff feb4 	bl	8007584 <_SendPacket>
  RECORD_END();
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f383 8811 	msr	BASEPRI, r3
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20004340 	.word	0x20004340

08007830 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800783a:	f3ef 8311 	mrs	r3, BASEPRI
 800783e:	f04f 0120 	mov.w	r1, #32
 8007842:	f381 8811 	msr	BASEPRI, r1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	4816      	ldr	r0, [pc, #88]	; (80078a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800784a:	f7ff fdb1 	bl	80073b0 <_PreparePacket>
 800784e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e00b      	b.n	8007876 <SEGGER_SYSVIEW_RecordU32+0x46>
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	1c59      	adds	r1, r3, #1
 8007866:	61f9      	str	r1, [r7, #28]
 8007868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	09db      	lsrs	r3, r3, #7
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b7f      	cmp	r3, #127	; 0x7f
 800787a:	d8f0      	bhi.n	800785e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	61fa      	str	r2, [r7, #28]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	6938      	ldr	r0, [r7, #16]
 8007892:	f7ff fe77 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f383 8811 	msr	BASEPRI, r3
}
 800789c:	bf00      	nop
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20004340 	.word	0x20004340

080078a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08c      	sub	sp, #48	; 0x30
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80078b4:	f3ef 8311 	mrs	r3, BASEPRI
 80078b8:	f04f 0120 	mov.w	r1, #32
 80078bc:	f381 8811 	msr	BASEPRI, r1
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	4825      	ldr	r0, [pc, #148]	; (8007958 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80078c4:	f7ff fd74 	bl	80073b0 <_PreparePacket>
 80078c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d6:	e00b      	b.n	80078f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	1c59      	adds	r1, r3, #1
 80078e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	09db      	lsrs	r3, r3, #7
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b7f      	cmp	r3, #127	; 0x7f
 80078f4:	d8f0      	bhi.n	80078d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	623b      	str	r3, [r7, #32]
 800790e:	e00b      	b.n	8007928 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	1c59      	adds	r1, r3, #1
 8007918:	6279      	str	r1, [r7, #36]	; 0x24
 800791a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	09db      	lsrs	r3, r3, #7
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	2b7f      	cmp	r3, #127	; 0x7f
 800792c:	d8f0      	bhi.n	8007910 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	627a      	str	r2, [r7, #36]	; 0x24
 8007934:	6a3a      	ldr	r2, [r7, #32]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	6979      	ldr	r1, [r7, #20]
 8007942:	69b8      	ldr	r0, [r7, #24]
 8007944:	f7ff fe1e 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
 8007950:	3730      	adds	r7, #48	; 0x30
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20004340 	.word	0x20004340

0800795c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b08e      	sub	sp, #56	; 0x38
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800796a:	f3ef 8311 	mrs	r3, BASEPRI
 800796e:	f04f 0120 	mov.w	r1, #32
 8007972:	f381 8811 	msr	BASEPRI, r1
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	4832      	ldr	r0, [pc, #200]	; (8007a44 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800797a:	f7ff fd19 	bl	80073b0 <_PreparePacket>
 800797e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
 800798c:	e00b      	b.n	80079a6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	b2da      	uxtb	r2, r3
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	1c59      	adds	r1, r3, #1
 8007996:	6379      	str	r1, [r7, #52]	; 0x34
 8007998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	09db      	lsrs	r3, r3, #7
 80079a4:	633b      	str	r3, [r7, #48]	; 0x30
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2b7f      	cmp	r3, #127	; 0x7f
 80079aa:	d8f0      	bhi.n	800798e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	637a      	str	r2, [r7, #52]	; 0x34
 80079b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c4:	e00b      	b.n	80079de <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	1c59      	adds	r1, r3, #1
 80079ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80079d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	09db      	lsrs	r3, r3, #7
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	2b7f      	cmp	r3, #127	; 0x7f
 80079e2:	d8f0      	bhi.n	80079c6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	623b      	str	r3, [r7, #32]
 80079fc:	e00b      	b.n	8007a16 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	1c59      	adds	r1, r3, #1
 8007a06:	6279      	str	r1, [r7, #36]	; 0x24
 8007a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	09db      	lsrs	r3, r3, #7
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1a:	d8f0      	bhi.n	80079fe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	627a      	str	r2, [r7, #36]	; 0x24
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	69b8      	ldr	r0, [r7, #24]
 8007a32:	f7ff fda7 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f383 8811 	msr	BASEPRI, r3
}
 8007a3c:	bf00      	nop
 8007a3e:	3738      	adds	r7, #56	; 0x38
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20004340 	.word	0x20004340

08007a48 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08c      	sub	sp, #48	; 0x30
 8007a4c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007a4e:	4b58      	ldr	r3, [pc, #352]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007a54:	f3ef 8311 	mrs	r3, BASEPRI
 8007a58:	f04f 0120 	mov.w	r1, #32
 8007a5c:	f381 8811 	msr	BASEPRI, r1
 8007a60:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007a62:	4b53      	ldr	r3, [pc, #332]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	220a      	movs	r2, #10
 8007a68:	4952      	ldr	r1, [pc, #328]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f8 fb70 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007a76:	200a      	movs	r0, #10
 8007a78:	f7ff febc 	bl	80077f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a80:	f04f 0120 	mov.w	r1, #32
 8007a84:	f381 8811 	msr	BASEPRI, r1
 8007a88:	60bb      	str	r3, [r7, #8]
 8007a8a:	484b      	ldr	r0, [pc, #300]	; (8007bb8 <SEGGER_SYSVIEW_Start+0x170>)
 8007a8c:	f7ff fc90 	bl	80073b0 <_PreparePacket>
 8007a90:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9a:	4b45      	ldr	r3, [pc, #276]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa0:	e00b      	b.n	8007aba <SEGGER_SYSVIEW_Start+0x72>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	1c59      	adds	r1, r3, #1
 8007aaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	09db      	lsrs	r3, r3, #7
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	2b7f      	cmp	r3, #127	; 0x7f
 8007abe:	d8f0      	bhi.n	8007aa2 <SEGGER_SYSVIEW_Start+0x5a>
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad4:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	e00b      	b.n	8007af4 <SEGGER_SYSVIEW_Start+0xac>
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1c59      	adds	r1, r3, #1
 8007ae4:	6279      	str	r1, [r7, #36]	; 0x24
 8007ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	09db      	lsrs	r3, r3, #7
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	2b7f      	cmp	r3, #127	; 0x7f
 8007af8:	d8f0      	bhi.n	8007adc <SEGGER_SYSVIEW_Start+0x94>
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	627a      	str	r2, [r7, #36]	; 0x24
 8007b00:	6a3a      	ldr	r2, [r7, #32]
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	e00b      	b.n	8007b2e <SEGGER_SYSVIEW_Start+0xe6>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	1c59      	adds	r1, r3, #1
 8007b1e:	61f9      	str	r1, [r7, #28]
 8007b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	09db      	lsrs	r3, r3, #7
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b7f      	cmp	r3, #127	; 0x7f
 8007b32:	d8f0      	bhi.n	8007b16 <SEGGER_SYSVIEW_Start+0xce>
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	61fa      	str	r2, [r7, #28]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e00b      	b.n	8007b66 <SEGGER_SYSVIEW_Start+0x11e>
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1c59      	adds	r1, r3, #1
 8007b56:	6179      	str	r1, [r7, #20]
 8007b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	09db      	lsrs	r3, r3, #7
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b7f      	cmp	r3, #127	; 0x7f
 8007b6a:	d8f0      	bhi.n	8007b4e <SEGGER_SYSVIEW_Start+0x106>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	617a      	str	r2, [r7, #20]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b7c:	2218      	movs	r2, #24
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fcff 	bl	8007584 <_SendPacket>
      RECORD_END();
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b8c:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <SEGGER_SYSVIEW_Start+0x168>)
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007b9a:	f000 f9eb 	bl	8007f74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007b9e:	f000 f9b1 	bl	8007f04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007ba2:	f000 fc81 	bl	80084a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007ba6:	bf00      	nop
 8007ba8:	3730      	adds	r7, #48	; 0x30
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20004310 	.word	0x20004310
 8007bb4:	080087bc 	.word	0x080087bc
 8007bb8:	20004340 	.word	0x20004340

08007bbc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc6:	f04f 0120 	mov.w	r1, #32
 8007bca:	f381 8811 	msr	BASEPRI, r1
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	480b      	ldr	r0, [pc, #44]	; (8007c00 <SEGGER_SYSVIEW_Stop+0x44>)
 8007bd2:	f7ff fbed 	bl	80073b0 <_PreparePacket>
 8007bd6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <SEGGER_SYSVIEW_Stop+0x48>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007be0:	220b      	movs	r2, #11
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6838      	ldr	r0, [r7, #0]
 8007be6:	f7ff fccd 	bl	8007584 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <SEGGER_SYSVIEW_Stop+0x48>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f383 8811 	msr	BASEPRI, r3
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20004340 	.word	0x20004340
 8007c04:	20004310 	.word	0x20004310

08007c08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	; 0x30
 8007c0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c12:	f04f 0120 	mov.w	r1, #32
 8007c16:	f381 8811 	msr	BASEPRI, r1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	4845      	ldr	r0, [pc, #276]	; (8007d34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007c1e:	f7ff fbc7 	bl	80073b0 <_PreparePacket>
 8007c22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2c:	4b42      	ldr	r3, [pc, #264]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c32:	e00b      	b.n	8007c4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	09db      	lsrs	r3, r3, #7
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c50:	d8f0      	bhi.n	8007c34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	4b34      	ldr	r3, [pc, #208]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	623b      	str	r3, [r7, #32]
 8007c6c:	e00b      	b.n	8007c86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	1c59      	adds	r1, r3, #1
 8007c76:	6279      	str	r1, [r7, #36]	; 0x24
 8007c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	09db      	lsrs	r3, r3, #7
 8007c84:	623b      	str	r3, [r7, #32]
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	2b7f      	cmp	r3, #127	; 0x7f
 8007c8a:	d8f0      	bhi.n	8007c6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	627a      	str	r2, [r7, #36]	; 0x24
 8007c92:	6a3a      	ldr	r2, [r7, #32]
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	e00b      	b.n	8007cc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	61f9      	str	r1, [r7, #28]
 8007cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	09db      	lsrs	r3, r3, #7
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc4:	d8f0      	bhi.n	8007ca8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	61fa      	str	r2, [r7, #28]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e00b      	b.n	8007cf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	6179      	str	r1, [r7, #20]
 8007cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	09db      	lsrs	r3, r3, #7
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cfc:	d8f0      	bhi.n	8007ce0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	617a      	str	r2, [r7, #20]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007d0e:	2218      	movs	r2, #24
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	68b8      	ldr	r0, [r7, #8]
 8007d14:	f7ff fc36 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007d26:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	4798      	blx	r3
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3730      	adds	r7, #48	; 0x30
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20004340 	.word	0x20004340
 8007d38:	20004310 	.word	0x20004310

08007d3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b092      	sub	sp, #72	; 0x48
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007d44:	f3ef 8311 	mrs	r3, BASEPRI
 8007d48:	f04f 0120 	mov.w	r1, #32
 8007d4c:	f381 8811 	msr	BASEPRI, r1
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	486a      	ldr	r0, [pc, #424]	; (8007efc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007d54:	f7ff fb2c 	bl	80073b0 <_PreparePacket>
 8007d58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	647b      	str	r3, [r7, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b66      	ldr	r3, [pc, #408]	; (8007f00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6e:	e00b      	b.n	8007d88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	6479      	str	r1, [r7, #68]	; 0x44
 8007d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d84:	09db      	lsrs	r3, r3, #7
 8007d86:	643b      	str	r3, [r7, #64]	; 0x40
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d8c:	d8f0      	bhi.n	8007d70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	647a      	str	r2, [r7, #68]	; 0x44
 8007d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da8:	e00b      	b.n	8007dc2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	09db      	lsrs	r3, r3, #7
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc6:	d8f0      	bhi.n	8007daa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	4619      	mov	r1, r3
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fa99 	bl	8007318 <_EncodeStr>
 8007de6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007de8:	2209      	movs	r2, #9
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	6938      	ldr	r0, [r7, #16]
 8007dee:	f7ff fbc9 	bl	8007584 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b40      	ldr	r3, [pc, #256]	; (8007f00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	633b      	str	r3, [r7, #48]	; 0x30
 8007e06:	e00b      	b.n	8007e20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	1c59      	adds	r1, r3, #1
 8007e10:	6379      	str	r1, [r7, #52]	; 0x34
 8007e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	09db      	lsrs	r3, r3, #7
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2b7f      	cmp	r3, #127	; 0x7f
 8007e24:	d8f0      	bhi.n	8007e08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e40:	e00b      	b.n	8007e5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	1c59      	adds	r1, r3, #1
 8007e4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	09db      	lsrs	r3, r3, #7
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e5e:	d8f0      	bhi.n	8007e42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	623b      	str	r3, [r7, #32]
 8007e7a:	e00b      	b.n	8007e94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	1c59      	adds	r1, r3, #1
 8007e84:	6279      	str	r1, [r7, #36]	; 0x24
 8007e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	09db      	lsrs	r3, r3, #7
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	2b7f      	cmp	r3, #127	; 0x7f
 8007e98:	d8f0      	bhi.n	8007e7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8007ea0:	6a3a      	ldr	r2, [r7, #32]
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	e00b      	b.n	8007ecc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	61f9      	str	r1, [r7, #28]
 8007ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	09db      	lsrs	r3, r3, #7
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed0:	d8f0      	bhi.n	8007eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	61fa      	str	r2, [r7, #28]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007ee2:	2215      	movs	r2, #21
 8007ee4:	68f9      	ldr	r1, [r7, #12]
 8007ee6:	6938      	ldr	r0, [r7, #16]
 8007ee8:	f7ff fb4c 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f383 8811 	msr	BASEPRI, r3
}
 8007ef2:	bf00      	nop
 8007ef4:	3748      	adds	r7, #72	; 0x48
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20004340 	.word	0x20004340
 8007f00:	20004310 	.word	0x20004310

08007f04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007f1a:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4798      	blx	r3
  }
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20004310 	.word	0x20004310

08007f2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f34:	f3ef 8311 	mrs	r3, BASEPRI
 8007f38:	f04f 0120 	mov.w	r1, #32
 8007f3c:	f381 8811 	msr	BASEPRI, r1
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	480b      	ldr	r0, [pc, #44]	; (8007f70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007f44:	f7ff fa34 	bl	80073b0 <_PreparePacket>
 8007f48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	6938      	ldr	r0, [r7, #16]
 8007f50:	f7ff f9e2 	bl	8007318 <_EncodeStr>
 8007f54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007f56:	220e      	movs	r2, #14
 8007f58:	68f9      	ldr	r1, [r7, #12]
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f7ff fb12 	bl	8007584 <_SendPacket>
  RECORD_END();
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f383 8811 	msr	BASEPRI, r3
}
 8007f66:	bf00      	nop
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20004340 	.word	0x20004340

08007f74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d019      	beq.n	8007fb6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d014      	beq.n	8007fb6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4798      	blx	r3
 8007f94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007f98:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007f9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	f04f 0400 	mov.w	r4, #0
 8007fa6:	0013      	movs	r3, r2
 8007fa8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007faa:	461a      	mov	r2, r3
 8007fac:	4601      	mov	r1, r0
 8007fae:	200d      	movs	r0, #13
 8007fb0:	f7ff fc7a 	bl	80078a8 <SEGGER_SYSVIEW_RecordU32x2>
 8007fb4:	e005      	b.n	8007fc2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007fb6:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	200c      	movs	r0, #12
 8007fbe:	f7ff fc37 	bl	8007830 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd90      	pop	{r4, r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20004310 	.word	0x20004310
 8007fd0:	e0001004 	.word	0xe0001004

08007fd4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007fda:	f3ef 8311 	mrs	r3, BASEPRI
 8007fde:	f04f 0120 	mov.w	r1, #32
 8007fe2:	f381 8811 	msr	BASEPRI, r1
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	4819      	ldr	r0, [pc, #100]	; (8008050 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007fea:	f7ff f9e1 	bl	80073b0 <_PreparePacket>
 8007fee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007ff4:	4b17      	ldr	r3, [pc, #92]	; (8008054 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e00b      	b.n	8008020 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	1c59      	adds	r1, r3, #1
 8008010:	6179      	str	r1, [r7, #20]
 8008012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	09db      	lsrs	r3, r3, #7
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b7f      	cmp	r3, #127	; 0x7f
 8008024:	d8f0      	bhi.n	8008008 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	617a      	str	r2, [r7, #20]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008036:	2202      	movs	r2, #2
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	68b8      	ldr	r0, [r7, #8]
 800803c:	f7ff faa2 	bl	8007584 <_SendPacket>
  RECORD_END();
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f383 8811 	msr	BASEPRI, r3
}
 8008046:	bf00      	nop
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20004340 	.word	0x20004340
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800805e:	f3ef 8311 	mrs	r3, BASEPRI
 8008062:	f04f 0120 	mov.w	r1, #32
 8008066:	f381 8811 	msr	BASEPRI, r1
 800806a:	607b      	str	r3, [r7, #4]
 800806c:	4807      	ldr	r0, [pc, #28]	; (800808c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800806e:	f7ff f99f 	bl	80073b0 <_PreparePacket>
 8008072:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008074:	2203      	movs	r2, #3
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6838      	ldr	r0, [r7, #0]
 800807a:	f7ff fa83 	bl	8007584 <_SendPacket>
  RECORD_END();
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f383 8811 	msr	BASEPRI, r3
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20004340 	.word	0x20004340

08008090 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008096:	f3ef 8311 	mrs	r3, BASEPRI
 800809a:	f04f 0120 	mov.w	r1, #32
 800809e:	f381 8811 	msr	BASEPRI, r1
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	4807      	ldr	r0, [pc, #28]	; (80080c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80080a6:	f7ff f983 	bl	80073b0 <_PreparePacket>
 80080aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80080ac:	2212      	movs	r2, #18
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6838      	ldr	r0, [r7, #0]
 80080b2:	f7ff fa67 	bl	8007584 <_SendPacket>
  RECORD_END();
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f383 8811 	msr	BASEPRI, r3
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20004340 	.word	0x20004340

080080c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80080ce:	f3ef 8311 	mrs	r3, BASEPRI
 80080d2:	f04f 0120 	mov.w	r1, #32
 80080d6:	f381 8811 	msr	BASEPRI, r1
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	4807      	ldr	r0, [pc, #28]	; (80080fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80080de:	f7ff f967 	bl	80073b0 <_PreparePacket>
 80080e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80080e4:	2211      	movs	r2, #17
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6838      	ldr	r0, [r7, #0]
 80080ea:	f7ff fa4b 	bl	8007584 <_SendPacket>
  RECORD_END();
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f383 8811 	msr	BASEPRI, r3
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20004340 	.word	0x20004340

08008100 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008108:	f3ef 8311 	mrs	r3, BASEPRI
 800810c:	f04f 0120 	mov.w	r1, #32
 8008110:	f381 8811 	msr	BASEPRI, r1
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	4819      	ldr	r0, [pc, #100]	; (800817c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008118:	f7ff f94a 	bl	80073b0 <_PreparePacket>
 800811c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	e00b      	b.n	800814e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	1c59      	adds	r1, r3, #1
 800813e:	61f9      	str	r1, [r7, #28]
 8008140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008144:	b2d2      	uxtb	r2, r2
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	09db      	lsrs	r3, r3, #7
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b7f      	cmp	r3, #127	; 0x7f
 8008152:	d8f0      	bhi.n	8008136 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	61fa      	str	r2, [r7, #28]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008164:	2208      	movs	r2, #8
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	6938      	ldr	r0, [r7, #16]
 800816a:	f7ff fa0b 	bl	8007584 <_SendPacket>
  RECORD_END();
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f383 8811 	msr	BASEPRI, r3
}
 8008174:	bf00      	nop
 8008176:	3720      	adds	r7, #32
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20004340 	.word	0x20004340
 8008180:	20004310 	.word	0x20004310

08008184 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800818c:	f3ef 8311 	mrs	r3, BASEPRI
 8008190:	f04f 0120 	mov.w	r1, #32
 8008194:	f381 8811 	msr	BASEPRI, r1
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	4819      	ldr	r0, [pc, #100]	; (8008200 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800819c:	f7ff f908 	bl	80073b0 <_PreparePacket>
 80081a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80081a6:	4b17      	ldr	r3, [pc, #92]	; (8008204 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e00b      	b.n	80081d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	1c59      	adds	r1, r3, #1
 80081c2:	61f9      	str	r1, [r7, #28]
 80081c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081c8:	b2d2      	uxtb	r2, r2
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	09db      	lsrs	r3, r3, #7
 80081d0:	61bb      	str	r3, [r7, #24]
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b7f      	cmp	r3, #127	; 0x7f
 80081d6:	d8f0      	bhi.n	80081ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	61fa      	str	r2, [r7, #28]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80081e8:	2204      	movs	r2, #4
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	6938      	ldr	r0, [r7, #16]
 80081ee:	f7ff f9c9 	bl	8007584 <_SendPacket>
  RECORD_END();
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f383 8811 	msr	BASEPRI, r3
}
 80081f8:	bf00      	nop
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20004340 	.word	0x20004340
 8008204:	20004310 	.word	0x20004310

08008208 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008210:	f3ef 8311 	mrs	r3, BASEPRI
 8008214:	f04f 0120 	mov.w	r1, #32
 8008218:	f381 8811 	msr	BASEPRI, r1
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	4819      	ldr	r0, [pc, #100]	; (8008284 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008220:	f7ff f8c6 	bl	80073b0 <_PreparePacket>
 8008224:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800822a:	4b17      	ldr	r3, [pc, #92]	; (8008288 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	e00b      	b.n	8008256 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	61f9      	str	r1, [r7, #28]
 8008248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	09db      	lsrs	r3, r3, #7
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b7f      	cmp	r3, #127	; 0x7f
 800825a:	d8f0      	bhi.n	800823e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	61fa      	str	r2, [r7, #28]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800826c:	2206      	movs	r2, #6
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6938      	ldr	r0, [r7, #16]
 8008272:	f7ff f987 	bl	8007584 <_SendPacket>
  RECORD_END();
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f383 8811 	msr	BASEPRI, r3
}
 800827c:	bf00      	nop
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20004340 	.word	0x20004340
 8008288:	20004310 	.word	0x20004310

0800828c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008296:	f3ef 8311 	mrs	r3, BASEPRI
 800829a:	f04f 0120 	mov.w	r1, #32
 800829e:	f381 8811 	msr	BASEPRI, r1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	4827      	ldr	r0, [pc, #156]	; (8008344 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80082a6:	f7ff f883 	bl	80073b0 <_PreparePacket>
 80082aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80082b0:	4b25      	ldr	r3, [pc, #148]	; (8008348 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	623b      	str	r3, [r7, #32]
 80082c2:	e00b      	b.n	80082dc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	1c59      	adds	r1, r3, #1
 80082cc:	6279      	str	r1, [r7, #36]	; 0x24
 80082ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	09db      	lsrs	r3, r3, #7
 80082da:	623b      	str	r3, [r7, #32]
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2b7f      	cmp	r3, #127	; 0x7f
 80082e0:	d8f0      	bhi.n	80082c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	627a      	str	r2, [r7, #36]	; 0x24
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	e00b      	b.n	8008314 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	61f9      	str	r1, [r7, #28]
 8008306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	09db      	lsrs	r3, r3, #7
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	2b7f      	cmp	r3, #127	; 0x7f
 8008318:	d8f0      	bhi.n	80082fc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	61fa      	str	r2, [r7, #28]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800832a:	2207      	movs	r2, #7
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	6938      	ldr	r0, [r7, #16]
 8008330:	f7ff f928 	bl	8007584 <_SendPacket>
  RECORD_END();
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f383 8811 	msr	BASEPRI, r3
}
 800833a:	bf00      	nop
 800833c:	3728      	adds	r7, #40	; 0x28
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20004340 	.word	0x20004340
 8008348:	20004310 	.word	0x20004310

0800834c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	1ad3      	subs	r3, r2, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20004310 	.word	0x20004310

0800836c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b08c      	sub	sp, #48	; 0x30
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008376:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d06d      	beq.n	800845a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800837e:	4b39      	ldr	r3, [pc, #228]	; (8008464 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008384:	2300      	movs	r3, #0
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
 8008388:	e008      	b.n	800839c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	3301      	adds	r3, #1
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d3f2      	bcc.n	800838a <SEGGER_SYSVIEW_SendModule+0x1e>
 80083a4:	e000      	b.n	80083a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80083a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d055      	beq.n	800845a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80083ae:	f3ef 8311 	mrs	r3, BASEPRI
 80083b2:	f04f 0120 	mov.w	r1, #32
 80083b6:	f381 8811 	msr	BASEPRI, r1
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	482a      	ldr	r0, [pc, #168]	; (8008468 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80083be:	f7fe fff7 	bl	80073b0 <_PreparePacket>
 80083c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	623b      	str	r3, [r7, #32]
 80083d0:	e00b      	b.n	80083ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	1c59      	adds	r1, r3, #1
 80083da:	6279      	str	r1, [r7, #36]	; 0x24
 80083dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	09db      	lsrs	r3, r3, #7
 80083e8:	623b      	str	r3, [r7, #32]
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	2b7f      	cmp	r3, #127	; 0x7f
 80083ee:	d8f0      	bhi.n	80083d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	627a      	str	r2, [r7, #36]	; 0x24
 80083f6:	6a3a      	ldr	r2, [r7, #32]
 80083f8:	b2d2      	uxtb	r2, r2
 80083fa:	701a      	strb	r2, [r3, #0]
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	e00b      	b.n	8008424 <SEGGER_SYSVIEW_SendModule+0xb8>
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	b2da      	uxtb	r2, r3
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	1c59      	adds	r1, r3, #1
 8008414:	61f9      	str	r1, [r7, #28]
 8008416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	09db      	lsrs	r3, r3, #7
 8008422:	61bb      	str	r3, [r7, #24]
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b7f      	cmp	r3, #127	; 0x7f
 8008428:	d8f0      	bhi.n	800840c <SEGGER_SYSVIEW_SendModule+0xa0>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	61fa      	str	r2, [r7, #28]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2280      	movs	r2, #128	; 0x80
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7fe ff68 	bl	8007318 <_EncodeStr>
 8008448:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800844a:	2216      	movs	r2, #22
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	6938      	ldr	r0, [r7, #16]
 8008450:	f7ff f898 	bl	8007584 <_SendPacket>
      RECORD_END();
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800845a:	bf00      	nop
 800845c:	3730      	adds	r7, #48	; 0x30
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20004338 	.word	0x20004338
 8008468:	20004340 	.word	0x20004340

0800846c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008472:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00f      	beq.n	800849a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f2      	bne.n	8008480 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20004338 	.word	0x20004338

080084a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80084ae:	f3ef 8311 	mrs	r3, BASEPRI
 80084b2:	f04f 0120 	mov.w	r1, #32
 80084b6:	f381 8811 	msr	BASEPRI, r1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	4817      	ldr	r0, [pc, #92]	; (800851c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80084be:	f7fe ff77 	bl	80073b0 <_PreparePacket>
 80084c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	4b14      	ldr	r3, [pc, #80]	; (8008520 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e00b      	b.n	80084ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1c59      	adds	r1, r3, #1
 80084dc:	6179      	str	r1, [r7, #20]
 80084de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	09db      	lsrs	r3, r3, #7
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b7f      	cmp	r3, #127	; 0x7f
 80084f0:	d8f0      	bhi.n	80084d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	617a      	str	r2, [r7, #20]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008502:	221b      	movs	r2, #27
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	68b8      	ldr	r0, [r7, #8]
 8008508:	f7ff f83c 	bl	8007584 <_SendPacket>
  RECORD_END();
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f383 8811 	msr	BASEPRI, r3
}
 8008512:	bf00      	nop
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20004340 	.word	0x20004340
 8008520:	2000433c 	.word	0x2000433c

08008524 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800852c:	f3ef 8311 	mrs	r3, BASEPRI
 8008530:	f04f 0120 	mov.w	r1, #32
 8008534:	f381 8811 	msr	BASEPRI, r1
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	4827      	ldr	r0, [pc, #156]	; (80085d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800853c:	f7fe ff38 	bl	80073b0 <_PreparePacket>
 8008540:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008542:	2280      	movs	r2, #128	; 0x80
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	6938      	ldr	r0, [r7, #16]
 8008548:	f7fe fee6 	bl	8007318 <_EncodeStr>
 800854c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
 8008552:	2301      	movs	r3, #1
 8008554:	623b      	str	r3, [r7, #32]
 8008556:	e00b      	b.n	8008570 <SEGGER_SYSVIEW_Warn+0x4c>
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	b2da      	uxtb	r2, r3
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	1c59      	adds	r1, r3, #1
 8008560:	6279      	str	r1, [r7, #36]	; 0x24
 8008562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	09db      	lsrs	r3, r3, #7
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	2b7f      	cmp	r3, #127	; 0x7f
 8008574:	d8f0      	bhi.n	8008558 <SEGGER_SYSVIEW_Warn+0x34>
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	627a      	str	r2, [r7, #36]	; 0x24
 800857c:	6a3a      	ldr	r2, [r7, #32]
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e00b      	b.n	80085a8 <SEGGER_SYSVIEW_Warn+0x84>
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	1c59      	adds	r1, r3, #1
 8008598:	61f9      	str	r1, [r7, #28]
 800859a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	09db      	lsrs	r3, r3, #7
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b7f      	cmp	r3, #127	; 0x7f
 80085ac:	d8f0      	bhi.n	8008590 <SEGGER_SYSVIEW_Warn+0x6c>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	61fa      	str	r2, [r7, #28]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80085be:	221a      	movs	r2, #26
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	6938      	ldr	r0, [r7, #16]
 80085c4:	f7fe ffde 	bl	8007584 <_SendPacket>
  RECORD_END();
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f383 8811 	msr	BASEPRI, r3
}
 80085ce:	bf00      	nop
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20004340 	.word	0x20004340

080085dc <__libc_init_array>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	2500      	movs	r5, #0
 80085e0:	4e0c      	ldr	r6, [pc, #48]	; (8008614 <__libc_init_array+0x38>)
 80085e2:	4c0d      	ldr	r4, [pc, #52]	; (8008618 <__libc_init_array+0x3c>)
 80085e4:	1ba4      	subs	r4, r4, r6
 80085e6:	10a4      	asrs	r4, r4, #2
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	d109      	bne.n	8008600 <__libc_init_array+0x24>
 80085ec:	f000 f83c 	bl	8008668 <_init>
 80085f0:	2500      	movs	r5, #0
 80085f2:	4e0a      	ldr	r6, [pc, #40]	; (800861c <__libc_init_array+0x40>)
 80085f4:	4c0a      	ldr	r4, [pc, #40]	; (8008620 <__libc_init_array+0x44>)
 80085f6:	1ba4      	subs	r4, r4, r6
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	42a5      	cmp	r5, r4
 80085fc:	d105      	bne.n	800860a <__libc_init_array+0x2e>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008604:	4798      	blx	r3
 8008606:	3501      	adds	r5, #1
 8008608:	e7ee      	b.n	80085e8 <__libc_init_array+0xc>
 800860a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800860e:	4798      	blx	r3
 8008610:	3501      	adds	r5, #1
 8008612:	e7f2      	b.n	80085fa <__libc_init_array+0x1e>
 8008614:	080087c8 	.word	0x080087c8
 8008618:	080087c8 	.word	0x080087c8
 800861c:	080087c8 	.word	0x080087c8
 8008620:	080087cc 	.word	0x080087cc

08008624 <memcmp>:
 8008624:	b530      	push	{r4, r5, lr}
 8008626:	2400      	movs	r4, #0
 8008628:	42a2      	cmp	r2, r4
 800862a:	d101      	bne.n	8008630 <memcmp+0xc>
 800862c:	2000      	movs	r0, #0
 800862e:	e007      	b.n	8008640 <memcmp+0x1c>
 8008630:	5d03      	ldrb	r3, [r0, r4]
 8008632:	3401      	adds	r4, #1
 8008634:	190d      	adds	r5, r1, r4
 8008636:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800863a:	42ab      	cmp	r3, r5
 800863c:	d0f4      	beq.n	8008628 <memcmp+0x4>
 800863e:	1b58      	subs	r0, r3, r5
 8008640:	bd30      	pop	{r4, r5, pc}

08008642 <memcpy>:
 8008642:	b510      	push	{r4, lr}
 8008644:	1e43      	subs	r3, r0, #1
 8008646:	440a      	add	r2, r1
 8008648:	4291      	cmp	r1, r2
 800864a:	d100      	bne.n	800864e <memcpy+0xc>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008656:	e7f7      	b.n	8008648 <memcpy+0x6>

08008658 <memset>:
 8008658:	4603      	mov	r3, r0
 800865a:	4402      	add	r2, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
