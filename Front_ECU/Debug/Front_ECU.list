
Front_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008798  08008798  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08008798  08008798  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008798  08008798  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040f0  20000014  080087b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004104  080087b4  00024104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0f5  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000392f  00000000  00000000  0003d132  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001958  00000000  00000000  00040a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  000423c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183f9  00000000  00000000  00043b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141a2  00000000  00000000  0005bf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008876a  00000000  00000000  000700fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  000f88e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08008638 	.word	0x08008638

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08008638 	.word	0x08008638

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	2000405c 	.word	0x2000405c

080001dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a06      	ldr	r2, [pc, #24]	; (8000204 <vApplicationGetIdleTaskMemory+0x28>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <vApplicationGetIdleTaskMemory+0x2c>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000030 	.word	0x20000030
 8000208:	20000084 	.word	0x20000084

0800020c <HAL_UART_RxCpltCallback>:
void CAN_Filter_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	if (GPS_in[0] == UBX_HEADER[0] && GPS_in[1] == UBX_HEADER[1]) {
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <HAL_UART_RxCpltCallback+0x6c>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	22b5      	movs	r2, #181	; 0xb5
 800021a:	4293      	cmp	r3, r2
 800021c:	d11b      	bne.n	8000256 <HAL_UART_RxCpltCallback+0x4a>
 800021e:	4b16      	ldr	r3, [pc, #88]	; (8000278 <HAL_UART_RxCpltCallback+0x6c>)
 8000220:	785b      	ldrb	r3, [r3, #1]
 8000222:	2262      	movs	r2, #98	; 0x62
 8000224:	4293      	cmp	r3, r2
 8000226:	d116      	bne.n	8000256 <HAL_UART_RxCpltCallback+0x4a>
		for (int k = 0; k < 32; k++) {
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e00a      	b.n	8000244 <HAL_UART_RxCpltCallback+0x38>
			((unsigned char*) (&posllh))[k] = GPS_in[k + 2];
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	1c9a      	adds	r2, r3, #2
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	4911      	ldr	r1, [pc, #68]	; (800027c <HAL_UART_RxCpltCallback+0x70>)
 8000236:	440b      	add	r3, r1
 8000238:	490f      	ldr	r1, [pc, #60]	; (8000278 <HAL_UART_RxCpltCallback+0x6c>)
 800023a:	5c8a      	ldrb	r2, [r1, r2]
 800023c:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < 32; k++) {
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2b1f      	cmp	r3, #31
 8000248:	ddf1      	ble.n	800022e <HAL_UART_RxCpltCallback+0x22>
		}
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 800024a:	2224      	movs	r2, #36	; 0x24
 800024c:	490a      	ldr	r1, [pc, #40]	; (8000278 <HAL_UART_RxCpltCallback+0x6c>)
 800024e:	480c      	ldr	r0, [pc, #48]	; (8000280 <HAL_UART_RxCpltCallback+0x74>)
 8000250:	f004 fbe2 	bl	8004a18 <HAL_UART_Receive_IT>
 8000254:	e00c      	b.n	8000270 <HAL_UART_RxCpltCallback+0x64>
	}else{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	480a      	ldr	r0, [pc, #40]	; (8000284 <HAL_UART_RxCpltCallback+0x78>)
 800025c:	f002 ffc1 	bl	80031e2 <HAL_GPIO_TogglePin>
		HAL_UART_Abort(&huart2);
 8000260:	4807      	ldr	r0, [pc, #28]	; (8000280 <HAL_UART_RxCpltCallback+0x74>)
 8000262:	f004 fc2d 	bl	8004ac0 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000266:	2224      	movs	r2, #36	; 0x24
 8000268:	4903      	ldr	r1, [pc, #12]	; (8000278 <HAL_UART_RxCpltCallback+0x6c>)
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <HAL_UART_RxCpltCallback+0x74>)
 800026c:	f004 fbd4 	bl	8004a18 <HAL_UART_Receive_IT>
	}
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20003fa4 	.word	0x20003fa4
 800027c:	20003f04 	.word	0x20003f04
 8000280:	20003fcc 	.word	0x20003fcc
 8000284:	40011000 	.word	0x40011000

08000288 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800028e:	f001 f869 	bl	8001364 <HAL_Init>
	HAL_Delay(2000);
 8000292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000296:	f001 f897 	bl	80013c8 <HAL_Delay>

	/* Configure the system clock */
	SystemClock_Config();
 800029a:	f000 f859 	bl	8000350 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800029e:	f000 f9cf 	bl	8000640 <MX_GPIO_Init>
	MX_DMA_Init();
 80002a2:	f000 f9a7 	bl	80005f4 <MX_DMA_Init>
	MX_ADC1_Init();
 80002a6:	f000 f8af 	bl	8000408 <MX_ADC1_Init>
	MX_CAN_Init();
 80002aa:	f000 f8eb 	bl	8000484 <MX_CAN_Init>
	MX_I2C1_Init();
 80002ae:	f000 f91f 	bl	80004f0 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80002b2:	f000 f975 	bl	80005a0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80002b6:	f000 f949 	bl	800054c <MX_USART1_UART_Init>

	DWT_CTRL |= (1 << 0);
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <main+0xa4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a1b      	ldr	r2, [pc, #108]	; (800032c <main+0xa4>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN 1 */
	CAN_Filter_Config();
 80002c6:	f000 fa29 	bl	800071c <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80002ca:	f240 4103 	movw	r1, #1027	; 0x403
 80002ce:	4818      	ldr	r0, [pc, #96]	; (8000330 <main+0xa8>)
 80002d0:	f002 f84b 	bl	800236a <HAL_CAN_ActivateNotification>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <main+0x56>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80002da:	f000 fd0d 	bl	8000cf8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 80002de:	4814      	ldr	r0, [pc, #80]	; (8000330 <main+0xa8>)
 80002e0:	f001 fe14 	bl	8001f0c <HAL_CAN_Start>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <main+0x66>
		Error_Handler();
 80002ea:	f000 fd05 	bl	8000cf8 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) gas, 1);
 80002ee:	2201      	movs	r2, #1
 80002f0:	4910      	ldr	r1, [pc, #64]	; (8000334 <main+0xac>)
 80002f2:	4811      	ldr	r0, [pc, #68]	; (8000338 <main+0xb0>)
 80002f4:	f001 f962 	bl	80015bc <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 80002f8:	2224      	movs	r2, #36	; 0x24
 80002fa:	4910      	ldr	r1, [pc, #64]	; (800033c <main+0xb4>)
 80002fc:	4810      	ldr	r0, [pc, #64]	; (8000340 <main+0xb8>)
 80002fe:	f004 fb8b 	bl	8004a18 <HAL_UART_Receive_IT>

	SEGGER_SYSVIEW_Conf();
 8000302:	f006 fc49 	bl	8006b98 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000306:	f007 fb87 	bl	8007a18 <SEGGER_SYSVIEW_Start>

	/* Start scheduler */
	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <main+0xbc>)
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	2307      	movs	r3, #7
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2300      	movs	r3, #0
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <main+0xc0>)
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <main+0xc4>)
 800031a:	f005 f978 	bl	800560e <xTaskCreate>

	vTaskStartScheduler();
 800031e:	f005 fc13 	bl	8005b48 <vTaskStartScheduler>
	/* USER CODE END 1 */
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST I CASE*/
 8000322:	2001      	movs	r0, #1
 8000324:	f001 f850 	bl	80013c8 <HAL_Delay>
 8000328:	e7fb      	b.n	8000322 <main+0x9a>
 800032a:	bf00      	nop
 800032c:	e0001000 	.word	0xe0001000
 8000330:	20003e50 	.word	0x20003e50
 8000334:	20003fa0 	.word	0x20003fa0
 8000338:	20003e94 	.word	0x20003e94
 800033c:	20003fa4 	.word	0x20003fa4
 8000340:	20003fcc 	.word	0x20003fcc
 8000344:	20003fc8 	.word	0x20003fc8
 8000348:	08008650 	.word	0x08008650
 800034c:	08000769 	.word	0x08000769

08000350 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b094      	sub	sp, #80	; 0x50
 8000354:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f008 f962 	bl	8008628 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fb56 	bl	8003a58 <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x66>
		Error_Handler();
 80003b2:	f000 fca1 	bl	8000cf8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003b6:	230f      	movs	r3, #15
 80003b8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fdc0 	bl	8003f58 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x92>
		Error_Handler();
 80003de:	f000 fc8b 	bl	8000cf8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003e2:	2302      	movs	r3, #2
 80003e4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80003e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003ea:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 ff7e 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xae>
		Error_Handler();
 80003fa:	f000 fc7d 	bl	8000cf8 <Error_Handler>
	}
}
 80003fe:	bf00      	nop
 8000400:	3750      	adds	r7, #80	; 0x50
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_ADC1_Init+0x74>)
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <MX_ADC1_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_ADC1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_ADC1_Init+0x74>)
 8000426:	2201      	movs	r2, #1
 8000428:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_ADC1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_ADC1_Init+0x74>)
 8000432:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000436:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_ADC1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_ADC1_Init+0x74>)
 8000440:	2201      	movs	r2, #1
 8000442:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <MX_ADC1_Init+0x74>)
 8000446:	f000 ffe1 	bl	800140c <HAL_ADC_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000450:	f000 fc52 	bl	8000cf8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000454:	2304      	movs	r3, #4
 8000456:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000458:	2301      	movs	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800045c:	2307      	movs	r3, #7
 800045e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_ADC1_Init+0x74>)
 8000466:	f001 f9a3 	bl	80017b0 <HAL_ADC_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000470:	f000 fc42 	bl	8000cf8 <Error_Handler>
	}
}
 8000474:	bf00      	nop
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20003e94 	.word	0x20003e94
 8000480:	40012400 	.word	0x40012400

08000484 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000488:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_CAN_Init+0x64>)
 800048a:	4a18      	ldr	r2, [pc, #96]	; (80004ec <MX_CAN_Init+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_CAN_Init+0x64>)
 8000490:	2209      	movs	r2, #9
 8000492:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_CAN_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_CAN_Init+0x64>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_CAN_Init+0x64>)
 80004a2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80004a6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_CAN_Init+0x64>)
 80004aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ae:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <MX_CAN_Init+0x64>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_CAN_Init+0x64>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <MX_CAN_Init+0x64>)
 80004be:	2200      	movs	r2, #0
 80004c0:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_CAN_Init+0x64>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <MX_CAN_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_CAN_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_CAN_Init+0x64>)
 80004d6:	f001 fb55 	bl	8001b84 <HAL_CAN_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_CAN_Init+0x60>
		Error_Handler();
 80004e0:	f000 fc0a 	bl	8000cf8 <Error_Handler>
	}
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20003e50 	.word	0x20003e50
 80004ec:	40006400 	.word	0x40006400

080004f0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_I2C1_Init+0x50>)
 80004f6:	4a13      	ldr	r2, [pc, #76]	; (8000544 <MX_I2C1_Init+0x54>)
 80004f8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_I2C1_Init+0x50>)
 80004fc:	4a12      	ldr	r2, [pc, #72]	; (8000548 <MX_I2C1_Init+0x58>)
 80004fe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_I2C1_Init+0x50>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_I2C1_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_I2C1_Init+0x50>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MX_I2C1_Init+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_I2C1_Init+0x50>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_I2C1_Init+0x50>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_I2C1_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_I2C1_Init+0x50>)
 800052e:	f002 fe71 	bl	8003214 <HAL_I2C_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000538:	f000 fbde 	bl	8000cf8 <Error_Handler>
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20003df8 	.word	0x20003df8
 8000544:	40005400 	.word	0x40005400
 8000548:	00061a80 	.word	0x00061a80

0800054c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <MX_USART1_UART_Init+0x50>)
 8000554:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000572:	2208      	movs	r2, #8
 8000574:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000584:	f004 f962 	bl	800484c <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800058e:	f000 fbb3 	bl	8000cf8 <Error_Handler>
	}
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20003ec4 	.word	0x20003ec4
 800059c:	40013800 	.word	0x40013800

080005a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_USART2_UART_Init+0x50>)
 80005a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d8:	f004 f938 	bl	800484c <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80005e2:	f000 fb89 	bl	8000cf8 <Error_Handler>
	}
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20003fcc 	.word	0x20003fcc
 80005f0:	40004400 	.word	0x40004400

080005f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_DMA_Init+0x48>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_DMA_Init+0x48>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_DMA_Init+0x48>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2105      	movs	r1, #5
 8000616:	200b      	movs	r0, #11
 8000618:	f002 f99f 	bl	800295a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800061c:	200b      	movs	r0, #11
 800061e:	f002 f9b8 	bl	8002992 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2105      	movs	r1, #5
 8000626:	2010      	movs	r0, #16
 8000628:	f002 f997 	bl	800295a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800062c:	2010      	movs	r0, #16
 800062e:	f002 f9b0 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <MX_GPIO_Init+0xd0>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_GPIO_Init+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_GPIO_Init+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_GPIO_Init+0xd0>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_GPIO_Init+0xd0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : Gear_Pin Brake_Pin */
	GPIO_InitStruct.Pin = Gear_Pin | Brake_Pin;
 80006b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_GPIO_Init+0xd4>)
 80006ca:	f002 fc19 	bl	8002f00 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0xd8>)
 80006e8:	f002 fc0a 	bl	8002f00 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ec:	2320      	movs	r3, #32
 80006ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0xd4>)
 8000704:	f002 fbfc 	bl	8002f00 <HAL_GPIO_Init>
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000

0800071c <CAN_Filter_Config>:

/* USER CODE BEGIN 2 */
/*Configure CAN Filter */
void CAN_Filter_Config(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8000742:	2301      	movs	r3, #1
 8000744:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <CAN_Filter_Config+0x48>)
 800074c:	f001 fb15 	bl	8001d7a <HAL_CAN_ConfigFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <CAN_Filter_Config+0x3e>
		Error_Handler();
 8000756:	f000 facf 	bl	8000cf8 <Error_Handler>
	}
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20003e50 	.word	0x20003e50

08000768 <Start_taskF>:

/*Start Task */
void Start_taskF(void *pvParameters) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 8000770:	2203      	movs	r2, #3
 8000772:	2100      	movs	r1, #0
 8000774:	2001      	movs	r0, #1
 8000776:	f004 fe8f 	bl	8005498 <xQueueGenericCreate>
 800077a:	4602      	mov	r2, r0
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <Start_taskF+0xb8>)
 800077e:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f005 f9a9 	bl	8005ad8 <vTaskDelay>
	xTaskCreate(GPS_taskF, "GPSTask", 256, NULL, 3, &GPS_Task);
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <Start_taskF+0xbc>)
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2303      	movs	r3, #3
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	4924      	ldr	r1, [pc, #144]	; (8000828 <Start_taskF+0xc0>)
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <Start_taskF+0xc4>)
 8000798:	f004 ff39 	bl	800560e <xTaskCreate>
	vTaskDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f005 f99b 	bl	8005ad8 <vTaskDelay>
	xTaskCreate(Gear_Brake_taskF, "Gear_BrakeTask", 128, NULL, 2,
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <Start_taskF+0xc8>)
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2302      	movs	r3, #2
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	4921      	ldr	r1, [pc, #132]	; (8000834 <Start_taskF+0xcc>)
 80007b0:	4821      	ldr	r0, [pc, #132]	; (8000838 <Start_taskF+0xd0>)
 80007b2:	f004 ff2c 	bl	800560e <xTaskCreate>
			&Gear_Brake_Task);
	vTaskDelay(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f005 f98e 	bl	8005ad8 <vTaskDelay>
	xTaskCreate(Gas_taskF, "GasTask", 128, NULL, 2, &Gas_Task);
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <Start_taskF+0xd4>)
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2302      	movs	r3, #2
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	491d      	ldr	r1, [pc, #116]	; (8000840 <Start_taskF+0xd8>)
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <Start_taskF+0xdc>)
 80007cc:	f004 ff1f 	bl	800560e <xTaskCreate>
	vTaskDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f005 f981 	bl	8005ad8 <vTaskDelay>
	xTaskCreate(Logger_taskF, "LoggerTask", 128, NULL, 1, &Logger_Task);
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <Start_taskF+0xe0>)
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2301      	movs	r3, #1
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	491a      	ldr	r1, [pc, #104]	; (800084c <Start_taskF+0xe4>)
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <Start_taskF+0xe8>)
 80007e6:	f004 ff12 	bl	800560e <xTaskCreate>
	vTaskDelay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f005 f974 	bl	8005ad8 <vTaskDelay>
	xTaskCreate(Telemetry_taskF, "TelemetryTask", 128, NULL, 0,
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <Start_taskF+0xec>)
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	2300      	movs	r3, #0
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	4916      	ldr	r1, [pc, #88]	; (8000858 <Start_taskF+0xf0>)
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <Start_taskF+0xf4>)
 8000800:	f004 ff05 	bl	800560e <xTaskCreate>
			&Telemetry_Task);

	if (Start_Task != NULL) {
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <Start_taskF+0xf8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d004      	beq.n	8000816 <Start_taskF+0xae>
		vTaskDelete(Start_Task);
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <Start_taskF+0xf8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f005 f847 	bl	80058a4 <vTaskDelete>
	}

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20003e4c 	.word	0x20003e4c
 8000824:	20003df0 	.word	0x20003df0
 8000828:	0800865c 	.word	0x0800865c
 800082c:	08000865 	.word	0x08000865
 8000830:	20003da4 	.word	0x20003da4
 8000834:	08008664 	.word	0x08008664
 8000838:	0800098d 	.word	0x0800098d
 800083c:	20004014 	.word	0x20004014
 8000840:	08008674 	.word	0x08008674
 8000844:	08000a35 	.word	0x08000a35
 8000848:	2000400c 	.word	0x2000400c
 800084c:	0800867c 	.word	0x0800867c
 8000850:	08000ab9 	.word	0x08000ab9
 8000854:	20003dec 	.word	0x20003dec
 8000858:	08008688 	.word	0x08008688
 800085c:	08000b85 	.word	0x08000b85
 8000860:	20003fc8 	.word	0x20003fc8

08000864 <GPS_taskF>:

/*GPS Read Task --- THIS TASK NEEDS TEST WITH HARDWARE */
void GPS_taskF(void *pvParameters) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 800086c:	23c8      	movs	r3, #200	; 0xc8
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 8000870:	f005 fa76 	bl	8005d60 <xTaskGetTickCount>
 8000874:	4603      	mov	r3, r0
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
	while (1) {
		uint8_t LAT[4];
		LAT[0] = buffer[18] = posllh.lat >> 24;
 8000878:	4b41      	ldr	r3, [pc, #260]	; (8000980 <GPS_taskF+0x11c>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	161b      	asrs	r3, r3, #24
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <GPS_taskF+0x120>)
 8000882:	749a      	strb	r2, [r3, #18]
 8000884:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <GPS_taskF+0x120>)
 8000886:	7c9b      	ldrb	r3, [r3, #18]
 8000888:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		LAT[1] = buffer[19] = posllh.lat >> 16;
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <GPS_taskF+0x11c>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	141b      	asrs	r3, r3, #16
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <GPS_taskF+0x120>)
 8000896:	74da      	strb	r2, [r3, #19]
 8000898:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <GPS_taskF+0x120>)
 800089a:	7cdb      	ldrb	r3, [r3, #19]
 800089c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		LAT[2] = buffer[20] = posllh.lat >> 8;
 80008a0:	4b37      	ldr	r3, [pc, #220]	; (8000980 <GPS_taskF+0x11c>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <GPS_taskF+0x120>)
 80008aa:	751a      	strb	r2, [r3, #20]
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <GPS_taskF+0x120>)
 80008ae:	7d1b      	ldrb	r3, [r3, #20]
 80008b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		LAT[3] = buffer[21] = posllh.lat;
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <GPS_taskF+0x11c>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <GPS_taskF+0x120>)
 80008bc:	755a      	strb	r2, [r3, #21]
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <GPS_taskF+0x120>)
 80008c0:	7d5b      	ldrb	r3, [r3, #21]
 80008c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef LATHeader;

		LATHeader.DLC = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
		LATHeader.StdId = 0x664;
 80008ca:	f240 6364 	movw	r3, #1636	; 0x664
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
		LATHeader.IDE = CAN_ID_STD;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
		LATHeader.RTR = CAN_RTR_DATA;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34

		if (HAL_CAN_AddTxMessage(&hcan, &LATHeader, LAT, &TxMailbox)
 80008d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008dc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80008e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008e4:	4828      	ldr	r0, [pc, #160]	; (8000988 <GPS_taskF+0x124>)
 80008e6:	f001 fb55 	bl	8001f94 <HAL_CAN_AddTxMessage>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <GPS_taskF+0x90>
				!= HAL_OK) {
			Error_Handler();
 80008f0:	f000 fa02 	bl	8000cf8 <Error_Handler>
		}

		uint8_t LON[4];
		LON[0] = buffer[22] = posllh.lon >> 24;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <GPS_taskF+0x11c>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	161b      	asrs	r3, r3, #24
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <GPS_taskF+0x120>)
 80008fe:	759a      	strb	r2, [r3, #22]
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <GPS_taskF+0x120>)
 8000902:	7d9b      	ldrb	r3, [r3, #22]
 8000904:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		LON[1] = buffer[23] = posllh.lon >> 16;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <GPS_taskF+0x11c>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	141b      	asrs	r3, r3, #16
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <GPS_taskF+0x120>)
 8000912:	75da      	strb	r2, [r3, #23]
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <GPS_taskF+0x120>)
 8000916:	7ddb      	ldrb	r3, [r3, #23]
 8000918:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		LON[2] = buffer[24] = posllh.lon >> 8;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <GPS_taskF+0x11c>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	121b      	asrs	r3, r3, #8
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <GPS_taskF+0x120>)
 8000926:	761a      	strb	r2, [r3, #24]
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <GPS_taskF+0x120>)
 800092a:	7e1b      	ldrb	r3, [r3, #24]
 800092c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		LON[3] = buffer[25] = posllh.lon;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <GPS_taskF+0x11c>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <GPS_taskF+0x120>)
 8000938:	765a      	strb	r2, [r3, #25]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <GPS_taskF+0x120>)
 800093c:	7e5b      	ldrb	r3, [r3, #25]
 800093e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		CAN_TxHeaderTypeDef LONHeader;

		LONHeader.DLC = 4;
 8000942:	2304      	movs	r3, #4
 8000944:	61fb      	str	r3, [r7, #28]
		LONHeader.StdId = 0x665;
 8000946:	f240 6365 	movw	r3, #1637	; 0x665
 800094a:	60fb      	str	r3, [r7, #12]
		LONHeader.IDE = CAN_ID_STD;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
		LONHeader.RTR = CAN_RTR_DATA;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &LONHeader, LON, &TxMailbox)
 8000954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000958:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800095c:	f107 010c 	add.w	r1, r7, #12
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <GPS_taskF+0x124>)
 8000962:	f001 fb17 	bl	8001f94 <HAL_CAN_AddTxMessage>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <GPS_taskF+0x10c>
				!= HAL_OK) {
			Error_Handler();
 800096c:	f000 f9c4 	bl	8000cf8 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000974:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000976:	4618      	mov	r0, r3
 8000978:	f005 f830 	bl	80059dc <vTaskDelayUntil>
	while (1) {
 800097c:	e77c      	b.n	8000878 <GPS_taskF+0x14>
 800097e:	bf00      	nop
 8000980:	20003f04 	.word	0x20003f04
 8000984:	20003f24 	.word	0x20003f24
 8000988:	20003e50 	.word	0x20003e50

0800098c <Gear_Brake_taskF>:
	}
}

/*Gear an Brake Read Task */
void Gear_Brake_taskF(void *pvParameters) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000994:	230a      	movs	r3, #10
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000998:	f005 f9e2 	bl	8005d60 <xTaskGetTickCount>
 800099c:	4603      	mov	r3, r0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		gear = HAL_GPIO_ReadPin(GPIOB, Gear_Pin);
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	481e      	ldr	r0, [pc, #120]	; (8000a20 <Gear_Brake_taskF+0x94>)
 80009a6:	f002 fc05 	bl	80031b4 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <Gear_Brake_taskF+0x98>)
 80009b0:	701a      	strb	r2, [r3, #0]
		brake = HAL_GPIO_ReadPin(GPIOB, Brake_Pin);
 80009b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b6:	481a      	ldr	r0, [pc, #104]	; (8000a20 <Gear_Brake_taskF+0x94>)
 80009b8:	f002 fbfc 	bl	80031b4 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <Gear_Brake_taskF+0x9c>)
 80009c2:	701a      	strb	r2, [r3, #0]
		uint8_t GBbuff[2];
		GBbuff[0] = buffer[0] = gear;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <Gear_Brake_taskF+0x98>)
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <Gear_Brake_taskF+0xa0>)
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <Gear_Brake_taskF+0xa0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GBbuff[1] = buffer[1] = brake;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <Gear_Brake_taskF+0x9c>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <Gear_Brake_taskF+0xa0>)
 80009da:	705a      	strb	r2, [r3, #1]
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <Gear_Brake_taskF+0xa0>)
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GBHeader;

		GBHeader.DLC = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
		GBHeader.StdId = 0x657;
 80009e8:	f240 6357 	movw	r3, #1623	; 0x657
 80009ec:	60bb      	str	r3, [r7, #8]
		GBHeader.IDE = CAN_ID_STD;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
		GBHeader.RTR = CAN_RTR_DATA;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GBHeader, GBbuff, &TxMailbox)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <Gear_Brake_taskF+0xa4>)
 8000a04:	f001 fac6 	bl	8001f94 <HAL_CAN_AddTxMessage>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <Gear_Brake_taskF+0x86>
				!= HAL_OK) {
			Error_Handler();
 8000a0e:	f000 f973 	bl	8000cf8 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 ffdf 	bl	80059dc <vTaskDelayUntil>
	while (1) {
 8000a1e:	e7bf      	b.n	80009a0 <Gear_Brake_taskF+0x14>
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	20003df4 	.word	0x20003df4
 8000a28:	20004010 	.word	0x20004010
 8000a2c:	20003f24 	.word	0x20003f24
 8000a30:	20003e50 	.word	0x20003e50

08000a34 <Gas_taskF>:
	}
}

/*Gas pedal Read Task */
void Gas_taskF(void *pvParameters) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000a40:	f005 f98e 	bl	8005d60 <xTaskGetTickCount>
 8000a44:	4603      	mov	r3, r0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		uint8_t gasbuff[2];
		gasbuff[0] = buffer[2] = (uint8_t) (gas[0] >> 8) & 0xFF;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <Gas_taskF+0x78>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <Gas_taskF+0x7c>)
 8000a54:	709a      	strb	r2, [r3, #2]
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <Gas_taskF+0x7c>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		gasbuff[1] = buffer[3] = (uint8_t) gas[0] & 0xFF;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <Gas_taskF+0x78>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <Gas_taskF+0x7c>)
 8000a66:	70da      	strb	r2, [r3, #3]
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <Gas_taskF+0x7c>)
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GasHeader;

		GasHeader.DLC = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
		GasHeader.StdId = 0x656;
 8000a74:	f240 6356 	movw	r3, #1622	; 0x656
 8000a78:	60bb      	str	r3, [r7, #8]
		GasHeader.IDE = CAN_ID_STD;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
		GasHeader.RTR = CAN_RTR_DATA;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GasHeader, gasbuff, &TxMailbox)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a8a:	f107 0108 	add.w	r1, r7, #8
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <Gas_taskF+0x80>)
 8000a90:	f001 fa80 	bl	8001f94 <HAL_CAN_AddTxMessage>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <Gas_taskF+0x6a>
				!= HAL_OK) {
			Error_Handler();
 8000a9a:	f000 f92d 	bl	8000cf8 <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 ff99 	bl	80059dc <vTaskDelayUntil>
	while (1) {
 8000aaa:	e7cd      	b.n	8000a48 <Gas_taskF+0x14>
 8000aac:	20003fa0 	.word	0x20003fa0
 8000ab0:	20003f24 	.word	0x20003f24
 8000ab4:	20003e50 	.word	0x20003e50

08000ab8 <Logger_taskF>:
	}
}

/*Logger Write Task  --- THIS TASK NEEDS TO IMPLEMENT START AND STOP LOG FUNCTIONS*/
void Logger_taskF(void *pvParameters) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000ac4:	f005 f94c 	bl	8005d60 <xTaskGetTickCount>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (startLOG == 1) {
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <Logger_taskF+0xb8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d11c      	bne.n	8000b0e <Logger_taskF+0x56>
			startLOG = 0;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <Logger_taskF+0xb8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
			bsl[1] = 0xAA;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <Logger_taskF+0xbc>)
 8000adc:	22aa      	movs	r2, #170	; 0xaa
 8000ade:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0xBB;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <Logger_taskF+0xbc>)
 8000ae2:	22bb      	movs	r2, #187	; 0xbb
 8000ae4:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0xCC;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <Logger_taskF+0xbc>)
 8000ae8:	22cc      	movs	r2, #204	; 0xcc
 8000aea:	755a      	strb	r2, [r3, #21]
			bsl[0] = 0x00;
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <Logger_taskF+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0x00;
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <Logger_taskF+0xbc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0x00;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <Logger_taskF+0xbc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	751a      	strb	r2, [r3, #20]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000afe:	230a      	movs	r3, #10
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	231a      	movs	r3, #26
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <Logger_taskF+0xbc>)
 8000b06:	2110      	movs	r1, #16
 8000b08:	481b      	ldr	r0, [pc, #108]	; (8000b78 <Logger_taskF+0xc0>)
 8000b0a:	f002 fcab 	bl	8003464 <HAL_I2C_Master_Transmit>
		}
		if (stopLOG == 1) {
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <Logger_taskF+0xc4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d11c      	bne.n	8000b50 <Logger_taskF+0x98>
			stopLOG = 0;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <Logger_taskF+0xc4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
			bsl[0] = 0xDD;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <Logger_taskF+0xbc>)
 8000b1e:	22dd      	movs	r2, #221	; 0xdd
 8000b20:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0xEE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <Logger_taskF+0xbc>)
 8000b24:	22ee      	movs	r2, #238	; 0xee
 8000b26:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0xFF;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <Logger_taskF+0xbc>)
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	751a      	strb	r2, [r3, #20]
			bsl[1] = 0x00;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <Logger_taskF+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0x00;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <Logger_taskF+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0x00;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <Logger_taskF+0xbc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	755a      	strb	r2, [r3, #21]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 26, 10);
 8000b40:	230a      	movs	r3, #10
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	231a      	movs	r3, #26
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <Logger_taskF+0xbc>)
 8000b48:	2110      	movs	r1, #16
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <Logger_taskF+0xc0>)
 8000b4c:	f002 fc8a 	bl	8003464 <HAL_I2C_Master_Transmit>
		}
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 26, 10);
 8000b50:	230a      	movs	r3, #10
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	231a      	movs	r3, #26
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <Logger_taskF+0xc8>)
 8000b58:	2110      	movs	r1, #16
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <Logger_taskF+0xc0>)
 8000b5c:	f002 fc82 	bl	8003464 <HAL_I2C_Master_Transmit>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 ff38 	bl	80059dc <vTaskDelayUntil>
		if (startLOG == 1) {
 8000b6c:	e7ae      	b.n	8000acc <Logger_taskF+0x14>
 8000b6e:	bf00      	nop
 8000b70:	20000284 	.word	0x20000284
 8000b74:	20003e78 	.word	0x20003e78
 8000b78:	20003df8 	.word	0x20003df8
 8000b7c:	20000285 	.word	0x20000285
 8000b80:	20003f24 	.word	0x20003f24

08000b84 <Telemetry_taskF>:
	}
}

/*LoRa Transceiver Write Task*/
void Telemetry_taskF(void *pvParameters) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000b90:	f005 f8e6 	bl	8005d60 <xTaskGetTickCount>
 8000b94:	4603      	mov	r3, r0
 8000b96:	60fb      	str	r3, [r7, #12]
	while (1) {
		LoRa[0] = sync;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <Telemetry_taskF+0x5c>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <Telemetry_taskF+0x60>)
 8000b9e:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00b      	b.n	8000bbe <Telemetry_taskF+0x3a>
			LoRa[y] = buffer[y - 1];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <Telemetry_taskF+0x64>)
 8000bac:	5cd1      	ldrb	r1, [r2, r3]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <Telemetry_taskF+0x60>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 27; y++) {
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2b1a      	cmp	r3, #26
 8000bc2:	ddf0      	ble.n	8000ba6 <Telemetry_taskF+0x22>
		}
		HAL_UART_Transmit(&huart1, LoRa, 27, 10);
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	221b      	movs	r2, #27
 8000bc8:	4906      	ldr	r1, [pc, #24]	; (8000be4 <Telemetry_taskF+0x60>)
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <Telemetry_taskF+0x68>)
 8000bcc:	f003 fe8b 	bl	80048e6 <HAL_UART_Transmit>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*10Hz frequency*/
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 ff00 	bl	80059dc <vTaskDelayUntil>
		LoRa[0] = sync;
 8000bdc:	e7dc      	b.n	8000b98 <Telemetry_taskF+0x14>
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20003f40 	.word	0x20003f40
 8000be8:	20003f24 	.word	0x20003f24
 8000bec:	20003ec4 	.word	0x20003ec4

08000bf0 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/*CAN Read Callback -- THIS FUNCTION NEEDS TO IMPLEMENT START AND STOP LOG MESSAGES  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcv_msg[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcv_msg)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	f107 0214 	add.w	r2, r7, #20
 8000c00:	2100      	movs	r1, #0
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f001 faa0 	bl	8002148 <HAL_CAN_GetRxMessage>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) {
		Error_Handler();
 8000c0e:	f000 f873 	bl	8000cf8 <Error_Handler>
	}

	if (RxHeader.StdId == 0x64E) {
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f240 624e 	movw	r2, #1614	; 0x64e
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d102      	bne.n	8000c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		//if (rcv_msg[0] == 0x55) {
		startLOG = 1;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x64F) {
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f240 624f 	movw	r2, #1615	; 0x64f
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d102      	bne.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//if (rcv_msg[0] == 0x66) {
		stopLOG = 1;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		//}
	}

	if (RxHeader.StdId == 0x650) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000c38:	d105      	bne.n	8000c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		buffer[4] = rcv_msg[0];
 8000c3a:	7b3a      	ldrb	r2, [r7, #12]
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c3e:	711a      	strb	r2, [r3, #4]
		buffer[5] = rcv_msg[1];
 8000c40:	7b7a      	ldrb	r2, [r7, #13]
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c44:	715a      	strb	r2, [r3, #5]
	}

	if (RxHeader.StdId == 0x651) {
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f240 6251 	movw	r2, #1617	; 0x651
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d105      	bne.n	8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		buffer[6] = rcv_msg[0];
 8000c50:	7b3a      	ldrb	r2, [r7, #12]
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c54:	719a      	strb	r2, [r3, #6]
		buffer[7] = rcv_msg[1];
 8000c56:	7b7a      	ldrb	r2, [r7, #13]
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c5a:	71da      	strb	r2, [r3, #7]
	}

	if (RxHeader.StdId == 0x652) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f240 6252 	movw	r2, #1618	; 0x652
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d105      	bne.n	8000c72 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
		buffer[8] = rcv_msg[0];
 8000c66:	7b3a      	ldrb	r2, [r7, #12]
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c6a:	721a      	strb	r2, [r3, #8]
		buffer[9] = rcv_msg[1];
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c70:	725a      	strb	r2, [r3, #9]
	}

	if (RxHeader.StdId == 0x653) {
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f240 6253 	movw	r2, #1619	; 0x653
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d105      	bne.n	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		buffer[10] = rcv_msg[0];
 8000c7c:	7b3a      	ldrb	r2, [r7, #12]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c80:	729a      	strb	r2, [r3, #10]
		buffer[11] = rcv_msg[1];
 8000c82:	7b7a      	ldrb	r2, [r7, #13]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c86:	72da      	strb	r2, [r3, #11]
	}

	if (RxHeader.StdId == 0x654) {
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f240 6254 	movw	r2, #1620	; 0x654
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d105      	bne.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		buffer[12] = rcv_msg[0];
 8000c92:	7b3a      	ldrb	r2, [r7, #12]
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c96:	731a      	strb	r2, [r3, #12]
		buffer[13] = rcv_msg[1];
 8000c98:	7b7a      	ldrb	r2, [r7, #13]
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c9c:	735a      	strb	r2, [r3, #13]
	}

	if (RxHeader.StdId == 0x655) {
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f240 6255 	movw	r2, #1621	; 0x655
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
		buffer[14] = rcv_msg[0];
 8000ca8:	7b3a      	ldrb	r2, [r7, #12]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cac:	739a      	strb	r2, [r3, #14]
		buffer[15] = rcv_msg[1];
 8000cae:	7b7a      	ldrb	r2, [r7, #13]
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cb2:	73da      	strb	r2, [r3, #15]
		buffer[16] = rcv_msg[2];
 8000cb4:	7bba      	ldrb	r2, [r7, #14]
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cb8:	741a      	strb	r2, [r3, #16]
		buffer[17] = rcv_msg[3];
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000cbe:	745a      	strb	r2, [r3, #17]
	}

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000284 	.word	0x20000284
 8000ccc:	20000285 	.word	0x20000285
 8000cd0:	20003f24 	.word	0x20003f24

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ce6:	f000 fb53 	bl	8001390 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40000800 	.word	0x40000800

08000cf8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_MspInit+0x6c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f06f 0001 	mvn.w	r0, #1
 8000d42:	f001 fe0a 	bl	800295a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_MspInit+0x70>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_MspInit+0x70>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 8000d62:	f005 fbe1 	bl	8006528 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <HAL_ADC_MspInit+0xbc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d149      	bne.n	8000e2c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_ADC_MspInit+0xc0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Gas_Pin;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Gas_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4819      	ldr	r0, [pc, #100]	; (8000e3c <HAL_ADC_MspInit+0xc4>)
 8000dd8:	f002 f892 	bl	8002f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_ADC_MspInit+0xcc>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000e06:	2220      	movs	r2, #32
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000e12:	f001 fdcd 	bl	80029b0 <HAL_DMA_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e1c:	f7ff ff6c 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000e24:	621a      	str	r2, [r3, #32]
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_ADC_MspInit+0xc8>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012400 	.word	0x40012400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	20003f5c 	.word	0x20003f5c
 8000e44:	40020008 	.word	0x40020008

08000e48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <HAL_CAN_MspInit+0xf0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d163      	bne.n	8000f30 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	4a33      	ldr	r2, [pc, #204]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e72:	61d3      	str	r3, [r2, #28]
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_CAN_MspInit+0xf4>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4824      	ldr	r0, [pc, #144]	; (8000f40 <HAL_CAN_MspInit+0xf8>)
 8000eae:	f002 f827 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481e      	ldr	r0, [pc, #120]	; (8000f40 <HAL_CAN_MspInit+0xf8>)
 8000ec8:	f002 f81a 	bl	8002f00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_CAN_MspInit+0xfc>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_CAN_MspInit+0xfc>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2105      	movs	r1, #5
 8000ef4:	2013      	movs	r0, #19
 8000ef6:	f001 fd30 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000efa:	2013      	movs	r0, #19
 8000efc:	f001 fd49 	bl	8002992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2105      	movs	r1, #5
 8000f04:	2014      	movs	r0, #20
 8000f06:	f001 fd28 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f0a:	2014      	movs	r0, #20
 8000f0c:	f001 fd41 	bl	8002992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2105      	movs	r1, #5
 8000f14:	2015      	movs	r0, #21
 8000f16:	f001 fd20 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f1a:	2015      	movs	r0, #21
 8000f1c:	f001 fd39 	bl	8002992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	2016      	movs	r0, #22
 8000f26:	f001 fd18 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f2a:	2016      	movs	r0, #22
 8000f2c:	f001 fd31 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40006400 	.word	0x40006400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40010000 	.word	0x40010000

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_I2C_MspInit+0x70>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d123      	bne.n	8000fb0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_I2C_MspInit+0x74>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_I2C_MspInit+0x78>)
 8000fac:	f001 ffa8 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010c00 	.word	0x40010c00

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_UART_MspInit+0x154>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d132      	bne.n	800104a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <HAL_UART_MspInit+0x158>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_UART_MspInit+0x158>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_UART_MspInit+0x158>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_UART_MspInit+0x158>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_UART_MspInit+0x158>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_UART_MspInit+0x158>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4619      	mov	r1, r3
 8001028:	483d      	ldr	r0, [pc, #244]	; (8001120 <HAL_UART_MspInit+0x15c>)
 800102a:	f001 ff69 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4619      	mov	r1, r3
 8001042:	4837      	ldr	r0, [pc, #220]	; (8001120 <HAL_UART_MspInit+0x15c>)
 8001044:	f001 ff5c 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001048:	e062      	b.n	8001110 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <HAL_UART_MspInit+0x160>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d15d      	bne.n	8001110 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_UART_MspInit+0x158>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_UART_MspInit+0x158>)
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	61d3      	str	r3, [r2, #28]
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_UART_MspInit+0x158>)
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_UART_MspInit+0x158>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <HAL_UART_MspInit+0x158>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_UART_MspInit+0x158>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001084:	2304      	movs	r3, #4
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4619      	mov	r1, r3
 8001096:	4822      	ldr	r0, [pc, #136]	; (8001120 <HAL_UART_MspInit+0x15c>)
 8001098:	f001 ff32 	bl	8002f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800109c:	2308      	movs	r3, #8
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4619      	mov	r1, r3
 80010ae:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_UART_MspInit+0x15c>)
 80010b0:	f001 ff26 	bl	8002f00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_UART_MspInit+0x168>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010e6:	f001 fc63 	bl	80029b0 <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80010f0:	f7ff fe02 	bl	8000cf8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_UART_MspInit+0x164>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2105      	movs	r1, #5
 8001104:	2026      	movs	r0, #38	; 0x26
 8001106:	f001 fc28 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f001 fc41 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40013800 	.word	0x40013800
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800
 8001124:	40004400 	.word	0x40004400
 8001128:	20003da8 	.word	0x20003da8
 800112c:	4002006c 	.word	0x4002006c

08001130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	201e      	movs	r0, #30
 8001146:	f001 fc08 	bl	800295a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800114a:	201e      	movs	r0, #30
 800114c:	f001 fc21 	bl	8002992 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_InitTick+0xa0>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_InitTick+0xa0>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	61d3      	str	r3, [r2, #28]
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_InitTick+0xa0>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001168:	f107 0210 	add.w	r2, r7, #16
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f86e 	bl	8004254 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001178:	f003 f844 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 800117c:	4603      	mov	r3, r0
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_InitTick+0xa4>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	3b01      	subs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_InitTick+0xa8>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_InitTick+0xac>)
 8001194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_InitTick+0xa8>)
 8001198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800119c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_InitTick+0xa8>)
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_InitTick+0xa8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_InitTick+0xa8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <HAL_InitTick+0xa8>)
 80011b2:	f003 f953 	bl	800445c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <HAL_InitTick+0xa8>)
 80011be:	f003 f981 	bl	80044c4 <HAL_TIM_Base_Start_IT>
 80011c2:	4603      	mov	r3, r0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	20004018 	.word	0x20004018
 80011dc:	40000800 	.word	0x40000800

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <HardFault_Handler+0x4>

080011f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <BusFault_Handler+0x4>

080011fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <UsageFault_Handler+0x4>

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel1_IRQHandler+0x10>)
 8001216:	f001 fd35 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20003f5c 	.word	0x20003f5c

08001224 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA1_Channel6_IRQHandler+0x10>)
 800122a:	f001 fd2b 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20003da8 	.word	0x20003da8

08001238 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM4_IRQHandler+0x10>)
 800123e:	f003 f964 	bl	800450a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20004018 	.word	0x20004018

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART2_IRQHandler+0x10>)
 8001252:	f003 fcb7 	bl	8004bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20003fcc 	.word	0x20003fcc

08001260 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_HP_CAN1_TX_IRQHandler(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001266:	f001 f8a5 	bl	80023b4 <HAL_CAN_IRQHandler>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20003e50 	.word	0x20003e50

08001274 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800127a:	f001 f89b 	bl	80023b4 <HAL_CAN_IRQHandler>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20003e50 	.word	0x20003e50

08001288 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <CAN1_RX1_IRQHandler+0x10>)
 800128e:	f001 f891 	bl	80023b4 <HAL_CAN_IRQHandler>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20003e50 	.word	0x20003e50

0800129c <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <CAN1_SCE_IRQHandler+0x10>)
 80012a2:	f001 f887 	bl	80023b4 <HAL_CAN_IRQHandler>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20003e50 	.word	0x20003e50

080012b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <SystemInit+0x5c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <SystemInit+0x5c>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <SystemInit+0x5c>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4911      	ldr	r1, [pc, #68]	; (800130c <SystemInit+0x5c>)
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <SystemInit+0x60>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <SystemInit+0x5c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0e      	ldr	r2, [pc, #56]	; (800130c <SystemInit+0x5c>)
 80012d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <SystemInit+0x5c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SystemInit+0x5c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SystemInit+0x5c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <SystemInit+0x5c>)
 80012ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SystemInit+0x5c>)
 80012f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SystemInit+0x64>)
 80012fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001302:	609a      	str	r2, [r3, #8]
#endif 
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	f8ff0000 	.word	0xf8ff0000
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001318:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800131a:	e003      	b.n	8001324 <LoopCopyDataInit>

0800131c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800131e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001320:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001322:	3104      	adds	r1, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001328:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800132a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800132c:	d3f6      	bcc.n	800131c <CopyDataInit>
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001330:	e002      	b.n	8001338 <LoopFillZerobss>

08001332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001334:	f842 3b04 	str.w	r3, [r2], #4

08001338 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800133a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800133c:	d3f9      	bcc.n	8001332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133e:	f7ff ffb7 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f007 f933 	bl	80085ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001346:	f7fe ff9f 	bl	8000288 <main>
  bx lr
 800134a:	4770      	bx	lr
  ldr r3, =_sidata
 800134c:	080087a0 	.word	0x080087a0
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001354:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001358:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800135c:	20004104 	.word	0x20004104

08001360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_2_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x28>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x28>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f001 fae5 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fed8 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fcc0 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_IncTick+0x20>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20004058 	.word	0x20004058

080013b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_GetTick+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20004058 	.word	0x20004058

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fff0 	bl	80013b4 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_Delay+0x40>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffe0 	bl	80013b4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000000c 	.word	0x2000000c

0800140c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0be      	b.n	80015ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fc94 	bl	8000d78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 faf7 	bl	8001a44 <ADC_ConversionStop_Disable>
 8001456:	4603      	mov	r3, r0
 8001458:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 8099 	bne.w	800159a <HAL_ADC_Init+0x18e>
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 8095 	bne.w	800159a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001478:	f023 0302 	bic.w	r3, r3, #2
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800148c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7b1b      	ldrb	r3, [r3, #12]
 8001492:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001494:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4313      	orrs	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a4:	d003      	beq.n	80014ae <HAL_ADC_Init+0xa2>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <HAL_ADC_Init+0xa8>
 80014ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b2:	e000      	b.n	80014b6 <HAL_ADC_Init+0xaa>
 80014b4:	2300      	movs	r3, #0
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7d1b      	ldrb	r3, [r3, #20]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d119      	bne.n	80014f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7b1b      	ldrb	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	035a      	lsls	r2, r3, #13
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	e00b      	b.n	80014f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f043 0220 	orr.w	r2, r3, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_ADC_Init+0x1a8>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	430b      	orrs	r3, r1
 800151e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001528:	d003      	beq.n	8001532 <HAL_ADC_Init+0x126>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d104      	bne.n	800153c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	3b01      	subs	r3, #1
 8001538:	051b      	lsls	r3, r3, #20
 800153a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	430a      	orrs	r2, r1
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_ADC_Init+0x1ac>)
 8001558:	4013      	ands	r3, r2
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	429a      	cmp	r2, r3
 800155e:	d10b      	bne.n	8001578 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001576:	e018      	b.n	80015aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f023 0312 	bic.w	r3, r3, #18
 8001580:	f043 0210 	orr.w	r2, r3, #16
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	ffe1f7fd 	.word	0xffe1f7fd
 80015b8:	ff1f0efe 	.word	0xff1f0efe

080015bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_ADC_Start_DMA+0x1a8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start_DMA+0x24>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_ADC_Start_DMA+0x1ac>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_Start_DMA+0x32>
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HAL_ADC_Start_DMA+0x1a8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 80b3 	bne.w	8001754 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Start_DMA+0x40>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e0ae      	b.n	800175a <HAL_ADC_Start_DMA+0x19e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f9cb 	bl	80019a0 <ADC_Enable>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 809a 	bne.w	800174a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a4e      	ldr	r2, [pc, #312]	; (8001768 <HAL_ADC_Start_DMA+0x1ac>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d105      	bne.n	8001640 <HAL_ADC_Start_DMA+0x84>
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_ADC_Start_DMA+0x1a8>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d115      	bne.n	800166c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d026      	beq.n	80016a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800166a:	e01d      	b.n	80016a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a39      	ldr	r2, [pc, #228]	; (8001764 <HAL_ADC_Start_DMA+0x1a8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_ADC_Start_DMA+0xd0>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_ADC_Start_DMA+0x1ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d10d      	bne.n	80016a8 <HAL_ADC_Start_DMA+0xec>
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_ADC_Start_DMA+0x1a8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	f023 0206 	bic.w	r2, r3, #6
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <HAL_ADC_Start_DMA+0x1b0>)
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <HAL_ADC_Start_DMA+0x1b4>)
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <HAL_ADC_Start_DMA+0x1b8>)
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0202 	mvn.w	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001700:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a18      	ldr	r0, [r3, #32]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	334c      	adds	r3, #76	; 0x4c
 800170c:	4619      	mov	r1, r3
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f001 f9a7 	bl	8002a64 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001720:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001724:	d108      	bne.n	8001738 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001734:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001736:	e00f      	b.n	8001758 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001746:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001748:	e006      	b.n	8001758 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001752:	e001      	b.n	8001758 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40012400 	.word	0x40012400
 8001768:	40012800 	.word	0x40012800
 800176c:	08001ab9 	.word	0x08001ab9
 8001770:	08001b35 	.word	0x08001b35
 8001774:	08001b51 	.word	0x08001b51

08001778 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x20>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0dc      	b.n	800198a <HAL_ADC_ConfigChannel+0x1da>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d81c      	bhi.n	800181a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b05      	subs	r3, #5
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
 8001818:	e03c      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d81c      	bhi.n	800185c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b23      	subs	r3, #35	; 0x23
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	4019      	ands	r1, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b23      	subs	r3, #35	; 0x23
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
 800185a:	e01b      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b41      	subs	r3, #65	; 0x41
 800186e:	221f      	movs	r2, #31
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4019      	ands	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b41      	subs	r3, #65	; 0x41
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d91c      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3b1e      	subs	r3, #30
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e019      	b.n	800190a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d003      	beq.n	800191a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	2b11      	cmp	r3, #17
 8001918:	d132      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_ADC_ConfigChannel+0x1e4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d125      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d126      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001940:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d11a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_ADC_ConfigChannel+0x1e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_ADC_ConfigChannel+0x1ec>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3b01      	subs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x1b2>
 800196e:	e007      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40012400 	.word	0x40012400
 8001998:	20000004 	.word	0x20000004
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d039      	beq.n	8001a32 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <ADC_Enable+0x9c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <ADC_Enable+0xa0>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019dc:	e002      	b.n	80019e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f9      	bne.n	80019de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ea:	f7ff fce3 	bl	80013b4 <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019f0:	e018      	b.n	8001a24 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f2:	f7ff fcdf 	bl	80013b4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d911      	bls.n	8001a24 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d1df      	bne.n	80019f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d127      	bne.n	8001aae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fca1 	bl	80013b4 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a74:	e014      	b.n	8001aa0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a76:	f7ff fc9d 	bl	80013b4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d90d      	bls.n	8001aa0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f043 0210 	orr.w	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e007      	b.n	8001ab0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d0e3      	beq.n	8001a76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d127      	bne.n	8001b22 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ae8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aec:	d115      	bne.n	8001b1a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d111      	bne.n	8001b1a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fe2c 	bl	8001778 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b20:	e004      	b.n	8001b2c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff fe21 	bl	800178a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f043 0204 	orr.w	r2, r3, #4
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fe10 	bl	800179c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0ed      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff f950 	bl	8000e48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0202 	bic.w	r2, r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff fbfc 	bl	80013b4 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bbe:	e012      	b.n	8001be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc0:	f7ff fbf8 	bl	80013b4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d90b      	bls.n	8001be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2205      	movs	r2, #5
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0c5      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e5      	bne.n	8001bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff fbd6 	bl	80013b4 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c0a:	e012      	b.n	8001c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c0c:	f7ff fbd2 	bl	80013b4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b0a      	cmp	r3, #10
 8001c18:	d90b      	bls.n	8001c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e09f      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0e5      	beq.n	8001c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7e1b      	ldrb	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7e5b      	ldrb	r3, [r3, #25]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e007      	b.n	8001c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e9b      	ldrb	r3, [r3, #26]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d108      	bne.n	8001cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0220 	bic.w	r2, r2, #32
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7edb      	ldrb	r3, [r3, #27]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0210 	bic.w	r2, r2, #16
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7f1b      	ldrb	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7f5b      	ldrb	r3, [r3, #29]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0204 	orr.w	r2, r2, #4
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	ea42 0103 	orr.w	r1, r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d003      	beq.n	8001da0 <HAL_CAN_ConfigFilter+0x26>
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	f040 80aa 	bne.w	8001ef4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2201      	movs	r2, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d123      	bne.n	8001e22 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dfc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3248      	adds	r2, #72	; 0x48
 8001e02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	3348      	adds	r3, #72	; 0x48
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d122      	bne.n	8001e70 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3248      	adds	r2, #72	; 0x48
 8001e50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	3348      	adds	r3, #72	; 0x48
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e8a:	e007      	b.n	8001e9c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001eb6:	e007      	b.n	8001ec8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee6:	f023 0201 	bic.w	r2, r3, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e006      	b.n	8001f02 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d12e      	bne.n	8001f7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f38:	f7ff fa3c 	bl	80013b4 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f3e:	e012      	b.n	8001f66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f40:	f7ff fa38 	bl	80013b4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d90b      	bls.n	8001f66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e012      	b.n	8001f8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e5      	bne.n	8001f40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e006      	b.n	8001f8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d003      	beq.n	8001fc0 <HAL_CAN_AddTxMessage+0x2c>
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f040 80b8 	bne.w	8002130 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a0 	beq.w	8002120 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	0e1b      	lsrs	r3, r3, #24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d907      	bls.n	8002000 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e09e      	b.n	800213e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002000:	2201      	movs	r2, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	409a      	lsls	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3318      	adds	r3, #24
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	440b      	add	r3, r1
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e00f      	b.n	800204e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002038:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002042:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3318      	adds	r3, #24
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	440b      	add	r3, r1
 800204c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3318      	adds	r3, #24
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	440b      	add	r3, r1
 800205e:	3304      	adds	r3, #4
 8002060:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	7d1b      	ldrb	r3, [r3, #20]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d111      	bne.n	800208e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	6811      	ldr	r1, [r2, #0]
 800207e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3318      	adds	r3, #24
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	440b      	add	r3, r1
 800208a:	3304      	adds	r3, #4
 800208c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3307      	adds	r3, #7
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	061a      	lsls	r2, r3, #24
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3306      	adds	r3, #6
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3305      	adds	r3, #5
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	3204      	adds	r2, #4
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	4610      	mov	r0, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6811      	ldr	r1, [r2, #0]
 80020b6:	ea43 0200 	orr.w	r2, r3, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	440b      	add	r3, r1
 80020c0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3303      	adds	r3, #3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	061a      	lsls	r2, r3, #24
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3302      	adds	r3, #2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3301      	adds	r3, #1
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	4313      	orrs	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	4610      	mov	r0, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6811      	ldr	r1, [r2, #0]
 80020ec:	ea43 0200 	orr.w	r2, r3, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3318      	adds	r3, #24
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6811      	ldr	r1, [r2, #0]
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3318      	adds	r3, #24
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	440b      	add	r3, r1
 800211a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e00e      	b.n	800213e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e006      	b.n	800213e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d003      	beq.n	800216c <HAL_CAN_GetRxMessage+0x24>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b02      	cmp	r3, #2
 8002168:	f040 80f3 	bne.w	8002352 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10e      	bne.n	8002190 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0e7      	b.n	8002360 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0d8      	b.n	8002360 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	331b      	adds	r3, #27
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0204 	and.w	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10c      	bne.n	80021e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	331b      	adds	r3, #27
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0d5b      	lsrs	r3, r3, #21
 80021dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e00b      	b.n	80021fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	331b      	adds	r3, #27
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	331b      	adds	r3, #27
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0202 	and.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	331b      	adds	r3, #27
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	4413      	add	r3, r2
 8002220:	3304      	adds	r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	331b      	adds	r3, #27
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	331b      	adds	r3, #27
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4413      	add	r3, r2
 800227c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0a1a      	lsrs	r2, r3, #8
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0c1a      	lsrs	r2, r3, #16
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3302      	adds	r3, #2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e1a      	lsrs	r2, r3, #24
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3303      	adds	r3, #3
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0a1a      	lsrs	r2, r3, #8
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3305      	adds	r3, #5
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0c1a      	lsrs	r2, r3, #16
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3306      	adds	r3, #6
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e1a      	lsrs	r2, r3, #24
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3307      	adds	r3, #7
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d108      	bne.n	800233e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0220 	orr.w	r2, r2, #32
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e007      	b.n	800234e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0220 	orr.w	r2, r2, #32
 800234c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e006      	b.n	8002360 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d002      	beq.n	8002388 <HAL_CAN_ActivateNotification+0x1e>
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d109      	bne.n	800239c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6959      	ldr	r1, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e006      	b.n	80023aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d07c      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f97d 	bl	8002716 <HAL_CAN_TxMailbox0CompleteCallback>
 800241c:	e016      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	e00c      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e002      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f980 	bl	800274c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f95c 	bl	8002728 <HAL_CAN_TxMailbox1CompleteCallback>
 8002470:	e016      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	e00c      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
 8002498:	e002      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f95f 	bl	800275e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d024      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f93b 	bl	800273a <HAL_CAN_TxMailbox2CompleteCallback>
 80024c4:	e016      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	e00c      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e002      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f93e 	bl	8002770 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f924 	bl	8002782 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fb4c 	bl	8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f904 	bl	80027a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8ec 	bl	8002794 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2210      	movs	r2, #16
 80025d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8ed 	bl	80027b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8e5 	bl	80027ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d075      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d06c      	beq.n	80026ee <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03d      	beq.n	80026ee <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d038      	beq.n	80026ee <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002682:	2b30      	cmp	r3, #48	; 0x30
 8002684:	d017      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x302>
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	d804      	bhi.n	8002694 <HAL_CAN_IRQHandler+0x2e0>
 800268a:	2b10      	cmp	r3, #16
 800268c:	d009      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x2ee>
 800268e:	2b20      	cmp	r3, #32
 8002690:	d00c      	beq.n	80026ac <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002692:	e024      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d018      	beq.n	80026ca <HAL_CAN_IRQHandler+0x316>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d01b      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x320>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d00f      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x30c>
            break;
 80026a0:	e01d      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026aa:	e018      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b4:	e013      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	f043 0320 	orr.w	r3, r3, #32
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026be:	e00e      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c8:	e009      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026d2:	e004      	b.n	80026de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2204      	movs	r2, #4
 80026f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f867 	bl	80027dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
	...

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <__NVIC_EnableIRQ+0x34>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff4f 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff64 	bl	8002838 <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ffb2 	bl	80028e0 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff81 	bl	800288c <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff57 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e043      	b.n	8002a4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_DMA_Init+0xa8>)
 80029ce:	4413      	add	r3, r2
 80029d0:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_DMA_Init+0xac>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <HAL_DMA_Init+0xb0>)
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	bffdfff8 	.word	0xbffdfff8
 8002a5c:	cccccccd 	.word	0xcccccccd
 8002a60:	40020000 	.word	0x40020000

08002a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Start_IT+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e04a      	b.n	8002b1a <HAL_DMA_Start_IT+0xb6>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d13a      	bne.n	8002b0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f9f3 	bl	8002ea6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 020e 	orr.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e00f      	b.n	8002afa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0204 	bic.w	r2, r2, #4
 8002ae8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 020a 	orr.w	r2, r2, #10
 8002af8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e005      	b.n	8002b18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d008      	beq.n	8002b4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 020e 	bic.w	r2, r2, #14
 8002b58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d005      	beq.n	8002bba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e051      	b.n	8002c5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020e 	bic.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_DMA_Abort_IT+0xd0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d029      	beq.n	8002c38 <HAL_DMA_Abort_IT+0xa0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <HAL_DMA_Abort_IT+0xd4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x9c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_DMA_Abort_IT+0xd8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01a      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x96>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_DMA_Abort_IT+0xdc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d012      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x90>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_DMA_Abort_IT+0xe0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00a      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x8a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_DMA_Abort_IT+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x84>
 8002c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c1a:	e00e      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	e00b      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c26:	e008      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	e005      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	e002      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c34:	2310      	movs	r3, #16
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_DMA_Abort_IT+0xe8>)
 8002c3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
    } 
  }
  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020008 	.word	0x40020008
 8002c6c:	4002001c 	.word	0x4002001c
 8002c70:	40020030 	.word	0x40020030
 8002c74:	40020044 	.word	0x40020044
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	4002006c 	.word	0x4002006c
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04f      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d029      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xae>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xaa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xa4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x98>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5f      	ldr	r2, [pc, #380]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x92>
 8002d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d14:	e00e      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d1a:	e00b      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d20:	e008      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d26:	e005      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	e002      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	e000      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d32:	2304      	movs	r3, #4
 8002d34:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002d36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8094 	beq.w	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4a:	e08e      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2202      	movs	r2, #2
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d056      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d051      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 020a 	bic.w	r2, r2, #10
 8002d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d029      	beq.n	8002dea <HAL_DMA_IRQHandler+0x166>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x162>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x15c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d012      	beq.n	8002dda <HAL_DMA_IRQHandler+0x156>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x150>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_DMA_IRQHandler+0x14a>
 8002dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dcc:	e00e      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	e00b      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	e008      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	e005      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de4:	e002      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de6:	2320      	movs	r3, #32
 8002de8:	e000      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dea:	2302      	movs	r3, #2
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002dee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d034      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e08:	e02f      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2208      	movs	r2, #8
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 020e 	bic.w	r2, r2, #14
 8002e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
    }
  }
  return;
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
}
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40020008 	.word	0x40020008
 8002e78:	4002001c 	.word	0x4002001c
 8002e7c:	40020030 	.word	0x40020030
 8002e80:	40020044 	.word	0x40020044
 8002e84:	40020058 	.word	0x40020058
 8002e88:	4002006c 	.word	0x4002006c
 8002e8c:	40020000 	.word	0x40020000

08002e90 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d108      	bne.n	8002ee6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ee4:	e007      	b.n	8002ef6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	60da      	str	r2, [r3, #12]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b08b      	sub	sp, #44	; 0x2c
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f12:	e127      	b.n	8003164 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f14:	2201      	movs	r2, #1
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f040 8116 	bne.w	800315e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d034      	beq.n	8002fa4 <HAL_GPIO_Init+0xa4>
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d80d      	bhi.n	8002f5a <HAL_GPIO_Init+0x5a>
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x9a>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d804      	bhi.n	8002f50 <HAL_GPIO_Init+0x50>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d031      	beq.n	8002fae <HAL_GPIO_Init+0xae>
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d01c      	beq.n	8002f88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f4e:	e048      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d043      	beq.n	8002fdc <HAL_GPIO_Init+0xdc>
 8002f54:	2b11      	cmp	r3, #17
 8002f56:	d01b      	beq.n	8002f90 <HAL_GPIO_Init+0x90>
          break;
 8002f58:	e043      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f5a:	4a89      	ldr	r2, [pc, #548]	; (8003180 <HAL_GPIO_Init+0x280>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d026      	beq.n	8002fae <HAL_GPIO_Init+0xae>
 8002f60:	4a87      	ldr	r2, [pc, #540]	; (8003180 <HAL_GPIO_Init+0x280>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d806      	bhi.n	8002f74 <HAL_GPIO_Init+0x74>
 8002f66:	4a87      	ldr	r2, [pc, #540]	; (8003184 <HAL_GPIO_Init+0x284>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d020      	beq.n	8002fae <HAL_GPIO_Init+0xae>
 8002f6c:	4a86      	ldr	r2, [pc, #536]	; (8003188 <HAL_GPIO_Init+0x288>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01d      	beq.n	8002fae <HAL_GPIO_Init+0xae>
          break;
 8002f72:	e036      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f74:	4a85      	ldr	r2, [pc, #532]	; (800318c <HAL_GPIO_Init+0x28c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0xae>
 8002f7a:	4a85      	ldr	r2, [pc, #532]	; (8003190 <HAL_GPIO_Init+0x290>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d016      	beq.n	8002fae <HAL_GPIO_Init+0xae>
 8002f80:	4a84      	ldr	r2, [pc, #528]	; (8003194 <HAL_GPIO_Init+0x294>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0xae>
          break;
 8002f86:	e02c      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	623b      	str	r3, [r7, #32]
          break;
 8002f8e:	e028      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	3304      	adds	r3, #4
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	e023      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e01e      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	623b      	str	r3, [r7, #32]
          break;
 8002fac:	e019      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	623b      	str	r3, [r7, #32]
          break;
 8002fba:	e012      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	611a      	str	r2, [r3, #16]
          break;
 8002fce:	e008      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	615a      	str	r2, [r3, #20]
          break;
 8002fda:	e002      	b.n	8002fe2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
          break;
 8002fe0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	d801      	bhi.n	8002fec <HAL_GPIO_Init+0xec>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	e001      	b.n	8002ff0 <HAL_GPIO_Init+0xf0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2bff      	cmp	r3, #255	; 0xff
 8002ff6:	d802      	bhi.n	8002ffe <HAL_GPIO_Init+0xfe>
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_Init+0x104>
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3b08      	subs	r3, #8
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	210f      	movs	r1, #15
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	401a      	ands	r2, r3
 8003016:	6a39      	ldr	r1, [r7, #32]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	431a      	orrs	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8096 	beq.w	800315e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_GPIO_Init+0x298>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4a58      	ldr	r2, [pc, #352]	; (8003198 <HAL_GPIO_Init+0x298>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6193      	str	r3, [r2, #24]
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_GPIO_Init+0x298>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800304a:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_GPIO_Init+0x29c>)
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_GPIO_Init+0x2a0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x19e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2a4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x19a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_GPIO_Init+0x2a8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x196>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_GPIO_Init+0x2ac>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x192>
 800308e:	2303      	movs	r3, #3
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x1a0>
 8003092:	2304      	movs	r3, #4
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x1a0>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x1a0>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x1a0>
 800309e:	2300      	movs	r3, #0
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b0:	493a      	ldr	r1, [pc, #232]	; (800319c <HAL_GPIO_Init+0x29c>)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4938      	ldr	r1, [pc, #224]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
 80030d6:	e006      	b.n	80030e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4933      	ldr	r1, [pc, #204]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	492e      	ldr	r1, [pc, #184]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	43db      	mvns	r3, r3
 8003108:	4929      	ldr	r1, [pc, #164]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 800310a:	4013      	ands	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4924      	ldr	r1, [pc, #144]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
 8003126:	e006      	b.n	8003136 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	43db      	mvns	r3, r3
 8003130:	491f      	ldr	r1, [pc, #124]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003132:	4013      	ands	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	491a      	ldr	r1, [pc, #104]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	60cb      	str	r3, [r1, #12]
 800314e:	e006      	b.n	800315e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	43db      	mvns	r3, r3
 8003158:	4915      	ldr	r1, [pc, #84]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 800315a:	4013      	ands	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f aed0 	bne.w	8002f14 <HAL_GPIO_Init+0x14>
  }
}
 8003174:	bf00      	nop
 8003176:	372c      	adds	r7, #44	; 0x2c
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	10210000 	.word	0x10210000
 8003184:	10110000 	.word	0x10110000
 8003188:	10120000 	.word	0x10120000
 800318c:	10310000 	.word	0x10310000
 8003190:	10320000 	.word	0x10320000
 8003194:	10220000 	.word	0x10220000
 8003198:	40021000 	.word	0x40021000
 800319c:	40010000 	.word	0x40010000
 80031a0:	40010800 	.word	0x40010800
 80031a4:	40010c00 	.word	0x40010c00
 80031a8:	40011000 	.word	0x40011000
 80031ac:	40011400 	.word	0x40011400
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e001      	b.n	80031d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e10f      	b.n	8003446 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fe84 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003258:	f000 ffd4 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a7b      	ldr	r2, [pc, #492]	; (8003450 <HAL_I2C_Init+0x23c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d807      	bhi.n	8003278 <HAL_I2C_Init+0x64>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <HAL_I2C_Init+0x240>)
 800326c:	4293      	cmp	r3, r2
 800326e:	bf94      	ite	ls
 8003270:	2301      	movls	r3, #1
 8003272:	2300      	movhi	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e006      	b.n	8003286 <HAL_I2C_Init+0x72>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_I2C_Init+0x244>)
 800327c:	4293      	cmp	r3, r2
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0db      	b.n	8003446 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a72      	ldr	r2, [pc, #456]	; (800345c <HAL_I2C_Init+0x248>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0c9b      	lsrs	r3, r3, #18
 8003298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a64      	ldr	r2, [pc, #400]	; (8003450 <HAL_I2C_Init+0x23c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d802      	bhi.n	80032c8 <HAL_I2C_Init+0xb4>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	e009      	b.n	80032dc <HAL_I2C_Init+0xc8>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	4a63      	ldr	r2, [pc, #396]	; (8003460 <HAL_I2C_Init+0x24c>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	3301      	adds	r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4956      	ldr	r1, [pc, #344]	; (8003450 <HAL_I2C_Init+0x23c>)
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d80d      	bhi.n	8003318 <HAL_I2C_Init+0x104>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e59      	subs	r1, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fbb1 f3f3 	udiv	r3, r1, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b04      	cmp	r3, #4
 8003312:	bf38      	it	cc
 8003314:	2304      	movcc	r3, #4
 8003316:	e04f      	b.n	80033b8 <HAL_I2C_Init+0x1a4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d111      	bne.n	8003344 <HAL_I2C_Init+0x130>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e58      	subs	r0, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e012      	b.n	800336a <HAL_I2C_Init+0x156>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	0099      	lsls	r1, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	fbb0 f3f3 	udiv	r3, r0, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Init+0x15e>
 800336e:	2301      	movs	r3, #1
 8003370:	e022      	b.n	80033b8 <HAL_I2C_Init+0x1a4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10e      	bne.n	8003398 <HAL_I2C_Init+0x184>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e58      	subs	r0, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	440b      	add	r3, r1
 8003388:	fbb0 f3f3 	udiv	r3, r0, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Init+0x1a4>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6809      	ldr	r1, [r1, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6911      	ldr	r1, [r2, #16]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68d2      	ldr	r2, [r2, #12]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	000186a0 	.word	0x000186a0
 8003454:	001e847f 	.word	0x001e847f
 8003458:	003d08ff 	.word	0x003d08ff
 800345c:	431bde83 	.word	0x431bde83
 8003460:	10624dd3 	.word	0x10624dd3

08003464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	460b      	mov	r3, r1
 8003472:	817b      	strh	r3, [r7, #10]
 8003474:	4613      	mov	r3, r2
 8003476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7fd ff9c 	bl	80013b4 <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	f040 80e0 	bne.w	800364c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2319      	movs	r3, #25
 8003492:	2201      	movs	r2, #1
 8003494:	4970      	ldr	r1, [pc, #448]	; (8003658 <HAL_I2C_Master_Transmit+0x1f4>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f958 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0d3      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_I2C_Master_Transmit+0x50>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0cc      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d007      	beq.n	80034da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2210      	movs	r2, #16
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	893a      	ldrh	r2, [r7, #8]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a50      	ldr	r2, [pc, #320]	; (800365c <HAL_I2C_Master_Transmit+0x1f8>)
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f89c 	bl	8003660 <I2C_MasterRequestWrite>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e08d      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003548:	e066      	b.n	8003618 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	6a39      	ldr	r1, [r7, #32]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f9d2 	bl	80038f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e06b      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d11b      	bne.n	80035ec <HAL_I2C_Master_Transmit+0x188>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	6a39      	ldr	r1, [r7, #32]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f9c2 	bl	800397a <I2C_WaitOnBTFFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	2b04      	cmp	r3, #4
 8003602:	d107      	bne.n	8003614 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e01a      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d194      	bne.n	800354a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	00100002 	.word	0x00100002
 800365c:	ffff0000 	.word	0xffff0000

08003660 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	460b      	mov	r3, r1
 800366e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d006      	beq.n	800368a <I2C_MasterRequestWrite+0x2a>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d003      	beq.n	800368a <I2C_MasterRequestWrite+0x2a>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003688:	d108      	bne.n	800369c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e00b      	b.n	80036b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2b12      	cmp	r3, #18
 80036a2:	d107      	bne.n	80036b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f843 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e035      	b.n	800373c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	e01b      	b.n	8003724 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036ec:	897b      	ldrh	r3, [r7, #10]
 80036ee:	11db      	asrs	r3, r3, #7
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f063 030f 	orn	r3, r3, #15
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <I2C_MasterRequestWrite+0xe4>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f875 	bl	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e010      	b.n	800373c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <I2C_MasterRequestWrite+0xe8>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f865 	bl	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	00010008 	.word	0x00010008
 8003748:	00010002 	.word	0x00010002

0800374c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	e025      	b.n	80037aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d021      	beq.n	80037aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7fd fe25 	bl	80013b4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e023      	b.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d10d      	bne.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	e00c      	b.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d0b6      	beq.n	800375e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003808:	e051      	b.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d123      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003832:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e046      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d021      	beq.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fd fda3 	bl	80013b4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d116      	bne.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e020      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d10c      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	e00b      	b.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d18d      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003904:	e02d      	b.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f878 	bl	80039fc <I2C_IsAcknowledgeFailed>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e02d      	b.n	8003972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d021      	beq.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fd fd49 	bl	80013b4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d116      	bne.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d1ca      	bne.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003986:	e02d      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f837 	bl	80039fc <I2C_IsAcknowledgeFailed>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e02d      	b.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d021      	beq.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a0:	f7fd fd08 	bl	80013b4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d302      	bcc.n	80039b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d1ca      	bne.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a12:	d11b      	bne.n	8003a4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e26c      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8087 	beq.w	8003b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a78:	4b92      	ldr	r3, [pc, #584]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d00c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a84:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d112      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x5e>
 8003a90:	4b8c      	ldr	r3, [pc, #560]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9e:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d06c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x12c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d168      	bne.n	8003b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e246      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x76>
 8003ac0:	4b80      	ldr	r3, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7f      	ldr	r2, [pc, #508]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e02e      	b.n	8003b2c <HAL_RCC_OscConfig+0xd4>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x98>
 8003ad6:	4b7b      	ldr	r3, [pc, #492]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7a      	ldr	r2, [pc, #488]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b78      	ldr	r3, [pc, #480]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a77      	ldr	r2, [pc, #476]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e01d      	b.n	8003b2c <HAL_RCC_OscConfig+0xd4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0xbc>
 8003afa:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a71      	ldr	r2, [pc, #452]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6e      	ldr	r2, [pc, #440]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0xd4>
 8003b14:	4b6b      	ldr	r3, [pc, #428]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6a      	ldr	r2, [pc, #424]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a67      	ldr	r2, [pc, #412]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd fc3e 	bl	80013b4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fc3a 	bl	80013b4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1fa      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0xe4>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fc2a 	bl	80013b4 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fc26 	bl	80013b4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1e6      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x10c>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d063      	beq.n	8003c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b92:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b9e:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d11c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x18c>
 8003baa:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x176>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1ba      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4939      	ldr	r1, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	e03a      	b.n	8003c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d020      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bec:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCC_OscConfig+0x270>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fd fbdf 	bl	80013b4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fd fbdb 	bl	80013b4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e19b      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4927      	ldr	r1, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	e015      	b.n	8003c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_OscConfig+0x270>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd fbbe 	bl	80013b4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fd fbba 	bl	80013b4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e17a      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03a      	beq.n	8003cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_RCC_OscConfig+0x274>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fd fb9e 	bl	80013b4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fd fb9a 	bl	80013b4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e15a      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f000 fb0a 	bl	80042b4 <RCC_Delay>
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_RCC_OscConfig+0x274>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fb84 	bl	80013b4 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cae:	e00f      	b.n	8003cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fb80 	bl	80013b4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d908      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e140      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	42420000 	.word	0x42420000
 8003ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b9e      	ldr	r3, [pc, #632]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e9      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a6 	beq.w	8003e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b97      	ldr	r3, [pc, #604]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b94      	ldr	r3, [pc, #592]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4a93      	ldr	r2, [pc, #588]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	61d3      	str	r3, [r2, #28]
 8003d06:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b8e      	ldr	r3, [pc, #568]	; (8003f50 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a8a      	ldr	r2, [pc, #552]	; (8003f50 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fb41 	bl	80013b4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd fb3d 	bl	80013b4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b64      	cmp	r3, #100	; 0x64
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0fd      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x312>
 8003d5c:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a7a      	ldr	r2, [pc, #488]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6213      	str	r3, [r2, #32]
 8003d68:	e02d      	b.n	8003dc6 <HAL_RCC_OscConfig+0x36e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x334>
 8003d72:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6213      	str	r3, [r2, #32]
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	6213      	str	r3, [r2, #32]
 8003d8a:	e01c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x36e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d10c      	bne.n	8003dae <HAL_RCC_OscConfig+0x356>
 8003d94:	4b6d      	ldr	r3, [pc, #436]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4a6c      	ldr	r2, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a69      	ldr	r2, [pc, #420]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6213      	str	r3, [r2, #32]
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x36e>
 8003dae:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4a66      	ldr	r2, [pc, #408]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	4b64      	ldr	r3, [pc, #400]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a63      	ldr	r2, [pc, #396]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d015      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dce:	f7fd faf1 	bl	80013b4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd faed 	bl	80013b4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0ab      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x37e>
 8003df8:	e014      	b.n	8003e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fadb 	bl	80013b4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fad7 	bl	80013b4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e095      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ee      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4a47      	ldr	r2, [pc, #284]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8081 	beq.w	8003f42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e40:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d061      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d146      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_OscConfig+0x4fc>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd faab 	bl	80013b4 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd faa7 	bl	80013b4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e067      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e74:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d108      	bne.n	8003e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	492d      	ldr	r1, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a19      	ldr	r1, [r3, #32]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	430b      	orrs	r3, r1
 8003eae:	4927      	ldr	r1, [pc, #156]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x4fc>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fa7b 	bl	80013b4 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fa77 	bl	80013b4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e037      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x46a>
 8003ee0:	e02f      	b.n	8003f42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_RCC_OscConfig+0x4fc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fa64 	bl	80013b4 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fa60 	bl	80013b4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e020      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x498>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e013      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40007000 	.word	0x40007000
 8003f54:	42420060 	.word	0x42420060

08003f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0d0      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b67      	ldr	r3, [pc, #412]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4965      	ldr	r1, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d040      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d115      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e073      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06b      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4936      	ldr	r1, [pc, #216]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fd f9b4 	bl	80013b4 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd f9b0 	bl	80013b4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e053      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d210      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	5cd3      	ldrb	r3, [r2, r3]
 80040fa:	fa21 f303 	lsr.w	r3, r1, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1cc>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd f812 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000
 800411c:	40021000 	.word	0x40021000
 8004120:	0800876c 	.word	0x0800876c
 8004124:	20000004 	.word	0x20000004
 8004128:	20000008 	.word	0x20000008

0800412c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b490      	push	{r4, r7}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004134:	1d3c      	adds	r4, r7, #4
 8004136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x46>
 800416a:	e02d      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800416e:	623b      	str	r3, [r7, #32]
      break;
 8004170:	e02d      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800417e:	4413      	add	r3, r2
 8004180:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004184:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c5b      	lsrs	r3, r3, #17
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800419e:	4413      	add	r3, r2
 80041a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041aa:	fb02 f203 	mul.w	r2, r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e004      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	623b      	str	r3, [r7, #32]
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041ca:	623b      	str	r3, [r7, #32]
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	6a3b      	ldr	r3, [r7, #32]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc90      	pop	{r4, r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	08008698 	.word	0x08008698
 80041e0:	080086a8 	.word	0x080086a8
 80041e4:	40021000 	.word	0x40021000
 80041e8:	007a1200 	.word	0x007a1200
 80041ec:	003d0900 	.word	0x003d0900

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b02      	ldr	r3, [pc, #8]	; (8004200 <HAL_RCC_GetHCLKFreq+0x10>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	20000004 	.word	0x20000004

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff2 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800420c:	4601      	mov	r1, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	0800877c 	.word	0x0800877c

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffde 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004234:	4601      	mov	r1, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0adb      	lsrs	r3, r3, #11
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4a03      	ldr	r2, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	0800877c 	.word	0x0800877c

08004254 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	220f      	movs	r2, #15
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_RCC_GetClockConfig+0x58>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCC_GetClockConfig+0x58>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_GetClockConfig+0x58>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_RCC_GetClockConfig+0x58>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40022000 	.word	0x40022000

080042b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <RCC_Delay+0x34>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <RCC_Delay+0x38>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042d0:	bf00      	nop
  }
  while (Delay --);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	60fa      	str	r2, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f9      	bne.n	80042d0 <RCC_Delay+0x1c>
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000004 	.word	0x20000004
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d07d      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431c:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	61d3      	str	r3, [r2, #28]
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d118      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a42      	ldr	r2, [pc, #264]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004350:	f7fd f830 	bl	80013b4 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fd f82c 	bl	80013b4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e06d      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004376:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d027      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439e:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a4:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043aa:	4a29      	ldr	r2, [pc, #164]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fc fffb 	bl	80013b4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fc fff7 	bl	80013b4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e036      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4917      	ldr	r1, [pc, #92]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	490b      	ldr	r1, [pc, #44]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	42420440 	.word	0x42420440

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01d      	b.n	80044aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f815 	bl	80044b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 f962 	bl	8004764 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d007      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d122      	bne.n	8004566 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d11b      	bne.n	8004566 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0202 	mvn.w	r2, #2
 8004536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8ed 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 8004552:	e005      	b.n	8004560 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8e0 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8ef 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d122      	bne.n	80045ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d11b      	bne.n	80045ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0204 	mvn.w	r2, #4
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8c3 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8b6 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8c5 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d122      	bne.n	800460e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d11b      	bne.n	800460e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0208 	mvn.w	r2, #8
 80045de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2204      	movs	r2, #4
 80045e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f899 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 80045fa:	e005      	b.n	8004608 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f88c 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f89b 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b10      	cmp	r3, #16
 800461a:	d122      	bne.n	8004662 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b10      	cmp	r3, #16
 8004628:	d11b      	bne.n	8004662 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0210 	mvn.w	r2, #16
 8004632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2208      	movs	r2, #8
 8004638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f86f 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 800464e:	e005      	b.n	800465c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f862 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f871 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0201 	mvn.w	r2, #1
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fc fb23 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d10e      	bne.n	80046ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8c0 	bl	800483a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d10e      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f835 	bl	8004750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d10e      	bne.n	8004712 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d107      	bne.n	8004712 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 0220 	mvn.w	r2, #32
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f88b 	bl	8004828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
	...

08004764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a29      	ldr	r2, [pc, #164]	; (800481c <TIM_Base_SetConfig+0xb8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x30>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x30>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a26      	ldr	r2, [pc, #152]	; (8004820 <TIM_Base_SetConfig+0xbc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x30>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a25      	ldr	r2, [pc, #148]	; (8004824 <TIM_Base_SetConfig+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <TIM_Base_SetConfig+0xb8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0x62>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0x62>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <TIM_Base_SetConfig+0xbc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <TIM_Base_SetConfig+0xc0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a07      	ldr	r2, [pc, #28]	; (800481c <TIM_Base_SetConfig+0xb8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d103      	bne.n	800480c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	615a      	str	r2, [r3, #20]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800

08004828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e03f      	b.n	80048de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fba6 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fc0f 	bl	80050b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b088      	sub	sp, #32
 80048ea:	af02      	add	r7, sp, #8
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 8083 	bne.w	8004a0e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UART_Transmit+0x2e>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e07b      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x40>
 8004922:	2302      	movs	r3, #2
 8004924:	e074      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2221      	movs	r2, #33	; 0x21
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800493c:	f7fc fd3a 	bl	80013b4 <HAL_GetTick>
 8004940:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800494e:	e042      	b.n	80049d6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d122      	bne.n	80049ae <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fa34 	bl	8004de0 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e046      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004994:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3302      	adds	r3, #2
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	e017      	b.n	80049d6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e013      	b.n	80049d6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2180      	movs	r1, #128	; 0x80
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fa11 	bl	8004de0 <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e023      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	60ba      	str	r2, [r7, #8]
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1b7      	bne.n	8004950 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2200      	movs	r2, #0
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f9f8 	bl	8004de0 <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00a      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d140      	bne.n	8004ab4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_UART_Receive_IT+0x26>
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e039      	b.n	8004ab6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_UART_Receive_IT+0x38>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e032      	b.n	8004ab6 <HAL_UART_Receive_IT+0x9e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2222      	movs	r2, #34	; 0x22
 8004a74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004ad6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d024      	beq.n	8004b40 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b04:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	2200      	movs	r2, #0
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f801 	bl	8002b22 <HAL_DMA_Abort>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f9b0 	bl	8002e90 <HAL_DMA_GetError>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d104      	bne.n	8004b40 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e03d      	b.n	8004bbc <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d024      	beq.n	8004b98 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd ffd5 	bl	8002b22 <HAL_DMA_Abort>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f984 	bl	8002e90 <HAL_DMA_GetError>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2210      	movs	r2, #16
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e011      	b.n	8004bbc <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9ce 	bl	8004fb0 <UART_Receive_IT>
      return;
 8004c14:	e0cc      	b.n	8004db0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80ab 	beq.w	8004d74 <HAL_UART_IRQHandler+0x1b0>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_UART_IRQHandler+0x70>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a0 	beq.w	8004d74 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xf0>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	f043 0208 	orr.w	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d078      	beq.n	8004dae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x112>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f96d 	bl	8004fb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf14      	ite	ne
 8004ce4:	2301      	movne	r3, #1
 8004ce6:	2300      	moveq	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_UART_IRQHandler+0x13a>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d031      	beq.n	8004d62 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8b8 	bl	8004e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d023      	beq.n	8004d5a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <HAL_UART_IRQHandler+0x1f4>)
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd ff2e 	bl	8002b98 <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e00e      	b.n	8004d70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f83b 	bl	8004dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	e00a      	b.n	8004d70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f837 	bl	8004dce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e006      	b.n	8004d70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f833 	bl	8004dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d6e:	e01e      	b.n	8004dae <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	bf00      	nop
    return;
 8004d72:	e01c      	b.n	8004dae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_UART_IRQHandler+0x1cc>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8a4 	bl	8004ed6 <UART_Transmit_IT>
    return;
 8004d8e:	e00f      	b.n	8004db0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_UART_IRQHandler+0x1ec>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8eb 	bl	8004f80 <UART_EndTransmit_IT>
    return;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004dae:	bf00      	nop
  }
}
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	08004eaf 	.word	0x08004eaf

08004dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df0:	e02c      	b.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d028      	beq.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e00:	f7fc fad8 	bl	80013b4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d21d      	bcs.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e00f      	b.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d0c3      	beq.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff ff80 	bl	8004dce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b21      	cmp	r3, #33	; 0x21
 8004ee8:	d144      	bne.n	8004f74 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	d11a      	bne.n	8004f2a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f08:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d105      	bne.n	8004f1e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]
 8004f1c:	e00e      	b.n	8004f3c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]
 8004f28:	e008      	b.n	8004f3c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6211      	str	r1, [r2, #32]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff0b 	bl	8004dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b22      	cmp	r3, #34	; 0x22
 8004fc2:	d171      	bne.n	80050a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d123      	bne.n	8005016 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10e      	bne.n	8004ffa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	1c9a      	adds	r2, r3, #2
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff8:	e029      	b.n	800504e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	b29b      	uxth	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
 8005014:	e01b      	b.n	800504e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6858      	ldr	r0, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	1c59      	adds	r1, r3, #1
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6291      	str	r1, [r2, #40]	; 0x28
 800502e:	b2c2      	uxtb	r2, r0
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e00c      	b.n	800504e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	1c58      	adds	r0, r3, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	6288      	str	r0, [r1, #40]	; 0x28
 8005046:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4619      	mov	r1, r3
 800505c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800505e:	2b00      	cmp	r3, #0
 8005060:	d120      	bne.n	80050a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0220 	bic.w	r2, r2, #32
 8005070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005080:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb f8b6 	bl	800020c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e002      	b.n	80050aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050ee:	f023 030c 	bic.w	r3, r3, #12
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a52      	ldr	r2, [pc, #328]	; (8005260 <UART_SetConfig+0x1ac>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d14e      	bne.n	80051ba <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7ff f886 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005120:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009a      	lsls	r2, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	4a4a      	ldr	r2, [pc, #296]	; (8005264 <UART_SetConfig+0x1b0>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	0119      	lsls	r1, r3, #4
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	fbb2 f2f3 	udiv	r2, r2, r3
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <UART_SetConfig+0x1b0>)
 800515a:	fba3 0302 	umull	r0, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2064      	movs	r0, #100	; 0x64
 8005162:	fb00 f303 	mul.w	r3, r0, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	; 0x32
 800516c:	4a3d      	ldr	r2, [pc, #244]	; (8005264 <UART_SetConfig+0x1b0>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005178:	4419      	add	r1, r3
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009a      	lsls	r2, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005190:	4b34      	ldr	r3, [pc, #208]	; (8005264 <UART_SetConfig+0x1b0>)
 8005192:	fba3 0302 	umull	r0, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2064      	movs	r0, #100	; 0x64
 800519a:	fb00 f303 	mul.w	r3, r0, r3
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	3332      	adds	r3, #50	; 0x32
 80051a4:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <UART_SetConfig+0x1b0>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	440a      	add	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80051b8:	e04d      	b.n	8005256 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7ff f823 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 80051be:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	4a23      	ldr	r2, [pc, #140]	; (8005264 <UART_SetConfig+0x1b0>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	0119      	lsls	r1, r3, #4
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009a      	lsls	r2, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <UART_SetConfig+0x1b0>)
 80051f8:	fba3 0302 	umull	r0, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	2064      	movs	r0, #100	; 0x64
 8005200:	fb00 f303 	mul.w	r3, r0, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	3332      	adds	r3, #50	; 0x32
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <UART_SetConfig+0x1b0>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005216:	4419      	add	r1, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	fbb2 f2f3 	udiv	r2, r2, r3
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <UART_SetConfig+0x1b0>)
 8005230:	fba3 0302 	umull	r0, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2064      	movs	r0, #100	; 0x64
 8005238:	fb00 f303 	mul.w	r3, r0, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a08      	ldr	r2, [pc, #32]	; (8005264 <UART_SetConfig+0x1b0>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 020f 	and.w	r2, r3, #15
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	440a      	add	r2, r1
 8005254:	609a      	str	r2, [r3, #8]
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40013800 	.word	0x40013800
 8005264:	51eb851f 	.word	0x51eb851f

08005268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0208 	add.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f103 0208 	add.w	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f103 0208 	add.w	r2, r3, #8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d103      	bne.n	8005324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e00c      	b.n	800533e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3308      	adds	r3, #8
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e002      	b.n	8005332 <vListInsert+0x2e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d2f6      	bcs.n	800532c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d103      	bne.n	80053a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
	...

080053c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	e7fe      	b.n	80053ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80053f0:	f001 f8f0 	bl	80065d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	3b01      	subs	r3, #1
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	22ff      	movs	r2, #255	; 0xff
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d114      	bne.n	8005470 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01a      	beq.n	8005484 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3310      	adds	r3, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fdcc 	bl	8005ff0 <xTaskRemoveFromEventList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d012      	beq.n	8005484 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800545e:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <xQueueGenericReset+0xcc>)
 8005460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	e009      	b.n	8005484 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fef7 	bl	8005268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fef2 	bl	8005268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005484:	f001 f8d4 	bl	8006630 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005488:	2301      	movs	r3, #1
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <xQueueGenericCreate+0x28>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e7fe      	b.n	80054be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e004      	b.n	80054d6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3348      	adds	r3, #72	; 0x48
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 f97a 	bl	80067d4 <pvPortMalloc>
 80054e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00f      	beq.n	8005508 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	3348      	adds	r3, #72	; 0x48
 80054ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054f6:	79fa      	ldrb	r2, [r7, #7]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f805 	bl	8005512 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005508:	69bb      	ldr	r3, [r7, #24]
	}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e002      	b.n	8005534 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005540:	2101      	movs	r1, #1
 8005542:	69b8      	ldr	r0, [r7, #24]
 8005544:	f7ff ff40 	bl	80053c8 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	2073      	movs	r0, #115	; 0x73
 8005550:	f002 f9ec 	bl	800792c <SEGGER_SYSVIEW_RecordU32x3>
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af04      	add	r7, sp, #16
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <xTaskCreateStatic+0x28>
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	e7fe      	b.n	8005582 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <xTaskCreateStatic+0x42>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e7fe      	b.n	800559c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800559e:	2354      	movs	r3, #84	; 0x54
 80055a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b54      	cmp	r3, #84	; 0x54
 80055a6:	d009      	beq.n	80055bc <xTaskCreateStatic+0x60>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e7fe      	b.n	80055ba <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01e      	beq.n	8005600 <xTaskCreateStatic+0xa4>
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01b      	beq.n	8005600 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055da:	2300      	movs	r3, #0
 80055dc:	9303      	str	r3, [sp, #12]
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	9302      	str	r3, [sp, #8]
 80055e2:	f107 0314 	add.w	r3, r7, #20
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f850 	bl	8005698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055fa:	f000 f8cb 	bl	8005794 <prvAddNewTaskToReadyList>
 80055fe:	e001      	b.n	8005604 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005604:	697b      	ldr	r3, [r7, #20]
	}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800560e:	b580      	push	{r7, lr}
 8005610:	b08c      	sub	sp, #48	; 0x30
 8005612:	af04      	add	r7, sp, #16
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f001 f8d6 	bl	80067d4 <pvPortMalloc>
 8005628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00e      	beq.n	800564e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005630:	2054      	movs	r0, #84	; 0x54
 8005632:	f001 f8cf 	bl	80067d4 <pvPortMalloc>
 8005636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
 8005644:	e005      	b.n	8005652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005646:	6978      	ldr	r0, [r7, #20]
 8005648:	f001 f986 	bl	8006958 <vPortFree>
 800564c:	e001      	b.n	8005652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	2300      	movs	r3, #0
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f80e 	bl	8005698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800567c:	69f8      	ldr	r0, [r7, #28]
 800567e:	f000 f889 	bl	8005794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005682:	2301      	movs	r3, #1
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e002      	b.n	800568e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800568e:	69bb      	ldr	r3, [r7, #24]
	}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056b0:	3b01      	subs	r3, #1
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <prvInitialiseNewTask+0x46>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e7fe      	b.n	80056dc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	e012      	b.n	800570a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	7819      	ldrb	r1, [r3, #0]
 80056ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	3334      	adds	r3, #52	; 0x34
 80056f4:	460a      	mov	r2, r1
 80056f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3301      	adds	r3, #1
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b0f      	cmp	r3, #15
 800570e:	d9e9      	bls.n	80056e4 <prvInitialiseNewTask+0x4c>
 8005710:	e000      	b.n	8005714 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005712:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b06      	cmp	r3, #6
 8005720:	d901      	bls.n	8005726 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005722:	2306      	movs	r3, #6
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2200      	movs	r2, #0
 8005736:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fdb2 	bl	80052a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	3318      	adds	r3, #24
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fdad 	bl	80052a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	f1c3 0207 	rsb	r2, r3, #7
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	69b8      	ldr	r0, [r7, #24]
 8005776:	f000 fdef 	bl	8006358 <pxPortInitialiseStack>
 800577a:	4602      	mov	r2, r0
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800578c:	bf00      	nop
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800579c:	f000 ff1a 	bl	80065d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057a0:	4b39      	ldr	r3, [pc, #228]	; (8005888 <prvAddNewTaskToReadyList+0xf4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a38      	ldr	r2, [pc, #224]	; (8005888 <prvAddNewTaskToReadyList+0xf4>)
 80057a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057aa:	4b38      	ldr	r3, [pc, #224]	; (800588c <prvAddNewTaskToReadyList+0xf8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057b2:	4a36      	ldr	r2, [pc, #216]	; (800588c <prvAddNewTaskToReadyList+0xf8>)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057b8:	4b33      	ldr	r3, [pc, #204]	; (8005888 <prvAddNewTaskToReadyList+0xf4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d110      	bne.n	80057e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057c0:	f000 fc94 	bl	80060ec <prvInitialiseTaskLists>
 80057c4:	e00d      	b.n	80057e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057c6:	4b32      	ldr	r3, [pc, #200]	; (8005890 <prvAddNewTaskToReadyList+0xfc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <prvAddNewTaskToReadyList+0xf8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d802      	bhi.n	80057e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <prvAddNewTaskToReadyList+0xf8>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057e2:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <prvAddNewTaskToReadyList+0x100>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	4a2a      	ldr	r2, [pc, #168]	; (8005894 <prvAddNewTaskToReadyList+0x100>)
 80057ea:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <prvAddNewTaskToReadyList+0x8c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f002 fc6b 	bl	80080d0 <SEGGER_SYSVIEW_OnTaskCreate>
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	461d      	mov	r5, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461c      	mov	r4, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	1ae3      	subs	r3, r4, r3
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462b      	mov	r3, r5
 800581c:	f001 fa56 	bl	8006ccc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 fcd8 	bl	80081d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	2201      	movs	r2, #1
 800582e:	409a      	lsls	r2, r3
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <prvAddNewTaskToReadyList+0x104>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <prvAddNewTaskToReadyList+0x104>)
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <prvAddNewTaskToReadyList+0x108>)
 8005848:	441a      	add	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7ff fd34 	bl	80052be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005856:	f000 feeb 	bl	8006630 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800585a:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <prvAddNewTaskToReadyList+0xfc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <prvAddNewTaskToReadyList+0xf8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d207      	bcs.n	8005880 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <prvAddNewTaskToReadyList+0x10c>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bdb0      	pop	{r4, r5, r7, pc}
 8005888:	20000388 	.word	0x20000388
 800588c:	20000288 	.word	0x20000288
 8005890:	20000394 	.word	0x20000394
 8005894:	200003a4 	.word	0x200003a4
 8005898:	20000390 	.word	0x20000390
 800589c:	2000028c 	.word	0x2000028c
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058ac:	f000 fe92 	bl	80065d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <vTaskDelete+0x18>
 80058b6:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <vTaskDelete+0x110>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	e000      	b.n	80058be <vTaskDelete+0x1a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fd55 	bl	8005374 <uxListRemove>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d115      	bne.n	80058fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	4938      	ldr	r1, [pc, #224]	; (80059b8 <vTaskDelete+0x114>)
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <vTaskDelete+0x58>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	2201      	movs	r2, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43da      	mvns	r2, r3
 80058f2:	4b32      	ldr	r3, [pc, #200]	; (80059bc <vTaskDelete+0x118>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4013      	ands	r3, r2
 80058f8:	4a30      	ldr	r2, [pc, #192]	; (80059bc <vTaskDelete+0x118>)
 80058fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3318      	adds	r3, #24
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff fd33 	bl	8005374 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <vTaskDelete+0x11c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <vTaskDelete+0x11c>)
 8005916:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <vTaskDelete+0x110>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d10b      	bne.n	800593a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4826      	ldr	r0, [pc, #152]	; (80059c4 <vTaskDelete+0x120>)
 800592a:	f7ff fcc8 	bl	80052be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <vTaskDelete+0x124>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <vTaskDelete+0x124>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e009      	b.n	800594e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <vTaskDelete+0x128>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <vTaskDelete+0x128>)
 8005942:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fc3d 	bl	80061c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800594a:	f000 fc69 	bl	8006220 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4618      	mov	r0, r3
 8005952:	f002 fce3 	bl	800831c <SEGGER_SYSVIEW_ShrinkId>
 8005956:	4603      	mov	r3, r0
 8005958:	4619      	mov	r1, r3
 800595a:	2022      	movs	r0, #34	; 0x22
 800595c:	f001 ff50 	bl	8007800 <SEGGER_SYSVIEW_RecordU32>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fa1a 	bl	8006d9c <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8005968:	f000 fe62 	bl	8006630 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800596c:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <vTaskDelete+0x12c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01a      	beq.n	80059aa <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <vTaskDelete+0x110>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d115      	bne.n	80059aa <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <vTaskDelete+0x130>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <vTaskDelete+0xf6>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	e7fe      	b.n	8005998 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <vTaskDelete+0x134>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000288 	.word	0x20000288
 80059b8:	2000028c 	.word	0x2000028c
 80059bc:	20000390 	.word	0x20000390
 80059c0:	200003a4 	.word	0x200003a4
 80059c4:	2000035c 	.word	0x2000035c
 80059c8:	20000370 	.word	0x20000370
 80059cc:	20000388 	.word	0x20000388
 80059d0:	20000394 	.word	0x20000394
 80059d4:	200003b0 	.word	0x200003b0
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <vTaskDelayUntil+0x28>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e7fe      	b.n	8005a02 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <vTaskDelayUntil+0x42>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	e7fe      	b.n	8005a1c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <vTaskDelayUntil+0xf0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <vTaskDelayUntil+0x5e>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e7fe      	b.n	8005a38 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005a3a:	f000 f8e3 	bl	8005c04 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005a3e:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <vTaskDelayUntil+0xf4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d20b      	bcs.n	8005a70 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d211      	bcs.n	8005a86 <vTaskDelayUntil+0xaa>
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d90d      	bls.n	8005a86 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	e00a      	b.n	8005a86 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d303      	bcc.n	8005a82 <vTaskDelayUntil+0xa6>
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d901      	bls.n	8005a86 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8005a92:	2024      	movs	r0, #36	; 0x24
 8005a94:	f001 fe96 	bl	80077c4 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fbe1 	bl	8006268 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005aa6:	f000 f8bb 	bl	8005c20 <xTaskResumeAll>
 8005aaa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vTaskDelayUntil+0xf8>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ac2:	bf00      	nop
 8005ac4:	3728      	adds	r7, #40	; 0x28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200003b0 	.word	0x200003b0
 8005ad0:	2000038c 	.word	0x2000038c
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01a      	beq.n	8005b20 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <vTaskDelay+0x68>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <vTaskDelay+0x2e>
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	e7fe      	b.n	8005b04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b06:	f000 f87d 	bl	8005c04 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	2023      	movs	r0, #35	; 0x23
 8005b0e:	f001 fe77 	bl	8007800 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b12:	2100      	movs	r1, #0
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fba7 	bl	8006268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b1a:	f000 f881 	bl	8005c20 <xTaskResumeAll>
 8005b1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <vTaskDelay+0x6c>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200003b0 	.word	0x200003b0
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b56:	463a      	mov	r2, r7
 8005b58:	1d39      	adds	r1, r7, #4
 8005b5a:	f107 0308 	add.w	r3, r7, #8
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fa fb3c 	bl	80001dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	9202      	str	r2, [sp, #8]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	2300      	movs	r3, #0
 8005b74:	460a      	mov	r2, r1
 8005b76:	491d      	ldr	r1, [pc, #116]	; (8005bec <vTaskStartScheduler+0xa4>)
 8005b78:	481d      	ldr	r0, [pc, #116]	; (8005bf0 <vTaskStartScheduler+0xa8>)
 8005b7a:	f7ff fcef 	bl	800555c <xTaskCreateStatic>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <vTaskStartScheduler+0xac>)
 8005b82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <vTaskStartScheduler+0xac>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e001      	b.n	8005b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d115      	bne.n	8005bc8 <vTaskStartScheduler+0x80>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <vTaskStartScheduler+0xb0>)
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <vTaskStartScheduler+0xb4>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bbc:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <vTaskStartScheduler+0xb8>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bc2:	f000 fc41 	bl	8006448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bc6:	e00d      	b.n	8005be4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	d109      	bne.n	8005be4 <vTaskStartScheduler+0x9c>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e7fe      	b.n	8005be2 <vTaskStartScheduler+0x9a>
}
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	080086ac 	.word	0x080086ac
 8005bf0:	080060bd 	.word	0x080060bd
 8005bf4:	200003ac 	.word	0x200003ac
 8005bf8:	200003a8 	.word	0x200003a8
 8005bfc:	20000394 	.word	0x20000394
 8005c00:	2000038c 	.word	0x2000038c

08005c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <vTaskSuspendAll+0x18>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <vTaskSuspendAll+0x18>)
 8005c10:	6013      	str	r3, [r2, #0]
}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	200003b0 	.word	0x200003b0

08005c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c2e:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <xTaskResumeAll+0x11c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <xTaskResumeAll+0x2a>
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	e7fe      	b.n	8005c48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c4a:	f000 fcc3 	bl	80065d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <xTaskResumeAll+0x11c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	4a39      	ldr	r2, [pc, #228]	; (8005d3c <xTaskResumeAll+0x11c>)
 8005c56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c58:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <xTaskResumeAll+0x11c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d165      	bne.n	8005d2c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <xTaskResumeAll+0x120>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d061      	beq.n	8005d2c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c68:	e032      	b.n	8005cd0 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c6a:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <xTaskResumeAll+0x124>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fb7c 	bl	8005374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fb77 	bl	8005374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f002 faa5 	bl	80081d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <xTaskResumeAll+0x128>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <xTaskResumeAll+0x128>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <xTaskResumeAll+0x12c>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7ff fb01 	bl	80052be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <xTaskResumeAll+0x130>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005cca:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <xTaskResumeAll+0x134>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <xTaskResumeAll+0x124>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1c8      	bne.n	8005c6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cde:	f000 fa9f 	bl	8006220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <xTaskResumeAll+0x138>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d010      	beq.n	8005d10 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cee:	f000 f857 	bl	8005da0 <xTaskIncrementTick>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005cf8:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <xTaskResumeAll+0x134>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f1      	bne.n	8005cee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <xTaskResumeAll+0x138>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <xTaskResumeAll+0x134>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <xTaskResumeAll+0x13c>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d2c:	f000 fc80 	bl	8006630 <vPortExitCritical>

	return xAlreadyYielded;
 8005d30:	68bb      	ldr	r3, [r7, #8]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200003b0 	.word	0x200003b0
 8005d40:	20000388 	.word	0x20000388
 8005d44:	20000348 	.word	0x20000348
 8005d48:	20000390 	.word	0x20000390
 8005d4c:	2000028c 	.word	0x2000028c
 8005d50:	20000288 	.word	0x20000288
 8005d54:	2000039c 	.word	0x2000039c
 8005d58:	20000398 	.word	0x20000398
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d66:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <xTaskGetTickCount+0x18>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d6c:	687b      	ldr	r3, [r7, #4]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr
 8005d78:	2000038c 	.word	0x2000038c

08005d7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d82:	f000 fceb 	bl	800675c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <xTaskGetTickCountFromISR+0x20>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d90:	683b      	ldr	r3, [r7, #0]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	2000038c 	.word	0x2000038c

08005da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005daa:	4b52      	ldr	r3, [pc, #328]	; (8005ef4 <xTaskIncrementTick+0x154>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 8090 	bne.w	8005ed4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db4:	4b50      	ldr	r3, [pc, #320]	; (8005ef8 <xTaskIncrementTick+0x158>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dbc:	4a4e      	ldr	r2, [pc, #312]	; (8005ef8 <xTaskIncrementTick+0x158>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11f      	bne.n	8005e08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <xTaskIncrementTick+0x46>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	e7fe      	b.n	8005de4 <xTaskIncrementTick+0x44>
 8005de6:	4b45      	ldr	r3, [pc, #276]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <xTaskIncrementTick+0x160>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a42      	ldr	r2, [pc, #264]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4a42      	ldr	r2, [pc, #264]	; (8005f00 <xTaskIncrementTick+0x160>)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <xTaskIncrementTick+0x164>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	4a40      	ldr	r2, [pc, #256]	; (8005f04 <xTaskIncrementTick+0x164>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	f000 fa0c 	bl	8006220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <xTaskIncrementTick+0x168>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d351      	bcc.n	8005eb6 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e12:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <xTaskIncrementTick+0x80>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <xTaskIncrementTick+0x82>
 8005e20:	2300      	movs	r3, #0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <xTaskIncrementTick+0x168>)
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	601a      	str	r2, [r3, #0]
					break;
 8005e2e:	e042      	b.n	8005eb6 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e30:	4b32      	ldr	r3, [pc, #200]	; (8005efc <xTaskIncrementTick+0x15c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d203      	bcs.n	8005e50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e48:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <xTaskIncrementTick+0x168>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
						break;
 8005e4e:	e032      	b.n	8005eb6 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fa8d 	bl	8005374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3318      	adds	r3, #24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fa84 	bl	8005374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f002 f9b2 	bl	80081d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	2201      	movs	r2, #1
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <xTaskIncrementTick+0x16c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <xTaskIncrementTick+0x16c>)
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <xTaskIncrementTick+0x170>)
 8005e94:	441a      	add	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7ff fa0e 	bl	80052be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <xTaskIncrementTick+0x174>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d3b0      	bcc.n	8005e12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb4:	e7ad      	b.n	8005e12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eb6:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <xTaskIncrementTick+0x174>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4914      	ldr	r1, [pc, #80]	; (8005f10 <xTaskIncrementTick+0x170>)
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d907      	bls.n	8005ede <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e004      	b.n	8005ede <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <xTaskIncrementTick+0x178>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	4a0f      	ldr	r2, [pc, #60]	; (8005f18 <xTaskIncrementTick+0x178>)
 8005edc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ede:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <xTaskIncrementTick+0x17c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200003b0 	.word	0x200003b0
 8005ef8:	2000038c 	.word	0x2000038c
 8005efc:	20000340 	.word	0x20000340
 8005f00:	20000344 	.word	0x20000344
 8005f04:	200003a0 	.word	0x200003a0
 8005f08:	200003a8 	.word	0x200003a8
 8005f0c:	20000390 	.word	0x20000390
 8005f10:	2000028c 	.word	0x2000028c
 8005f14:	20000288 	.word	0x20000288
 8005f18:	20000398 	.word	0x20000398
 8005f1c:	2000039c 	.word	0x2000039c

08005f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <vTaskSwitchContext+0xb8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <vTaskSwitchContext+0xbc>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f34:	e04c      	b.n	8005fd0 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <vTaskSwitchContext+0xbc>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f3c:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <vTaskSwitchContext+0xc0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	fab3 f383 	clz	r3, r3
 8005f48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	f1c3 031f 	rsb	r3, r3, #31
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	4924      	ldr	r1, [pc, #144]	; (8005fe4 <vTaskSwitchContext+0xc4>)
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	607b      	str	r3, [r7, #4]
 8005f78:	e7fe      	b.n	8005f78 <vTaskSwitchContext+0x58>
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <vTaskSwitchContext+0xc4>)
 8005f86:	4413      	add	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d104      	bne.n	8005faa <vTaskSwitchContext+0x8a>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <vTaskSwitchContext+0xc8>)
 8005fb2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <vTaskSwitchContext+0xc8>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <vTaskSwitchContext+0xcc>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d102      	bne.n	8005fc6 <vTaskSwitchContext+0xa6>
 8005fc0:	f002 f86a 	bl	8008098 <SEGGER_SYSVIEW_OnIdle>
}
 8005fc4:	e004      	b.n	8005fd0 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8005fc6:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <vTaskSwitchContext+0xc8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 f8c2 	bl	8008154 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005fd0:	bf00      	nop
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200003b0 	.word	0x200003b0
 8005fdc:	2000039c 	.word	0x2000039c
 8005fe0:	20000390 	.word	0x20000390
 8005fe4:	2000028c 	.word	0x2000028c
 8005fe8:	20000288 	.word	0x20000288
 8005fec:	200003ac 	.word	0x200003ac

08005ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <xTaskRemoveFromEventList+0x2a>
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e7fe      	b.n	8006018 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3318      	adds	r3, #24
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff f9a8 	bl	8005374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006024:	4b1f      	ldr	r3, [pc, #124]	; (80060a4 <xTaskRemoveFromEventList+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d120      	bne.n	800606e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff f99f 	bl	8005374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	4618      	mov	r0, r3
 800603a:	f002 f8cd 	bl	80081d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	2201      	movs	r2, #1
 8006044:	409a      	lsls	r2, r3
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <xTaskRemoveFromEventList+0xb8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4313      	orrs	r3, r2
 800604c:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <xTaskRemoveFromEventList+0xb8>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <xTaskRemoveFromEventList+0xbc>)
 800605e:	441a      	add	r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7ff f929 	bl	80052be <vListInsertEnd>
 800606c:	e005      	b.n	800607a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3318      	adds	r3, #24
 8006072:	4619      	mov	r1, r3
 8006074:	480e      	ldr	r0, [pc, #56]	; (80060b0 <xTaskRemoveFromEventList+0xc0>)
 8006076:	f7ff f922 	bl	80052be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <xTaskRemoveFromEventList+0xc4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	429a      	cmp	r2, r3
 8006086:	d905      	bls.n	8006094 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <xTaskRemoveFromEventList+0xc8>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e001      	b.n	8006098 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006098:	697b      	ldr	r3, [r7, #20]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200003b0 	.word	0x200003b0
 80060a8:	20000390 	.word	0x20000390
 80060ac:	2000028c 	.word	0x2000028c
 80060b0:	20000348 	.word	0x20000348
 80060b4:	20000288 	.word	0x20000288
 80060b8:	2000039c 	.word	0x2000039c

080060bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060c4:	f000 f852 	bl	800616c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060c8:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <prvIdleTask+0x28>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d9f9      	bls.n	80060c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <prvIdleTask+0x2c>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e0:	e7f0      	b.n	80060c4 <prvIdleTask+0x8>
 80060e2:	bf00      	nop
 80060e4:	2000028c 	.word	0x2000028c
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	e00c      	b.n	8006112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <prvInitialiseTaskLists+0x60>)
 8006104:	4413      	add	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f8ae 	bl	8005268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3301      	adds	r3, #1
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d9ef      	bls.n	80060f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006118:	480d      	ldr	r0, [pc, #52]	; (8006150 <prvInitialiseTaskLists+0x64>)
 800611a:	f7ff f8a5 	bl	8005268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800611e:	480d      	ldr	r0, [pc, #52]	; (8006154 <prvInitialiseTaskLists+0x68>)
 8006120:	f7ff f8a2 	bl	8005268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006124:	480c      	ldr	r0, [pc, #48]	; (8006158 <prvInitialiseTaskLists+0x6c>)
 8006126:	f7ff f89f 	bl	8005268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800612a:	480c      	ldr	r0, [pc, #48]	; (800615c <prvInitialiseTaskLists+0x70>)
 800612c:	f7ff f89c 	bl	8005268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006130:	480b      	ldr	r0, [pc, #44]	; (8006160 <prvInitialiseTaskLists+0x74>)
 8006132:	f7ff f899 	bl	8005268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvInitialiseTaskLists+0x78>)
 8006138:	4a05      	ldr	r2, [pc, #20]	; (8006150 <prvInitialiseTaskLists+0x64>)
 800613a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <prvInitialiseTaskLists+0x7c>)
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <prvInitialiseTaskLists+0x68>)
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	2000028c 	.word	0x2000028c
 8006150:	20000318 	.word	0x20000318
 8006154:	2000032c 	.word	0x2000032c
 8006158:	20000348 	.word	0x20000348
 800615c:	2000035c 	.word	0x2000035c
 8006160:	20000374 	.word	0x20000374
 8006164:	20000340 	.word	0x20000340
 8006168:	20000344 	.word	0x20000344

0800616c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006172:	e019      	b.n	80061a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006174:	f000 fa2e 	bl	80065d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <prvCheckTasksWaitingTermination+0x4c>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f8f5 	bl	8005374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvCheckTasksWaitingTermination+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <prvCheckTasksWaitingTermination+0x50>)
 8006192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 800619c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800619e:	f000 fa47 	bl	8006630 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f80e 	bl	80061c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000035c 	.word	0x2000035c
 80061bc:	20000388 	.word	0x20000388
 80061c0:	20000370 	.word	0x20000370

080061c4 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d108      	bne.n	80061e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fbbc 	bl	8006958 <vPortFree>
				vPortFree( pxTCB );
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fbb9 	bl	8006958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061e6:	e017      	b.n	8006218 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d103      	bne.n	80061fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fbb0 	bl	8006958 <vPortFree>
	}
 80061f8:	e00e      	b.n	8006218 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006200:	2b02      	cmp	r3, #2
 8006202:	d009      	beq.n	8006218 <prvDeleteTCB+0x54>
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e7fe      	b.n	8006216 <prvDeleteTCB+0x52>
	}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <prvResetNextTaskUnblockTime+0x40>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <prvResetNextTaskUnblockTime+0x14>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <prvResetNextTaskUnblockTime+0x16>
 8006234:	2300      	movs	r3, #0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <prvResetNextTaskUnblockTime+0x44>)
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006242:	e008      	b.n	8006256 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <prvResetNextTaskUnblockTime+0x40>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a04      	ldr	r2, [pc, #16]	; (8006264 <prvResetNextTaskUnblockTime+0x44>)
 8006254:	6013      	str	r3, [r2, #0]
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	20000340 	.word	0x20000340
 8006264:	200003a8 	.word	0x200003a8

08006268 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006272:	4b32      	ldr	r3, [pc, #200]	; (800633c <prvAddCurrentTaskToDelayedList+0xd4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006278:	4b31      	ldr	r3, [pc, #196]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff f878 	bl	8005374 <uxListRemove>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800628a:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43da      	mvns	r2, r3
 8006298:	4b2a      	ldr	r3, [pc, #168]	; (8006344 <prvAddCurrentTaskToDelayedList+0xdc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4013      	ands	r3, r2
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <prvAddCurrentTaskToDelayedList+0xdc>)
 80062a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d110      	bne.n	80062cc <prvAddCurrentTaskToDelayedList+0x64>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00d      	beq.n	80062cc <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80062b0:	4b23      	ldr	r3, [pc, #140]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	211b      	movs	r1, #27
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 ffd0 	bl	800825c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4820      	ldr	r0, [pc, #128]	; (8006348 <prvAddCurrentTaskToDelayedList+0xe0>)
 80062c6:	f7fe fffa 	bl	80052be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062ca:	e032      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d20f      	bcs.n	8006304 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2104      	movs	r1, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 ffb6 	bl	800825c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f0:	4b16      	ldr	r3, [pc, #88]	; (800634c <prvAddCurrentTaskToDelayedList+0xe4>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b12      	ldr	r3, [pc, #72]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f7ff f801 	bl	8005304 <vListInsert>
}
 8006302:	e016      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8006304:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2104      	movs	r1, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f001 ffa6 	bl	800825c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe fff1 	bl	8005304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <prvAddCurrentTaskToDelayedList+0xec>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d202      	bcs.n	8006332 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <prvAddCurrentTaskToDelayedList+0xec>)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000038c 	.word	0x2000038c
 8006340:	20000288 	.word	0x20000288
 8006344:	20000390 	.word	0x20000390
 8006348:	20000374 	.word	0x20000374
 800634c:	20000344 	.word	0x20000344
 8006350:	20000340 	.word	0x20000340
 8006354:	200003a8 	.word	0x200003a8

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a08      	ldr	r2, [pc, #32]	; (80063ac <pxPortInitialiseStack+0x54>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b20      	subs	r3, #32
 800639e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	080063b1 	.word	0x080063b1

080063b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <prvTaskExitError+0x4c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d009      	beq.n	80063d8 <prvTaskExitError+0x28>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e7fe      	b.n	80063d6 <prvTaskExitError+0x26>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ea:	bf00      	nop
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0fc      	beq.n	80063ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	20000010 	.word	0x20000010

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	f04e 0e0d 	orr.w	lr, lr, #13
 800641e:	4770      	bx	lr

08006420 <pxCurrentTCBConst2>:
 8006420:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006428:	4806      	ldr	r0, [pc, #24]	; (8006444 <prvPortStartFirstTask+0x1c>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	b662      	cpsie	i
 8006434:	b661      	cpsie	f
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	df00      	svc	0
 8006440:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006442:	bf00      	nop
 8006444:	e000ed08 	.word	0xe000ed08

08006448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <xPortStartScheduler+0xcc>)
 8006450:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006470:	b2da      	uxtb	r2, r3
 8006472:	4b29      	ldr	r3, [pc, #164]	; (8006518 <xPortStartScheduler+0xd0>)
 8006474:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006476:	4b29      	ldr	r3, [pc, #164]	; (800651c <xPortStartScheduler+0xd4>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800647c:	e009      	b.n	8006492 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <xPortStartScheduler+0xd4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3b01      	subs	r3, #1
 8006484:	4a25      	ldr	r2, [pc, #148]	; (800651c <xPortStartScheduler+0xd4>)
 8006486:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d0ef      	beq.n	800647e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800649e:	4b1f      	ldr	r3, [pc, #124]	; (800651c <xPortStartScheduler+0xd4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1c3 0307 	rsb	r3, r3, #7
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d009      	beq.n	80064be <xPortStartScheduler+0x76>
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	e7fe      	b.n	80064bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064be:	4b17      	ldr	r3, [pc, #92]	; (800651c <xPortStartScheduler+0xd4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	4a15      	ldr	r2, [pc, #84]	; (800651c <xPortStartScheduler+0xd4>)
 80064c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064c8:	4b14      	ldr	r3, [pc, #80]	; (800651c <xPortStartScheduler+0xd4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d0:	4a12      	ldr	r2, [pc, #72]	; (800651c <xPortStartScheduler+0xd4>)
 80064d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <xPortStartScheduler+0xd8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <xPortStartScheduler+0xd8>)
 80064e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064e8:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <xPortStartScheduler+0xd8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <xPortStartScheduler+0xd8>)
 80064ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064f4:	f000 f910 	bl	8006718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <xPortStartScheduler+0xdc>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064fe:	f7ff ff93 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006502:	f7ff fd0d 	bl	8005f20 <vTaskSwitchContext>
	prvTaskExitError();
 8006506:	f7ff ff53 	bl	80063b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	e000e400 	.word	0xe000e400
 8006518:	200003b4 	.word	0x200003b4
 800651c:	200003b8 	.word	0x200003b8
 8006520:	e000ed20 	.word	0xe000ed20
 8006524:	20000010 	.word	0x20000010

08006528 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800652e:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <vInitPrioGroupValue+0xa0>)
 8006530:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	22ff      	movs	r2, #255	; 0xff
 800653e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <vInitPrioGroupValue+0xa4>)
 8006554:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006556:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800655c:	e009      	b.n	8006572 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800655e:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 8006566:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d0ef      	beq.n	800655e <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1c3 0307 	rsb	r3, r3, #7
 8006586:	2b04      	cmp	r3, #4
 8006588:	d009      	beq.n	800659e <vInitPrioGroupValue+0x76>
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	e7fe      	b.n	800659c <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 80065a6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b0:	4a07      	ldr	r2, [pc, #28]	; (80065d0 <vInitPrioGroupValue+0xa8>)
 80065b2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000e400 	.word	0xe000e400
 80065cc:	200003b4 	.word	0x200003b4
 80065d0:	200003b8 	.word	0x200003b8

080065d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <vPortEnterCritical+0x54>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <vPortEnterCritical+0x54>)
 80065f4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <vPortEnterCritical+0x54>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10e      	bne.n	800661c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <vPortEnterCritical+0x58>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <vPortEnterCritical+0x48>
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	e7fe      	b.n	800661a <vPortEnterCritical+0x46>
	}
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000010 	.word	0x20000010
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <vPortExitCritical+0x48>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <vPortExitCritical+0x22>
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	e7fe      	b.n	8006650 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <vPortExitCritical+0x48>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a07      	ldr	r2, [pc, #28]	; (8006678 <vPortExitCritical+0x48>)
 800665a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <vPortExitCritical+0x48>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <vPortExitCritical+0x3e>
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr
 8006678:	20000010 	.word	0x20000010
 800667c:	00000000 	.word	0x00000000

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006690:	6010      	str	r0, [r2, #0]
 8006692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006696:	f04f 0050 	mov.w	r0, #80	; 0x50
 800669a:	f380 8811 	msr	BASEPRI, r0
 800669e:	f7ff fc3f 	bl	8005f20 <vTaskSwitchContext>
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066b6:	f380 8809 	msr	PSP, r0
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	4770      	bx	lr

080066c0 <pxCurrentTCBConst>:
 80066c0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80066e0:	f001 fc60 	bl	8007fa4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e4:	f7ff fb5c 	bl	8005da0 <xTaskIncrementTick>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d006      	beq.n	80066fc <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80066ee:	f001 fcb7 	bl	8008060 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <SysTick_Handler+0x4c>)
 80066f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e001      	b.n	8006700 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 80066fc:	f001 fc94 	bl	8008028 <SEGGER_SYSVIEW_RecordExitISR>
 8006700:	2300      	movs	r3, #0
 8006702:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x30>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <vPortSetupTimerInterrupt+0x38>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <vPortSetupTimerInterrupt+0x40>)
 8006736:	3b01      	subs	r3, #1
 8006738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673a:	4b03      	ldr	r3, [pc, #12]	; (8006748 <vPortSetupTimerInterrupt+0x30>)
 800673c:	2207      	movs	r2, #7
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	e000e010 	.word	0xe000e010
 800674c:	e000e018 	.word	0xe000e018
 8006750:	20000004 	.word	0x20000004
 8006754:	10624dd3 	.word	0x10624dd3
 8006758:	e000e014 	.word	0xe000e014

0800675c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006762:	f3ef 8305 	mrs	r3, IPSR
 8006766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d913      	bls.n	8006796 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800676e:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <vPortValidateInterruptPriority+0x68>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006778:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <vPortValidateInterruptPriority+0x6c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	7afa      	ldrb	r2, [r7, #11]
 800677e:	429a      	cmp	r2, r3
 8006780:	d209      	bcs.n	8006796 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	e7fe      	b.n	8006794 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <vPortValidateInterruptPriority+0x70>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <vPortValidateInterruptPriority+0x74>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d909      	bls.n	80067ba <vPortValidateInterruptPriority+0x5e>
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	e7fe      	b.n	80067b8 <vPortValidateInterruptPriority+0x5c>
	}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	e000e3f0 	.word	0xe000e3f0
 80067c8:	200003b4 	.word	0x200003b4
 80067cc:	e000ed0c 	.word	0xe000ed0c
 80067d0:	200003b8 	.word	0x200003b8

080067d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067e0:	f7ff fa10 	bl	8005c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067e4:	4b57      	ldr	r3, [pc, #348]	; (8006944 <pvPortMalloc+0x170>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067ec:	f000 f90c 	bl	8006a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067f0:	4b55      	ldr	r3, [pc, #340]	; (8006948 <pvPortMalloc+0x174>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 808c 	bne.w	8006916 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01c      	beq.n	800683e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006804:	2208      	movs	r2, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	2b00      	cmp	r3, #0
 8006814:	d013      	beq.n	800683e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f023 0307 	bic.w	r3, r3, #7
 800681c:	3308      	adds	r3, #8
 800681e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <pvPortMalloc+0x6a>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e7fe      	b.n	800683c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d068      	beq.n	8006916 <pvPortMalloc+0x142>
 8006844:	4b41      	ldr	r3, [pc, #260]	; (800694c <pvPortMalloc+0x178>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d863      	bhi.n	8006916 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800684e:	4b40      	ldr	r3, [pc, #256]	; (8006950 <pvPortMalloc+0x17c>)
 8006850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006852:	4b3f      	ldr	r3, [pc, #252]	; (8006950 <pvPortMalloc+0x17c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006858:	e004      	b.n	8006864 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d903      	bls.n	8006876 <pvPortMalloc+0xa2>
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f1      	bne.n	800685a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006876:	4b33      	ldr	r3, [pc, #204]	; (8006944 <pvPortMalloc+0x170>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	429a      	cmp	r2, r3
 800687e:	d04a      	beq.n	8006916 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	4413      	add	r3, r2
 8006888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	2308      	movs	r3, #8
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d91e      	bls.n	80068e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <pvPortMalloc+0xf4>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	e7fe      	b.n	80068c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068da:	69b8      	ldr	r0, [r7, #24]
 80068dc:	f000 f8f6 	bl	8006acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <pvPortMalloc+0x178>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	4a18      	ldr	r2, [pc, #96]	; (800694c <pvPortMalloc+0x178>)
 80068ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ee:	4b17      	ldr	r3, [pc, #92]	; (800694c <pvPortMalloc+0x178>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <pvPortMalloc+0x180>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d203      	bcs.n	8006902 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <pvPortMalloc+0x178>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <pvPortMalloc+0x180>)
 8006900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <pvPortMalloc+0x174>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	431a      	orrs	r2, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006916:	f7ff f983 	bl	8005c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <pvPortMalloc+0x164>
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e7fe      	b.n	8006936 <pvPortMalloc+0x162>
	return pvReturn;
 8006938:	69fb      	ldr	r3, [r7, #28]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3728      	adds	r7, #40	; 0x28
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20002bc4 	.word	0x20002bc4
 8006948:	20002bd0 	.word	0x20002bd0
 800694c:	20002bc8 	.word	0x20002bc8
 8006950:	20002bbc 	.word	0x20002bbc
 8006954:	20002bcc 	.word	0x20002bcc

08006958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d046      	beq.n	80069f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800696a:	2308      	movs	r3, #8
 800696c:	425b      	negs	r3, r3
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <vPortFree+0xa8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <vPortFree+0x42>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e7fe      	b.n	8006998 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <vPortFree+0x5e>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	e7fe      	b.n	80069b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <vPortFree+0xa8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d019      	beq.n	80069f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d115      	bne.n	80069f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortFree+0xa8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069dc:	f7ff f912 	bl	8005c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b07      	ldr	r3, [pc, #28]	; (8006a04 <vPortFree+0xac>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	4a06      	ldr	r2, [pc, #24]	; (8006a04 <vPortFree+0xac>)
 80069ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ee:	6938      	ldr	r0, [r7, #16]
 80069f0:	f000 f86c 	bl	8006acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069f4:	f7ff f914 	bl	8005c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20002bd0 	.word	0x20002bd0
 8006a04:	20002bc8 	.word	0x20002bc8

08006a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a14:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <prvHeapInit+0xac>)
 8006a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3307      	adds	r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0307 	bic.w	r3, r3, #7
 8006a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <prvHeapInit+0xac>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <prvHeapInit+0xb0>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a46:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <prvHeapInit+0xb0>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a54:	2208      	movs	r2, #8
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a15      	ldr	r2, [pc, #84]	; (8006abc <prvHeapInit+0xb4>)
 8006a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <prvHeapInit+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a72:	4b12      	ldr	r3, [pc, #72]	; (8006abc <prvHeapInit+0xb4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <prvHeapInit+0xb4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <prvHeapInit+0xb8>)
 8006a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <prvHeapInit+0xbc>)
 8006a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <prvHeapInit+0xc0>)
 8006aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aa6:	601a      	str	r2, [r3, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	200003bc 	.word	0x200003bc
 8006ab8:	20002bbc 	.word	0x20002bbc
 8006abc:	20002bc4 	.word	0x20002bc4
 8006ac0:	20002bcc 	.word	0x20002bcc
 8006ac4:	20002bc8 	.word	0x20002bc8
 8006ac8:	20002bd0 	.word	0x20002bd0

08006acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ad4:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <prvInsertBlockIntoFreeList+0xa8>)
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e002      	b.n	8006ae0 <prvInsertBlockIntoFreeList+0x14>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d8f7      	bhi.n	8006ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d108      	bne.n	8006b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d118      	bne.n	8006b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <prvInsertBlockIntoFreeList+0xac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d00d      	beq.n	8006b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	441a      	add	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e008      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <prvInsertBlockIntoFreeList+0xac>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e003      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d002      	beq.n	8006b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	20002bbc 	.word	0x20002bbc
 8006b78:	20002bc4 	.word	0x20002bc4

08006b7c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006b80:	4803      	ldr	r0, [pc, #12]	; (8006b90 <_cbSendSystemDesc+0x14>)
 8006b82:	f001 f9bb 	bl	8007efc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006b86:	4803      	ldr	r0, [pc, #12]	; (8006b94 <_cbSendSystemDesc+0x18>)
 8006b88:	f001 f9b8 	bl	8007efc <SEGGER_SYSVIEW_SendSysDesc>
}
 8006b8c:	bf00      	nop
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	080086b4 	.word	0x080086b4
 8006b94:	080086e4 	.word	0x080086e4

08006b98 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <SEGGER_SYSVIEW_Conf+0x24>)
 8006ba6:	4a06      	ldr	r2, [pc, #24]	; (8006bc0 <SEGGER_SYSVIEW_Conf+0x28>)
 8006ba8:	f000 fdba 	bl	8007720 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006bac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006bb0:	f000 fdfa 	bl	80077a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006bb4:	bf00      	nop
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000004 	.word	0x20000004
 8006bbc:	08006b7d 	.word	0x08006b7d
 8006bc0:	08008784 	.word	0x08008784

08006bc4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e034      	b.n	8006c3a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006bd0:	491e      	ldr	r1, [pc, #120]	; (8006c4c <_cbSendTaskList+0x88>)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	491a      	ldr	r1, [pc, #104]	; (8006c4c <_cbSendTaskList+0x88>)
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3304      	adds	r3, #4
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	4916      	ldr	r1, [pc, #88]	; (8006c4c <_cbSendTaskList+0x88>)
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	3308      	adds	r3, #8
 8006c02:	681d      	ldr	r5, [r3, #0]
 8006c04:	4911      	ldr	r1, [pc, #68]	; (8006c4c <_cbSendTaskList+0x88>)
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	330c      	adds	r3, #12
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	490d      	ldr	r1, [pc, #52]	; (8006c4c <_cbSendTaskList+0x88>)
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3310      	adds	r3, #16
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	4621      	mov	r1, r4
 8006c30:	f000 f970 	bl	8006f14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <_cbSendTaskList+0x8c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d3c5      	bcc.n	8006bd0 <_cbSendTaskList+0xc>
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4c:	20002bd4 	.word	0x20002bd4
 8006c50:	20002c74 	.word	0x20002c74

08006c54 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006c5a:	f7ff f88f 	bl	8005d7c <xTaskGetTickCountFromISR>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006c68:	e9d7 5600 	ldrd	r5, r6, [r7]
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	4634      	mov	r4, r6
 8006c70:	f04f 0100 	mov.w	r1, #0
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	0162      	lsls	r2, r4, #5
 8006c7a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006c7e:	0159      	lsls	r1, r3, #5
 8006c80:	460b      	mov	r3, r1
 8006c82:	4614      	mov	r4, r2
 8006c84:	1b5b      	subs	r3, r3, r5
 8006c86:	eb64 0406 	sbc.w	r4, r4, r6
 8006c8a:	f04f 0100 	mov.w	r1, #0
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	00a2      	lsls	r2, r4, #2
 8006c94:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006c98:	0099      	lsls	r1, r3, #2
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	195b      	adds	r3, r3, r5
 8006ca0:	eb44 0406 	adc.w	r4, r4, r6
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	00e2      	lsls	r2, r4, #3
 8006cae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cb2:	00d9      	lsls	r1, r3, #3
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8006cbc:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ccc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006cda:	2205      	movs	r2, #5
 8006cdc:	492b      	ldr	r1, [pc, #172]	; (8006d8c <SYSVIEW_AddTask+0xc0>)
 8006cde:	68b8      	ldr	r0, [r7, #8]
 8006ce0:	f001 fc88 	bl	80085f4 <memcmp>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d04b      	beq.n	8006d82 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006cea:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b07      	cmp	r3, #7
 8006cf0:	d903      	bls.n	8006cfa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006cf2:	4828      	ldr	r0, [pc, #160]	; (8006d94 <SYSVIEW_AddTask+0xc8>)
 8006cf4:	f001 fbfe 	bl	80084f4 <SEGGER_SYSVIEW_Warn>
    return;
 8006cf8:	e044      	b.n	8006d84 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006cfa:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4926      	ldr	r1, [pc, #152]	; (8006d98 <SYSVIEW_AddTask+0xcc>)
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4921      	ldr	r1, [pc, #132]	; (8006d98 <SYSVIEW_AddTask+0xcc>)
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3304      	adds	r3, #4
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006d24:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	491b      	ldr	r1, [pc, #108]	; (8006d98 <SYSVIEW_AddTask+0xcc>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3308      	adds	r3, #8
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4916      	ldr	r1, [pc, #88]	; (8006d98 <SYSVIEW_AddTask+0xcc>)
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006d50:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4910      	ldr	r1, [pc, #64]	; (8006d98 <SYSVIEW_AddTask+0xcc>)
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	3310      	adds	r3, #16
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <SYSVIEW_AddTask+0xc4>)
 8006d6e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f8ca 	bl	8006f14 <SYSVIEW_SendTaskInfo>
 8006d80:	e000      	b.n	8006d84 <SYSVIEW_AddTask+0xb8>
    return;
 8006d82:	bf00      	nop

}
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	080086f4 	.word	0x080086f4
 8006d90:	20002c74 	.word	0x20002c74
 8006d94:	080086fc 	.word	0x080086fc
 8006d98:	20002bd4 	.word	0x20002bd4

08006d9c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8006da4:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80ab 	beq.w	8006f04 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e00d      	b.n	8006dd0 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006db4:	4956      	ldr	r1, [pc, #344]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d008      	beq.n	8006ddc <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3ec      	bcc.n	8006db4 <SYSVIEW_DeleteTask+0x18>
 8006dda:	e000      	b.n	8006dde <SYSVIEW_DeleteTask+0x42>
      break;
 8006ddc:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006dde:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d111      	bne.n	8006e0e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006df6:	4413      	add	r3, r2
 8006df8:	2214      	movs	r2, #20
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fc13 	bl	8008628 <memset>
    _NumTasks--;
 8006e02:	4b42      	ldr	r3, [pc, #264]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4a40      	ldr	r2, [pc, #256]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e07b      	b.n	8006f06 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006e0e:	4b3f      	ldr	r3, [pc, #252]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d276      	bcs.n	8006f06 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006e18:	4b3c      	ldr	r3, [pc, #240]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	1e5a      	subs	r2, r3, #1
 8006e1e:	493c      	ldr	r1, [pc, #240]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	4838      	ldr	r0, [pc, #224]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4403      	add	r3, r0
 8006e3a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006e3c:	4b33      	ldr	r3, [pc, #204]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	4933      	ldr	r1, [pc, #204]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	3304      	adds	r3, #4
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	482f      	ldr	r0, [pc, #188]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4403      	add	r3, r0
 8006e60:	3304      	adds	r3, #4
 8006e62:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006e64:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	4929      	ldr	r1, [pc, #164]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	3308      	adds	r3, #8
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	4825      	ldr	r0, [pc, #148]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4403      	add	r3, r0
 8006e88:	3308      	adds	r3, #8
 8006e8a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006e8c:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1e5a      	subs	r2, r3, #1
 8006e92:	491f      	ldr	r1, [pc, #124]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	481b      	ldr	r0, [pc, #108]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4403      	add	r3, r0
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006eb4:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	1e5a      	subs	r2, r3, #1
 8006eba:	4915      	ldr	r1, [pc, #84]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3310      	adds	r3, #16
 8006ec8:	6819      	ldr	r1, [r3, #0]
 8006eca:	4811      	ldr	r0, [pc, #68]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4403      	add	r3, r0
 8006ed8:	3310      	adds	r3, #16
 8006eda:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <SYSVIEW_DeleteTask+0x174>)
 8006eec:	4413      	add	r3, r2
 8006eee:	2214      	movs	r2, #20
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fb98 	bl	8008628 <memset>
    _NumTasks--;
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <SYSVIEW_DeleteTask+0x170>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e000      	b.n	8006f06 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006f04:	bf00      	nop
  }
}
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20002c74 	.word	0x20002c74
 8006f10:	20002bd4 	.word	0x20002bd4

08006f14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	2214      	movs	r2, #20
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fb7c 	bl	8008628 <memset>
  TaskInfo.TaskID     = TaskID;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f44:	f107 0314 	add.w	r3, r7, #20
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fedf 	bl	8007d0c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f4e:	bf00      	nop
 8006f50:	3728      	adds	r7, #40	; 0x28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006f5e:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <_DoInit+0x8c>)
 8006f60:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2203      	movs	r2, #3
 8006f66:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <_DoInit+0x90>)
 8006f72:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	; (8006fec <_DoInit+0x94>)
 8006f78:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f80:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <_DoInit+0x90>)
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <_DoInit+0x98>)
 8006f9e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3307      	adds	r3, #7
 8006fbc:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <_DoInit+0x9c>)
 8006fbe:	6810      	ldr	r0, [r2, #0]
 8006fc0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <_DoInit+0xa0>)
 8006fc6:	6810      	ldr	r0, [r2, #0]
 8006fc8:	6018      	str	r0, [r3, #0]
 8006fca:	8891      	ldrh	r1, [r2, #4]
 8006fcc:	7992      	ldrb	r2, [r2, #6]
 8006fce:	8099      	strh	r1, [r3, #4]
 8006fd0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2000405c 	.word	0x2000405c
 8006fe8:	0800874c 	.word	0x0800874c
 8006fec:	20002c78 	.word	0x20002c78
 8006ff0:	20003078 	.word	0x20003078
 8006ff4:	08008758 	.word	0x08008758
 8006ff8:	0800875c 	.word	0x0800875c

08006ffc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007008:	4b3e      	ldr	r3, [pc, #248]	; (8007104 <SEGGER_RTT_ReadNoLock+0x108>)
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <SEGGER_RTT_ReadNoLock+0x1e>
 8007016:	f7ff ff9f 	bl	8006f58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	3360      	adds	r3, #96	; 0x60
 8007026:	4a37      	ldr	r2, [pc, #220]	; (8007104 <SEGGER_RTT_ReadNoLock+0x108>)
 8007028:	4413      	add	r3, r2
 800702a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800703c:	2300      	movs	r3, #0
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	429a      	cmp	r2, r3
 8007046:	d92b      	bls.n	80070a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4293      	cmp	r3, r2
 8007058:	bf28      	it	cs
 800705a:	4613      	movcs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	4413      	add	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	6939      	ldr	r1, [r7, #16]
 800706c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800706e:	f001 fad0 	bl	8008612 <memcpy>
    NumBytesRead += NumBytesRem;
 8007072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800707a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800708a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007098:	429a      	cmp	r2, r3
 800709a:	d101      	bne.n	80070a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800709c:	2300      	movs	r3, #0
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bf28      	it	cs
 80070b0:	4613      	movcs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d019      	beq.n	80070ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	4413      	add	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	6939      	ldr	r1, [r7, #16]
 80070c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ca:	f001 faa2 	bl	8008612 <memcpy>
    NumBytesRead += NumBytesRem;
 80070ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4413      	add	r3, r2
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80070d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4413      	add	r3, r2
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80070e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	2000405c 	.word	0x2000405c

08007108 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007116:	4b3c      	ldr	r3, [pc, #240]	; (8007208 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007124:	f7ff ff18 	bl	8006f58 <_DoInit>
  SEGGER_RTT_LOCK();
 8007128:	f3ef 8311 	mrs	r3, BASEPRI
 800712c:	f04f 0120 	mov.w	r1, #32
 8007130:	f381 8811 	msr	BASEPRI, r1
 8007134:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007136:	4b34      	ldr	r3, [pc, #208]	; (8007208 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8007138:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800713e:	6939      	ldr	r1, [r7, #16]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	4613      	mov	r3, r2
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	4413      	add	r3, r2
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	440b      	add	r3, r1
 800714e:	3304      	adds	r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3301      	adds	r3, #1
 800715a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	429a      	cmp	r2, r3
 8007164:	dbeb      	blt.n	800713e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007166:	e000      	b.n	800716a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007168:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	429a      	cmp	r2, r3
 8007172:	da3d      	bge.n	80071f0 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007174:	6939      	ldr	r1, [r7, #16]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	440b      	add	r3, r1
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007188:	6939      	ldr	r1, [r7, #16]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	440b      	add	r3, r1
 8007198:	3304      	adds	r3, #4
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800719e:	6939      	ldr	r1, [r7, #16]
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	440b      	add	r3, r1
 80071ac:	3320      	adds	r3, #32
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80071b2:	6939      	ldr	r1, [r7, #16]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	4613      	mov	r3, r2
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	4413      	add	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	440b      	add	r3, r1
 80071c0:	3328      	adds	r3, #40	; 0x28
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80071c6:	6939      	ldr	r1, [r7, #16]
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	4613      	mov	r3, r2
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4413      	add	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	440b      	add	r3, r1
 80071d4:	3324      	adds	r3, #36	; 0x24
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80071da:	6939      	ldr	r1, [r7, #16]
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	440b      	add	r3, r1
 80071e8:	332c      	adds	r3, #44	; 0x2c
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80071fc:	69fb      	ldr	r3, [r7, #28]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3720      	adds	r7, #32
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2000405c 	.word	0x2000405c

0800720c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800721a:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007228:	f7ff fe96 	bl	8006f58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800722e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	461a      	mov	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4293      	cmp	r3, r2
 800723a:	d24b      	bcs.n	80072d4 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 800723c:	f3ef 8311 	mrs	r3, BASEPRI
 8007240:	f04f 0120 	mov.w	r1, #32
 8007244:	f381 8811 	msr	BASEPRI, r1
 8007248:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d031      	beq.n	80072b4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007250:	6979      	ldr	r1, [r7, #20]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	440b      	add	r3, r1
 800725e:	3360      	adds	r3, #96	; 0x60
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4613      	mov	r3, r2
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	4413      	add	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	440b      	add	r3, r1
 8007272:	3364      	adds	r3, #100	; 0x64
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007278:	6979      	ldr	r1, [r7, #20]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	440b      	add	r3, r1
 8007286:	3368      	adds	r3, #104	; 0x68
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4613      	mov	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4413      	add	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	440b      	add	r3, r1
 800729a:	3370      	adds	r3, #112	; 0x70
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4613      	mov	r3, r2
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	440b      	add	r3, r1
 80072ae:	336c      	adds	r3, #108	; 0x6c
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4613      	mov	r3, r2
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	4413      	add	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	440b      	add	r3, r1
 80072c2:	3374      	adds	r3, #116	; 0x74
 80072c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
 80072d2:	e002      	b.n	80072da <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80072da:	69fb      	ldr	r3, [r7, #28]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2000405c 	.word	0x2000405c

080072e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80072f8:	e002      	b.n	8007300 <_EncodeStr+0x18>
    Len++;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f6      	bne.n	80072fa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d901      	bls.n	8007318 <_EncodeStr+0x30>
    Len = Limit;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2bfe      	cmp	r3, #254	; 0xfe
 800731c:	d806      	bhi.n	800732c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	60fa      	str	r2, [r7, #12]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e011      	b.n	8007350 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	60fa      	str	r2, [r7, #12]
 8007332:	22ff      	movs	r2, #255	; 0xff
 8007334:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	60fa      	str	r2, [r7, #12]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	0a19      	lsrs	r1, r3, #8
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	60fa      	str	r2, [r7, #12]
 800734c:	b2ca      	uxtb	r2, r1
 800734e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007354:	e00a      	b.n	800736c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	1c53      	adds	r3, r2, #1
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	60f9      	str	r1, [r7, #12]
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	701a      	strb	r2, [r3, #0]
    n++;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3301      	adds	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	d3f0      	bcc.n	8007356 <_EncodeStr+0x6e>
  }
  return pPayload;
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr
	...

08007398 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800739e:	4b33      	ldr	r3, [pc, #204]	; (800746c <_HandleIncomingPacket+0xd4>)
 80073a0:	7e1b      	ldrb	r3, [r3, #24]
 80073a2:	4618      	mov	r0, r3
 80073a4:	1cfb      	adds	r3, r7, #3
 80073a6:	2201      	movs	r2, #1
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7ff fe27 	bl	8006ffc <SEGGER_RTT_ReadNoLock>
 80073ae:	4603      	mov	r3, r0
 80073b0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd4d      	ble.n	8007454 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d022      	beq.n	8007404 <_HandleIncomingPacket+0x6c>
 80073be:	2b05      	cmp	r3, #5
 80073c0:	dc0b      	bgt.n	80073da <_HandleIncomingPacket+0x42>
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d015      	beq.n	80073f2 <_HandleIncomingPacket+0x5a>
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	dc02      	bgt.n	80073d0 <_HandleIncomingPacket+0x38>
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d00e      	beq.n	80073ec <_HandleIncomingPacket+0x54>
 80073ce:	e034      	b.n	800743a <_HandleIncomingPacket+0xa2>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d011      	beq.n	80073f8 <_HandleIncomingPacket+0x60>
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d012      	beq.n	80073fe <_HandleIncomingPacket+0x66>
 80073d8:	e02f      	b.n	800743a <_HandleIncomingPacket+0xa2>
 80073da:	2b07      	cmp	r3, #7
 80073dc:	d018      	beq.n	8007410 <_HandleIncomingPacket+0x78>
 80073de:	2b07      	cmp	r3, #7
 80073e0:	db13      	blt.n	800740a <_HandleIncomingPacket+0x72>
 80073e2:	2b7f      	cmp	r3, #127	; 0x7f
 80073e4:	d038      	beq.n	8007458 <_HandleIncomingPacket+0xc0>
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d015      	beq.n	8007416 <_HandleIncomingPacket+0x7e>
 80073ea:	e026      	b.n	800743a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80073ec:	f000 fb14 	bl	8007a18 <SEGGER_SYSVIEW_Start>
      break;
 80073f0:	e037      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80073f2:	f000 fbcb 	bl	8007b8c <SEGGER_SYSVIEW_Stop>
      break;
 80073f6:	e034      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80073f8:	f000 fda4 	bl	8007f44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80073fc:	e031      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80073fe:	f000 fd69 	bl	8007ed4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007402:	e02e      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007404:	f000 fbe8 	bl	8007bd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007408:	e02b      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800740a:	f001 f835 	bl	8008478 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800740e:	e028      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007410:	f001 f814 	bl	800843c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007414:	e025      	b.n	8007462 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <_HandleIncomingPacket+0xd4>)
 8007418:	7e1b      	ldrb	r3, [r3, #24]
 800741a:	4618      	mov	r0, r3
 800741c:	1cfb      	adds	r3, r7, #3
 800741e:	2201      	movs	r2, #1
 8007420:	4619      	mov	r1, r3
 8007422:	f7ff fdeb 	bl	8006ffc <SEGGER_RTT_ReadNoLock>
 8007426:	4603      	mov	r3, r0
 8007428:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	dd15      	ble.n	800745c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 ff82 	bl	800833c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007438:	e010      	b.n	800745c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	da0e      	bge.n	8007460 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <_HandleIncomingPacket+0xd4>)
 8007444:	7e1b      	ldrb	r3, [r3, #24]
 8007446:	4618      	mov	r0, r3
 8007448:	1cfb      	adds	r3, r7, #3
 800744a:	2201      	movs	r2, #1
 800744c:	4619      	mov	r1, r3
 800744e:	f7ff fdd5 	bl	8006ffc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007452:	e005      	b.n	8007460 <_HandleIncomingPacket+0xc8>
    }
  }
 8007454:	bf00      	nop
 8007456:	e004      	b.n	8007462 <_HandleIncomingPacket+0xca>
      break;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <_HandleIncomingPacket+0xca>
      break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <_HandleIncomingPacket+0xca>
      break;
 8007460:	bf00      	nop
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20003c90 	.word	0x20003c90

08007470 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	; 0x30
 8007474:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007476:	2301      	movs	r3, #1
 8007478:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	3301      	adds	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007484:	4b31      	ldr	r3, [pc, #196]	; (800754c <_TrySendOverflowPacket+0xdc>)
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	62bb      	str	r3, [r7, #40]	; 0x28
 800748a:	e00b      	b.n	80074a4 <_TrySendOverflowPacket+0x34>
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	b2da      	uxtb	r2, r3
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	1c59      	adds	r1, r3, #1
 8007494:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	09db      	lsrs	r3, r3, #7
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b7f      	cmp	r3, #127	; 0x7f
 80074a8:	d8f0      	bhi.n	800748c <_TrySendOverflowPacket+0x1c>
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80074ba:	4b25      	ldr	r3, [pc, #148]	; (8007550 <_TrySendOverflowPacket+0xe0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80074c0:	4b22      	ldr	r3, [pc, #136]	; (800754c <_TrySendOverflowPacket+0xdc>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	623b      	str	r3, [r7, #32]
 80074d2:	e00b      	b.n	80074ec <_TrySendOverflowPacket+0x7c>
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	6279      	str	r1, [r7, #36]	; 0x24
 80074de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	09db      	lsrs	r3, r3, #7
 80074ea:	623b      	str	r3, [r7, #32]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b7f      	cmp	r3, #127	; 0x7f
 80074f0:	d8f0      	bhi.n	80074d4 <_TrySendOverflowPacket+0x64>
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	627a      	str	r2, [r7, #36]	; 0x24
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <_TrySendOverflowPacket+0xdc>)
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	4618      	mov	r0, r3
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	461a      	mov	r2, r3
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	4619      	mov	r1, r3
 8007514:	f7f8 fe1c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007518:	4603      	mov	r3, r0
 800751a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <_TrySendOverflowPacket+0xdc>)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007528:	4b08      	ldr	r3, [pc, #32]	; (800754c <_TrySendOverflowPacket+0xdc>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	3b01      	subs	r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <_TrySendOverflowPacket+0xdc>)
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e004      	b.n	8007540 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <_TrySendOverflowPacket+0xdc>)
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	3301      	adds	r3, #1
 800753c:	4a03      	ldr	r2, [pc, #12]	; (800754c <_TrySendOverflowPacket+0xdc>)
 800753e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007540:	693b      	ldr	r3, [r7, #16]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3730      	adds	r7, #48	; 0x30
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20003c90 	.word	0x20003c90
 8007550:	e0001004 	.word	0xe0001004

08007554 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007560:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <_SendPacket+0x1c0>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d010      	beq.n	800758a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007568:	4b6a      	ldr	r3, [pc, #424]	; (8007714 <_SendPacket+0x1c0>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80a3 	beq.w	80076b8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007572:	4b68      	ldr	r3, [pc, #416]	; (8007714 <_SendPacket+0x1c0>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d109      	bne.n	800758e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800757a:	f7ff ff79 	bl	8007470 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800757e:	4b65      	ldr	r3, [pc, #404]	; (8007714 <_SendPacket+0x1c0>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b01      	cmp	r3, #1
 8007584:	f040 809a 	bne.w	80076bc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007588:	e001      	b.n	800758e <_SendPacket+0x3a>
    goto Send;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <_SendPacket+0x3c>
Send:
 800758e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b1f      	cmp	r3, #31
 8007594:	d809      	bhi.n	80075aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007596:	4b5f      	ldr	r3, [pc, #380]	; (8007714 <_SendPacket+0x1c0>)
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 808b 	bne.w	80076c0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b17      	cmp	r3, #23
 80075ae:	d807      	bhi.n	80075c0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e03d      	b.n	800763c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d912      	bls.n	80075f4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	09da      	lsrs	r2, r3, #7
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	3a01      	subs	r2, #1
 80075e6:	60fa      	str	r2, [r7, #12]
 80075e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e006      	b.n	8007602 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b7f      	cmp	r3, #127	; 0x7f
 8007606:	d912      	bls.n	800762e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	09da      	lsrs	r2, r3, #7
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3b01      	subs	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	3a01      	subs	r2, #1
 8007620:	60fa      	str	r2, [r7, #12]
 8007622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e006      	b.n	800763c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b01      	subs	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	b2da      	uxtb	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <_SendPacket+0x1c4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007642:	4b34      	ldr	r3, [pc, #208]	; (8007714 <_SendPacket+0x1c0>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	623b      	str	r3, [r7, #32]
 8007654:	e00b      	b.n	800766e <_SendPacket+0x11a>
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	6279      	str	r1, [r7, #36]	; 0x24
 8007660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	09db      	lsrs	r3, r3, #7
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b7f      	cmp	r3, #127	; 0x7f
 8007672:	d8f0      	bhi.n	8007656 <_SendPacket+0x102>
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	627a      	str	r2, [r7, #36]	; 0x24
 800767a:	6a3a      	ldr	r2, [r7, #32]
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007684:	4b23      	ldr	r3, [pc, #140]	; (8007714 <_SendPacket+0x1c0>)
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	4618      	mov	r0, r3
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	461a      	mov	r2, r3
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	f7f8 fd5c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007698:	4603      	mov	r3, r0
 800769a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80076a2:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <_SendPacket+0x1c0>)
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	60d3      	str	r3, [r2, #12]
 80076a8:	e00b      	b.n	80076c2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80076aa:	4b1a      	ldr	r3, [pc, #104]	; (8007714 <_SendPacket+0x1c0>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	4b18      	ldr	r3, [pc, #96]	; (8007714 <_SendPacket+0x1c0>)
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e004      	b.n	80076c2 <_SendPacket+0x16e>
    goto SendDone;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <_SendPacket+0x16e>
      goto SendDone;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <_SendPacket+0x16e>
      goto SendDone;
 80076c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <_SendPacket+0x1c0>)
 80076c4:	7e1b      	ldrb	r3, [r3, #24]
 80076c6:	4619      	mov	r1, r3
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <_SendPacket+0x1c8>)
 80076ca:	460b      	mov	r3, r1
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	440b      	add	r3, r1
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	336c      	adds	r3, #108	; 0x6c
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <_SendPacket+0x1c0>)
 80076da:	7e1b      	ldrb	r3, [r3, #24]
 80076dc:	4618      	mov	r0, r3
 80076de:	490f      	ldr	r1, [pc, #60]	; (800771c <_SendPacket+0x1c8>)
 80076e0:	4603      	mov	r3, r0
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	4403      	add	r3, r0
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	440b      	add	r3, r1
 80076ea:	3370      	adds	r3, #112	; 0x70
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d00b      	beq.n	800770a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <_SendPacket+0x1c0>)
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d107      	bne.n	800770a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <_SendPacket+0x1c0>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007700:	f7ff fe4a 	bl	8007398 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <_SendPacket+0x1c0>)
 8007706:	2200      	movs	r2, #0
 8007708:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800770a:	bf00      	nop
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20003c90 	.word	0x20003c90
 8007718:	e0001004 	.word	0xe0001004
 800771c:	2000405c 	.word	0x2000405c

08007720 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af02      	add	r7, sp, #8
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800772e:	2300      	movs	r3, #0
 8007730:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007734:	4917      	ldr	r1, [pc, #92]	; (8007794 <SEGGER_SYSVIEW_Init+0x74>)
 8007736:	4818      	ldr	r0, [pc, #96]	; (8007798 <SEGGER_SYSVIEW_Init+0x78>)
 8007738:	f7ff fce6 	bl	8007108 <SEGGER_RTT_AllocUpBuffer>
 800773c:	4603      	mov	r3, r0
 800773e:	b2da      	uxtb	r2, r3
 8007740:	4b16      	ldr	r3, [pc, #88]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007742:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007746:	785a      	ldrb	r2, [r3, #1]
 8007748:	4b14      	ldr	r3, [pc, #80]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 800774a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800774c:	4b13      	ldr	r3, [pc, #76]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 800774e:	7e1b      	ldrb	r3, [r3, #24]
 8007750:	4618      	mov	r0, r3
 8007752:	2300      	movs	r3, #0
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	2308      	movs	r3, #8
 8007758:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <SEGGER_SYSVIEW_Init+0x80>)
 800775a:	490f      	ldr	r1, [pc, #60]	; (8007798 <SEGGER_SYSVIEW_Init+0x78>)
 800775c:	f7ff fd56 	bl	800720c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <SEGGER_SYSVIEW_Init+0x84>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a0c      	ldr	r2, [pc, #48]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 800776c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800776e:	4a0b      	ldr	r2, [pc, #44]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800777a:	4a08      	ldr	r2, [pc, #32]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007780:	4a06      	ldr	r2, [pc, #24]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <SEGGER_SYSVIEW_Init+0x7c>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20003088 	.word	0x20003088
 8007798:	08008764 	.word	0x08008764
 800779c:	20003c90 	.word	0x20003c90
 80077a0:	20003c88 	.word	0x20003c88
 80077a4:	e0001004 	.word	0xe0001004

080077a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80077b0:	4a03      	ldr	r2, [pc, #12]	; (80077c0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6113      	str	r3, [r2, #16]
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	20003c90 	.word	0x20003c90

080077c4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077cc:	f3ef 8311 	mrs	r3, BASEPRI
 80077d0:	f04f 0120 	mov.w	r1, #32
 80077d4:	f381 8811 	msr	BASEPRI, r1
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	4808      	ldr	r0, [pc, #32]	; (80077fc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80077dc:	f7ff fdd0 	bl	8007380 <_PreparePacket>
 80077e0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68b8      	ldr	r0, [r7, #8]
 80077e8:	f7ff feb4 	bl	8007554 <_SendPacket>
  RECORD_END();
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f383 8811 	msr	BASEPRI, r3
}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20003cc0 	.word	0x20003cc0

08007800 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800780a:	f3ef 8311 	mrs	r3, BASEPRI
 800780e:	f04f 0120 	mov.w	r1, #32
 8007812:	f381 8811 	msr	BASEPRI, r1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	4816      	ldr	r0, [pc, #88]	; (8007874 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800781a:	f7ff fdb1 	bl	8007380 <_PreparePacket>
 800781e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	e00b      	b.n	8007846 <SEGGER_SYSVIEW_RecordU32+0x46>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	1c59      	adds	r1, r3, #1
 8007836:	61f9      	str	r1, [r7, #28]
 8007838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	09db      	lsrs	r3, r3, #7
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b7f      	cmp	r3, #127	; 0x7f
 800784a:	d8f0      	bhi.n	800782e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	61fa      	str	r2, [r7, #28]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	701a      	strb	r2, [r3, #0]
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6938      	ldr	r0, [r7, #16]
 8007862:	f7ff fe77 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f383 8811 	msr	BASEPRI, r3
}
 800786c:	bf00      	nop
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20003cc0 	.word	0x20003cc0

08007878 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b08c      	sub	sp, #48	; 0x30
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007884:	f3ef 8311 	mrs	r3, BASEPRI
 8007888:	f04f 0120 	mov.w	r1, #32
 800788c:	f381 8811 	msr	BASEPRI, r1
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	4825      	ldr	r0, [pc, #148]	; (8007928 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007894:	f7ff fd74 	bl	8007380 <_PreparePacket>
 8007898:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a6:	e00b      	b.n	80078c0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	1c59      	adds	r1, r3, #1
 80078b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	09db      	lsrs	r3, r3, #7
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b7f      	cmp	r3, #127	; 0x7f
 80078c4:	d8f0      	bhi.n	80078a8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	e00b      	b.n	80078f8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	1c59      	adds	r1, r3, #1
 80078e8:	6279      	str	r1, [r7, #36]	; 0x24
 80078ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	09db      	lsrs	r3, r3, #7
 80078f6:	623b      	str	r3, [r7, #32]
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	2b7f      	cmp	r3, #127	; 0x7f
 80078fc:	d8f0      	bhi.n	80078e0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	627a      	str	r2, [r7, #36]	; 0x24
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	f7ff fe1e 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f383 8811 	msr	BASEPRI, r3
}
 800791e:	bf00      	nop
 8007920:	3730      	adds	r7, #48	; 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20003cc0 	.word	0x20003cc0

0800792c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	; 0x38
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800793a:	f3ef 8311 	mrs	r3, BASEPRI
 800793e:	f04f 0120 	mov.w	r1, #32
 8007942:	f381 8811 	msr	BASEPRI, r1
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	4832      	ldr	r0, [pc, #200]	; (8007a14 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800794a:	f7ff fd19 	bl	8007380 <_PreparePacket>
 800794e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	633b      	str	r3, [r7, #48]	; 0x30
 800795c:	e00b      	b.n	8007976 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	b2da      	uxtb	r2, r3
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	1c59      	adds	r1, r3, #1
 8007966:	6379      	str	r1, [r7, #52]	; 0x34
 8007968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	09db      	lsrs	r3, r3, #7
 8007974:	633b      	str	r3, [r7, #48]	; 0x30
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	2b7f      	cmp	r3, #127	; 0x7f
 800797a:	d8f0      	bhi.n	800795e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	637a      	str	r2, [r7, #52]	; 0x34
 8007982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
 8007994:	e00b      	b.n	80079ae <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	b2da      	uxtb	r2, r3
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	1c59      	adds	r1, r3, #1
 800799e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80079a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	09db      	lsrs	r3, r3, #7
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b7f      	cmp	r3, #127	; 0x7f
 80079b2:	d8f0      	bhi.n	8007996 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	623b      	str	r3, [r7, #32]
 80079cc:	e00b      	b.n	80079e6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1c59      	adds	r1, r3, #1
 80079d6:	6279      	str	r1, [r7, #36]	; 0x24
 80079d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	09db      	lsrs	r3, r3, #7
 80079e4:	623b      	str	r3, [r7, #32]
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2b7f      	cmp	r3, #127	; 0x7f
 80079ea:	d8f0      	bhi.n	80079ce <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	627a      	str	r2, [r7, #36]	; 0x24
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	69b8      	ldr	r0, [r7, #24]
 8007a02:	f7ff fda7 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f383 8811 	msr	BASEPRI, r3
}
 8007a0c:	bf00      	nop
 8007a0e:	3738      	adds	r7, #56	; 0x38
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20003cc0 	.word	0x20003cc0

08007a18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08c      	sub	sp, #48	; 0x30
 8007a1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007a1e:	4b58      	ldr	r3, [pc, #352]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007a24:	f3ef 8311 	mrs	r3, BASEPRI
 8007a28:	f04f 0120 	mov.w	r1, #32
 8007a2c:	f381 8811 	msr	BASEPRI, r1
 8007a30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007a32:	4b53      	ldr	r3, [pc, #332]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	220a      	movs	r2, #10
 8007a38:	4952      	ldr	r1, [pc, #328]	; (8007b84 <SEGGER_SYSVIEW_Start+0x16c>)
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7f8 fb88 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007a46:	200a      	movs	r0, #10
 8007a48:	f7ff febc 	bl	80077c4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a50:	f04f 0120 	mov.w	r1, #32
 8007a54:	f381 8811 	msr	BASEPRI, r1
 8007a58:	60bb      	str	r3, [r7, #8]
 8007a5a:	484b      	ldr	r0, [pc, #300]	; (8007b88 <SEGGER_SYSVIEW_Start+0x170>)
 8007a5c:	f7ff fc90 	bl	8007380 <_PreparePacket>
 8007a60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a6a:	4b45      	ldr	r3, [pc, #276]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a70:	e00b      	b.n	8007a8a <SEGGER_SYSVIEW_Start+0x72>
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	1c59      	adds	r1, r3, #1
 8007a7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	09db      	lsrs	r3, r3, #7
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a8e:	d8f0      	bhi.n	8007a72 <SEGGER_SYSVIEW_Start+0x5a>
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa4:	4b36      	ldr	r3, [pc, #216]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	e00b      	b.n	8007ac4 <SEGGER_SYSVIEW_Start+0xac>
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	1c59      	adds	r1, r3, #1
 8007ab4:	6279      	str	r1, [r7, #36]	; 0x24
 8007ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	09db      	lsrs	r3, r3, #7
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac8:	d8f0      	bhi.n	8007aac <SEGGER_SYSVIEW_Start+0x94>
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	627a      	str	r2, [r7, #36]	; 0x24
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	61fb      	str	r3, [r7, #28]
 8007ade:	4b28      	ldr	r3, [pc, #160]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	e00b      	b.n	8007afe <SEGGER_SYSVIEW_Start+0xe6>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	1c59      	adds	r1, r3, #1
 8007aee:	61f9      	str	r1, [r7, #28]
 8007af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	09db      	lsrs	r3, r3, #7
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b7f      	cmp	r3, #127	; 0x7f
 8007b02:	d8f0      	bhi.n	8007ae6 <SEGGER_SYSVIEW_Start+0xce>
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	61fa      	str	r2, [r7, #28]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e00b      	b.n	8007b36 <SEGGER_SYSVIEW_Start+0x11e>
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	1c59      	adds	r1, r3, #1
 8007b26:	6179      	str	r1, [r7, #20]
 8007b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	09db      	lsrs	r3, r3, #7
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b7f      	cmp	r3, #127	; 0x7f
 8007b3a:	d8f0      	bhi.n	8007b1e <SEGGER_SYSVIEW_Start+0x106>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	617a      	str	r2, [r7, #20]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b4c:	2218      	movs	r2, #24
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fcff 	bl	8007554 <_SendPacket>
      RECORD_END();
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b5c:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <SEGGER_SYSVIEW_Start+0x168>)
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007b6a:	f000 f9eb 	bl	8007f44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007b6e:	f000 f9b1 	bl	8007ed4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007b72:	f000 fc81 	bl	8008478 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007b76:	bf00      	nop
 8007b78:	3730      	adds	r7, #48	; 0x30
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20003c90 	.word	0x20003c90
 8007b84:	0800878c 	.word	0x0800878c
 8007b88:	20003cc0 	.word	0x20003cc0

08007b8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b92:	f3ef 8311 	mrs	r3, BASEPRI
 8007b96:	f04f 0120 	mov.w	r1, #32
 8007b9a:	f381 8811 	msr	BASEPRI, r1
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	480b      	ldr	r0, [pc, #44]	; (8007bd0 <SEGGER_SYSVIEW_Stop+0x44>)
 8007ba2:	f7ff fbed 	bl	8007380 <_PreparePacket>
 8007ba6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d007      	beq.n	8007bc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007bb0:	220b      	movs	r2, #11
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6838      	ldr	r0, [r7, #0]
 8007bb6:	f7ff fccd 	bl	8007554 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f383 8811 	msr	BASEPRI, r3
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20003cc0 	.word	0x20003cc0
 8007bd4:	20003c90 	.word	0x20003c90

08007bd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08c      	sub	sp, #48	; 0x30
 8007bdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007bde:	f3ef 8311 	mrs	r3, BASEPRI
 8007be2:	f04f 0120 	mov.w	r1, #32
 8007be6:	f381 8811 	msr	BASEPRI, r1
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	4845      	ldr	r0, [pc, #276]	; (8007d04 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007bee:	f7ff fbc7 	bl	8007380 <_PreparePacket>
 8007bf2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bfc:	4b42      	ldr	r3, [pc, #264]	; (8007d08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c02:	e00b      	b.n	8007c1c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	1c59      	adds	r1, r3, #1
 8007c0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c20:	d8f0      	bhi.n	8007c04 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	4b34      	ldr	r3, [pc, #208]	; (8007d08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	623b      	str	r3, [r7, #32]
 8007c3c:	e00b      	b.n	8007c56 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	1c59      	adds	r1, r3, #1
 8007c46:	6279      	str	r1, [r7, #36]	; 0x24
 8007c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	09db      	lsrs	r3, r3, #7
 8007c54:	623b      	str	r3, [r7, #32]
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5a:	d8f0      	bhi.n	8007c3e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	627a      	str	r2, [r7, #36]	; 0x24
 8007c62:	6a3a      	ldr	r2, [r7, #32]
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e00b      	b.n	8007c90 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	61f9      	str	r1, [r7, #28]
 8007c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	09db      	lsrs	r3, r3, #7
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b7f      	cmp	r3, #127	; 0x7f
 8007c94:	d8f0      	bhi.n	8007c78 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	61fa      	str	r2, [r7, #28]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	e00b      	b.n	8007cc8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	6179      	str	r1, [r7, #20]
 8007cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	09db      	lsrs	r3, r3, #7
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ccc:	d8f0      	bhi.n	8007cb0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	617a      	str	r2, [r7, #20]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007cde:	2218      	movs	r2, #24
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	68b8      	ldr	r0, [r7, #8]
 8007ce4:	f7ff fc36 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007cee:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007cf6:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	4798      	blx	r3
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3730      	adds	r7, #48	; 0x30
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20003cc0 	.word	0x20003cc0
 8007d08:	20003c90 	.word	0x20003c90

08007d0c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b092      	sub	sp, #72	; 0x48
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007d14:	f3ef 8311 	mrs	r3, BASEPRI
 8007d18:	f04f 0120 	mov.w	r1, #32
 8007d1c:	f381 8811 	msr	BASEPRI, r1
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	486a      	ldr	r0, [pc, #424]	; (8007ecc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007d24:	f7ff fb2c 	bl	8007380 <_PreparePacket>
 8007d28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	647b      	str	r3, [r7, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b66      	ldr	r3, [pc, #408]	; (8007ed0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d3e:	e00b      	b.n	8007d58 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d46:	1c59      	adds	r1, r3, #1
 8007d48:	6479      	str	r1, [r7, #68]	; 0x44
 8007d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d54:	09db      	lsrs	r3, r3, #7
 8007d56:	643b      	str	r3, [r7, #64]	; 0x40
 8007d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d5c:	d8f0      	bhi.n	8007d40 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	647a      	str	r2, [r7, #68]	; 0x44
 8007d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d78:	e00b      	b.n	8007d92 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	09db      	lsrs	r3, r3, #7
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	2b7f      	cmp	r3, #127	; 0x7f
 8007d96:	d8f0      	bhi.n	8007d7a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	4619      	mov	r1, r3
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fa99 	bl	80072e8 <_EncodeStr>
 8007db6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007db8:	2209      	movs	r2, #9
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	6938      	ldr	r0, [r7, #16]
 8007dbe:	f7ff fbc9 	bl	8007554 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b40      	ldr	r3, [pc, #256]	; (8007ed0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd6:	e00b      	b.n	8007df0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	1c59      	adds	r1, r3, #1
 8007de0:	6379      	str	r1, [r7, #52]	; 0x34
 8007de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	09db      	lsrs	r3, r3, #7
 8007dee:	633b      	str	r3, [r7, #48]	; 0x30
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2b7f      	cmp	r3, #127	; 0x7f
 8007df4:	d8f0      	bhi.n	8007dd8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e10:	e00b      	b.n	8007e2a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	1c59      	adds	r1, r3, #1
 8007e1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	09db      	lsrs	r3, r3, #7
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e2e:	d8f0      	bhi.n	8007e12 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	623b      	str	r3, [r7, #32]
 8007e4a:	e00b      	b.n	8007e64 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	1c59      	adds	r1, r3, #1
 8007e54:	6279      	str	r1, [r7, #36]	; 0x24
 8007e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	09db      	lsrs	r3, r3, #7
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b7f      	cmp	r3, #127	; 0x7f
 8007e68:	d8f0      	bhi.n	8007e4c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	627a      	str	r2, [r7, #36]	; 0x24
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e00b      	b.n	8007e9c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	1c59      	adds	r1, r3, #1
 8007e8c:	61f9      	str	r1, [r7, #28]
 8007e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	09db      	lsrs	r3, r3, #7
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea0:	d8f0      	bhi.n	8007e84 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	61fa      	str	r2, [r7, #28]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007eb2:	2215      	movs	r2, #21
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	6938      	ldr	r0, [r7, #16]
 8007eb8:	f7ff fb4c 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f383 8811 	msr	BASEPRI, r3
}
 8007ec2:	bf00      	nop
 8007ec4:	3748      	adds	r7, #72	; 0x48
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20003cc0 	.word	0x20003cc0
 8007ed0:	20003c90 	.word	0x20003c90

08007ed4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d008      	beq.n	8007ef2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007eea:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	4798      	blx	r3
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20003c90 	.word	0x20003c90

08007efc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f04:	f3ef 8311 	mrs	r3, BASEPRI
 8007f08:	f04f 0120 	mov.w	r1, #32
 8007f0c:	f381 8811 	msr	BASEPRI, r1
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	480b      	ldr	r0, [pc, #44]	; (8007f40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007f14:	f7ff fa34 	bl	8007380 <_PreparePacket>
 8007f18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	6938      	ldr	r0, [r7, #16]
 8007f20:	f7ff f9e2 	bl	80072e8 <_EncodeStr>
 8007f24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007f26:	220e      	movs	r2, #14
 8007f28:	68f9      	ldr	r1, [r7, #12]
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f7ff fb12 	bl	8007554 <_SendPacket>
  RECORD_END();
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f383 8811 	msr	BASEPRI, r3
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20003cc0 	.word	0x20003cc0

08007f44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d019      	beq.n	8007f86 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d014      	beq.n	8007f86 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4798      	blx	r3
 8007f64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007f68:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007f6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	f04f 0400 	mov.w	r4, #0
 8007f76:	0013      	movs	r3, r2
 8007f78:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	200d      	movs	r0, #13
 8007f80:	f7ff fc7a 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x2>
 8007f84:	e005      	b.n	8007f92 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	200c      	movs	r0, #12
 8007f8e:	f7ff fc37 	bl	8007800 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd90      	pop	{r4, r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20003c90 	.word	0x20003c90
 8007fa0:	e0001004 	.word	0xe0001004

08007fa4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007faa:	f3ef 8311 	mrs	r3, BASEPRI
 8007fae:	f04f 0120 	mov.w	r1, #32
 8007fb2:	f381 8811 	msr	BASEPRI, r1
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	4819      	ldr	r0, [pc, #100]	; (8008020 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007fba:	f7ff f9e1 	bl	8007380 <_PreparePacket>
 8007fbe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007fc4:	4b17      	ldr	r3, [pc, #92]	; (8008024 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fcc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e00b      	b.n	8007ff0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1c59      	adds	r1, r3, #1
 8007fe0:	6179      	str	r1, [r7, #20]
 8007fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	09db      	lsrs	r3, r3, #7
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff4:	d8f0      	bhi.n	8007fd8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	617a      	str	r2, [r7, #20]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008006:	2202      	movs	r2, #2
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	68b8      	ldr	r0, [r7, #8]
 800800c:	f7ff faa2 	bl	8007554 <_SendPacket>
  RECORD_END();
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f383 8811 	msr	BASEPRI, r3
}
 8008016:	bf00      	nop
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20003cc0 	.word	0x20003cc0
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800802e:	f3ef 8311 	mrs	r3, BASEPRI
 8008032:	f04f 0120 	mov.w	r1, #32
 8008036:	f381 8811 	msr	BASEPRI, r1
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	4807      	ldr	r0, [pc, #28]	; (800805c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800803e:	f7ff f99f 	bl	8007380 <_PreparePacket>
 8008042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008044:	2203      	movs	r2, #3
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f7ff fa83 	bl	8007554 <_SendPacket>
  RECORD_END();
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f383 8811 	msr	BASEPRI, r3
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20003cc0 	.word	0x20003cc0

08008060 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008066:	f3ef 8311 	mrs	r3, BASEPRI
 800806a:	f04f 0120 	mov.w	r1, #32
 800806e:	f381 8811 	msr	BASEPRI, r1
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	4807      	ldr	r0, [pc, #28]	; (8008094 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008076:	f7ff f983 	bl	8007380 <_PreparePacket>
 800807a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800807c:	2212      	movs	r2, #18
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6838      	ldr	r0, [r7, #0]
 8008082:	f7ff fa67 	bl	8007554 <_SendPacket>
  RECORD_END();
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f383 8811 	msr	BASEPRI, r3
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20003cc0 	.word	0x20003cc0

08008098 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800809e:	f3ef 8311 	mrs	r3, BASEPRI
 80080a2:	f04f 0120 	mov.w	r1, #32
 80080a6:	f381 8811 	msr	BASEPRI, r1
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	4807      	ldr	r0, [pc, #28]	; (80080cc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80080ae:	f7ff f967 	bl	8007380 <_PreparePacket>
 80080b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80080b4:	2211      	movs	r2, #17
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6838      	ldr	r0, [r7, #0]
 80080ba:	f7ff fa4b 	bl	8007554 <_SendPacket>
  RECORD_END();
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f383 8811 	msr	BASEPRI, r3
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20003cc0 	.word	0x20003cc0

080080d0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80080d8:	f3ef 8311 	mrs	r3, BASEPRI
 80080dc:	f04f 0120 	mov.w	r1, #32
 80080e0:	f381 8811 	msr	BASEPRI, r1
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	4819      	ldr	r0, [pc, #100]	; (800814c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80080e8:	f7ff f94a 	bl	8007380 <_PreparePacket>
 80080ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	61bb      	str	r3, [r7, #24]
 8008104:	e00b      	b.n	800811e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	b2da      	uxtb	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	1c59      	adds	r1, r3, #1
 800810e:	61f9      	str	r1, [r7, #28]
 8008110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	09db      	lsrs	r3, r3, #7
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2b7f      	cmp	r3, #127	; 0x7f
 8008122:	d8f0      	bhi.n	8008106 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	61fa      	str	r2, [r7, #28]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008134:	2208      	movs	r2, #8
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	6938      	ldr	r0, [r7, #16]
 800813a:	f7ff fa0b 	bl	8007554 <_SendPacket>
  RECORD_END();
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f383 8811 	msr	BASEPRI, r3
}
 8008144:	bf00      	nop
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20003cc0 	.word	0x20003cc0
 8008150:	20003c90 	.word	0x20003c90

08008154 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800815c:	f3ef 8311 	mrs	r3, BASEPRI
 8008160:	f04f 0120 	mov.w	r1, #32
 8008164:	f381 8811 	msr	BASEPRI, r1
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	4819      	ldr	r0, [pc, #100]	; (80081d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800816c:	f7ff f908 	bl	8007380 <_PreparePacket>
 8008170:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008176:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	e00b      	b.n	80081a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	b2da      	uxtb	r2, r3
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	1c59      	adds	r1, r3, #1
 8008192:	61f9      	str	r1, [r7, #28]
 8008194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	09db      	lsrs	r3, r3, #7
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b7f      	cmp	r3, #127	; 0x7f
 80081a6:	d8f0      	bhi.n	800818a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	61fa      	str	r2, [r7, #28]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80081b8:	2204      	movs	r2, #4
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6938      	ldr	r0, [r7, #16]
 80081be:	f7ff f9c9 	bl	8007554 <_SendPacket>
  RECORD_END();
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f383 8811 	msr	BASEPRI, r3
}
 80081c8:	bf00      	nop
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20003cc0 	.word	0x20003cc0
 80081d4:	20003c90 	.word	0x20003c90

080081d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80081e0:	f3ef 8311 	mrs	r3, BASEPRI
 80081e4:	f04f 0120 	mov.w	r1, #32
 80081e8:	f381 8811 	msr	BASEPRI, r1
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	4819      	ldr	r0, [pc, #100]	; (8008254 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80081f0:	f7ff f8c6 	bl	8007380 <_PreparePacket>
 80081f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80081fa:	4b17      	ldr	r3, [pc, #92]	; (8008258 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	e00b      	b.n	8008226 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	1c59      	adds	r1, r3, #1
 8008216:	61f9      	str	r1, [r7, #28]
 8008218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	09db      	lsrs	r3, r3, #7
 8008224:	61bb      	str	r3, [r7, #24]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b7f      	cmp	r3, #127	; 0x7f
 800822a:	d8f0      	bhi.n	800820e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	61fa      	str	r2, [r7, #28]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800823c:	2206      	movs	r2, #6
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	6938      	ldr	r0, [r7, #16]
 8008242:	f7ff f987 	bl	8007554 <_SendPacket>
  RECORD_END();
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f383 8811 	msr	BASEPRI, r3
}
 800824c:	bf00      	nop
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20003cc0 	.word	0x20003cc0
 8008258:	20003c90 	.word	0x20003c90

0800825c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008266:	f3ef 8311 	mrs	r3, BASEPRI
 800826a:	f04f 0120 	mov.w	r1, #32
 800826e:	f381 8811 	msr	BASEPRI, r1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	4827      	ldr	r0, [pc, #156]	; (8008314 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008276:	f7ff f883 	bl	8007380 <_PreparePacket>
 800827a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	623b      	str	r3, [r7, #32]
 8008292:	e00b      	b.n	80082ac <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	b2da      	uxtb	r2, r3
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	1c59      	adds	r1, r3, #1
 800829c:	6279      	str	r1, [r7, #36]	; 0x24
 800829e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	09db      	lsrs	r3, r3, #7
 80082aa:	623b      	str	r3, [r7, #32]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	2b7f      	cmp	r3, #127	; 0x7f
 80082b0:	d8f0      	bhi.n	8008294 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	627a      	str	r2, [r7, #36]	; 0x24
 80082b8:	6a3a      	ldr	r2, [r7, #32]
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e00b      	b.n	80082e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	61f9      	str	r1, [r7, #28]
 80082d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	09db      	lsrs	r3, r3, #7
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	2b7f      	cmp	r3, #127	; 0x7f
 80082e8:	d8f0      	bhi.n	80082cc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	61fa      	str	r2, [r7, #28]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80082fa:	2207      	movs	r2, #7
 80082fc:	68f9      	ldr	r1, [r7, #12]
 80082fe:	6938      	ldr	r0, [r7, #16]
 8008300:	f7ff f928 	bl	8007554 <_SendPacket>
  RECORD_END();
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f383 8811 	msr	BASEPRI, r3
}
 800830a:	bf00      	nop
 800830c:	3728      	adds	r7, #40	; 0x28
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20003cc0 	.word	0x20003cc0
 8008318:	20003c90 	.word	0x20003c90

0800831c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	1ad3      	subs	r3, r2, r3
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20003c90 	.word	0x20003c90

0800833c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008346:	4b3b      	ldr	r3, [pc, #236]	; (8008434 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d06d      	beq.n	800842a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800834e:	4b39      	ldr	r3, [pc, #228]	; (8008434 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008354:	2300      	movs	r3, #0
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
 8008358:	e008      	b.n	800836c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	3301      	adds	r3, #1
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008370:	429a      	cmp	r2, r3
 8008372:	d3f2      	bcc.n	800835a <SEGGER_SYSVIEW_SendModule+0x1e>
 8008374:	e000      	b.n	8008378 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008376:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d055      	beq.n	800842a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800837e:	f3ef 8311 	mrs	r3, BASEPRI
 8008382:	f04f 0120 	mov.w	r1, #32
 8008386:	f381 8811 	msr	BASEPRI, r1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	482a      	ldr	r0, [pc, #168]	; (8008438 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800838e:	f7fe fff7 	bl	8007380 <_PreparePacket>
 8008392:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	623b      	str	r3, [r7, #32]
 80083a0:	e00b      	b.n	80083ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	6279      	str	r1, [r7, #36]	; 0x24
 80083ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	09db      	lsrs	r3, r3, #7
 80083b8:	623b      	str	r3, [r7, #32]
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	2b7f      	cmp	r3, #127	; 0x7f
 80083be:	d8f0      	bhi.n	80083a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	627a      	str	r2, [r7, #36]	; 0x24
 80083c6:	6a3a      	ldr	r2, [r7, #32]
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	e00b      	b.n	80083f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	1c59      	adds	r1, r3, #1
 80083e4:	61f9      	str	r1, [r7, #28]
 80083e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	09db      	lsrs	r3, r3, #7
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b7f      	cmp	r3, #127	; 0x7f
 80083f8:	d8f0      	bhi.n	80083dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	61fa      	str	r2, [r7, #28]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2280      	movs	r2, #128	; 0x80
 8008410:	4619      	mov	r1, r3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7fe ff68 	bl	80072e8 <_EncodeStr>
 8008418:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800841a:	2216      	movs	r2, #22
 800841c:	68f9      	ldr	r1, [r7, #12]
 800841e:	6938      	ldr	r0, [r7, #16]
 8008420:	f7ff f898 	bl	8007554 <_SendPacket>
      RECORD_END();
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800842a:	bf00      	nop
 800842c:	3730      	adds	r7, #48	; 0x30
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20003cb8 	.word	0x20003cb8
 8008438:	20003cc0 	.word	0x20003cc0

0800843c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00f      	beq.n	800846a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f2      	bne.n	8008450 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20003cb8 	.word	0x20003cb8

08008478 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800847e:	f3ef 8311 	mrs	r3, BASEPRI
 8008482:	f04f 0120 	mov.w	r1, #32
 8008486:	f381 8811 	msr	BASEPRI, r1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	4817      	ldr	r0, [pc, #92]	; (80084ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800848e:	f7fe ff77 	bl	8007380 <_PreparePacket>
 8008492:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	e00b      	b.n	80084bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1c59      	adds	r1, r3, #1
 80084ac:	6179      	str	r1, [r7, #20]
 80084ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	09db      	lsrs	r3, r3, #7
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b7f      	cmp	r3, #127	; 0x7f
 80084c0:	d8f0      	bhi.n	80084a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	617a      	str	r2, [r7, #20]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80084d2:	221b      	movs	r2, #27
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	68b8      	ldr	r0, [r7, #8]
 80084d8:	f7ff f83c 	bl	8007554 <_SendPacket>
  RECORD_END();
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f383 8811 	msr	BASEPRI, r3
}
 80084e2:	bf00      	nop
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20003cc0 	.word	0x20003cc0
 80084f0:	20003cbc 	.word	0x20003cbc

080084f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80084fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008500:	f04f 0120 	mov.w	r1, #32
 8008504:	f381 8811 	msr	BASEPRI, r1
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	4827      	ldr	r0, [pc, #156]	; (80085a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800850c:	f7fe ff38 	bl	8007380 <_PreparePacket>
 8008510:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008512:	2280      	movs	r2, #128	; 0x80
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	6938      	ldr	r0, [r7, #16]
 8008518:	f7fe fee6 	bl	80072e8 <_EncodeStr>
 800851c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
 8008522:	2301      	movs	r3, #1
 8008524:	623b      	str	r3, [r7, #32]
 8008526:	e00b      	b.n	8008540 <SEGGER_SYSVIEW_Warn+0x4c>
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	6279      	str	r1, [r7, #36]	; 0x24
 8008532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	09db      	lsrs	r3, r3, #7
 800853e:	623b      	str	r3, [r7, #32]
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	2b7f      	cmp	r3, #127	; 0x7f
 8008544:	d8f0      	bhi.n	8008528 <SEGGER_SYSVIEW_Warn+0x34>
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	627a      	str	r2, [r7, #36]	; 0x24
 800854c:	6a3a      	ldr	r2, [r7, #32]
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	2300      	movs	r3, #0
 800855c:	61bb      	str	r3, [r7, #24]
 800855e:	e00b      	b.n	8008578 <SEGGER_SYSVIEW_Warn+0x84>
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	b2da      	uxtb	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	1c59      	adds	r1, r3, #1
 8008568:	61f9      	str	r1, [r7, #28]
 800856a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	09db      	lsrs	r3, r3, #7
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b7f      	cmp	r3, #127	; 0x7f
 800857c:	d8f0      	bhi.n	8008560 <SEGGER_SYSVIEW_Warn+0x6c>
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	61fa      	str	r2, [r7, #28]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800858e:	221a      	movs	r2, #26
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	6938      	ldr	r0, [r7, #16]
 8008594:	f7fe ffde 	bl	8007554 <_SendPacket>
  RECORD_END();
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
 80085a0:	3728      	adds	r7, #40	; 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20003cc0 	.word	0x20003cc0

080085ac <__libc_init_array>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	2500      	movs	r5, #0
 80085b0:	4e0c      	ldr	r6, [pc, #48]	; (80085e4 <__libc_init_array+0x38>)
 80085b2:	4c0d      	ldr	r4, [pc, #52]	; (80085e8 <__libc_init_array+0x3c>)
 80085b4:	1ba4      	subs	r4, r4, r6
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	42a5      	cmp	r5, r4
 80085ba:	d109      	bne.n	80085d0 <__libc_init_array+0x24>
 80085bc:	f000 f83c 	bl	8008638 <_init>
 80085c0:	2500      	movs	r5, #0
 80085c2:	4e0a      	ldr	r6, [pc, #40]	; (80085ec <__libc_init_array+0x40>)
 80085c4:	4c0a      	ldr	r4, [pc, #40]	; (80085f0 <__libc_init_array+0x44>)
 80085c6:	1ba4      	subs	r4, r4, r6
 80085c8:	10a4      	asrs	r4, r4, #2
 80085ca:	42a5      	cmp	r5, r4
 80085cc:	d105      	bne.n	80085da <__libc_init_array+0x2e>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085d4:	4798      	blx	r3
 80085d6:	3501      	adds	r5, #1
 80085d8:	e7ee      	b.n	80085b8 <__libc_init_array+0xc>
 80085da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085de:	4798      	blx	r3
 80085e0:	3501      	adds	r5, #1
 80085e2:	e7f2      	b.n	80085ca <__libc_init_array+0x1e>
 80085e4:	08008798 	.word	0x08008798
 80085e8:	08008798 	.word	0x08008798
 80085ec:	08008798 	.word	0x08008798
 80085f0:	0800879c 	.word	0x0800879c

080085f4 <memcmp>:
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	2400      	movs	r4, #0
 80085f8:	42a2      	cmp	r2, r4
 80085fa:	d101      	bne.n	8008600 <memcmp+0xc>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e007      	b.n	8008610 <memcmp+0x1c>
 8008600:	5d03      	ldrb	r3, [r0, r4]
 8008602:	3401      	adds	r4, #1
 8008604:	190d      	adds	r5, r1, r4
 8008606:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800860a:	42ab      	cmp	r3, r5
 800860c:	d0f4      	beq.n	80085f8 <memcmp+0x4>
 800860e:	1b58      	subs	r0, r3, r5
 8008610:	bd30      	pop	{r4, r5, pc}

08008612 <memcpy>:
 8008612:	b510      	push	{r4, lr}
 8008614:	1e43      	subs	r3, r0, #1
 8008616:	440a      	add	r2, r1
 8008618:	4291      	cmp	r1, r2
 800861a:	d100      	bne.n	800861e <memcpy+0xc>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	e7f7      	b.n	8008618 <memcpy+0x6>

08008628 <memset>:
 8008628:	4603      	mov	r3, r0
 800862a:	4402      	add	r2, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
