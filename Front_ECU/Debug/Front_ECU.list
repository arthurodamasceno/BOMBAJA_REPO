
Front_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000631c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800649c  0800649c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800649c  0800649c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800649c  0800649c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e2c  20000010  080064b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e3c  080064b4  00022e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014826  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d40  00000000  00000000  0003485f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00038980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169d2  00000000  00000000  00039c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f145  00000000  00000000  000505ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080bf2  00000000  00000000  0005f72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  000e039c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006414 	.word	0x08006414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006414 	.word	0x08006414

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <HAL_UART_RxCpltCallback>:
void CAN_Filter_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000188:	2224      	movs	r2, #36	; 0x24
 800018a:	490c      	ldr	r1, [pc, #48]	; (80001bc <HAL_UART_RxCpltCallback+0x3c>)
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <HAL_UART_RxCpltCallback+0x40>)
 800018e:	f004 fab9 	bl	8004704 <HAL_UART_Receive_IT>

	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(GPS_Task);
 8000192:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <HAL_UART_RxCpltCallback+0x44>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4618      	mov	r0, r3
 8000198:	f005 f990 	bl	80054bc <xTaskResumeFromISR>
 800019c:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d007      	beq.n	80001b4 <HAL_UART_RxCpltCallback+0x34>
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <HAL_UART_RxCpltCallback+0x48>)
 80001a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	f3bf 8f4f 	dsb	sy
 80001b0:	f3bf 8f6f 	isb	sy
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	20002d88 	.word	0x20002d88
 80001c0:	20002dac 	.word	0x20002dac
 80001c4:	20002c1c 	.word	0x20002c1c
 80001c8:	e000ed04 	.word	0xe000ed04

080001cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d2:	f000 ff99 	bl	8001108 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80001d6:	f000 f88d 	bl	80002f4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001da:	f000 fa03 	bl	80005e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80001de:	f000 f9db 	bl	8000598 <MX_DMA_Init>
	MX_ADC1_Init();
 80001e2:	f000 f8e3 	bl	80003ac <MX_ADC1_Init>
	MX_CAN_Init();
 80001e6:	f000 f91f 	bl	8000428 <MX_CAN_Init>
	MX_I2C1_Init();
 80001ea:	f000 f953 	bl	8000494 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80001ee:	f000 f9a9 	bl	8000544 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80001f2:	f000 f97d 	bl	80004f0 <MX_USART1_UART_Init>
	CAN_Filter_Config();
 80001f6:	f000 fa45 	bl	8000684 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80001fa:	f240 4103 	movw	r1, #1027	; 0x403
 80001fe:	4829      	ldr	r0, [pc, #164]	; (80002a4 <main+0xd8>)
 8000200:	f001 ff85 	bl	800210e <HAL_CAN_ActivateNotification>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <main+0x42>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 800020a:	f000 fc49 	bl	8000aa0 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 800020e:	4825      	ldr	r0, [pc, #148]	; (80002a4 <main+0xd8>)
 8000210:	f001 fd4e 	bl	8001cb0 <HAL_CAN_Start>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <main+0x52>
		Error_Handler();
 800021a:	f000 fc41 	bl	8000aa0 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) gas, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	4921      	ldr	r1, [pc, #132]	; (80002a8 <main+0xdc>)
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <main+0xe0>)
 8000224:	f001 f89c 	bl	8001360 <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000228:	2224      	movs	r2, #36	; 0x24
 800022a:	4921      	ldr	r1, [pc, #132]	; (80002b0 <main+0xe4>)
 800022c:	4821      	ldr	r0, [pc, #132]	; (80002b4 <main+0xe8>)
 800022e:	f004 fa69 	bl	8004704 <HAL_UART_Receive_IT>

	xTaskCreate(GPS_taskF, "GPSTask", 128, NULL, 2, &GPS_Task);
 8000232:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <main+0xec>)
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2302      	movs	r3, #2
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	491f      	ldr	r1, [pc, #124]	; (80002bc <main+0xf0>)
 8000240:	481f      	ldr	r0, [pc, #124]	; (80002c0 <main+0xf4>)
 8000242:	f004 ff0d 	bl	8005060 <xTaskCreate>
	xTaskCreate(Gear_Brake_taskF, "Gear_BrakeTask", 128, NULL, 3,
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0xf8>)
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	2303      	movs	r3, #3
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	491d      	ldr	r1, [pc, #116]	; (80002c8 <main+0xfc>)
 8000254:	481d      	ldr	r0, [pc, #116]	; (80002cc <main+0x100>)
 8000256:	f004 ff03 	bl	8005060 <xTaskCreate>
			&Gear_Brake_Task);
	xTaskCreate(Gas_taskF, "GasTask", 128, NULL, 0, &Gas_Task);
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <main+0x104>)
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	491b      	ldr	r1, [pc, #108]	; (80002d4 <main+0x108>)
 8000268:	481b      	ldr	r0, [pc, #108]	; (80002d8 <main+0x10c>)
 800026a:	f004 fef9 	bl	8005060 <xTaskCreate>
	xTaskCreate(Logger_taskF, "LoggerTask", 128, NULL, 3, &Logger_Task);
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <main+0x110>)
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2303      	movs	r3, #3
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	4919      	ldr	r1, [pc, #100]	; (80002e0 <main+0x114>)
 800027c:	4819      	ldr	r0, [pc, #100]	; (80002e4 <main+0x118>)
 800027e:	f004 feef 	bl	8005060 <xTaskCreate>
	xTaskCreate(Telemetry_taskF, "TelemetryTask", 128, NULL, 1,
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <main+0x11c>)
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2301      	movs	r3, #1
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	4917      	ldr	r1, [pc, #92]	; (80002ec <main+0x120>)
 8000290:	4817      	ldr	r0, [pc, #92]	; (80002f0 <main+0x124>)
 8000292:	f004 fee5 	bl	8005060 <xTaskCreate>
			&Telemetry_Task);

	/* Start scheduler */
	vTaskStartScheduler();
 8000296:	f005 f981 	bl	800559c <vTaskStartScheduler>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST I CASE*/
 800029a:	2001      	movs	r0, #1
 800029c:	f000 ff66 	bl	800116c <HAL_Delay>
 80002a0:	e7fb      	b.n	800029a <main+0xce>
 80002a2:	bf00      	nop
 80002a4:	20002c78 	.word	0x20002c78
 80002a8:	20002d84 	.word	0x20002d84
 80002ac:	20002cb8 	.word	0x20002cb8
 80002b0:	20002d88 	.word	0x20002d88
 80002b4:	20002dac 	.word	0x20002dac
 80002b8:	20002c1c 	.word	0x20002c1c
 80002bc:	0800642c 	.word	0x0800642c
 80002c0:	080006d1 	.word	0x080006d1
 80002c4:	20002bd0 	.word	0x20002bd0
 80002c8:	08006434 	.word	0x08006434
 80002cc:	08000771 	.word	0x08000771
 80002d0:	20002df4 	.word	0x20002df4
 80002d4:	08006444 	.word	0x08006444
 80002d8:	08000809 	.word	0x08000809
 80002dc:	20002dec 	.word	0x20002dec
 80002e0:	0800644c 	.word	0x0800644c
 80002e4:	0800087d 	.word	0x0800087d
 80002e8:	20002c18 	.word	0x20002c18
 80002ec:	08006458 	.word	0x08006458
 80002f0:	08000935 	.word	0x08000935

080002f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	; 0x50
 80002f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f006 f87e 	bl	8006404 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f9fa 	bl	8003744 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x66>
		Error_Handler();
 8000356:	f000 fba3 	bl	8000aa0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fc64 	bl	8003c44 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x92>
		Error_Handler();
 8000382:	f000 fb8d 	bl	8000aa0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000386:	2302      	movs	r3, #2
 8000388:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800038a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800038e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fe22 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xae>
		Error_Handler();
 800039e:	f000 fb7f 	bl	8000aa0 <Error_Handler>
	}
}
 80003a2:	bf00      	nop
 80003a4:	3750      	adds	r7, #80	; 0x50
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0x74>)
 80003be:	4a19      	ldr	r2, [pc, #100]	; (8000424 <MX_ADC1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003da:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_ADC1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0x74>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ea:	f000 fee1 	bl	80011b0 <HAL_ADC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80003f4:	f000 fb54 	bl	8000aa0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80003f8:	2304      	movs	r3, #4
 80003fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000400:	2307      	movs	r3, #7
 8000402:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0x74>)
 800040a:	f001 f8a3 	bl	8001554 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000414:	f000 fb44 	bl	8000aa0 <Error_Handler>
	}
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20002cb8 	.word	0x20002cb8
 8000424:	40012400 	.word	0x40012400

08000428 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_CAN_Init+0x64>)
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <MX_CAN_Init+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_CAN_Init+0x64>)
 8000434:	2209      	movs	r2, #9
 8000436:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_CAN_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_CAN_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_CAN_Init+0x64>)
 8000446:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800044a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_CAN_Init+0x64>)
 800044e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000452:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_CAN_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_CAN_Init+0x64>)
 800045c:	2201      	movs	r2, #1
 800045e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <MX_CAN_Init+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_CAN_Init+0x64>)
 8000468:	2201      	movs	r2, #1
 800046a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_CAN_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_CAN_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_CAN_Init+0x64>)
 800047a:	f001 fa55 	bl	8001928 <HAL_CAN_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_CAN_Init+0x60>
		Error_Handler();
 8000484:	f000 fb0c 	bl	8000aa0 <Error_Handler>
	}
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20002c78 	.word	0x20002c78
 8000490:	40006400 	.word	0x40006400

08000494 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_I2C1_Init+0x50>)
 800049a:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <MX_I2C1_Init+0x54>)
 800049c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_I2C1_Init+0x58>)
 80004a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004d2:	f002 fd15 	bl	8002f00 <HAL_I2C_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80004dc:	f000 fae0 	bl	8000aa0 <Error_Handler>
	}
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20002c24 	.word	0x20002c24
 80004e8:	40005400 	.word	0x40005400
 80004ec:	00061a80 	.word	0x00061a80

080004f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART1_UART_Init+0x4c>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_USART1_UART_Init+0x50>)
 80004f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART1_UART_Init+0x4c>)
 80004fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000500:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART1_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000516:	2208      	movs	r2, #8
 8000518:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART1_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000528:	f004 f806 	bl	8004538 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000532:	f000 fab5 	bl	8000aa0 <Error_Handler>
	}
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20002ce8 	.word	0x20002ce8
 8000540:	40013800 	.word	0x40013800

08000544 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_USART2_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800057c:	f003 ffdc 	bl	8004538 <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000586:	f000 fa8b 	bl	8000aa0 <Error_Handler>
	}
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20002dac 	.word	0x20002dac
 8000594:	40004400 	.word	0x40004400

08000598 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2105      	movs	r1, #5
 80005ba:	200b      	movs	r0, #11
 80005bc:	f002 f89f 	bl	80026fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c0:	200b      	movs	r0, #11
 80005c2:	f002 f8b8 	bl	8002736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	2010      	movs	r0, #16
 80005cc:	f002 f897 	bl	80026fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005d0:	2010      	movs	r0, #16
 80005d2:	f002 f8b0 	bl	8002736 <HAL_NVIC_EnableIRQ>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_GPIO_Init+0x98>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1f      	ldr	r2, [pc, #124]	; (800067c <MX_GPIO_Init+0x98>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_GPIO_Init+0x98>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_GPIO_Init+0x98>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <MX_GPIO_Init+0x98>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_GPIO_Init+0x98>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_GPIO_Init+0x98>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_GPIO_Init+0x98>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_GPIO_Init+0x98>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_GPIO_Init+0x98>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <MX_GPIO_Init+0x98>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_GPIO_Init+0x98>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : Gear_Pin Brake_Pin */
	GPIO_InitStruct.Pin = Gear_Pin | Brake_Pin;
 8000658:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800065c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x9c>)
 800066e:	f002 fad5 	bl	8002c1c <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40010c00 	.word	0x40010c00

08000684 <CAN_Filter_Config>:

/*Configure CAN Filter */
void CAN_Filter_Config(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <CAN_Filter_Config+0x48>)
 80006b4:	f001 fa33 	bl	8001b1e <HAL_CAN_ConfigFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <CAN_Filter_Config+0x3e>
		Error_Handler();
 80006be:	f000 f9ef 	bl	8000aa0 <Error_Handler>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20002c78 	.word	0x20002c78

080006d0 <GPS_taskF>:

/*GPS Read Task --- THIS TASK NEEDS TEST WITH HARDWARE */
void GPS_taskF(void *pvParameters) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	while (1) {
		vTaskSuspend(NULL);
 80006d8:	2000      	movs	r0, #0
 80006da:	f004 fe23 	bl	8005324 <vTaskSuspend>

		if (GPS_in[0] == UBX_HEADER[0] && GPS_in[1] == UBX_HEADER[1]) {
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <GPS_taskF+0x94>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	22b5      	movs	r2, #181	; 0xb5
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d1f7      	bne.n	80006d8 <GPS_taskF+0x8>
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <GPS_taskF+0x94>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2262      	movs	r2, #98	; 0x62
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d1f2      	bne.n	80006d8 <GPS_taskF+0x8>
			uint8_t GPSbuff[4];

			GPSbuff[0] = GPS_in[16];
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <GPS_taskF+0x94>)
 80006f4:	7c1b      	ldrb	r3, [r3, #16]
 80006f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			GPSbuff[1] = GPS_in[17];
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <GPS_taskF+0x94>)
 80006fc:	7c5b      	ldrb	r3, [r3, #17]
 80006fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			GPSbuff[2] = GPS_in[12];
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <GPS_taskF+0x94>)
 8000704:	7b1b      	ldrb	r3, [r3, #12]
 8000706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			GPSbuff[3] = GPS_in[13];
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <GPS_taskF+0x94>)
 800070c:	7b5b      	ldrb	r3, [r3, #13]
 800070e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			buffer[18] = GPS_in[16];
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <GPS_taskF+0x94>)
 8000714:	7c1a      	ldrb	r2, [r3, #16]
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <GPS_taskF+0x98>)
 8000718:	749a      	strb	r2, [r3, #18]
			buffer[19] = GPS_in[17];
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <GPS_taskF+0x94>)
 800071c:	7c5a      	ldrb	r2, [r3, #17]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <GPS_taskF+0x98>)
 8000720:	74da      	strb	r2, [r3, #19]
			buffer[20] = GPS_in[12];
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <GPS_taskF+0x94>)
 8000724:	7b1a      	ldrb	r2, [r3, #12]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <GPS_taskF+0x98>)
 8000728:	751a      	strb	r2, [r3, #20]
			buffer[21] = GPS_in[13];
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <GPS_taskF+0x94>)
 800072c:	7b5a      	ldrb	r2, [r3, #13]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <GPS_taskF+0x98>)
 8000730:	755a      	strb	r2, [r3, #21]
			uint32_t TxMailbox;

			CAN_TxHeaderTypeDef GPSHeader;

			GPSHeader.DLC = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
			GPSHeader.StdId = 0x658;
 8000736:	f44f 63cb 	mov.w	r3, #1624	; 0x658
 800073a:	60bb      	str	r3, [r7, #8]
			GPSHeader.IDE = CAN_ID_STD;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
			GPSHeader.RTR = CAN_RTR_DATA;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

			if (HAL_CAN_AddTxMessage(&hcan, &GPSHeader, GPSbuff, &TxMailbox)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800074c:	f107 0108 	add.w	r1, r7, #8
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <GPS_taskF+0x9c>)
 8000752:	f001 faf1 	bl	8001d38 <HAL_CAN_AddTxMessage>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0bd      	beq.n	80006d8 <GPS_taskF+0x8>
					!= HAL_OK) {
				Error_Handler();
 800075c:	f000 f9a0 	bl	8000aa0 <Error_Handler>
		vTaskSuspend(NULL);
 8000760:	e7ba      	b.n	80006d8 <GPS_taskF+0x8>
 8000762:	bf00      	nop
 8000764:	20002d88 	.word	0x20002d88
 8000768:	20002d28 	.word	0x20002d28
 800076c:	20002c78 	.word	0x20002c78

08000770 <Gear_Brake_taskF>:
		}
	}
}

/*Gear an Brake Read Task */
void Gear_Brake_taskF(void *pvParameters) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while (1) {
		gear = HAL_GPIO_ReadPin(GPIOB, Gear_Pin);
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	481d      	ldr	r0, [pc, #116]	; (80007f4 <Gear_Brake_taskF+0x84>)
 800077e:	f002 fba7 	bl	8002ed0 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <Gear_Brake_taskF+0x88>)
 8000788:	701a      	strb	r2, [r3, #0]
		brake = HAL_GPIO_ReadPin(GPIOB, Brake_Pin);
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <Gear_Brake_taskF+0x84>)
 8000790:	f002 fb9e 	bl	8002ed0 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <Gear_Brake_taskF+0x8c>)
 800079a:	701a      	strb	r2, [r3, #0]
		uint8_t GBbuff[2];
		GBbuff[0] = gear;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <Gear_Brake_taskF+0x88>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GBbuff[1] = brake;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <Gear_Brake_taskF+0x8c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		buffer[0] = gear;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <Gear_Brake_taskF+0x88>)
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <Gear_Brake_taskF+0x90>)
 80007b2:	701a      	strb	r2, [r3, #0]
		buffer[1] = brake;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <Gear_Brake_taskF+0x8c>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <Gear_Brake_taskF+0x90>)
 80007ba:	705a      	strb	r2, [r3, #1]
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GBHeader;

		GBHeader.DLC = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
		GBHeader.StdId = 0x657;
 80007c0:	f240 6357 	movw	r3, #1623	; 0x657
 80007c4:	60bb      	str	r3, [r7, #8]
		GBHeader.IDE = CAN_ID_STD;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
		GBHeader.RTR = CAN_RTR_DATA;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GBHeader, GBbuff, &TxMailbox)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007d6:	f107 0108 	add.w	r1, r7, #8
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <Gear_Brake_taskF+0x94>)
 80007dc:	f001 faac 	bl	8001d38 <HAL_CAN_AddTxMessage>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <Gear_Brake_taskF+0x7a>
				!= HAL_OK) {
			Error_Handler();
 80007e6:	f000 f95b 	bl	8000aa0 <Error_Handler>
		}
		vTaskDelay(10); /*100Hz frequency*/
 80007ea:	200a      	movs	r0, #10
 80007ec:	f004 fd66 	bl	80052bc <vTaskDelay>
	while (1) {
 80007f0:	e7c2      	b.n	8000778 <Gear_Brake_taskF+0x8>
 80007f2:	bf00      	nop
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	20002c20 	.word	0x20002c20
 80007fc:	20002df0 	.word	0x20002df0
 8000800:	20002d28 	.word	0x20002d28
 8000804:	20002c78 	.word	0x20002c78

08000808 <Gas_taskF>:
	}
}

/*Gas pedal Read Task */
void Gas_taskF(void *pvParameters) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t gasbuff[2];
		gasbuff[0] = (uint8_t) (gas[0] >> 8) & 0xFF;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <Gas_taskF+0x68>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		gasbuff[1] = (uint8_t) gas[0] & 0xFF;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Gas_taskF+0x68>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		buffer[2] = gasbuff[0];
 8000828:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <Gas_taskF+0x6c>)
 800082e:	709a      	strb	r2, [r3, #2]
		buffer[3] = gasbuff[1];
 8000830:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <Gas_taskF+0x6c>)
 8000836:	70da      	strb	r2, [r3, #3]

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GasHeader;

		GasHeader.DLC = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
		GasHeader.StdId = 0x656;
 800083c:	f240 6356 	movw	r3, #1622	; 0x656
 8000840:	60bb      	str	r3, [r7, #8]
		GasHeader.IDE = CAN_ID_STD;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
		GasHeader.RTR = CAN_RTR_DATA;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GasHeader, gasbuff, &TxMailbox)
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000852:	f107 0108 	add.w	r1, r7, #8
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <Gas_taskF+0x70>)
 8000858:	f001 fa6e 	bl	8001d38 <HAL_CAN_AddTxMessage>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <Gas_taskF+0x5e>
				!= HAL_OK) {
			Error_Handler();
 8000862:	f000 f91d 	bl	8000aa0 <Error_Handler>
		}
		vTaskDelay(10); /*100Hz frequency*/
 8000866:	200a      	movs	r0, #10
 8000868:	f004 fd28 	bl	80052bc <vTaskDelay>
	while (1) {
 800086c:	e7d0      	b.n	8000810 <Gas_taskF+0x8>
 800086e:	bf00      	nop
 8000870:	20002d84 	.word	0x20002d84
 8000874:	20002d28 	.word	0x20002d28
 8000878:	20002c78 	.word	0x20002c78

0800087c <Logger_taskF>:
	}
}

/*Logger Write Task  --- THIS TASK NEEDS TO IMPLEMENT START AND STOP LOG FUNCTIONS*/
void Logger_taskF(void *pvParameters) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
 8000882:	6078      	str	r0, [r7, #4]
	while (1) {
		if(startLOG==1){
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <Logger_taskF+0xa4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d11c      	bne.n	80008c6 <Logger_taskF+0x4a>
			startLOG=0;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <Logger_taskF+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
			bsl[1]  = 0xAA;
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <Logger_taskF+0xa8>)
 8000894:	22aa      	movs	r2, #170	; 0xaa
 8000896:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0xBB;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <Logger_taskF+0xa8>)
 800089a:	22bb      	movs	r2, #187	; 0xbb
 800089c:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0xCC;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <Logger_taskF+0xa8>)
 80008a0:	22cc      	movs	r2, #204	; 0xcc
 80008a2:	755a      	strb	r2, [r3, #21]
			bsl[0]  = 0x00;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <Logger_taskF+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0x00;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <Logger_taskF+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0x00;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <Logger_taskF+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	751a      	strb	r2, [r3, #20]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 22, 10);
 80008b6:	230a      	movs	r3, #10
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2316      	movs	r3, #22
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <Logger_taskF+0xa8>)
 80008be:	2110      	movs	r1, #16
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <Logger_taskF+0xac>)
 80008c2:	f002 fc45 	bl	8003150 <HAL_I2C_Master_Transmit>
		}
		if(stopLOG==1){
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <Logger_taskF+0xb0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d11c      	bne.n	8000908 <Logger_taskF+0x8c>
			stopLOG=0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <Logger_taskF+0xb0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
			bsl[0]  = 0xDD;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <Logger_taskF+0xa8>)
 80008d6:	22dd      	movs	r2, #221	; 0xdd
 80008d8:	701a      	strb	r2, [r3, #0]
			bsl[10] = 0xEE;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <Logger_taskF+0xa8>)
 80008dc:	22ee      	movs	r2, #238	; 0xee
 80008de:	729a      	strb	r2, [r3, #10]
			bsl[20] = 0xFF;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <Logger_taskF+0xa8>)
 80008e2:	22ff      	movs	r2, #255	; 0xff
 80008e4:	751a      	strb	r2, [r3, #20]
			bsl[1]  = 0x00;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <Logger_taskF+0xa8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	705a      	strb	r2, [r3, #1]
			bsl[11] = 0x00;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <Logger_taskF+0xa8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	72da      	strb	r2, [r3, #11]
			bsl[21] = 0x00;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <Logger_taskF+0xa8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	755a      	strb	r2, [r3, #21]
			HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), bsl, 22, 10);
 80008f8:	230a      	movs	r3, #10
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2316      	movs	r3, #22
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <Logger_taskF+0xa8>)
 8000900:	2110      	movs	r1, #16
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <Logger_taskF+0xac>)
 8000904:	f002 fc24 	bl	8003150 <HAL_I2C_Master_Transmit>
		}
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 22, 10);
 8000908:	230a      	movs	r3, #10
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2316      	movs	r3, #22
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <Logger_taskF+0xb4>)
 8000910:	2110      	movs	r1, #16
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <Logger_taskF+0xac>)
 8000914:	f002 fc1c 	bl	8003150 <HAL_I2C_Master_Transmit>
		vTaskDelay(10); /*100Hz frequency*/
 8000918:	200a      	movs	r0, #10
 800091a:	f004 fccf 	bl	80052bc <vTaskDelay>
		if(startLOG==1){
 800091e:	e7b1      	b.n	8000884 <Logger_taskF+0x8>
 8000920:	20000280 	.word	0x20000280
 8000924:	20002ca0 	.word	0x20002ca0
 8000928:	20002c24 	.word	0x20002c24
 800092c:	20000281 	.word	0x20000281
 8000930:	20002d28 	.word	0x20002d28

08000934 <Telemetry_taskF>:
	}
}

/*LoRa Transceiver Write Task*/
void Telemetry_taskF(void *pvParameters) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t sync = 0xAA;
 800093c:	23aa      	movs	r3, #170	; 0xaa
 800093e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t LoRa[23];
		LoRa[0] = sync;
 8000942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000946:	733b      	strb	r3, [r7, #12]
		for (int y = 1; y < 23; y++) {
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
 800094c:	e00c      	b.n	8000968 <Telemetry_taskF+0x34>
			LoRa[y] = buffer[y - 1];
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	3b01      	subs	r3, #1
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <Telemetry_taskF+0x50>)
 8000954:	5cd1      	ldrb	r1, [r2, r3]
 8000956:	f107 020c 	add.w	r2, r7, #12
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	4413      	add	r3, r2
 800095e:	460a      	mov	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
		for (int y = 1; y < 23; y++) {
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	3301      	adds	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	2b16      	cmp	r3, #22
 800096c:	ddef      	ble.n	800094e <Telemetry_taskF+0x1a>
		}
		HAL_UART_Transmit(&huart1, LoRa, 23, 100);
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2217      	movs	r2, #23
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <Telemetry_taskF+0x54>)
 8000978:	f003 fe2b 	bl	80045d2 <HAL_UART_Transmit>
		vTaskDelay(100); /*10Hz frequency*/
 800097c:	2064      	movs	r0, #100	; 0x64
 800097e:	f004 fc9d 	bl	80052bc <vTaskDelay>
	while (1) {
 8000982:	e7db      	b.n	800093c <Telemetry_taskF+0x8>
 8000984:	20002d28 	.word	0x20002d28
 8000988:	20002ce8 	.word	0x20002ce8

0800098c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/*CAN Read Callback -- THIS FUNCTION NEEDS TO IMPLEMENT START AND STOP LOG MESSAGES  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcv_msg[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcv_msg)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	f107 0214 	add.w	r2, r7, #20
 800099c:	2100      	movs	r1, #0
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f001 faa4 	bl	8001eec <HAL_CAN_GetRxMessage>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) {
		Error_Handler();
 80009aa:	f000 f879 	bl	8000aa0 <Error_Handler>
	}

	if (RxHeader.StdId == 0x64E) {
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f240 624e 	movw	r2, #1614	; 0x64e
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d105      	bne.n	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		if (rcv_msg[0] == 0x55) {
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	2b55      	cmp	r3, #85	; 0x55
 80009bc:	d102      	bne.n	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
			startLOG=1;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (RxHeader.StdId == 0x64F) {
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f240 624f 	movw	r2, #1615	; 0x64f
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d105      	bne.n	80009da <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		if (rcv_msg[0] == 0x66) {
 80009ce:	7b3b      	ldrb	r3, [r7, #12]
 80009d0:	2b66      	cmp	r3, #102	; 0x66
 80009d2:	d102      	bne.n	80009da <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			stopLOG=1;
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (RxHeader.StdId == 0x650) {
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80009e0:	d105      	bne.n	80009ee <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		buffer[4] = rcv_msg[0];
 80009e2:	7b3a      	ldrb	r2, [r7, #12]
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80009e6:	711a      	strb	r2, [r3, #4]
		buffer[5] = rcv_msg[1];
 80009e8:	7b7a      	ldrb	r2, [r7, #13]
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80009ec:	715a      	strb	r2, [r3, #5]
	}

	if (RxHeader.StdId == 0x651) {
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f240 6251 	movw	r2, #1617	; 0x651
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d105      	bne.n	8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		buffer[6] = rcv_msg[0];
 80009f8:	7b3a      	ldrb	r2, [r7, #12]
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80009fc:	719a      	strb	r2, [r3, #6]
		buffer[7] = rcv_msg[1];
 80009fe:	7b7a      	ldrb	r2, [r7, #13]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a02:	71da      	strb	r2, [r3, #7]
	}

	if (RxHeader.StdId == 0x652) {
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f240 6252 	movw	r2, #1618	; 0x652
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d105      	bne.n	8000a1a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		buffer[8] = rcv_msg[0];
 8000a0e:	7b3a      	ldrb	r2, [r7, #12]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a12:	721a      	strb	r2, [r3, #8]
		buffer[9] = rcv_msg[1];
 8000a14:	7b7a      	ldrb	r2, [r7, #13]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a18:	725a      	strb	r2, [r3, #9]
	}

	if (RxHeader.StdId == 0x653) {
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f240 6253 	movw	r2, #1619	; 0x653
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d105      	bne.n	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		buffer[10] = rcv_msg[0];
 8000a24:	7b3a      	ldrb	r2, [r7, #12]
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a28:	729a      	strb	r2, [r3, #10]
		buffer[11] = rcv_msg[1];
 8000a2a:	7b7a      	ldrb	r2, [r7, #13]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a2e:	72da      	strb	r2, [r3, #11]
	}

	if (RxHeader.StdId == 0x654) {
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f240 6254 	movw	r2, #1620	; 0x654
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d105      	bne.n	8000a46 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		buffer[12] = rcv_msg[0];
 8000a3a:	7b3a      	ldrb	r2, [r7, #12]
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a3e:	731a      	strb	r2, [r3, #12]
		buffer[13] = rcv_msg[1];
 8000a40:	7b7a      	ldrb	r2, [r7, #13]
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a44:	735a      	strb	r2, [r3, #13]
	}

	if (RxHeader.StdId == 0x655) {
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f240 6255 	movw	r2, #1621	; 0x655
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d10b      	bne.n	8000a68 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		buffer[14] = rcv_msg[0];
 8000a50:	7b3a      	ldrb	r2, [r7, #12]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a54:	739a      	strb	r2, [r3, #14]
		buffer[15] = rcv_msg[1];
 8000a56:	7b7a      	ldrb	r2, [r7, #13]
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a5a:	73da      	strb	r2, [r3, #15]
		buffer[16] = rcv_msg[2];
 8000a5c:	7bba      	ldrb	r2, [r7, #14]
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a60:	741a      	strb	r2, [r3, #16]
		buffer[17] = rcv_msg[3];
 8000a62:	7bfa      	ldrb	r2, [r7, #15]
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000a66:	745a      	strb	r2, [r3, #17]
	}

}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000280 	.word	0x20000280
 8000a74:	20000281 	.word	0x20000281
 8000a78:	20002d28 	.word	0x20002d28

08000a7c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a8e:	f000 fb51 	bl	8001134 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40000800 	.word	0x40000800

08000aa0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_MspInit+0x68>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_MspInit+0x68>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x68>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x68>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <HAL_MspInit+0x68>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x68>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f001 fe08 	bl	80026fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x6c>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x6c>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_ADC_MspInit+0xbc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d149      	bne.n	8000bd0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <HAL_ADC_MspInit+0xc0>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Gas_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Gas_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <HAL_ADC_MspInit+0xc4>)
 8000b7c:	f002 f84e 	bl	8002c1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_ADC_MspInit+0xcc>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000bb6:	f001 fdcd 	bl	8002754 <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000bc0:	f7ff ff6e 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000bc8:	621a      	str	r2, [r3, #32]
 8000bca:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_ADC_MspInit+0xc8>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	20002d40 	.word	0x20002d40
 8000be8:	40020008 	.word	0x40020008

08000bec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a35      	ldr	r2, [pc, #212]	; (8000cdc <HAL_CAN_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d163      	bne.n	8000cd4 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a33      	ldr	r2, [pc, #204]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_CAN_MspInit+0xf4>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <HAL_CAN_MspInit+0xf8>)
 8000c52:	f001 ffe3 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <HAL_CAN_MspInit+0xf8>)
 8000c6c:	f001 ffd6 	bl	8002c1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_CAN_MspInit+0xfc>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <HAL_CAN_MspInit+0xfc>)
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2105      	movs	r1, #5
 8000c98:	2013      	movs	r0, #19
 8000c9a:	f001 fd30 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000c9e:	2013      	movs	r0, #19
 8000ca0:	f001 fd49 	bl	8002736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	2014      	movs	r0, #20
 8000caa:	f001 fd28 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f001 fd41 	bl	8002736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	2015      	movs	r0, #21
 8000cba:	f001 fd20 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cbe:	2015      	movs	r0, #21
 8000cc0:	f001 fd39 	bl	8002736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2105      	movs	r1, #5
 8000cc8:	2016      	movs	r0, #22
 8000cca:	f001 fd18 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000cce:	2016      	movs	r0, #22
 8000cd0:	f001 fd31 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40006400 	.word	0x40006400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40010000 	.word	0x40010000

08000cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_I2C_MspInit+0x70>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d123      	bne.n	8000d54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d16:	61d3      	str	r3, [r2, #28]
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_I2C_MspInit+0x74>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3c:	23c0      	movs	r3, #192	; 0xc0
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_I2C_MspInit+0x78>)
 8000d50:	f001 ff64 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a4e      	ldr	r2, [pc, #312]	; (8000ebc <HAL_UART_MspInit+0x154>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d132      	bne.n	8000dee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a46      	ldr	r2, [pc, #280]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483d      	ldr	r0, [pc, #244]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000dce:	f001 ff25 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4837      	ldr	r0, [pc, #220]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000de8:	f001 ff18 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dec:	e062      	b.n	8000eb4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a35      	ldr	r2, [pc, #212]	; (8000ec8 <HAL_UART_MspInit+0x160>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d15d      	bne.n	8000eb4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	61d3      	str	r3, [r2, #28]
 8000e04:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_UART_MspInit+0x158>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e3c:	f001 feee 	bl	8002c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e40:	2308      	movs	r3, #8
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4619      	mov	r1, r3
 8000e52:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0x15c>)
 8000e54:	f001 fee2 	bl	8002c1c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_UART_MspInit+0x168>)
 8000e5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e8a:	f001 fc63 	bl	8002754 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000e94:	f7ff fe04 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_UART_MspInit+0x164>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	2026      	movs	r0, #38	; 0x26
 8000eaa:	f001 fc28 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eae:	2026      	movs	r0, #38	; 0x26
 8000eb0:	f001 fc41 	bl	8002736 <HAL_NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	20002bd4 	.word	0x20002bd4
 8000ed0:	4002006c 	.word	0x4002006c

08000ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	201e      	movs	r0, #30
 8000eea:	f001 fc08 	bl	80026fe <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eee:	201e      	movs	r0, #30
 8000ef0:	f001 fc21 	bl	8002736 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_InitTick+0xa0>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_InitTick+0xa0>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xa0>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 f812 	bl	8003f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f1c:	f002 ffe8 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8000f20:	4603      	mov	r3, r0
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_InitTick+0xa4>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	3b01      	subs	r3, #1
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_InitTick+0xac>)
 8000f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f40:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f56:	f003 f8f7 	bl	8004148 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d104      	bne.n	8000f6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_InitTick+0xa8>)
 8000f62:	f003 f925 	bl	80041b0 <HAL_TIM_Base_Start_IT>
 8000f66:	4603      	mov	r3, r0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	20002df8 	.word	0x20002df8
 8000f80:	40000800 	.word	0x40000800

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <HardFault_Handler+0x4>

08000f96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <UsageFault_Handler+0x4>

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fba:	f001 fcfb 	bl	80029b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20002d40 	.word	0x20002d40

08000fc8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Channel6_IRQHandler+0x10>)
 8000fce:	f001 fcf1 	bl	80029b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20002bd4 	.word	0x20002bd4

08000fdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM4_IRQHandler+0x10>)
 8000fe2:	f003 f908 	bl	80041f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20002df8 	.word	0x20002df8

08000ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USART2_IRQHandler+0x10>)
 8000ff6:	f003 fbd9 	bl	80047ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20002dac 	.word	0x20002dac

08001004 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_HP_CAN1_TX_IRQHandler(void){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800100a:	f001 f8a5 	bl	8002158 <HAL_CAN_IRQHandler>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20002c78 	.word	0x20002c78

08001018 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800101e:	f001 f89b 	bl	8002158 <HAL_CAN_IRQHandler>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20002c78 	.word	0x20002c78

0800102c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <CAN1_RX1_IRQHandler+0x10>)
 8001032:	f001 f891 	bl	8002158 <HAL_CAN_IRQHandler>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20002c78 	.word	0x20002c78

08001040 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <CAN1_SCE_IRQHandler+0x10>)
 8001046:	f001 f887 	bl	8002158 <HAL_CAN_IRQHandler>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20002c78 	.word	0x20002c78

08001054 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <SystemInit+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <SystemInit+0x5c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <SystemInit+0x5c>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4911      	ldr	r1, [pc, #68]	; (80010b0 <SystemInit+0x5c>)
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SystemInit+0x60>)
 800106c:	4013      	ands	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <SystemInit+0x5c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <SystemInit+0x5c>)
 8001076:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SystemInit+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SystemInit+0x5c>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SystemInit+0x5c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SystemInit+0x5c>)
 8001092:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001096:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SystemInit+0x5c>)
 800109a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800109e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SystemInit+0x64>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	f8ff0000 	.word	0xf8ff0000
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010be:	e003      	b.n	80010c8 <LoopCopyDataInit>

080010c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010c6:	3104      	adds	r1, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010d0:	d3f6      	bcc.n	80010c0 <CopyDataInit>
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010d4:	e002      	b.n	80010dc <LoopFillZerobss>

080010d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010d8:	f842 3b04 	str.w	r3, [r2], #4

080010dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010e0:	d3f9      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010e2:	f7ff ffb7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f005 f969 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ea:	f7ff f86f 	bl	80001cc <main>
  bx lr
 80010ee:	4770      	bx	lr
  ldr r3, =_sidata
 80010f0:	080064a4 	.word	0x080064a4
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010f8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80010fc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001100:	20002e3c 	.word	0x20002e3c

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_Init+0x28>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x28>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f001 fae5 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fed8 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fcc2 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000008 	.word	0x20000008
 8001154:	20002e38 	.word	0x20002e38

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20002e38 	.word	0x20002e38

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008

080011b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0be      	b.n	8001350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fc94 	bl	8000b1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 faf7 	bl	80017e8 <ADC_ConversionStop_Disable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8099 	bne.w	800133e <HAL_ADC_Init+0x18e>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 8095 	bne.w	800133e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	f043 0202 	orr.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001248:	d003      	beq.n	8001252 <HAL_ADC_Init+0xa2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0xa8>
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	e000      	b.n	800125a <HAL_ADC_Init+0xaa>
 8001258:	2300      	movs	r3, #0
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d1b      	ldrb	r3, [r3, #20]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d119      	bne.n	800129c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	3b01      	subs	r3, #1
 8001276:	035a      	lsls	r2, r3, #13
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e00b      	b.n	800129c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f043 0220 	orr.w	r2, r3, #32
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_ADC_Init+0x1a8>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012cc:	d003      	beq.n	80012d6 <HAL_ADC_Init+0x126>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	051b      	lsls	r3, r3, #20
 80012de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_ADC_Init+0x1ac>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10b      	bne.n	800131c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131a:	e018      	b.n	800134e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f023 0312 	bic.w	r3, r3, #18
 8001324:	f043 0210 	orr.w	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	ffe1f7fd 	.word	0xffe1f7fd
 800135c:	ff1f0efe 	.word	0xff1f0efe

08001360 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a64      	ldr	r2, [pc, #400]	; (8001508 <HAL_ADC_Start_DMA+0x1a8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d004      	beq.n	8001384 <HAL_ADC_Start_DMA+0x24>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a63      	ldr	r2, [pc, #396]	; (800150c <HAL_ADC_Start_DMA+0x1ac>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d106      	bne.n	8001392 <HAL_ADC_Start_DMA+0x32>
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_ADC_Start_DMA+0x1a8>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 80b3 	bne.w	80014f8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_Start_DMA+0x40>
 800139c:	2302      	movs	r3, #2
 800139e:	e0ae      	b.n	80014fe <HAL_ADC_Start_DMA+0x19e>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f9cb 	bl	8001744 <ADC_Enable>
 80013ae:	4603      	mov	r3, r0
 80013b0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 809a 	bne.w	80014ee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a4e      	ldr	r2, [pc, #312]	; (800150c <HAL_ADC_Start_DMA+0x1ac>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d105      	bne.n	80013e4 <HAL_ADC_Start_DMA+0x84>
 80013d8:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <HAL_ADC_Start_DMA+0x1a8>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d115      	bne.n	8001410 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d026      	beq.n	800144c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140e:	e01d      	b.n	800144c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a39      	ldr	r2, [pc, #228]	; (8001508 <HAL_ADC_Start_DMA+0x1a8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d004      	beq.n	8001430 <HAL_ADC_Start_DMA+0xd0>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_ADC_Start_DMA+0x1ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d10d      	bne.n	800144c <HAL_ADC_Start_DMA+0xec>
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_ADC_Start_DMA+0x1a8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	f023 0206 	bic.w	r2, r3, #6
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
 8001464:	e002      	b.n	800146c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a25      	ldr	r2, [pc, #148]	; (8001510 <HAL_ADC_Start_DMA+0x1b0>)
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_ADC_Start_DMA+0x1b4>)
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_ADC_Start_DMA+0x1b8>)
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f06f 0202 	mvn.w	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a18      	ldr	r0, [r3, #32]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	334c      	adds	r3, #76	; 0x4c
 80014b0:	4619      	mov	r1, r3
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f001 f9a7 	bl	8002808 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014c8:	d108      	bne.n	80014dc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014d8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014da:	e00f      	b.n	80014fc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014ec:	e006      	b.n	80014fc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80014f6:	e001      	b.n	80014fc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40012400 	.word	0x40012400
 800150c:	40012800 	.word	0x40012800
 8001510:	0800185d 	.word	0x0800185d
 8001514:	080018d9 	.word	0x080018d9
 8001518:	080018f5 	.word	0x080018f5

0800151c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e0dc      	b.n	800172e <HAL_ADC_ConfigChannel+0x1da>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b06      	cmp	r3, #6
 8001582:	d81c      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	221f      	movs	r2, #31
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
 80015bc:	e03c      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d81c      	bhi.n	8001600 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b23      	subs	r3, #35	; 0x23
 80015d8:	221f      	movs	r2, #31
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	4019      	ands	r1, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b23      	subs	r3, #35	; 0x23
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
 80015fe:	e01b      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	3b41      	subs	r3, #65	; 0x41
 8001612:	221f      	movs	r2, #31
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	4019      	ands	r1, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b41      	subs	r3, #65	; 0x41
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d91c      	bls.n	800167a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6898      	ldr	r0, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	3b1e      	subs	r3, #30
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e019      	b.n	80016ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6919      	ldr	r1, [r3, #16]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	2207      	movs	r2, #7
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6898      	ldr	r0, [r3, #8]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d003      	beq.n	80016be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	d132      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_ADC_ConfigChannel+0x1e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d125      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d126      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d11a      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_ADC_ConfigChannel+0x1e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_ADC_ConfigChannel+0x1ec>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9a      	lsrs	r2, r3, #18
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001704:	e002      	b.n	800170c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3b01      	subs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x1b2>
 8001712:	e007      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40012400 	.word	0x40012400
 800173c:	20000000 	.word	0x20000000
 8001740:	431bde83 	.word	0x431bde83

08001744 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d039      	beq.n	80017d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <ADC_Enable+0x9c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <ADC_Enable+0xa0>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001780:	e002      	b.n	8001788 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3b01      	subs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800178e:	f7ff fce3 	bl	8001158 <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001794:	e018      	b.n	80017c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001796:	f7ff fcdf 	bl	8001158 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d911      	bls.n	80017c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e007      	b.n	80017d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d1df      	bne.n	8001796 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d127      	bne.n	8001852 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001812:	f7ff fca1 	bl	8001158 <HAL_GetTick>
 8001816:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001818:	e014      	b.n	8001844 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800181a:	f7ff fc9d 	bl	8001158 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d90d      	bls.n	8001844 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e007      	b.n	8001854 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d0e3      	beq.n	800181a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001872:	2b00      	cmp	r3, #0
 8001874:	d127      	bne.n	80018c6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800188c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001890:	d115      	bne.n	80018be <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001896:	2b00      	cmp	r3, #0
 8001898:	d111      	bne.n	80018be <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fe2c 	bl	800151c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018c4:	e004      	b.n	80018d0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff fe21 	bl	800152e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f043 0204 	orr.w	r2, r3, #4
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fe10 	bl	8001540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0ed      	b.n	8001b16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff f950 	bl	8000bec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0202 	bic.w	r2, r2, #2
 800195a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7ff fbfc 	bl	8001158 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001962:	e012      	b.n	800198a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001964:	f7ff fbf8 	bl	8001158 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d90b      	bls.n	800198a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0c5      	b.n	8001b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e5      	bne.n	8001964 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a8:	f7ff fbd6 	bl	8001158 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ae:	e012      	b.n	80019d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b0:	f7ff fbd2 	bl	8001158 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d90b      	bls.n	80019d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2205      	movs	r2, #5
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e09f      	b.n	8001b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0e5      	beq.n	80019b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e1b      	ldrb	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e5b      	ldrb	r3, [r3, #25]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7e9b      	ldrb	r3, [r3, #26]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0220 	bic.w	r2, r2, #32
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7edb      	ldrb	r3, [r3, #27]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0210 	bic.w	r2, r2, #16
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0210 	orr.w	r2, r2, #16
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7f1b      	ldrb	r3, [r3, #28]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0208 	orr.w	r2, r2, #8
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e007      	b.n	8001ab6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0208 	bic.w	r2, r2, #8
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7f5b      	ldrb	r3, [r3, #29]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0204 	orr.w	r2, r2, #4
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e007      	b.n	8001ae0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0204 	bic.w	r2, r2, #4
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	ea42 0103 	orr.w	r1, r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d003      	beq.n	8001b44 <HAL_CAN_ConfigFilter+0x26>
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	f040 80aa 	bne.w	8001c98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d123      	bne.n	8001bc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ba0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3248      	adds	r2, #72	; 0x48
 8001ba6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bbc:	6979      	ldr	r1, [r7, #20]
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d122      	bne.n	8001c14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3248      	adds	r2, #72	; 0x48
 8001bf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0a:	6979      	ldr	r1, [r7, #20]
 8001c0c:	3348      	adds	r3, #72	; 0x48
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c2e:	e007      	b.n	8001c40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c8a:	f023 0201 	bic.w	r2, r3, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e006      	b.n	8001ca6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d12e      	bne.n	8001d22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff fa3c 	bl	8001158 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce2:	e012      	b.n	8001d0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce4:	f7ff fa38 	bl	8001158 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d90b      	bls.n	8001d0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e012      	b.n	8001d30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e5      	bne.n	8001ce4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e006      	b.n	8001d30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d56:	7ffb      	ldrb	r3, [r7, #31]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d003      	beq.n	8001d64 <HAL_CAN_AddTxMessage+0x2c>
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	f040 80b8 	bne.w	8001ed4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a0 	beq.w	8001ec4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	0e1b      	lsrs	r3, r3, #24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d907      	bls.n	8001da4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e09e      	b.n	8001ee2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001da4:	2201      	movs	r2, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	409a      	lsls	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	6809      	ldr	r1, [r1, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	440b      	add	r3, r1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e00f      	b.n	8001df2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ddc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001de6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3318      	adds	r3, #24
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3318      	adds	r3, #24
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	440b      	add	r3, r1
 8001e02:	3304      	adds	r3, #4
 8001e04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	7d1b      	ldrb	r3, [r3, #20]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d111      	bne.n	8001e32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3318      	adds	r3, #24
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3318      	adds	r3, #24
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3304      	adds	r3, #4
 8001e30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3307      	adds	r3, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3305      	adds	r3, #5
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	3204      	adds	r2, #4
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	4610      	mov	r0, r2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	6811      	ldr	r1, [r2, #0]
 8001e5a:	ea43 0200 	orr.w	r2, r3, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	061a      	lsls	r2, r3, #24
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	4313      	orrs	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6811      	ldr	r1, [r2, #0]
 8001e90:	ea43 0200 	orr.w	r2, r3, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	6811      	ldr	r1, [r2, #0]
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e00e      	b.n	8001ee2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e006      	b.n	8001ee2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f00:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d003      	beq.n	8001f10 <HAL_CAN_GetRxMessage+0x24>
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f040 80f3 	bne.w	80020f6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10e      	bne.n	8001f34 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0e7      	b.n	8002104 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0d8      	b.n	8002104 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	331b      	adds	r3, #27
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0204 	and.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	331b      	adds	r3, #27
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0d5b      	lsrs	r3, r3, #21
 8001f80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00b      	b.n	8001fa2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	331b      	adds	r3, #27
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	331b      	adds	r3, #27
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0202 	and.w	r2, r3, #2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	331b      	adds	r3, #27
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	331b      	adds	r3, #27
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	331b      	adds	r3, #27
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4413      	add	r3, r2
 8002020:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0a1a      	lsrs	r2, r3, #8
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0c1a      	lsrs	r2, r3, #16
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3302      	adds	r3, #2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e1a      	lsrs	r2, r3, #24
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3303      	adds	r3, #3
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3304      	adds	r3, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0a1a      	lsrs	r2, r3, #8
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3305      	adds	r3, #5
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0c1a      	lsrs	r2, r3, #16
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3306      	adds	r3, #6
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e1a      	lsrs	r2, r3, #24
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3307      	adds	r3, #7
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e007      	b.n	80020f2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e006      	b.n	8002104 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
  }
}
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d002      	beq.n	800212c <HAL_CAN_ActivateNotification+0x1e>
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d109      	bne.n	8002140 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6959      	ldr	r1, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e006      	b.n	800214e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07c      	beq.n	8002298 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d023      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f97d 	bl	80024ba <HAL_CAN_TxMailbox0CompleteCallback>
 80021c0:	e016      	b.n	80021f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	e00c      	b.n	80021f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	e002      	b.n	80021f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f980 	bl	80024f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d024      	beq.n	8002244 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002202:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f95c 	bl	80024cc <HAL_CAN_TxMailbox1CompleteCallback>
 8002214:	e016      	b.n	8002244 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	e00c      	b.n	8002244 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	e002      	b.n	8002244 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f95f 	bl	8002502 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d024      	beq.n	8002298 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002256:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f93b 	bl	80024de <HAL_CAN_TxMailbox2CompleteCallback>
 8002268:	e016      	b.n	8002298 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	e00c      	b.n	8002298 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e002      	b.n	8002298 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f93e 	bl	8002514 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2210      	movs	r2, #16
 80022ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f924 	bl	8002526 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fb48 	bl	800098c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2210      	movs	r2, #16
 800231e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2208      	movs	r2, #8
 800233a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f904 	bl	800254a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8ec 	bl	8002538 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8ed 	bl	800255c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2208      	movs	r2, #8
 800239c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8e5 	bl	800256e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d075      	beq.n	800249a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d06c      	beq.n	8002492 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03d      	beq.n	8002492 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800241c:	2b00      	cmp	r3, #0
 800241e:	d038      	beq.n	8002492 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002426:	2b30      	cmp	r3, #48	; 0x30
 8002428:	d017      	beq.n	800245a <HAL_CAN_IRQHandler+0x302>
 800242a:	2b30      	cmp	r3, #48	; 0x30
 800242c:	d804      	bhi.n	8002438 <HAL_CAN_IRQHandler+0x2e0>
 800242e:	2b10      	cmp	r3, #16
 8002430:	d009      	beq.n	8002446 <HAL_CAN_IRQHandler+0x2ee>
 8002432:	2b20      	cmp	r3, #32
 8002434:	d00c      	beq.n	8002450 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002436:	e024      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002438:	2b50      	cmp	r3, #80	; 0x50
 800243a:	d018      	beq.n	800246e <HAL_CAN_IRQHandler+0x316>
 800243c:	2b60      	cmp	r3, #96	; 0x60
 800243e:	d01b      	beq.n	8002478 <HAL_CAN_IRQHandler+0x320>
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d00f      	beq.n	8002464 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002444:	e01d      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800244e:	e018      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002458:	e013      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002462:	e00e      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800246c:	e009      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002476:	e004      	b.n	8002482 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002480:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002490:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f867 	bl	8002580 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <__NVIC_EnableIRQ+0x34>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff4f 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff64 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ffb2 	bl	8002684 <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff81 	bl	8002630 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff57 	bl	80025f8 <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e043      	b.n	80027f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_DMA_Init+0xa8>)
 8002772:	4413      	add	r3, r2
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <HAL_DMA_Init+0xac>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	009a      	lsls	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_DMA_Init+0xb0>)
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800279e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	bffdfff8 	.word	0xbffdfff8
 8002800:	cccccccd 	.word	0xcccccccd
 8002804:	40020000 	.word	0x40020000

08002808 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_DMA_Start_IT+0x20>
 8002824:	2302      	movs	r3, #2
 8002826:	e04a      	b.n	80028be <HAL_DMA_Start_IT+0xb6>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002836:	2b01      	cmp	r3, #1
 8002838:	d13a      	bne.n	80028b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f9ae 	bl	8002bc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 020e 	orr.w	r2, r2, #14
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e00f      	b.n	800289e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0204 	bic.w	r2, r2, #4
 800288c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 020a 	orr.w	r2, r2, #10
 800289c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e005      	b.n	80028bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d005      	beq.n	80028ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e051      	b.n	800298e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020e 	bic.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_DMA_Abort_IT+0xd0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d029      	beq.n	8002968 <HAL_DMA_Abort_IT+0xa0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_DMA_Abort_IT+0xd4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_DMA_Abort_IT+0x9c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <HAL_DMA_Abort_IT+0xd8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01a      	beq.n	800295e <HAL_DMA_Abort_IT+0x96>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_DMA_Abort_IT+0xdc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d012      	beq.n	8002958 <HAL_DMA_Abort_IT+0x90>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_DMA_Abort_IT+0xe0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00a      	beq.n	8002952 <HAL_DMA_Abort_IT+0x8a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <HAL_DMA_Abort_IT+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d102      	bne.n	800294c <HAL_DMA_Abort_IT+0x84>
 8002946:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800294a:	e00e      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 800294c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002950:	e00b      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 8002952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002956:	e008      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 8002958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295c:	e005      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 800295e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002962:	e002      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 8002964:	2310      	movs	r3, #16
 8002966:	e000      	b.n	800296a <HAL_DMA_Abort_IT+0xa2>
 8002968:	2301      	movs	r3, #1
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_DMA_Abort_IT+0xe8>)
 800296c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
    } 
  }
  return status;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40020008 	.word	0x40020008
 800299c:	4002001c 	.word	0x4002001c
 80029a0:	40020030 	.word	0x40020030
 80029a4:	40020044 	.word	0x40020044
 80029a8:	40020058 	.word	0x40020058
 80029ac:	4002006c 	.word	0x4002006c
 80029b0:	40020000 	.word	0x40020000

080029b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d04f      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xc8>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d04a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d029      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xae>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a65      	ldr	r2, [pc, #404]	; (8002ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xaa>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_DMA_IRQHandler+0x1f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01a      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xa4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x9e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a60      	ldr	r2, [pc, #384]	; (8002bb4 <HAL_DMA_IRQHandler+0x200>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00a      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x98>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_DMA_IRQHandler+0x204>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x92>
 8002a40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a44:	e00e      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a4a:	e00b      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a50:	e008      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a56:	e005      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	e002      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_IRQHandler+0xb0>
 8002a62:	2304      	movs	r3, #4
 8002a64:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <HAL_DMA_IRQHandler+0x208>)
 8002a66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8094 	beq.w	8002b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a7a:	e08e      	b.n	8002b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2202      	movs	r2, #2
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d056      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x186>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d051      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 020a 	bic.w	r2, r2, #10
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d029      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x166>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a37      	ldr	r2, [pc, #220]	; (8002ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x162>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a35      	ldr	r2, [pc, #212]	; (8002bac <HAL_DMA_IRQHandler+0x1f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x15c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d012      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x156>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <HAL_DMA_IRQHandler+0x200>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00a      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x150>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <HAL_DMA_IRQHandler+0x204>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <HAL_DMA_IRQHandler+0x14a>
 8002af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002afc:	e00e      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b02:	e00b      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b08:	e008      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b0e:	e005      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b14:	e002      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002b16:	2320      	movs	r3, #32
 8002b18:	e000      	b.n	8002b1c <HAL_DMA_IRQHandler+0x168>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_DMA_IRQHandler+0x208>)
 8002b1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d034      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b38:	e02f      	b.n	8002b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2208      	movs	r2, #8
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d028      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x1e8>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020e 	bic.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
    }
  }
  return;
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
}
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40020008 	.word	0x40020008
 8002ba8:	4002001c 	.word	0x4002001c
 8002bac:	40020030 	.word	0x40020030
 8002bb0:	40020044 	.word	0x40020044
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	4002006c 	.word	0x4002006c
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d108      	bne.n	8002c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bfe:	e007      	b.n	8002c10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e127      	b.n	8002e80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c30:	2201      	movs	r2, #1
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8116 	bne.w	8002e7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b12      	cmp	r3, #18
 8002c54:	d034      	beq.n	8002cc0 <HAL_GPIO_Init+0xa4>
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d80d      	bhi.n	8002c76 <HAL_GPIO_Init+0x5a>
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_GPIO_Init+0x9a>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d804      	bhi.n	8002c6c <HAL_GPIO_Init+0x50>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d031      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d01c      	beq.n	8002ca4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6a:	e048      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d043      	beq.n	8002cf8 <HAL_GPIO_Init+0xdc>
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d01b      	beq.n	8002cac <HAL_GPIO_Init+0x90>
          break;
 8002c74:	e043      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c76:	4a89      	ldr	r2, [pc, #548]	; (8002e9c <HAL_GPIO_Init+0x280>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d026      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c7c:	4a87      	ldr	r2, [pc, #540]	; (8002e9c <HAL_GPIO_Init+0x280>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d806      	bhi.n	8002c90 <HAL_GPIO_Init+0x74>
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_GPIO_Init+0x284>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d020      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <HAL_GPIO_Init+0x288>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_GPIO_Init+0xae>
          break;
 8002c8e:	e036      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c90:	4a85      	ldr	r2, [pc, #532]	; (8002ea8 <HAL_GPIO_Init+0x28c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c96:	4a85      	ldr	r2, [pc, #532]	; (8002eac <HAL_GPIO_Init+0x290>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d016      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c9c:	4a84      	ldr	r2, [pc, #528]	; (8002eb0 <HAL_GPIO_Init+0x294>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0xae>
          break;
 8002ca2:	e02c      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e028      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e023      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e01e      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e019      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e012      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	611a      	str	r2, [r3, #16]
          break;
 8002cea:	e008      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cec:	2308      	movs	r3, #8
 8002cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	615a      	str	r2, [r3, #20]
          break;
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
          break;
 8002cfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	d801      	bhi.n	8002d08 <HAL_GPIO_Init+0xec>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e001      	b.n	8002d0c <HAL_GPIO_Init+0xf0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2bff      	cmp	r3, #255	; 0xff
 8002d12:	d802      	bhi.n	8002d1a <HAL_GPIO_Init+0xfe>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x104>
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3b08      	subs	r3, #8
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	210f      	movs	r1, #15
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	401a      	ands	r2, r3
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8096 	beq.w	8002e7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4e:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6193      	str	r3, [r2, #24]
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d66:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_GPIO_Init+0x29c>)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	; (8002ebc <HAL_GPIO_Init+0x2a0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x19e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4a      	ldr	r2, [pc, #296]	; (8002ec0 <HAL_GPIO_Init+0x2a4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x19a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_GPIO_Init+0x2a8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x196>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <HAL_GPIO_Init+0x2ac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x192>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dcc:	493a      	ldr	r1, [pc, #232]	; (8002eb8 <HAL_GPIO_Init+0x29c>)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4938      	ldr	r1, [pc, #224]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
 8002df2:	e006      	b.n	8002e02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4933      	ldr	r1, [pc, #204]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	492e      	ldr	r1, [pc, #184]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	4929      	ldr	r1, [pc, #164]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	491f      	ldr	r1, [pc, #124]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	491a      	ldr	r1, [pc, #104]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4915      	ldr	r1, [pc, #84]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f aed0 	bne.w	8002c30 <HAL_GPIO_Init+0x14>
  }
}
 8002e90:	bf00      	nop
 8002e92:	372c      	adds	r7, #44	; 0x2c
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	10210000 	.word	0x10210000
 8002ea0:	10110000 	.word	0x10110000
 8002ea4:	10120000 	.word	0x10120000
 8002ea8:	10310000 	.word	0x10310000
 8002eac:	10320000 	.word	0x10320000
 8002eb0:	10220000 	.word	0x10220000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	40010c00 	.word	0x40010c00
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40011400 	.word	0x40011400
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e10f      	b.n	8003132 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fee0 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f44:	f000 ffd4 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8002f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	; (800313c <HAL_I2C_Init+0x23c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d807      	bhi.n	8002f64 <HAL_I2C_Init+0x64>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_I2C_Init+0x240>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e006      	b.n	8002f72 <HAL_I2C_Init+0x72>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a77      	ldr	r2, [pc, #476]	; (8003144 <HAL_I2C_Init+0x244>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bf94      	ite	ls
 8002f6c:	2301      	movls	r3, #1
 8002f6e:	2300      	movhi	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0db      	b.n	8003132 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_I2C_Init+0x248>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0c9b      	lsrs	r3, r3, #18
 8002f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a64      	ldr	r2, [pc, #400]	; (800313c <HAL_I2C_Init+0x23c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <HAL_I2C_Init+0xb4>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	e009      	b.n	8002fc8 <HAL_I2C_Init+0xc8>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	4a63      	ldr	r2, [pc, #396]	; (800314c <HAL_I2C_Init+0x24c>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4956      	ldr	r1, [pc, #344]	; (800313c <HAL_I2C_Init+0x23c>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d80d      	bhi.n	8003004 <HAL_I2C_Init+0x104>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e59      	subs	r1, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	bf38      	it	cc
 8003000:	2304      	movcc	r3, #4
 8003002:	e04f      	b.n	80030a4 <HAL_I2C_Init+0x1a4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d111      	bne.n	8003030 <HAL_I2C_Init+0x130>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e012      	b.n	8003056 <HAL_I2C_Init+0x156>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x15e>
 800305a:	2301      	movs	r3, #1
 800305c:	e022      	b.n	80030a4 <HAL_I2C_Init+0x1a4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10e      	bne.n	8003084 <HAL_I2C_Init+0x184>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e58      	subs	r0, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	440b      	add	r3, r1
 8003074:	fbb0 f3f3 	udiv	r3, r0, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Init+0x1a4>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	6809      	ldr	r1, [r1, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6911      	ldr	r1, [r2, #16]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	000186a0 	.word	0x000186a0
 8003140:	001e847f 	.word	0x001e847f
 8003144:	003d08ff 	.word	0x003d08ff
 8003148:	431bde83 	.word	0x431bde83
 800314c:	10624dd3 	.word	0x10624dd3

08003150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	460b      	mov	r3, r1
 800315e:	817b      	strh	r3, [r7, #10]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7fd fff8 	bl	8001158 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	f040 80e0 	bne.w	8003338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2319      	movs	r3, #25
 800317e:	2201      	movs	r2, #1
 8003180:	4970      	ldr	r1, [pc, #448]	; (8003344 <HAL_I2C_Master_Transmit+0x1f4>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f958 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	e0d3      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2C_Master_Transmit+0x50>
 800319c:	2302      	movs	r3, #2
 800319e:	e0cc      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d007      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2221      	movs	r2, #33	; 0x21
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <HAL_I2C_Master_Transmit+0x1f8>)
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003208:	8979      	ldrh	r1, [r7, #10]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f89c 	bl	800334c <I2C_MasterRequestWrite>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e08d      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003234:	e066      	b.n	8003304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f9d2 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x188>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f9c2 	bl	8003666 <I2C_WaitOnBTFFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d107      	bne.n	8003300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01a      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d194      	bne.n	8003236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	00100002 	.word	0x00100002
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d006      	beq.n	8003376 <I2C_MasterRequestWrite+0x2a>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d003      	beq.n	8003376 <I2C_MasterRequestWrite+0x2a>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003374:	d108      	bne.n	8003388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e00b      	b.n	80033a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	2b12      	cmp	r3, #18
 800338e:	d107      	bne.n	80033a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800339e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f843 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e035      	b.n	8003428 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d4:	611a      	str	r2, [r3, #16]
 80033d6:	e01b      	b.n	8003410 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	11db      	asrs	r3, r3, #7
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f063 030f 	orn	r3, r3, #15
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	490e      	ldr	r1, [pc, #56]	; (8003430 <I2C_MasterRequestWrite+0xe4>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f875 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e010      	b.n	8003428 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <I2C_MasterRequestWrite+0xe8>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f865 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00010008 	.word	0x00010008
 8003434:	00010002 	.word	0x00010002

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e025      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d021      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fd fe81 	bl	8001158 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e023      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10d      	bne.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	e00c      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d0b6      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f4:	e051      	b.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003504:	d123      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800351e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e046      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d021      	beq.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fd fdff 	bl	8001158 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e020      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d18d      	bne.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f0:	e02d      	b.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f878 	bl	80036e8 <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e02d      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d021      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd fda5 	bl	8001158 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d116      	bne.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d1ca      	bne.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003672:	e02d      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f837 	bl	80036e8 <I2C_IsAcknowledgeFailed>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e02d      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d021      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd fd64 	bl	8001158 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e007      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d1ca      	bne.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d11b      	bne.n	8003738 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003708:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e26c      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8087 	beq.w	8003872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003764:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00c      	beq.n	800378a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003770:	4b8f      	ldr	r3, [pc, #572]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d112      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5e>
 800377c:	4b8c      	ldr	r3, [pc, #560]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d10b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378a:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d06c      	beq.n	8003870 <HAL_RCC_OscConfig+0x12c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d168      	bne.n	8003870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e246      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x76>
 80037ac:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7f      	ldr	r2, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e02e      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x98>
 80037c2:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7a      	ldr	r2, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0xbc>
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a71      	ldr	r2, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6e      	ldr	r2, [pc, #440]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 8003800:	4b6b      	ldr	r3, [pc, #428]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6a      	ldr	r2, [pc, #424]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a67      	ldr	r2, [pc, #412]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fc9a 	bl	8001158 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fd fc96 	bl	8001158 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1fa      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xe4>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fc86 	bl	8001158 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fc82 	bl	8001158 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1e6      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x10c>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800388a:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x18c>
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x176>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1ba      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4939      	ldr	r1, [pc, #228]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x270>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd fc3b 	bl	8001158 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fd fc37 	bl	8001158 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e19b      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4927      	ldr	r1, [pc, #156]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCC_OscConfig+0x270>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fc1a 	bl	8001158 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fc16 	bl	8001158 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e17a      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03a      	beq.n	80039c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <HAL_RCC_OscConfig+0x274>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fd fbfa 	bl	8001158 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fd fbf6 	bl	8001158 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e15a      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003986:	2001      	movs	r0, #1
 8003988:	f000 fb0a 	bl	8003fa0 <RCC_Delay>
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_RCC_OscConfig+0x274>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fd fbe0 	bl	8001158 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	e00f      	b.n	80039bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fd fbdc 	bl	8001158 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d908      	bls.n	80039bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e140      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	42420000 	.word	0x42420000
 80039b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b9e      	ldr	r3, [pc, #632]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e9      	bne.n	800399c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a6 	beq.w	8003b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b97      	ldr	r3, [pc, #604]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b94      	ldr	r3, [pc, #592]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4a93      	ldr	r2, [pc, #588]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	61d3      	str	r3, [r2, #28]
 80039f2:	4b91      	ldr	r3, [pc, #580]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b8e      	ldr	r3, [pc, #568]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a8a      	ldr	r2, [pc, #552]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fb9d 	bl	8001158 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fd fb99 	bl	8001158 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b64      	cmp	r3, #100	; 0x64
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0fd      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b81      	ldr	r3, [pc, #516]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x312>
 8003a48:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e02d      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x334>
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a72      	ldr	r2, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	e01c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d10c      	bne.n	8003a9a <HAL_RCC_OscConfig+0x356>
 8003a80:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a6c      	ldr	r2, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a69      	ldr	r2, [pc, #420]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	e00b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a9a:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6213      	str	r3, [r2, #32]
 8003aa6:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d015      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fd fb4d 	bl	8001158 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fb49 	bl	8001158 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0ab      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ee      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x37e>
 8003ae4:	e014      	b.n	8003b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fb37 	bl	8001158 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fd fb33 	bl	8001158 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e095      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ee      	bne.n	8003aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a47      	ldr	r2, [pc, #284]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8081 	beq.w	8003c2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2c:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d061      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d146      	bne.n	8003bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fd fb07 	bl	8001158 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fb03 	bl	8001158 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e067      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	492d      	ldr	r1, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a19      	ldr	r1, [r3, #32]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	4927      	ldr	r1, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba0:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fad7 	bl	8001158 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fd fad3 	bl	8001158 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e037      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x46a>
 8003bcc:	e02f      	b.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fac0 	bl	8001158 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fabc 	bl	8001158 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e020      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x498>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e013      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42420060 	.word	0x42420060

08003c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d0      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4965      	ldr	r1, [pc, #404]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b8      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	494d      	ldr	r1, [pc, #308]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d040      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d115      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e073      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4936      	ldr	r1, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d34:	f7fd fa10 	bl	8001158 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3c:	f7fd fa0c 	bl	8001158 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e053      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 020c 	and.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1eb      	bne.n	8003d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d210      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4916      	ldr	r1, [pc, #88]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dd2:	f000 f821 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1cc>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd f86e 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08006484 	.word	0x08006484
 8003e10:	20000000 	.word	0x20000000
 8003e14:	20000004 	.word	0x20000004

08003e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	b490      	push	{r4, r7}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e20:	1d3c      	adds	r4, r7, #4
 8003e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x40>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x46>
 8003e56:	e02d      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e5a:	623b      	str	r3, [r7, #32]
      break;
 8003e5c:	e02d      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c5b      	lsrs	r3, r3, #17
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e96:	fb02 f203 	mul.w	r2, r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e004      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	623b      	str	r3, [r7, #32]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eb6:	623b      	str	r3, [r7, #32]
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc90      	pop	{r4, r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	08006468 	.word	0x08006468
 8003ecc:	08006478 	.word	0x08006478
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	003d0900 	.word	0x003d0900

08003edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	20000000 	.word	0x20000000

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef4:	f7ff fff2 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003ef8:	4601      	mov	r1, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4a03      	ldr	r2, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08006494 	.word	0x08006494

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f1c:	f7ff ffde 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003f20:	4601      	mov	r1, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0adb      	lsrs	r3, r3, #11
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08006494 	.word	0x08006494

08003f40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_RCC_GetClockConfig+0x58>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_RCC_GetClockConfig+0x58>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_GetClockConfig+0x58>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_RCC_GetClockConfig+0x58>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_GetClockConfig+0x5c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40022000 	.word	0x40022000

08003fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <RCC_Delay+0x34>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <RCC_Delay+0x38>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0a5b      	lsrs	r3, r3, #9
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fbc:	bf00      	nop
  }
  while (Delay --);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f9      	bne.n	8003fbc <RCC_Delay+0x1c>
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffc:	4b4f      	ldr	r3, [pc, #316]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4a4b      	ldr	r2, [pc, #300]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	61d3      	str	r3, [r2, #28]
 8004014:	4b49      	ldr	r3, [pc, #292]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	4b46      	ldr	r3, [pc, #280]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d118      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403c:	f7fd f88c 	bl	8001158 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fd f888 	bl	8001158 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e06d      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02e      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d027      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004090:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004096:	4a29      	ldr	r2, [pc, #164]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd f857 	bl	8001158 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd f853 	bl	8001158 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e036      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4917      	ldr	r1, [pc, #92]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	490b      	ldr	r1, [pc, #44]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	42420440 	.word	0x42420440

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e01d      	b.n	8004196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f815 	bl	800419e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 f962 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d007      	beq.n	80041ea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d122      	bne.n	8004252 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d11b      	bne.n	8004252 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f06f 0202 	mvn.w	r2, #2
 8004222:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8ed 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 800423e:	e005      	b.n	800424c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8e0 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8ef 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b04      	cmp	r3, #4
 800425e:	d122      	bne.n	80042a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d11b      	bne.n	80042a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f06f 0204 	mvn.w	r2, #4
 8004276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8c3 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 8004292:	e005      	b.n	80042a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8b6 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8c5 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d122      	bne.n	80042fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d11b      	bne.n	80042fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0208 	mvn.w	r2, #8
 80042ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2204      	movs	r2, #4
 80042d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f899 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 80042e6:	e005      	b.n	80042f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f88c 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f89b 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d122      	bne.n	800434e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d11b      	bne.n	800434e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0210 	mvn.w	r2, #16
 800431e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2208      	movs	r2, #8
 8004324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f86f 	bl	8004418 <HAL_TIM_IC_CaptureCallback>
 800433a:	e005      	b.n	8004348 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f862 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f871 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10e      	bne.n	800437a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0201 	mvn.w	r2, #1
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fb81 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d10e      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8c0 	bl	8004526 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d10e      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f835 	bl	800443c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d10e      	bne.n	80043fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d107      	bne.n	80043fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0220 	mvn.w	r2, #32
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f88b 	bl	8004514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
	...

08004450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a29      	ldr	r2, [pc, #164]	; (8004508 <TIM_Base_SetConfig+0xb8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <TIM_Base_SetConfig+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x30>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_Base_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <TIM_Base_SetConfig+0xb8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d007      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <TIM_Base_SetConfig+0xbc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_Base_SetConfig+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <TIM_Base_SetConfig+0xc0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <TIM_Base_SetConfig+0xb8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e03f      	b.n	80045ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fc02 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	; 0x24
 8004568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb8d 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af02      	add	r7, sp, #8
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	f040 8083 	bne.w	80046fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_UART_Transmit+0x2e>
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e07b      	b.n	80046fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UART_Transmit+0x40>
 800460e:	2302      	movs	r3, #2
 8004610:	e074      	b.n	80046fc <HAL_UART_Transmit+0x12a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004628:	f7fc fd96 	bl	8001158 <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800463a:	e042      	b.n	80046c2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d122      	bne.n	800469a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f9b2 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e046      	b.n	80046fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004680:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3302      	adds	r3, #2
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	e017      	b.n	80046c2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3301      	adds	r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	e013      	b.n	80046c2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f98f 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e023      	b.n	80046fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	60ba      	str	r2, [r7, #8]
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1b7      	bne.n	800463c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f976 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e00a      	b.n	80046fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	d140      	bne.n	80047a0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_UART_Receive_IT+0x26>
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e039      	b.n	80047a2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_UART_Receive_IT+0x38>
 8004738:	2302      	movs	r3, #2
 800473a:	e032      	b.n	80047a2 <HAL_UART_Receive_IT+0x9e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800477a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_UART_IRQHandler+0x52>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9ce 	bl	8004b98 <UART_Receive_IT>
      return;
 80047fc:	e0cc      	b.n	8004998 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80ab 	beq.w	800495c <HAL_UART_IRQHandler+0x1b0>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <HAL_UART_IRQHandler+0x70>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a0 	beq.w	800495c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_UART_IRQHandler+0x90>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_UART_IRQHandler+0xb0>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	f043 0202 	orr.w	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_UART_IRQHandler+0xd0>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_UART_IRQHandler+0xf0>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	f043 0208 	orr.w	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d078      	beq.n	8004996 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_UART_IRQHandler+0x112>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f96d 	bl	8004b98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <HAL_UART_IRQHandler+0x13a>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d031      	beq.n	800494a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8b8 	bl	8004a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d023      	beq.n	8004942 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004908:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_UART_IRQHandler+0x1f4>)
 8004918:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd ffd2 	bl	80028c8 <HAL_DMA_Abort_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004934:	4610      	mov	r0, r2
 8004936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e00e      	b.n	8004958 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f83b 	bl	80049b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e00a      	b.n	8004958 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f837 	bl	80049b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	e006      	b.n	8004958 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f833 	bl	80049b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004956:	e01e      	b.n	8004996 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	bf00      	nop
    return;
 800495a:	e01c      	b.n	8004996 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_UART_IRQHandler+0x1cc>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8a4 	bl	8004abe <UART_Transmit_IT>
    return;
 8004976:	e00f      	b.n	8004998 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_UART_IRQHandler+0x1ec>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f8eb 	bl	8004b68 <UART_EndTransmit_IT>
    return;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004996:	bf00      	nop
  }
}
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	08004a97 	.word	0x08004a97

080049a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	e02c      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d028      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e8:	f7fc fbb6 	bl	8001158 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d21d      	bcs.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d0c3      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff80 	bl	80049b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d144      	bne.n	8004b5c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ada:	d11a      	bne.n	8004b12 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	1c9a      	adds	r2, r3, #2
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]
 8004b04:	e00e      	b.n	8004b24 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]
 8004b10:	e008      	b.n	8004b24 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6211      	str	r1, [r2, #32]
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4619      	mov	r1, r3
 8004b32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10f      	bne.n	8004b58 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff0b 	bl	80049a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d171      	bne.n	8004c90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d123      	bne.n	8004bfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10e      	bne.n	8004be2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
 8004be0:	e029      	b.n	8004c36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004bfc:	e01b      	b.n	8004c36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6858      	ldr	r0, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	1c59      	adds	r1, r3, #1
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6291      	str	r1, [r2, #40]	; 0x28
 8004c16:	b2c2      	uxtb	r2, r0
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e00c      	b.n	8004c36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	1c58      	adds	r0, r3, #1
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	6288      	str	r0, [r1, #40]	; 0x28
 8004c2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4619      	mov	r1, r3
 8004c44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d120      	bne.n	8004c8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0220 	bic.w	r2, r2, #32
 8004c58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb fa7c 	bl	8000180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e002      	b.n	8004c92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cd6:	f023 030c 	bic.w	r3, r3, #12
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <UART_SetConfig+0x1ac>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d14e      	bne.n	8004da2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7ff f908 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8004d08:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	0119      	lsls	r1, r3, #4
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	4419      	add	r1, r3
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	fb00 f303 	mul.w	r3, r0, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	3332      	adds	r3, #50	; 0x32
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004da0:	e04d      	b.n	8004e3e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004da2:	f7ff f8a5 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8004da6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009a      	lsls	r2, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	0119      	lsls	r1, r3, #4
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009a      	lsls	r2, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004de0:	fba3 0302 	umull	r0, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2064      	movs	r0, #100	; 0x64
 8004de8:	fb00 f303 	mul.w	r3, r0, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	3332      	adds	r3, #50	; 0x32
 8004df2:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfe:	4419      	add	r1, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009a      	lsls	r2, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004e18:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2064      	movs	r0, #100	; 0x64
 8004e20:	fb00 f303 	mul.w	r3, r0, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	3332      	adds	r3, #50	; 0x32
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <UART_SetConfig+0x1b0>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	51eb851f 	.word	0x51eb851f

08004e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0208 	add.w	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f103 0208 	add.w	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f103 0208 	add.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d103      	bne.n	8004f0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e00c      	b.n	8004f26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e002      	b.n	8004f1a <vListInsert+0x2e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d2f6      	bcs.n	8004f14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6892      	ldr	r2, [r2, #8]
 8004f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6852      	ldr	r2, [r2, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d103      	bne.n	8004f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08e      	sub	sp, #56	; 0x38
 8004fb2:	af04      	add	r7, sp, #16
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	e7fe      	b.n	8004fd4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <xTaskCreateStatic+0x42>
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e7fe      	b.n	8004fee <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ff0:	2354      	movs	r3, #84	; 0x54
 8004ff2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b54      	cmp	r3, #84	; 0x54
 8004ff8:	d009      	beq.n	800500e <xTaskCreateStatic+0x60>
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e7fe      	b.n	800500c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01e      	beq.n	8005052 <xTaskCreateStatic+0xa4>
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01b      	beq.n	8005052 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005022:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800502c:	2300      	movs	r3, #0
 800502e:	9303      	str	r3, [sp, #12]
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f850 	bl	80050ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800504a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800504c:	f000 f8cc 	bl	80051e8 <prvAddNewTaskToReadyList>
 8005050:	e001      	b.n	8005056 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005056:	697b      	ldr	r3, [r7, #20]
	}
 8005058:	4618      	mov	r0, r3
 800505a:	3728      	adds	r7, #40	; 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4618      	mov	r0, r3
 8005076:	f000 ffcd 	bl	8006014 <pvPortMalloc>
 800507a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005082:	2054      	movs	r0, #84	; 0x54
 8005084:	f000 ffc6 	bl	8006014 <pvPortMalloc>
 8005088:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
 8005096:	e005      	b.n	80050a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	f001 f87d 	bl	8006198 <vPortFree>
 800509e:	e001      	b.n	80050a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	2300      	movs	r3, #0
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f80e 	bl	80050ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ce:	69f8      	ldr	r0, [r7, #28]
 80050d0:	f000 f88a 	bl	80051e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050d4:	2301      	movs	r3, #1
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e002      	b.n	80050e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050e0:	69bb      	ldr	r3, [r7, #24]
	}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005102:	3b01      	subs	r3, #1
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <prvInitialiseNewTask+0x46>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e7fe      	b.n	800512e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e012      	b.n	800515c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	7819      	ldrb	r1, [r3, #0]
 800513e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	3334      	adds	r3, #52	; 0x34
 8005146:	460a      	mov	r2, r1
 8005148:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3301      	adds	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d9e9      	bls.n	8005136 <prvInitialiseNewTask+0x4c>
 8005162:	e000      	b.n	8005166 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005164:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2b06      	cmp	r3, #6
 8005172:	d901      	bls.n	8005178 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005174:	2306      	movs	r3, #6
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	3304      	adds	r3, #4
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fe7d 	bl	8004e8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	3318      	adds	r3, #24
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fe78 	bl	8004e8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	f1c3 0207 	rsb	r2, r3, #7
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2200      	movs	r2, #0
 80051b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	69b8      	ldr	r0, [r7, #24]
 80051c8:	f000 fd42 	bl	8005c50 <pxPortInitialiseStack>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051de:	bf00      	nop
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051f0:	f000 fe1a 	bl	8005e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <prvAddNewTaskToReadyList+0xb8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <prvAddNewTaskToReadyList+0xb8>)
 80051fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051fe:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005206:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800520c:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <prvAddNewTaskToReadyList+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005214:	f000 fbf8 	bl	8005a08 <prvInitialiseTaskLists>
 8005218:	e00d      	b.n	8005236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <prvAddNewTaskToReadyList+0xc0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	429a      	cmp	r2, r3
 800522e:	d802      	bhi.n	8005236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005230:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <prvAddNewTaskToReadyList+0xc4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <prvAddNewTaskToReadyList+0xc4>)
 800523e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <prvAddNewTaskToReadyList+0xcc>)
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7ff fe1c 	bl	8004ea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800526e:	f000 fe09 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <prvAddNewTaskToReadyList+0xc0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d207      	bcs.n	8005298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <prvAddNewTaskToReadyList+0xd0>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000384 	.word	0x20000384
 80052a4:	20000284 	.word	0x20000284
 80052a8:	20000390 	.word	0x20000390
 80052ac:	200003a0 	.word	0x200003a0
 80052b0:	2000038c 	.word	0x2000038c
 80052b4:	20000288 	.word	0x20000288
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <vTaskDelay+0x60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <vTaskDelay+0x2e>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	e7fe      	b.n	80052e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80052ea:	f000 f9b5 	bl	8005658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fc47 	bl	8005b84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052f6:	f000 f9bd 	bl	8005674 <xTaskResumeAll>
 80052fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vTaskDelay+0x64>)
 8005304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200003ac 	.word	0x200003ac
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800532c:	f000 fd7c 	bl	8005e28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <vTaskSuspend+0x18>
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <vTaskSuspend+0x104>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	e000      	b.n	800533e <vTaskSuspend+0x1a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3304      	adds	r3, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe09 	bl	8004f5c <uxListRemove>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d115      	bne.n	800537c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4935      	ldr	r1, [pc, #212]	; (800542c <vTaskSuspend+0x108>)
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <vTaskSuspend+0x58>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43da      	mvns	r2, r3
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <vTaskSuspend+0x10c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4013      	ands	r3, r2
 8005378:	4a2d      	ldr	r2, [pc, #180]	; (8005430 <vTaskSuspend+0x10c>)
 800537a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3318      	adds	r3, #24
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fde7 	bl	8004f5c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4827      	ldr	r0, [pc, #156]	; (8005434 <vTaskSuspend+0x110>)
 8005396:	f7ff fd86 	bl	8004ea6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d103      	bne.n	80053ae <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80053ae:	f000 fd69 	bl	8005e84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <vTaskSuspend+0x114>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80053ba:	f000 fd35 	bl	8005e28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80053be:	f000 fbbd 	bl	8005b3c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80053c2:	f000 fd5f 	bl	8005e84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <vTaskSuspend+0x104>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d126      	bne.n	800541e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <vTaskSuspend+0x114>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80053d8:	4b18      	ldr	r3, [pc, #96]	; (800543c <vTaskSuspend+0x118>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <vTaskSuspend+0xd0>
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	e7fe      	b.n	80053f2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80053f4:	4b12      	ldr	r3, [pc, #72]	; (8005440 <vTaskSuspend+0x11c>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005404:	e00b      	b.n	800541e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <vTaskSuspend+0x110>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <vTaskSuspend+0x120>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d103      	bne.n	800541a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <vTaskSuspend+0x104>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
	}
 8005418:	e001      	b.n	800541e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800541a:	f000 fa83 	bl	8005924 <vTaskSwitchContext>
	}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000284 	.word	0x20000284
 800542c:	20000288 	.word	0x20000288
 8005430:	2000038c 	.word	0x2000038c
 8005434:	20000370 	.word	0x20000370
 8005438:	20000390 	.word	0x20000390
 800543c:	200003ac 	.word	0x200003ac
 8005440:	e000ed04 	.word	0xe000ed04
 8005444:	20000384 	.word	0x20000384

08005448 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <prvTaskIsTaskSuspended+0x2a>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e7fe      	b.n	8005470 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4a0f      	ldr	r2, [pc, #60]	; (80054b4 <prvTaskIsTaskSuspended+0x6c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <prvTaskIsTaskSuspended+0x38>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <prvTaskIsTaskSuspended+0x3a>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <prvTaskIsTaskSuspended+0x70>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00a      	beq.n	80054a6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <prvTaskIsTaskSuspended+0x54>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <prvTaskIsTaskSuspended+0x56>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054a6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000370 	.word	0x20000370
 80054b8:	20000344 	.word	0x20000344

080054bc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <xTaskResumeFromISR+0x2a>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e7fe      	b.n	80054e4 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054e6:	f000 fd59 	bl	8005f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054ea:	f3ef 8211 	mrs	r2, BASEPRI
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005502:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005504:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005506:	6a38      	ldr	r0, [r7, #32]
 8005508:	f7ff ff9e 	bl	8005448 <prvTaskIsTaskSuspended>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d02f      	beq.n	8005572 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <xTaskResumeFromISR+0xcc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d125      	bne.n	8005566 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <xTaskResumeFromISR+0xd0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d301      	bcc.n	800552c <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff fd13 	bl	8004f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2201      	movs	r2, #1
 800553c:	409a      	lsls	r2, r3
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <xTaskResumeFromISR+0xd4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	4a12      	ldr	r2, [pc, #72]	; (8005590 <xTaskResumeFromISR+0xd4>)
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <xTaskResumeFromISR+0xd8>)
 8005556:	441a      	add	r2, r3
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7ff fca1 	bl	8004ea6 <vListInsertEnd>
 8005564:	e005      	b.n	8005572 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	3318      	adds	r3, #24
 800556a:	4619      	mov	r1, r3
 800556c:	480a      	ldr	r0, [pc, #40]	; (8005598 <xTaskResumeFromISR+0xdc>)
 800556e:	f7ff fc9a 	bl	8004ea6 <vListInsertEnd>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200003ac 	.word	0x200003ac
 800558c:	20000284 	.word	0x20000284
 8005590:	2000038c 	.word	0x2000038c
 8005594:	20000288 	.word	0x20000288
 8005598:	20000344 	.word	0x20000344

0800559c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055aa:	463a      	mov	r2, r7
 80055ac:	1d39      	adds	r1, r7, #4
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fa fdcc 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	9202      	str	r2, [sp, #8]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	460a      	mov	r2, r1
 80055ca:	491d      	ldr	r1, [pc, #116]	; (8005640 <vTaskStartScheduler+0xa4>)
 80055cc:	481d      	ldr	r0, [pc, #116]	; (8005644 <vTaskStartScheduler+0xa8>)
 80055ce:	f7ff fcee 	bl	8004fae <xTaskCreateStatic>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <vTaskStartScheduler+0xac>)
 80055d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <vTaskStartScheduler+0xac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e001      	b.n	80055ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d115      	bne.n	800561c <vTaskStartScheduler+0x80>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <vTaskStartScheduler+0xb0>)
 8005604:	f04f 32ff 	mov.w	r2, #4294967295
 8005608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <vTaskStartScheduler+0xb4>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <vTaskStartScheduler+0xb8>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005616:	f000 fb97 	bl	8005d48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800561a:	e00d      	b.n	8005638 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d109      	bne.n	8005638 <vTaskStartScheduler+0x9c>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e7fe      	b.n	8005636 <vTaskStartScheduler+0x9a>
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	0800647c 	.word	0x0800647c
 8005644:	080059d9 	.word	0x080059d9
 8005648:	200003a8 	.word	0x200003a8
 800564c:	200003a4 	.word	0x200003a4
 8005650:	20000390 	.word	0x20000390
 8005654:	20000388 	.word	0x20000388

08005658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vTaskSuspendAll+0x18>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	4a03      	ldr	r2, [pc, #12]	; (8005670 <vTaskSuspendAll+0x18>)
 8005664:	6013      	str	r3, [r2, #0]
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	200003ac 	.word	0x200003ac

08005674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <xTaskResumeAll+0x114>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <xTaskResumeAll+0x2a>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	e7fe      	b.n	800569c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800569e:	f000 fbc3 	bl	8005e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056a2:	4b39      	ldr	r3, [pc, #228]	; (8005788 <xTaskResumeAll+0x114>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a37      	ldr	r2, [pc, #220]	; (8005788 <xTaskResumeAll+0x114>)
 80056aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ac:	4b36      	ldr	r3, [pc, #216]	; (8005788 <xTaskResumeAll+0x114>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d161      	bne.n	8005778 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056b4:	4b35      	ldr	r3, [pc, #212]	; (800578c <xTaskResumeAll+0x118>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05d      	beq.n	8005778 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056bc:	e02e      	b.n	800571c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <xTaskResumeAll+0x11c>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fc46 	bl	8004f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fc41 	bl	8004f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <xTaskResumeAll+0x120>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <xTaskResumeAll+0x120>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <xTaskResumeAll+0x124>)
 80056fa:	441a      	add	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7ff fbcf 	bl	8004ea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b23      	ldr	r3, [pc, #140]	; (800579c <xTaskResumeAll+0x128>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005716:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <xTaskResumeAll+0x12c>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571c:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <xTaskResumeAll+0x11c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1cc      	bne.n	80056be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800572a:	f000 fa07 	bl	8005b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <xTaskResumeAll+0x130>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800573a:	f000 f837 	bl	80057ac <xTaskIncrementTick>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <xTaskResumeAll+0x12c>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3b01      	subs	r3, #1
 800574e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f1      	bne.n	800573a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <xTaskResumeAll+0x130>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xTaskResumeAll+0x12c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <xTaskResumeAll+0x134>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005778:	f000 fb84 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 800577c:	68bb      	ldr	r3, [r7, #8]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200003ac 	.word	0x200003ac
 800578c:	20000384 	.word	0x20000384
 8005790:	20000344 	.word	0x20000344
 8005794:	2000038c 	.word	0x2000038c
 8005798:	20000288 	.word	0x20000288
 800579c:	20000284 	.word	0x20000284
 80057a0:	20000398 	.word	0x20000398
 80057a4:	20000394 	.word	0x20000394
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <xTaskIncrementTick+0x14c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 808c 	bne.w	80058d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057c0:	4b4e      	ldr	r3, [pc, #312]	; (80058fc <xTaskIncrementTick+0x150>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c8:	4a4c      	ldr	r2, [pc, #304]	; (80058fc <xTaskIncrementTick+0x150>)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11f      	bne.n	8005814 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d4:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <xTaskIncrementTick+0x154>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <xTaskIncrementTick+0x46>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	e7fe      	b.n	80057f0 <xTaskIncrementTick+0x44>
 80057f2:	4b43      	ldr	r3, [pc, #268]	; (8005900 <xTaskIncrementTick+0x154>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <xTaskIncrementTick+0x158>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a40      	ldr	r2, [pc, #256]	; (8005900 <xTaskIncrementTick+0x154>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4a40      	ldr	r2, [pc, #256]	; (8005904 <xTaskIncrementTick+0x158>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <xTaskIncrementTick+0x15c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <xTaskIncrementTick+0x15c>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	f000 f994 	bl	8005b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <xTaskIncrementTick+0x160>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d34d      	bcc.n	80058ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <xTaskIncrementTick+0x154>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xTaskIncrementTick+0x80>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xTaskIncrementTick+0x82>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <xTaskIncrementTick+0x160>)
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	601a      	str	r2, [r3, #0]
					break;
 800583a:	e03e      	b.n	80058ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800583c:	4b30      	ldr	r3, [pc, #192]	; (8005900 <xTaskIncrementTick+0x154>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d203      	bcs.n	800585c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <xTaskIncrementTick+0x160>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
						break;
 800585a:	e02e      	b.n	80058ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fb7b 	bl	8004f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3318      	adds	r3, #24
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fb72 	bl	8004f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	4b23      	ldr	r3, [pc, #140]	; (8005910 <xTaskIncrementTick+0x164>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	4a22      	ldr	r2, [pc, #136]	; (8005910 <xTaskIncrementTick+0x164>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <xTaskIncrementTick+0x168>)
 8005898:	441a      	add	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f7ff fb00 	bl	8004ea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <xTaskIncrementTick+0x16c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d3b4      	bcc.n	800581e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b8:	e7b1      	b.n	800581e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <xTaskIncrementTick+0x16c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4914      	ldr	r1, [pc, #80]	; (8005914 <xTaskIncrementTick+0x168>)
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d907      	bls.n	80058e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e004      	b.n	80058e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058d8:	4b10      	ldr	r3, [pc, #64]	; (800591c <xTaskIncrementTick+0x170>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <xTaskIncrementTick+0x170>)
 80058e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <xTaskIncrementTick+0x174>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058ee:	697b      	ldr	r3, [r7, #20]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200003ac 	.word	0x200003ac
 80058fc:	20000388 	.word	0x20000388
 8005900:	2000033c 	.word	0x2000033c
 8005904:	20000340 	.word	0x20000340
 8005908:	2000039c 	.word	0x2000039c
 800590c:	200003a4 	.word	0x200003a4
 8005910:	2000038c 	.word	0x2000038c
 8005914:	20000288 	.word	0x20000288
 8005918:	20000284 	.word	0x20000284
 800591c:	20000394 	.word	0x20000394
 8005920:	20000398 	.word	0x20000398

08005924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <vTaskSwitchContext+0xa0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <vTaskSwitchContext+0xa4>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005938:	e03e      	b.n	80059b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <vTaskSwitchContext+0xa4>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <vTaskSwitchContext+0xa8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	f1c3 031f 	rsb	r3, r3, #31
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	491e      	ldr	r1, [pc, #120]	; (80059d0 <vTaskSwitchContext+0xac>)
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <vTaskSwitchContext+0x5a>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	e7fe      	b.n	800597c <vTaskSwitchContext+0x58>
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <vTaskSwitchContext+0xac>)
 800598a:	4413      	add	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3308      	adds	r3, #8
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d104      	bne.n	80059ae <vTaskSwitchContext+0x8a>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <vTaskSwitchContext+0xb0>)
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	200003ac 	.word	0x200003ac
 80059c8:	20000398 	.word	0x20000398
 80059cc:	2000038c 	.word	0x2000038c
 80059d0:	20000288 	.word	0x20000288
 80059d4:	20000284 	.word	0x20000284

080059d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e0:	f000 f852 	bl	8005a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <prvIdleTask+0x28>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d9f9      	bls.n	80059e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <prvIdleTask+0x2c>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059fc:	e7f0      	b.n	80059e0 <prvIdleTask+0x8>
 80059fe:	bf00      	nop
 8005a00:	20000288 	.word	0x20000288
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e00c      	b.n	8005a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <prvInitialiseTaskLists+0x60>)
 8005a20:	4413      	add	r3, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fa14 	bl	8004e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d9ef      	bls.n	8005a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a34:	480d      	ldr	r0, [pc, #52]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a36:	f7ff fa0b 	bl	8004e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a3c:	f7ff fa08 	bl	8004e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a40:	480c      	ldr	r0, [pc, #48]	; (8005a74 <prvInitialiseTaskLists+0x6c>)
 8005a42:	f7ff fa05 	bl	8004e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a46:	480c      	ldr	r0, [pc, #48]	; (8005a78 <prvInitialiseTaskLists+0x70>)
 8005a48:	f7ff fa02 	bl	8004e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a4c:	480b      	ldr	r0, [pc, #44]	; (8005a7c <prvInitialiseTaskLists+0x74>)
 8005a4e:	f7ff f9ff 	bl	8004e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <prvInitialiseTaskLists+0x78>)
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvInitialiseTaskLists+0x7c>)
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000288 	.word	0x20000288
 8005a6c:	20000314 	.word	0x20000314
 8005a70:	20000328 	.word	0x20000328
 8005a74:	20000344 	.word	0x20000344
 8005a78:	20000358 	.word	0x20000358
 8005a7c:	20000370 	.word	0x20000370
 8005a80:	2000033c 	.word	0x2000033c
 8005a84:	20000340 	.word	0x20000340

08005a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a8e:	e019      	b.n	8005ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a90:	f000 f9ca 	bl	8005e28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <prvCheckTasksWaitingTermination+0x4c>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fa5b 	bl	8004f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aba:	f000 f9e3 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f80e 	bl	8005ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e1      	bne.n	8005a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000358 	.word	0x20000358
 8005ad8:	20000384 	.word	0x20000384
 8005adc:	2000036c 	.word	0x2000036c

08005ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb4e 	bl	8006198 <vPortFree>
				vPortFree( pxTCB );
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb4b 	bl	8006198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b02:	e017      	b.n	8005b34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d103      	bne.n	8005b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fb42 	bl	8006198 <vPortFree>
	}
 8005b14:	e00e      	b.n	8005b34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <prvDeleteTCB+0x54>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e7fe      	b.n	8005b32 <prvDeleteTCB+0x52>
	}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b42:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <prvResetNextTaskUnblockTime+0x40>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <prvResetNextTaskUnblockTime+0x14>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <prvResetNextTaskUnblockTime+0x16>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b5e:	e008      	b.n	8005b72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <prvResetNextTaskUnblockTime+0x40>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b70:	6013      	str	r3, [r2, #0]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	2000033c 	.word	0x2000033c
 8005b80:	200003a4 	.word	0x200003a4

08005b84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b8e:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b94:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff f9de 	bl	8004f5c <uxListRemove>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ba6:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d10a      	bne.n	8005bdc <prvAddCurrentTaskToDelayedList+0x58>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	481a      	ldr	r0, [pc, #104]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bd6:	f7ff f966 	bl	8004ea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bda:	e026      	b.n	8005c2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d209      	bcs.n	8005c08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7ff f973 	bl	8004eec <vListInsert>
}
 8005c06:	e010      	b.n	8005c2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7ff f969 	bl	8004eec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d202      	bcs.n	8005c2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6013      	str	r3, [r2, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000388 	.word	0x20000388
 8005c38:	20000284 	.word	0x20000284
 8005c3c:	2000038c 	.word	0x2000038c
 8005c40:	20000370 	.word	0x20000370
 8005c44:	20000340 	.word	0x20000340
 8005c48:	2000033c 	.word	0x2000033c
 8005c4c:	200003a4 	.word	0x200003a4

08005c50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3b04      	subs	r3, #4
 8005c60:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b04      	subs	r3, #4
 8005c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <pxPortInitialiseStack+0x54>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3b14      	subs	r3, #20
 8005c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b20      	subs	r3, #32
 8005c96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	08005ca9 	.word	0x08005ca9

08005ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <prvTaskExitError+0x4c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d009      	beq.n	8005cd0 <prvTaskExitError+0x28>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e7fe      	b.n	8005cce <prvTaskExitError+0x26>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ce2:	bf00      	nop
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0fc      	beq.n	8005ce4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	2000000c 	.word	0x2000000c
	...

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d1e:	4770      	bx	lr

08005d20 <pxCurrentTCBConst2>:
 8005d20:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d28:	4806      	ldr	r0, [pc, #24]	; (8005d44 <prvPortStartFirstTask+0x1c>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	b662      	cpsie	i
 8005d34:	b661      	cpsie	f
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	df00      	svc	0
 8005d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d42:	bf00      	nop
 8005d44:	e000ed08 	.word	0xe000ed08

08005d48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <xPortStartScheduler+0xcc>)
 8005d50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <xPortStartScheduler+0xd0>)
 8005d74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7c:	e009      	b.n	8005d92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d7e:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	4a25      	ldr	r2, [pc, #148]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005d86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d0ef      	beq.n	8005d7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d9e:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1c3 0307 	rsb	r3, r3, #7
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d009      	beq.n	8005dbe <xPortStartScheduler+0x76>
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	e7fe      	b.n	8005dbc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dbe:	4b17      	ldr	r3, [pc, #92]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005dc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dc8:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <xPortStartScheduler+0xd4>)
 8005dd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xPortStartScheduler+0xd8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <xPortStartScheduler+0xd8>)
 8005de2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005de6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <xPortStartScheduler+0xd8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a0c      	ldr	r2, [pc, #48]	; (8005e20 <xPortStartScheduler+0xd8>)
 8005dee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005df2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005df4:	f000 f8b0 	bl	8005f58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <xPortStartScheduler+0xdc>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dfe:	f7ff ff93 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e02:	f7ff fd8f 	bl	8005924 <vTaskSwitchContext>
	prvTaskExitError();
 8005e06:	f7ff ff4f 	bl	8005ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000e400 	.word	0xe000e400
 8005e18:	200003b0 	.word	0x200003b0
 8005e1c:	200003b4 	.word	0x200003b4
 8005e20:	e000ed20 	.word	0xe000ed20
 8005e24:	2000000c 	.word	0x2000000c

08005e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e40:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <vPortEnterCritical+0x54>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <vPortEnterCritical+0x54>)
 8005e48:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortEnterCritical+0x54>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10e      	bne.n	8005e70 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortEnterCritical+0x58>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <vPortEnterCritical+0x48>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	e7fe      	b.n	8005e6e <vPortEnterCritical+0x46>
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <vPortExitCritical+0x48>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <vPortExitCritical+0x22>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	e7fe      	b.n	8005ea4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <vPortExitCritical+0x48>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <vPortExitCritical+0x48>)
 8005eae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <vPortExitCritical+0x48>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <vPortExitCritical+0x3e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ed0:	f3ef 8009 	mrs	r0, PSP
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <pxCurrentTCBConst>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ee0:	6010      	str	r0, [r2, #0]
 8005ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ee6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eea:	f380 8811 	msr	BASEPRI, r0
 8005eee:	f7ff fd19 	bl	8005924 <vTaskSwitchContext>
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8811 	msr	BASEPRI, r0
 8005efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f06:	f380 8809 	msr	PSP, r0
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	4770      	bx	lr

08005f10 <pxCurrentTCBConst>:
 8005f10:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f30:	f7ff fc3c 	bl	80057ac <xTaskIncrementTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <SysTick_Handler+0x3c>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	2300      	movs	r3, #0
 8005f44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <vPortSetupTimerInterrupt+0x30>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <vPortSetupTimerInterrupt+0x34>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <vPortSetupTimerInterrupt+0x38>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <vPortSetupTimerInterrupt+0x3c>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	099b      	lsrs	r3, r3, #6
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <vPortSetupTimerInterrupt+0x40>)
 8005f76:	3b01      	subs	r3, #1
 8005f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7a:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <vPortSetupTimerInterrupt+0x30>)
 8005f7c:	2207      	movs	r2, #7
 8005f7e:	601a      	str	r2, [r3, #0]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	e000e010 	.word	0xe000e010
 8005f8c:	e000e018 	.word	0xe000e018
 8005f90:	20000000 	.word	0x20000000
 8005f94:	10624dd3 	.word	0x10624dd3
 8005f98:	e000e014 	.word	0xe000e014

08005f9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fa2:	f3ef 8305 	mrs	r3, IPSR
 8005fa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	d913      	bls.n	8005fd6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <vPortValidateInterruptPriority+0x68>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fb8:	4b13      	ldr	r3, [pc, #76]	; (8006008 <vPortValidateInterruptPriority+0x6c>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	7afa      	ldrb	r2, [r7, #11]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d209      	bcs.n	8005fd6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e7fe      	b.n	8005fd4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <vPortValidateInterruptPriority+0x70>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <vPortValidateInterruptPriority+0x74>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d909      	bls.n	8005ffa <vPortValidateInterruptPriority+0x5e>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	e7fe      	b.n	8005ff8 <vPortValidateInterruptPriority+0x5c>
	}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	e000e3f0 	.word	0xe000e3f0
 8006008:	200003b0 	.word	0x200003b0
 800600c:	e000ed0c 	.word	0xe000ed0c
 8006010:	200003b4 	.word	0x200003b4

08006014 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006020:	f7ff fb1a 	bl	8005658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006024:	4b57      	ldr	r3, [pc, #348]	; (8006184 <pvPortMalloc+0x170>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800602c:	f000 f90c 	bl	8006248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006030:	4b55      	ldr	r3, [pc, #340]	; (8006188 <pvPortMalloc+0x174>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	f040 808c 	bne.w	8006156 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01c      	beq.n	800607e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006044:	2208      	movs	r2, #8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	3308      	adds	r3, #8
 800605e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <pvPortMalloc+0x6a>
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e7fe      	b.n	800607c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d068      	beq.n	8006156 <pvPortMalloc+0x142>
 8006084:	4b41      	ldr	r3, [pc, #260]	; (800618c <pvPortMalloc+0x178>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d863      	bhi.n	8006156 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800608e:	4b40      	ldr	r3, [pc, #256]	; (8006190 <pvPortMalloc+0x17c>)
 8006090:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006092:	4b3f      	ldr	r3, [pc, #252]	; (8006190 <pvPortMalloc+0x17c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006098:	e004      	b.n	80060a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d903      	bls.n	80060b6 <pvPortMalloc+0xa2>
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f1      	bne.n	800609a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <pvPortMalloc+0x170>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	429a      	cmp	r2, r3
 80060be:	d04a      	beq.n	8006156 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2208      	movs	r2, #8
 80060c6:	4413      	add	r3, r2
 80060c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	2308      	movs	r3, #8
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	429a      	cmp	r2, r3
 80060e0:	d91e      	bls.n	8006120 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <pvPortMalloc+0xf4>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e7fe      	b.n	8006106 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f000 f8f6 	bl	800630c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <pvPortMalloc+0x178>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	4a18      	ldr	r2, [pc, #96]	; (800618c <pvPortMalloc+0x178>)
 800612c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800612e:	4b17      	ldr	r3, [pc, #92]	; (800618c <pvPortMalloc+0x178>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <pvPortMalloc+0x180>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d203      	bcs.n	8006142 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <pvPortMalloc+0x178>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <pvPortMalloc+0x180>)
 8006140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <pvPortMalloc+0x174>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	431a      	orrs	r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006156:	f7ff fa8d 	bl	8005674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <pvPortMalloc+0x164>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e7fe      	b.n	8006176 <pvPortMalloc+0x162>
	return pvReturn;
 8006178:	69fb      	ldr	r3, [r7, #28]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20002bc0 	.word	0x20002bc0
 8006188:	20002bcc 	.word	0x20002bcc
 800618c:	20002bc4 	.word	0x20002bc4
 8006190:	20002bb8 	.word	0x20002bb8
 8006194:	20002bc8 	.word	0x20002bc8

08006198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d046      	beq.n	8006238 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061aa:	2308      	movs	r3, #8
 80061ac:	425b      	negs	r3, r3
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4b20      	ldr	r3, [pc, #128]	; (8006240 <vPortFree+0xa8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <vPortFree+0x42>
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e7fe      	b.n	80061d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <vPortFree+0x5e>
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	e7fe      	b.n	80061f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <vPortFree+0xa8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d019      	beq.n	8006238 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d115      	bne.n	8006238 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortFree+0xa8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	43db      	mvns	r3, r3
 8006216:	401a      	ands	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800621c:	f7ff fa1c 	bl	8005658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <vPortFree+0xac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4413      	add	r3, r2
 800622a:	4a06      	ldr	r2, [pc, #24]	; (8006244 <vPortFree+0xac>)
 800622c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622e:	6938      	ldr	r0, [r7, #16]
 8006230:	f000 f86c 	bl	800630c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006234:	f7ff fa1e 	bl	8005674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006238:	bf00      	nop
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20002bcc 	.word	0x20002bcc
 8006244:	20002bc4 	.word	0x20002bc4

08006248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <prvHeapInit+0xac>)
 8006256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3307      	adds	r3, #7
 8006266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <prvHeapInit+0xac>)
 8006278:	4413      	add	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006280:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <prvHeapInit+0xb0>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <prvHeapInit+0xb0>)
 8006288:	2200      	movs	r2, #0
 800628a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006294:	2208      	movs	r2, #8
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <prvHeapInit+0xb4>)
 80062a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <prvHeapInit+0xb4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <prvHeapInit+0xb4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c8:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <prvHeapInit+0xb4>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <prvHeapInit+0xb8>)
 80062d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a09      	ldr	r2, [pc, #36]	; (8006304 <prvHeapInit+0xbc>)
 80062de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <prvHeapInit+0xc0>)
 80062e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	200003b8 	.word	0x200003b8
 80062f8:	20002bb8 	.word	0x20002bb8
 80062fc:	20002bc0 	.word	0x20002bc0
 8006300:	20002bc8 	.word	0x20002bc8
 8006304:	20002bc4 	.word	0x20002bc4
 8006308:	20002bcc 	.word	0x20002bcc

0800630c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006314:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <prvInsertBlockIntoFreeList+0xa8>)
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e002      	b.n	8006320 <prvInsertBlockIntoFreeList+0x14>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d8f7      	bhi.n	800631a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	429a      	cmp	r2, r3
 800633a:	d108      	bne.n	800634e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d118      	bne.n	8006394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <prvInsertBlockIntoFreeList+0xac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d00d      	beq.n	800638a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	441a      	add	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e008      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <prvInsertBlockIntoFreeList+0xac>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e003      	b.n	800639c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d002      	beq.n	80063aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	20002bb8 	.word	0x20002bb8
 80063b8:	20002bc0 	.word	0x20002bc0

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	2500      	movs	r5, #0
 80063c0:	4e0c      	ldr	r6, [pc, #48]	; (80063f4 <__libc_init_array+0x38>)
 80063c2:	4c0d      	ldr	r4, [pc, #52]	; (80063f8 <__libc_init_array+0x3c>)
 80063c4:	1ba4      	subs	r4, r4, r6
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	42a5      	cmp	r5, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	f000 f822 	bl	8006414 <_init>
 80063d0:	2500      	movs	r5, #0
 80063d2:	4e0a      	ldr	r6, [pc, #40]	; (80063fc <__libc_init_array+0x40>)
 80063d4:	4c0a      	ldr	r4, [pc, #40]	; (8006400 <__libc_init_array+0x44>)
 80063d6:	1ba4      	subs	r4, r4, r6
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	42a5      	cmp	r5, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063e4:	4798      	blx	r3
 80063e6:	3501      	adds	r5, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ee:	4798      	blx	r3
 80063f0:	3501      	adds	r5, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	0800649c 	.word	0x0800649c
 80063f8:	0800649c 	.word	0x0800649c
 80063fc:	0800649c 	.word	0x0800649c
 8006400:	080064a0 	.word	0x080064a0

08006404 <memset>:
 8006404:	4603      	mov	r3, r0
 8006406:	4402      	add	r2, r0
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr
