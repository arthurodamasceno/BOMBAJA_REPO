
Front_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000625c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080063dc  080063dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063dc  080063dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e10  20000010  080063f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e20  080063f4  00022e20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147f3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d40  00000000  00000000  0003482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  00037570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00038950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169d2  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f137  00000000  00000000  000505ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080be1  00000000  00000000  0005f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e02d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  000e0350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006354 	.word	0x08006354

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006354 	.word	0x08006354

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <HAL_UART_RxCpltCallback>:
void CAN_Filter_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000188:	2224      	movs	r2, #36	; 0x24
 800018a:	490c      	ldr	r1, [pc, #48]	; (80001bc <HAL_UART_RxCpltCallback+0x3c>)
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <HAL_UART_RxCpltCallback+0x40>)
 800018e:	f004 fa57 	bl	8004640 <HAL_UART_Receive_IT>

	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(GPS_Task);
 8000192:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <HAL_UART_RxCpltCallback+0x44>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4618      	mov	r0, r3
 8000198:	f005 f92e 	bl	80053f8 <xTaskResumeFromISR>
 800019c:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d007      	beq.n	80001b4 <HAL_UART_RxCpltCallback+0x34>
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <HAL_UART_RxCpltCallback+0x48>)
 80001a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	f3bf 8f4f 	dsb	sy
 80001b0:	f3bf 8f6f 	isb	sy
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	20002d6c 	.word	0x20002d6c
 80001c0:	20002d90 	.word	0x20002d90
 80001c4:	20002c18 	.word	0x20002c18
 80001c8:	e000ed04 	.word	0xe000ed04

080001cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d2:	f000 ff37 	bl	8001044 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80001d6:	f000 f88d 	bl	80002f4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001da:	f000 fa03 	bl	80005e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80001de:	f000 f9db 	bl	8000598 <MX_DMA_Init>
	MX_ADC1_Init();
 80001e2:	f000 f8e3 	bl	80003ac <MX_ADC1_Init>
	MX_CAN_Init();
 80001e6:	f000 f91f 	bl	8000428 <MX_CAN_Init>
	MX_I2C1_Init();
 80001ea:	f000 f953 	bl	8000494 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80001ee:	f000 f9a9 	bl	8000544 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80001f2:	f000 f97d 	bl	80004f0 <MX_USART1_UART_Init>
	CAN_Filter_Config();
 80001f6:	f000 fa45 	bl	8000684 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80001fa:	f240 4103 	movw	r1, #1027	; 0x403
 80001fe:	4829      	ldr	r0, [pc, #164]	; (80002a4 <main+0xd8>)
 8000200:	f001 ff23 	bl	800204a <HAL_CAN_ActivateNotification>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <main+0x42>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 800020a:	f000 fbe7 	bl	80009dc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 800020e:	4825      	ldr	r0, [pc, #148]	; (80002a4 <main+0xd8>)
 8000210:	f001 fcec 	bl	8001bec <HAL_CAN_Start>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <main+0x52>
		Error_Handler();
 800021a:	f000 fbdf 	bl	80009dc <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) gas, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	4921      	ldr	r1, [pc, #132]	; (80002a8 <main+0xdc>)
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <main+0xe0>)
 8000224:	f001 f83a 	bl	800129c <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart2, GPS_in, GPS_in_SIZE);
 8000228:	2224      	movs	r2, #36	; 0x24
 800022a:	4921      	ldr	r1, [pc, #132]	; (80002b0 <main+0xe4>)
 800022c:	4821      	ldr	r0, [pc, #132]	; (80002b4 <main+0xe8>)
 800022e:	f004 fa07 	bl	8004640 <HAL_UART_Receive_IT>

	xTaskCreate(GPS_taskF, "GPSTask", 128, NULL, 2, &GPS_Task);
 8000232:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <main+0xec>)
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2302      	movs	r3, #2
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	491f      	ldr	r1, [pc, #124]	; (80002bc <main+0xf0>)
 8000240:	481f      	ldr	r0, [pc, #124]	; (80002c0 <main+0xf4>)
 8000242:	f004 feab 	bl	8004f9c <xTaskCreate>
	xTaskCreate(Gear_Brake_taskF, "Gear_BrakeTask", 128, NULL, 3,
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0xf8>)
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	2303      	movs	r3, #3
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	491d      	ldr	r1, [pc, #116]	; (80002c8 <main+0xfc>)
 8000254:	481d      	ldr	r0, [pc, #116]	; (80002cc <main+0x100>)
 8000256:	f004 fea1 	bl	8004f9c <xTaskCreate>
			&Gear_Brake_Task);
	xTaskCreate(Gas_taskF, "GasTask", 128, NULL, 0, &Gas_Task);
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <main+0x104>)
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	491b      	ldr	r1, [pc, #108]	; (80002d4 <main+0x108>)
 8000268:	481b      	ldr	r0, [pc, #108]	; (80002d8 <main+0x10c>)
 800026a:	f004 fe97 	bl	8004f9c <xTaskCreate>
	xTaskCreate(Logger_taskF, "LoggerTask", 128, NULL, 3, &Logger_Task);
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <main+0x110>)
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2303      	movs	r3, #3
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	4919      	ldr	r1, [pc, #100]	; (80002e0 <main+0x114>)
 800027c:	4819      	ldr	r0, [pc, #100]	; (80002e4 <main+0x118>)
 800027e:	f004 fe8d 	bl	8004f9c <xTaskCreate>
	xTaskCreate(Telemetry_taskF, "TelemetryTask", 128, NULL, 1,
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <main+0x11c>)
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2301      	movs	r3, #1
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	4917      	ldr	r1, [pc, #92]	; (80002ec <main+0x120>)
 8000290:	4817      	ldr	r0, [pc, #92]	; (80002f0 <main+0x124>)
 8000292:	f004 fe83 	bl	8004f9c <xTaskCreate>
			&Telemetry_Task);

	/* Start scheduler */
	vTaskStartScheduler();
 8000296:	f005 f91f 	bl	80054d8 <vTaskStartScheduler>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST I CASE*/
 800029a:	2001      	movs	r0, #1
 800029c:	f000 ff04 	bl	80010a8 <HAL_Delay>
 80002a0:	e7fb      	b.n	800029a <main+0xce>
 80002a2:	bf00      	nop
 80002a4:	20002c74 	.word	0x20002c74
 80002a8:	20002d68 	.word	0x20002d68
 80002ac:	20002c9c 	.word	0x20002c9c
 80002b0:	20002d6c 	.word	0x20002d6c
 80002b4:	20002d90 	.word	0x20002d90
 80002b8:	20002c18 	.word	0x20002c18
 80002bc:	0800636c 	.word	0x0800636c
 80002c0:	080006d1 	.word	0x080006d1
 80002c4:	20002bcc 	.word	0x20002bcc
 80002c8:	08006374 	.word	0x08006374
 80002cc:	08000771 	.word	0x08000771
 80002d0:	20002dd8 	.word	0x20002dd8
 80002d4:	08006384 	.word	0x08006384
 80002d8:	08000809 	.word	0x08000809
 80002dc:	20002dd0 	.word	0x20002dd0
 80002e0:	0800638c 	.word	0x0800638c
 80002e4:	0800087d 	.word	0x0800087d
 80002e8:	20002c14 	.word	0x20002c14
 80002ec:	08006398 	.word	0x08006398
 80002f0:	080008a5 	.word	0x080008a5

080002f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	; 0x50
 80002f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f006 f81e 	bl	8006344 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f998 	bl	8003680 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x66>
		Error_Handler();
 8000356:	f000 fb41 	bl	80009dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fc02 	bl	8003b80 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x92>
		Error_Handler();
 8000382:	f000 fb2b 	bl	80009dc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000386:	2302      	movs	r3, #2
 8000388:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800038a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800038e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fdc0 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xae>
		Error_Handler();
 800039e:	f000 fb1d 	bl	80009dc <Error_Handler>
	}
}
 80003a2:	bf00      	nop
 80003a4:	3750      	adds	r7, #80	; 0x50
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0x74>)
 80003be:	4a19      	ldr	r2, [pc, #100]	; (8000424 <MX_ADC1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003da:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_ADC1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0x74>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ea:	f000 fe7f 	bl	80010ec <HAL_ADC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80003f4:	f000 faf2 	bl	80009dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80003f8:	2304      	movs	r3, #4
 80003fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000400:	2307      	movs	r3, #7
 8000402:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0x74>)
 800040a:	f001 f841 	bl	8001490 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000414:	f000 fae2 	bl	80009dc <Error_Handler>
	}
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20002c9c 	.word	0x20002c9c
 8000424:	40012400 	.word	0x40012400

08000428 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_CAN_Init+0x64>)
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <MX_CAN_Init+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_CAN_Init+0x64>)
 8000434:	2209      	movs	r2, #9
 8000436:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_CAN_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_CAN_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_CAN_Init+0x64>)
 8000446:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800044a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_CAN_Init+0x64>)
 800044e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000452:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_CAN_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_CAN_Init+0x64>)
 800045c:	2201      	movs	r2, #1
 800045e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <MX_CAN_Init+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_CAN_Init+0x64>)
 8000468:	2201      	movs	r2, #1
 800046a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_CAN_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_CAN_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_CAN_Init+0x64>)
 800047a:	f001 f9f3 	bl	8001864 <HAL_CAN_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_CAN_Init+0x60>
		Error_Handler();
 8000484:	f000 faaa 	bl	80009dc <Error_Handler>
	}
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20002c74 	.word	0x20002c74
 8000490:	40006400 	.word	0x40006400

08000494 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_I2C1_Init+0x50>)
 800049a:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <MX_I2C1_Init+0x54>)
 800049c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_I2C1_Init+0x58>)
 80004a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_I2C1_Init+0x50>)
 80004d2:	f002 fcb3 	bl	8002e3c <HAL_I2C_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80004dc:	f000 fa7e 	bl	80009dc <Error_Handler>
	}
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20002c20 	.word	0x20002c20
 80004e8:	40005400 	.word	0x40005400
 80004ec:	00061a80 	.word	0x00061a80

080004f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART1_UART_Init+0x4c>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_USART1_UART_Init+0x50>)
 80004f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART1_UART_Init+0x4c>)
 80004fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000500:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART1_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000516:	2208      	movs	r2, #8
 8000518:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART1_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART1_UART_Init+0x4c>)
 8000528:	f003 ffa4 	bl	8004474 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000532:	f000 fa53 	bl	80009dc <Error_Handler>
	}
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20002ccc 	.word	0x20002ccc
 8000540:	40013800 	.word	0x40013800

08000544 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_USART2_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800057c:	f003 ff7a 	bl	8004474 <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000586:	f000 fa29 	bl	80009dc <Error_Handler>
	}
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20002d90 	.word	0x20002d90
 8000594:	40004400 	.word	0x40004400

08000598 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2105      	movs	r1, #5
 80005ba:	200b      	movs	r0, #11
 80005bc:	f002 f83d 	bl	800263a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c0:	200b      	movs	r0, #11
 80005c2:	f002 f856 	bl	8002672 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	2010      	movs	r0, #16
 80005cc:	f002 f835 	bl	800263a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005d0:	2010      	movs	r0, #16
 80005d2:	f002 f84e 	bl	8002672 <HAL_NVIC_EnableIRQ>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_GPIO_Init+0x98>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1f      	ldr	r2, [pc, #124]	; (800067c <MX_GPIO_Init+0x98>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_GPIO_Init+0x98>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_GPIO_Init+0x98>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <MX_GPIO_Init+0x98>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_GPIO_Init+0x98>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_GPIO_Init+0x98>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_GPIO_Init+0x98>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_GPIO_Init+0x98>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_GPIO_Init+0x98>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <MX_GPIO_Init+0x98>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_GPIO_Init+0x98>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : Gear_Pin Brake_Pin */
	GPIO_InitStruct.Pin = Gear_Pin | Brake_Pin;
 8000658:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800065c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x9c>)
 800066e:	f002 fa73 	bl	8002b58 <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40010c00 	.word	0x40010c00

08000684 <CAN_Filter_Config>:

/*Configure CAN Filter */
void CAN_Filter_Config(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <CAN_Filter_Config+0x48>)
 80006b4:	f001 f9d1 	bl	8001a5a <HAL_CAN_ConfigFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <CAN_Filter_Config+0x3e>
		Error_Handler();
 80006be:	f000 f98d 	bl	80009dc <Error_Handler>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20002c74 	.word	0x20002c74

080006d0 <GPS_taskF>:

/*GPS Read Task --- THIS TASK NEEDS TEST WITH HARDWARE */
void GPS_taskF(void *pvParameters) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	while (1) {
		vTaskSuspend(NULL);
 80006d8:	2000      	movs	r0, #0
 80006da:	f004 fdc1 	bl	8005260 <vTaskSuspend>

		if (GPS_in[0] == UBX_HEADER[0] && GPS_in[1] == UBX_HEADER[1]) {
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <GPS_taskF+0x94>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	22b5      	movs	r2, #181	; 0xb5
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d1f7      	bne.n	80006d8 <GPS_taskF+0x8>
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <GPS_taskF+0x94>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2262      	movs	r2, #98	; 0x62
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d1f2      	bne.n	80006d8 <GPS_taskF+0x8>
			uint8_t GPSbuff[4];

			GPSbuff[0] = GPS_in[16];
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <GPS_taskF+0x94>)
 80006f4:	7c1b      	ldrb	r3, [r3, #16]
 80006f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			GPSbuff[1] = GPS_in[17];
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <GPS_taskF+0x94>)
 80006fc:	7c5b      	ldrb	r3, [r3, #17]
 80006fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			GPSbuff[2] = GPS_in[12];
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <GPS_taskF+0x94>)
 8000704:	7b1b      	ldrb	r3, [r3, #12]
 8000706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			GPSbuff[3] = GPS_in[13];
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <GPS_taskF+0x94>)
 800070c:	7b5b      	ldrb	r3, [r3, #13]
 800070e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			buffer[18] = GPS_in[16];
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <GPS_taskF+0x94>)
 8000714:	7c1a      	ldrb	r2, [r3, #16]
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <GPS_taskF+0x98>)
 8000718:	749a      	strb	r2, [r3, #18]
			buffer[19] = GPS_in[17];
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <GPS_taskF+0x94>)
 800071c:	7c5a      	ldrb	r2, [r3, #17]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <GPS_taskF+0x98>)
 8000720:	74da      	strb	r2, [r3, #19]
			buffer[20] = GPS_in[12];
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <GPS_taskF+0x94>)
 8000724:	7b1a      	ldrb	r2, [r3, #12]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <GPS_taskF+0x98>)
 8000728:	751a      	strb	r2, [r3, #20]
			buffer[21] = GPS_in[13];
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <GPS_taskF+0x94>)
 800072c:	7b5a      	ldrb	r2, [r3, #13]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <GPS_taskF+0x98>)
 8000730:	755a      	strb	r2, [r3, #21]
			uint32_t TxMailbox;

			CAN_TxHeaderTypeDef GPSHeader;

			GPSHeader.DLC = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
			GPSHeader.StdId = 0x658;
 8000736:	f44f 63cb 	mov.w	r3, #1624	; 0x658
 800073a:	60bb      	str	r3, [r7, #8]
			GPSHeader.IDE = CAN_ID_STD;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
			GPSHeader.RTR = CAN_RTR_DATA;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

			if (HAL_CAN_AddTxMessage(&hcan, &GPSHeader, GPSbuff, &TxMailbox)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800074c:	f107 0108 	add.w	r1, r7, #8
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <GPS_taskF+0x9c>)
 8000752:	f001 fa8f 	bl	8001c74 <HAL_CAN_AddTxMessage>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0bd      	beq.n	80006d8 <GPS_taskF+0x8>
					!= HAL_OK) {
				Error_Handler();
 800075c:	f000 f93e 	bl	80009dc <Error_Handler>
		vTaskSuspend(NULL);
 8000760:	e7ba      	b.n	80006d8 <GPS_taskF+0x8>
 8000762:	bf00      	nop
 8000764:	20002d6c 	.word	0x20002d6c
 8000768:	20002d0c 	.word	0x20002d0c
 800076c:	20002c74 	.word	0x20002c74

08000770 <Gear_Brake_taskF>:
		}
	}
}

/*Gear an Brake Read Task */
void Gear_Brake_taskF(void *pvParameters) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while (1) {
		gear = HAL_GPIO_ReadPin(GPIOB, Gear_Pin);
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	481d      	ldr	r0, [pc, #116]	; (80007f4 <Gear_Brake_taskF+0x84>)
 800077e:	f002 fb45 	bl	8002e0c <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <Gear_Brake_taskF+0x88>)
 8000788:	701a      	strb	r2, [r3, #0]
		brake = HAL_GPIO_ReadPin(GPIOB, Brake_Pin);
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <Gear_Brake_taskF+0x84>)
 8000790:	f002 fb3c 	bl	8002e0c <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <Gear_Brake_taskF+0x8c>)
 800079a:	701a      	strb	r2, [r3, #0]
		uint8_t GBbuff[2];
		GBbuff[0] = gear;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <Gear_Brake_taskF+0x88>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GBbuff[1] = brake;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <Gear_Brake_taskF+0x8c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		buffer[0] = gear;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <Gear_Brake_taskF+0x88>)
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <Gear_Brake_taskF+0x90>)
 80007b2:	701a      	strb	r2, [r3, #0]
		buffer[1] = brake;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <Gear_Brake_taskF+0x8c>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <Gear_Brake_taskF+0x90>)
 80007ba:	705a      	strb	r2, [r3, #1]
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GBHeader;

		GBHeader.DLC = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
		GBHeader.StdId = 0x657;
 80007c0:	f240 6357 	movw	r3, #1623	; 0x657
 80007c4:	60bb      	str	r3, [r7, #8]
		GBHeader.IDE = CAN_ID_STD;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
		GBHeader.RTR = CAN_RTR_DATA;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GBHeader, GBbuff, &TxMailbox)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007d6:	f107 0108 	add.w	r1, r7, #8
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <Gear_Brake_taskF+0x94>)
 80007dc:	f001 fa4a 	bl	8001c74 <HAL_CAN_AddTxMessage>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <Gear_Brake_taskF+0x7a>
				!= HAL_OK) {
			Error_Handler();
 80007e6:	f000 f8f9 	bl	80009dc <Error_Handler>
		}
		vTaskDelay(10); /*100Hz frequency*/
 80007ea:	200a      	movs	r0, #10
 80007ec:	f004 fd04 	bl	80051f8 <vTaskDelay>
	while (1) {
 80007f0:	e7c2      	b.n	8000778 <Gear_Brake_taskF+0x8>
 80007f2:	bf00      	nop
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	20002c1c 	.word	0x20002c1c
 80007fc:	20002dd4 	.word	0x20002dd4
 8000800:	20002d0c 	.word	0x20002d0c
 8000804:	20002c74 	.word	0x20002c74

08000808 <Gas_taskF>:
	}
}

/*Gas pedal Read Task */
void Gas_taskF(void *pvParameters) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t gasbuff[2];
		gasbuff[0] = (uint8_t) (gas[0] >> 8) & 0xFF;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <Gas_taskF+0x68>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		gasbuff[1] = (uint8_t) gas[0] & 0xFF;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Gas_taskF+0x68>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		buffer[2] = gasbuff[0];
 8000828:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <Gas_taskF+0x6c>)
 800082e:	709a      	strb	r2, [r3, #2]
		buffer[3] = gasbuff[1];
 8000830:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <Gas_taskF+0x6c>)
 8000836:	70da      	strb	r2, [r3, #3]

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef GasHeader;

		GasHeader.DLC = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
		GasHeader.StdId = 0x656;
 800083c:	f240 6356 	movw	r3, #1622	; 0x656
 8000840:	60bb      	str	r3, [r7, #8]
		GasHeader.IDE = CAN_ID_STD;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
		GasHeader.RTR = CAN_RTR_DATA;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &GasHeader, gasbuff, &TxMailbox)
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000852:	f107 0108 	add.w	r1, r7, #8
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <Gas_taskF+0x70>)
 8000858:	f001 fa0c 	bl	8001c74 <HAL_CAN_AddTxMessage>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <Gas_taskF+0x5e>
				!= HAL_OK) {
			Error_Handler();
 8000862:	f000 f8bb 	bl	80009dc <Error_Handler>
		}
		vTaskDelay(10); /*100Hz frequency*/
 8000866:	200a      	movs	r0, #10
 8000868:	f004 fcc6 	bl	80051f8 <vTaskDelay>
	while (1) {
 800086c:	e7d0      	b.n	8000810 <Gas_taskF+0x8>
 800086e:	bf00      	nop
 8000870:	20002d68 	.word	0x20002d68
 8000874:	20002d0c 	.word	0x20002d0c
 8000878:	20002c74 	.word	0x20002c74

0800087c <Logger_taskF>:
	}
}

/*Logger Write Task  --- THIS TASK NEEDS TO IMPLEMENT START AND STOP LOG FUNCTIONS*/
void Logger_taskF(void *pvParameters) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
 8000882:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 22, 10);
 8000884:	230a      	movs	r3, #10
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2316      	movs	r3, #22
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <Logger_taskF+0x20>)
 800088c:	2110      	movs	r1, #16
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <Logger_taskF+0x24>)
 8000890:	f002 fbfc 	bl	800308c <HAL_I2C_Master_Transmit>
		vTaskDelay(10); /*100Hz frequency*/
 8000894:	200a      	movs	r0, #10
 8000896:	f004 fcaf 	bl	80051f8 <vTaskDelay>
		HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), buffer, 22, 10);
 800089a:	e7f3      	b.n	8000884 <Logger_taskF+0x8>
 800089c:	20002d0c 	.word	0x20002d0c
 80008a0:	20002c20 	.word	0x20002c20

080008a4 <Telemetry_taskF>:
	}
}

/*LoRa Transceiver Write Task*/
void Telemetry_taskF(void *pvParameters) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t sync = 0xAA;
 80008ac:	23aa      	movs	r3, #170	; 0xaa
 80008ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t LoRa[23];
		LoRa[0] = sync;
 80008b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b6:	733b      	strb	r3, [r7, #12]
		for(int y=1;y<23;y++){
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
 80008bc:	e00c      	b.n	80008d8 <Telemetry_taskF+0x34>
			LoRa[y] = buffer[y-1];
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	3b01      	subs	r3, #1
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <Telemetry_taskF+0x50>)
 80008c4:	5cd1      	ldrb	r1, [r2, r3]
 80008c6:	f107 020c 	add.w	r2, r7, #12
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	4413      	add	r3, r2
 80008ce:	460a      	mov	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
		for(int y=1;y<23;y++){
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	3301      	adds	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	2b16      	cmp	r3, #22
 80008dc:	ddef      	ble.n	80008be <Telemetry_taskF+0x1a>
		}
		HAL_UART_Transmit(&huart1, LoRa, 23, 100);
 80008de:	f107 010c 	add.w	r1, r7, #12
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	2217      	movs	r2, #23
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <Telemetry_taskF+0x54>)
 80008e8:	f003 fe11 	bl	800450e <HAL_UART_Transmit>
		vTaskDelay(100); /*10Hz frequency*/
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f004 fc83 	bl	80051f8 <vTaskDelay>
	while (1) {
 80008f2:	e7db      	b.n	80008ac <Telemetry_taskF+0x8>
 80008f4:	20002d0c 	.word	0x20002d0c
 80008f8:	20002ccc 	.word	0x20002ccc

080008fc <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/*CAN Read Callback -- THIS FUNCTION NEEDS TO IMPLEMENT START AND STOP LOG MESSAGES  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcv_msg[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcv_msg)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	f107 0214 	add.w	r2, r7, #20
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f001 fa8a 	bl	8001e28 <HAL_CAN_GetRxMessage>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) {
		Error_Handler();
 800091a:	f000 f85f 	bl	80009dc <Error_Handler>
	}

	if (RxHeader.StdId == 0x650) {
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000924:	d105      	bne.n	8000932 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		buffer[4] = rcv_msg[0];
 8000926:	7b3a      	ldrb	r2, [r7, #12]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800092a:	711a      	strb	r2, [r3, #4]
		buffer[5] = rcv_msg[1];
 800092c:	7b7a      	ldrb	r2, [r7, #13]
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000930:	715a      	strb	r2, [r3, #5]
	}

	if (RxHeader.StdId == 0x651) {
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f240 6251 	movw	r2, #1617	; 0x651
 8000938:	4293      	cmp	r3, r2
 800093a:	d105      	bne.n	8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		buffer[6] = rcv_msg[0];
 800093c:	7b3a      	ldrb	r2, [r7, #12]
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000940:	719a      	strb	r2, [r3, #6]
		buffer[7] = rcv_msg[1];
 8000942:	7b7a      	ldrb	r2, [r7, #13]
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000946:	71da      	strb	r2, [r3, #7]
	}

	if (RxHeader.StdId == 0x652) {
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f240 6252 	movw	r2, #1618	; 0x652
 800094e:	4293      	cmp	r3, r2
 8000950:	d105      	bne.n	800095e <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		buffer[8] = rcv_msg[0];
 8000952:	7b3a      	ldrb	r2, [r7, #12]
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000956:	721a      	strb	r2, [r3, #8]
		buffer[9] = rcv_msg[1];
 8000958:	7b7a      	ldrb	r2, [r7, #13]
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800095c:	725a      	strb	r2, [r3, #9]
	}

	if (RxHeader.StdId == 0x653) {
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f240 6253 	movw	r2, #1619	; 0x653
 8000964:	4293      	cmp	r3, r2
 8000966:	d105      	bne.n	8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		buffer[10] = rcv_msg[0];
 8000968:	7b3a      	ldrb	r2, [r7, #12]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800096c:	729a      	strb	r2, [r3, #10]
		buffer[11] = rcv_msg[1];
 800096e:	7b7a      	ldrb	r2, [r7, #13]
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000972:	72da      	strb	r2, [r3, #11]
	}

	if (RxHeader.StdId == 0x654) {
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f240 6254 	movw	r2, #1620	; 0x654
 800097a:	4293      	cmp	r3, r2
 800097c:	d105      	bne.n	800098a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		buffer[12] = rcv_msg[0];
 800097e:	7b3a      	ldrb	r2, [r7, #12]
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000982:	731a      	strb	r2, [r3, #12]
		buffer[13] = rcv_msg[1];
 8000984:	7b7a      	ldrb	r2, [r7, #13]
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000988:	735a      	strb	r2, [r3, #13]
	}

	if (RxHeader.StdId == 0x655) {
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f240 6255 	movw	r2, #1621	; 0x655
 8000990:	4293      	cmp	r3, r2
 8000992:	d10b      	bne.n	80009ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		buffer[14] = rcv_msg[0];
 8000994:	7b3a      	ldrb	r2, [r7, #12]
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000998:	739a      	strb	r2, [r3, #14]
		buffer[15] = rcv_msg[1];
 800099a:	7b7a      	ldrb	r2, [r7, #13]
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800099e:	73da      	strb	r2, [r3, #15]
		buffer[16] = rcv_msg[2];
 80009a0:	7bba      	ldrb	r2, [r7, #14]
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80009a4:	741a      	strb	r2, [r3, #16]
		buffer[17] = rcv_msg[3];
 80009a6:	7bfa      	ldrb	r2, [r7, #15]
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80009aa:	745a      	strb	r2, [r3, #17]
	}

}
 80009ac:	bf00      	nop
 80009ae:	3730      	adds	r7, #48	; 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20002d0c 	.word	0x20002d0c

080009b8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009ca:	f000 fb51 	bl	8001070 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40000800 	.word	0x40000800

080009dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_MspInit+0x68>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_MspInit+0x68>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_MspInit+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x68>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x68>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x68>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f001 fe08 	bl	800263a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_MspInit+0x6c>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_MspInit+0x6c>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010000 	.word	0x40010000

08000a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <HAL_ADC_MspInit+0xbc>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d149      	bne.n	8000b0c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <HAL_ADC_MspInit+0xc0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Gas_Pin;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Gas_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <HAL_ADC_MspInit+0xc4>)
 8000ab8:	f002 f84e 	bl	8002b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000abe:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0xcc>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000af2:	f001 fdcd 	bl	8002690 <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000afc:	f7ff ff6e 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_ADC_MspInit+0xc8>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40012400 	.word	0x40012400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	20002d24 	.word	0x20002d24
 8000b24:	40020008 	.word	0x40020008

08000b28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a35      	ldr	r2, [pc, #212]	; (8000c18 <HAL_CAN_MspInit+0xf0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d163      	bne.n	8000c10 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b48:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2d      	ldr	r2, [pc, #180]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <HAL_CAN_MspInit+0xf4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4824      	ldr	r0, [pc, #144]	; (8000c20 <HAL_CAN_MspInit+0xf8>)
 8000b8e:	f001 ffe3 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_CAN_MspInit+0xf8>)
 8000ba8:	f001 ffd6 	bl	8002b58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_CAN_MspInit+0xfc>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_CAN_MspInit+0xfc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	2013      	movs	r0, #19
 8000bd6:	f001 fd30 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000bda:	2013      	movs	r0, #19
 8000bdc:	f001 fd49 	bl	8002672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2105      	movs	r1, #5
 8000be4:	2014      	movs	r0, #20
 8000be6:	f001 fd28 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000bea:	2014      	movs	r0, #20
 8000bec:	f001 fd41 	bl	8002672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	2015      	movs	r0, #21
 8000bf6:	f001 fd20 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bfa:	2015      	movs	r0, #21
 8000bfc:	f001 fd39 	bl	8002672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2105      	movs	r1, #5
 8000c04:	2016      	movs	r0, #22
 8000c06:	f001 fd18 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c0a:	2016      	movs	r0, #22
 8000c0c:	f001 fd31 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40006400 	.word	0x40006400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40010000 	.word	0x40010000

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <HAL_I2C_MspInit+0x70>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d123      	bne.n	8000c90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	61d3      	str	r3, [r2, #28]
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_I2C_MspInit+0x74>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c78:	23c0      	movs	r3, #192	; 0xc0
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x78>)
 8000c8c:	f001 ff64 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <HAL_UART_MspInit+0x154>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d132      	bne.n	8000d2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	4619      	mov	r1, r3
 8000d08:	483d      	ldr	r0, [pc, #244]	; (8000e00 <HAL_UART_MspInit+0x15c>)
 8000d0a:	f001 ff25 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4837      	ldr	r0, [pc, #220]	; (8000e00 <HAL_UART_MspInit+0x15c>)
 8000d24:	f001 ff18 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d28:	e062      	b.n	8000df0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_UART_MspInit+0x160>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d15d      	bne.n	8000df0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <HAL_UART_MspInit+0x158>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4822      	ldr	r0, [pc, #136]	; (8000e00 <HAL_UART_MspInit+0x15c>)
 8000d78:	f001 feee 	bl	8002b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481c      	ldr	r0, [pc, #112]	; (8000e00 <HAL_UART_MspInit+0x15c>)
 8000d90:	f001 fee2 	bl	8002b58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x168>)
 8000d98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000dc6:	f001 fc63 	bl	8002690 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000dd0:	f7ff fe04 	bl	80009dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_UART_MspInit+0x164>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2105      	movs	r1, #5
 8000de4:	2026      	movs	r0, #38	; 0x26
 8000de6:	f001 fc28 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dea:	2026      	movs	r0, #38	; 0x26
 8000dec:	f001 fc41 	bl	8002672 <HAL_NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013800 	.word	0x40013800
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40004400 	.word	0x40004400
 8000e08:	20002bd0 	.word	0x20002bd0
 8000e0c:	4002006c 	.word	0x4002006c

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	201e      	movs	r0, #30
 8000e26:	f001 fc08 	bl	800263a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e2a:	201e      	movs	r0, #30
 8000e2c:	f001 fc21 	bl	8002672 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	61d3      	str	r3, [r2, #28]
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e48:	f107 0210 	add.w	r2, r7, #16
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f812 	bl	8003e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e58:	f002 ffe8 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_InitTick+0xa4>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_InitTick+0xac>)
 8000e74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e92:	f003 f8f7 	bl	8004084 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e9e:	f003 f925 	bl	80040ec <HAL_TIM_Base_Start_IT>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	431bde83 	.word	0x431bde83
 8000eb8:	20002ddc 	.word	0x20002ddc
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <BusFault_Handler+0x4>

08000ede <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <UsageFault_Handler+0x4>

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <DMA1_Channel1_IRQHandler+0x10>)
 8000ef6:	f001 fcfb 	bl	80028f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20002d24 	.word	0x20002d24

08000f04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA1_Channel6_IRQHandler+0x10>)
 8000f0a:	f001 fcf1 	bl	80028f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20002bd0 	.word	0x20002bd0

08000f18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM4_IRQHandler+0x10>)
 8000f1e:	f003 f908 	bl	8004132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20002ddc 	.word	0x20002ddc

08000f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART2_IRQHandler+0x10>)
 8000f32:	f003 fbd9 	bl	80046e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20002d90 	.word	0x20002d90

08000f40 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_HP_CAN1_TX_IRQHandler(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000f46:	f001 f8a5 	bl	8002094 <HAL_CAN_IRQHandler>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20002c74 	.word	0x20002c74

08000f54 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f5a:	f001 f89b 	bl	8002094 <HAL_CAN_IRQHandler>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20002c74 	.word	0x20002c74

08000f68 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <CAN1_RX1_IRQHandler+0x10>)
 8000f6e:	f001 f891 	bl	8002094 <HAL_CAN_IRQHandler>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20002c74 	.word	0x20002c74

08000f7c <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <CAN1_SCE_IRQHandler+0x10>)
 8000f82:	f001 f887 	bl	8002094 <HAL_CAN_IRQHandler>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20002c74 	.word	0x20002c74

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <SystemInit+0x5c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <SystemInit+0x5c>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <SystemInit+0x5c>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4911      	ldr	r1, [pc, #68]	; (8000fec <SystemInit+0x5c>)
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <SystemInit+0x60>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <SystemInit+0x5c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <SystemInit+0x5c>)
 8000fb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <SystemInit+0x5c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SystemInit+0x5c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <SystemInit+0x5c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <SystemInit+0x5c>)
 8000fce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SystemInit+0x5c>)
 8000fd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000fda:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SystemInit+0x64>)
 8000fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	f8ff0000 	.word	0xf8ff0000
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ff8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ffa:	e003      	b.n	8001004 <LoopCopyDataInit>

08000ffc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ffe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001000:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001002:	3104      	adds	r1, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001008:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800100a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800100c:	d3f6      	bcc.n	8000ffc <CopyDataInit>
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001010:	e002      	b.n	8001018 <LoopFillZerobss>

08001012 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001014:	f842 3b04 	str.w	r3, [r2], #4

08001018 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800101c:	d3f9      	bcc.n	8001012 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101e:	f7ff ffb7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f005 f96b 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001026:	f7ff f8d1 	bl	80001cc <main>
  bx lr
 800102a:	4770      	bx	lr
  ldr r3, =_sidata
 800102c:	080063e4 	.word	0x080063e4
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001034:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001038:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800103c:	20002e20 	.word	0x20002e20

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f001 fae5 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fed8 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fcc2 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_IncTick+0x20>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000008 	.word	0x20000008
 8001090:	20002e1c 	.word	0x20002e1c

08001094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20002e1c 	.word	0x20002e1c

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff0 	bl	8001094 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_Delay+0x40>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffe0 	bl	8001094 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008

080010ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0be      	b.n	800128c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	2b00      	cmp	r3, #0
 800111a:	d109      	bne.n	8001130 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fc94 	bl	8000a58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 faf7 	bl	8001724 <ADC_ConversionStop_Disable>
 8001136:	4603      	mov	r3, r0
 8001138:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 8099 	bne.w	800127a <HAL_ADC_Init+0x18e>
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8095 	bne.w	800127a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001158:	f023 0302 	bic.w	r3, r3, #2
 800115c:	f043 0202 	orr.w	r2, r3, #2
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b1b      	ldrb	r3, [r3, #12]
 8001172:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001174:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	4313      	orrs	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001184:	d003      	beq.n	800118e <HAL_ADC_Init+0xa2>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d102      	bne.n	8001194 <HAL_ADC_Init+0xa8>
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	e000      	b.n	8001196 <HAL_ADC_Init+0xaa>
 8001194:	2300      	movs	r3, #0
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d119      	bne.n	80011d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b1b      	ldrb	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	035a      	lsls	r2, r3, #13
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	e00b      	b.n	80011d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f043 0220 	orr.w	r2, r3, #32
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_ADC_Init+0x1a8>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001208:	d003      	beq.n	8001212 <HAL_ADC_Init+0x126>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d104      	bne.n	800121c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	3b01      	subs	r3, #1
 8001218:	051b      	lsls	r3, r3, #20
 800121a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	430a      	orrs	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_ADC_Init+0x1ac>)
 8001238:	4013      	ands	r3, r2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d10b      	bne.n	8001258 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001256:	e018      	b.n	800128a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f023 0312 	bic.w	r3, r3, #18
 8001260:	f043 0210 	orr.w	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001278:	e007      	b.n	800128a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800128a:	7dfb      	ldrb	r3, [r7, #23]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	ffe1f7fd 	.word	0xffe1f7fd
 8001298:	ff1f0efe 	.word	0xff1f0efe

0800129c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a64      	ldr	r2, [pc, #400]	; (8001444 <HAL_ADC_Start_DMA+0x1a8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d004      	beq.n	80012c0 <HAL_ADC_Start_DMA+0x24>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a63      	ldr	r2, [pc, #396]	; (8001448 <HAL_ADC_Start_DMA+0x1ac>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d106      	bne.n	80012ce <HAL_ADC_Start_DMA+0x32>
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_ADC_Start_DMA+0x1a8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f040 80b3 	bne.w	8001434 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_ADC_Start_DMA+0x40>
 80012d8:	2302      	movs	r3, #2
 80012da:	e0ae      	b.n	800143a <HAL_ADC_Start_DMA+0x19e>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f9cb 	bl	8001680 <ADC_Enable>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 809a 	bne.w	800142a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_ADC_Start_DMA+0x1ac>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d105      	bne.n	8001320 <HAL_ADC_Start_DMA+0x84>
 8001314:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <HAL_ADC_Start_DMA+0x1a8>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d115      	bne.n	800134c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001336:	2b00      	cmp	r3, #0
 8001338:	d026      	beq.n	8001388 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001342:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800134a:	e01d      	b.n	8001388 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a39      	ldr	r2, [pc, #228]	; (8001444 <HAL_ADC_Start_DMA+0x1a8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_ADC_Start_DMA+0xd0>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a38      	ldr	r2, [pc, #224]	; (8001448 <HAL_ADC_Start_DMA+0x1ac>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d10d      	bne.n	8001388 <HAL_ADC_Start_DMA+0xec>
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <HAL_ADC_Start_DMA+0x1a8>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001380:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f023 0206 	bic.w	r2, r3, #6
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_ADC_Start_DMA+0x1b0>)
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a24      	ldr	r2, [pc, #144]	; (8001450 <HAL_ADC_Start_DMA+0x1b4>)
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_ADC_Start_DMA+0x1b8>)
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f06f 0202 	mvn.w	r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a18      	ldr	r0, [r3, #32]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	334c      	adds	r3, #76	; 0x4c
 80013ec:	4619      	mov	r1, r3
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f001 f9a7 	bl	8002744 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001400:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001404:	d108      	bne.n	8001418 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001414:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001416:	e00f      	b.n	8001438 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001426:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001428:	e006      	b.n	8001438 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001432:	e001      	b.n	8001438 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012400 	.word	0x40012400
 8001448:	40012800 	.word	0x40012800
 800144c:	08001799 	.word	0x08001799
 8001450:	08001815 	.word	0x08001815
 8001454:	08001831 	.word	0x08001831

08001458 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x20>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e0dc      	b.n	800166a <HAL_ADC_ConfigChannel+0x1da>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b06      	cmp	r3, #6
 80014be:	d81c      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b05      	subs	r3, #5
 80014d2:	221f      	movs	r2, #31
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b05      	subs	r3, #5
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
 80014f8:	e03c      	b.n	8001574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d81c      	bhi.n	800153c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b23      	subs	r3, #35	; 0x23
 8001514:	221f      	movs	r2, #31
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	4019      	ands	r1, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b23      	subs	r3, #35	; 0x23
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	e01b      	b.n	8001574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	4019      	ands	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b41      	subs	r3, #65	; 0x41
 8001568:	fa00 f203 	lsl.w	r2, r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d91c      	bls.n	80015b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	3b1e      	subs	r3, #30
 800158e:	2207      	movs	r2, #7
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4019      	ands	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6898      	ldr	r0, [r3, #8]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	3b1e      	subs	r3, #30
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	e019      	b.n	80015ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6919      	ldr	r1, [r3, #16]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4019      	ands	r1, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6898      	ldr	r0, [r3, #8]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	fa00 f203 	lsl.w	r2, r0, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d003      	beq.n	80015fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015f6:	2b11      	cmp	r3, #17
 80015f8:	d132      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <HAL_ADC_ConfigChannel+0x1e4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d125      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d126      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001620:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b10      	cmp	r3, #16
 8001628:	d11a      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_ADC_ConfigChannel+0x1e8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_ADC_ConfigChannel+0x1ec>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9a      	lsrs	r2, r3, #18
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001640:	e002      	b.n	8001648 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f9      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x1b2>
 800164e:	e007      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f043 0220 	orr.w	r2, r3, #32
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40012400 	.word	0x40012400
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d039      	beq.n	8001712 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0201 	orr.w	r2, r2, #1
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <ADC_Enable+0x9c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <ADC_Enable+0xa0>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016bc:	e002      	b.n	80016c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ca:	f7ff fce3 	bl	8001094 <HAL_GetTick>
 80016ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016d0:	e018      	b.n	8001704 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016d2:	f7ff fcdf 	bl	8001094 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d911      	bls.n	8001704 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e007      	b.n	8001714 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d1df      	bne.n	80016d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d127      	bne.n	800178e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800174e:	f7ff fca1 	bl	8001094 <HAL_GetTick>
 8001752:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001754:	e014      	b.n	8001780 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001756:	f7ff fc9d 	bl	8001094 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d90d      	bls.n	8001780 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f043 0210 	orr.w	r2, r3, #16
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e007      	b.n	8001790 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b01      	cmp	r3, #1
 800178c:	d0e3      	beq.n	8001756 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d127      	bne.n	8001802 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017cc:	d115      	bne.n	80017fa <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fe2c 	bl	8001458 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001800:	e004      	b.n	800180c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fe21 	bl	800146a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f043 0204 	orr.w	r2, r3, #4
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fe10 	bl	800147c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0ed      	b.n	8001a52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff f950 	bl	8000b28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0202 	bic.w	r2, r2, #2
 8001896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001898:	f7ff fbfc 	bl	8001094 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800189e:	e012      	b.n	80018c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a0:	f7ff fbf8 	bl	8001094 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d90b      	bls.n	80018c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2205      	movs	r2, #5
 80018be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0c5      	b.n	8001a52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e5      	bne.n	80018a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff fbd6 	bl	8001094 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ea:	e012      	b.n	8001912 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ec:	f7ff fbd2 	bl	8001094 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b0a      	cmp	r3, #10
 80018f8:	d90b      	bls.n	8001912 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2205      	movs	r2, #5
 800190a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e09f      	b.n	8001a52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0e5      	beq.n	80018ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7e1b      	ldrb	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e007      	b.n	800194a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7e5b      	ldrb	r3, [r3, #25]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e007      	b.n	8001974 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001972:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e9b      	ldrb	r3, [r3, #26]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0220 	orr.w	r2, r2, #32
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0220 	bic.w	r2, r2, #32
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7edb      	ldrb	r3, [r3, #27]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0210 	bic.w	r2, r2, #16
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7f1b      	ldrb	r3, [r3, #28]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0208 	bic.w	r2, r2, #8
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7f5b      	ldrb	r3, [r3, #29]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0204 	orr.w	r2, r2, #4
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	ea42 0103 	orr.w	r1, r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_ConfigFilter+0x26>
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	f040 80aa 	bne.w	8001bd4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2201      	movs	r2, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d123      	bne.n	8001b02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001adc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3248      	adds	r2, #72	; 0x48
 8001ae2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001af8:	6979      	ldr	r1, [r7, #20]
 8001afa:	3348      	adds	r3, #72	; 0x48
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d122      	bne.n	8001b50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3248      	adds	r2, #72	; 0x48
 8001b30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b46:	6979      	ldr	r1, [r7, #20]
 8001b48:	3348      	adds	r3, #72	; 0x48
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b6a:	e007      	b.n	8001b7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bc6:	f023 0201 	bic.w	r2, r3, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e006      	b.n	8001be2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d12e      	bne.n	8001c5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fa3c 	bl	8001094 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c1e:	e012      	b.n	8001c46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c20:	f7ff fa38 	bl	8001094 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b0a      	cmp	r3, #10
 8001c2c:	d90b      	bls.n	8001c46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e012      	b.n	8001c6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e5      	bne.n	8001c20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e006      	b.n	8001c6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_AddTxMessage+0x2c>
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80b8 	bne.w	8001e10 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80a0 	beq.w	8001e00 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	0e1b      	lsrs	r3, r3, #24
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d907      	bls.n	8001ce0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e09e      	b.n	8001e1e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3318      	adds	r3, #24
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	440b      	add	r3, r1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e00f      	b.n	8001d2e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3318      	adds	r3, #24
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	440b      	add	r3, r1
 8001d2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3318      	adds	r3, #24
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3304      	adds	r3, #4
 8001d40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	7d1b      	ldrb	r3, [r3, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d111      	bne.n	8001d6e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3318      	adds	r3, #24
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	3304      	adds	r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	6811      	ldr	r1, [r2, #0]
 8001d5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3318      	adds	r3, #24
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	440b      	add	r3, r1
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3307      	adds	r3, #7
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	061a      	lsls	r2, r3, #24
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3306      	adds	r3, #6
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3305      	adds	r3, #5
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	3204      	adds	r2, #4
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	4610      	mov	r0, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	ea43 0200 	orr.w	r2, r3, r0
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001da4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3303      	adds	r3, #3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	061a      	lsls	r2, r3, #24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3302      	adds	r3, #2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	ea43 0200 	orr.w	r2, r3, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001dda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3318      	adds	r3, #24
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	6811      	ldr	r1, [r2, #0]
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3318      	adds	r3, #24
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	440b      	add	r3, r1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e00e      	b.n	8001e1e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e006      	b.n	8001e1e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d003      	beq.n	8001e4c <HAL_CAN_GetRxMessage+0x24>
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	f040 80f3 	bne.w	8002032 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d116      	bne.n	8001e8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0e7      	b.n	8002040 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0d8      	b.n	8002040 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	331b      	adds	r3, #27
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0204 	and.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	331b      	adds	r3, #27
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0d5b      	lsrs	r3, r3, #21
 8001ebc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e00b      	b.n	8001ede <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	331b      	adds	r3, #27
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	331b      	adds	r3, #27
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0202 	and.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	331b      	adds	r3, #27
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	331b      	adds	r3, #27
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	331b      	adds	r3, #27
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0a1a      	lsrs	r2, r3, #8
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1a      	lsrs	r2, r3, #16
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3302      	adds	r3, #2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e1a      	lsrs	r2, r3, #24
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0a1a      	lsrs	r2, r3, #8
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3305      	adds	r3, #5
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0c1a      	lsrs	r2, r3, #16
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3306      	adds	r3, #6
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e1a      	lsrs	r2, r3, #24
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3307      	adds	r3, #7
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0220 	orr.w	r2, r2, #32
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	e007      	b.n	800202e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e006      	b.n	8002040 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d002      	beq.n	8002068 <HAL_CAN_ActivateNotification+0x1e>
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d109      	bne.n	800207c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e006      	b.n	800208a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
  }
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07c      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f97d 	bl	80023f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80020fc:	e016      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e00c      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e002      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f980 	bl	800242c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d024      	beq.n	8002180 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f95c 	bl	8002408 <HAL_CAN_TxMailbox1CompleteCallback>
 8002150:	e016      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	e00c      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e002      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f95f 	bl	800243e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f93b 	bl	800241a <HAL_CAN_TxMailbox2CompleteCallback>
 80021a4:	e016      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e00c      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	e002      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f93e 	bl	8002450 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2208      	movs	r2, #8
 8002212:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f924 	bl	8002462 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fb62 	bl	80008fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f904 	bl	8002486 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8ec 	bl	8002474 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8ed 	bl	8002498 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2208      	movs	r2, #8
 80022d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8e5 	bl	80024aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d075      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d06c      	beq.n	80023ce <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03d      	beq.n	80023ce <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d038      	beq.n	80023ce <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002362:	2b30      	cmp	r3, #48	; 0x30
 8002364:	d017      	beq.n	8002396 <HAL_CAN_IRQHandler+0x302>
 8002366:	2b30      	cmp	r3, #48	; 0x30
 8002368:	d804      	bhi.n	8002374 <HAL_CAN_IRQHandler+0x2e0>
 800236a:	2b10      	cmp	r3, #16
 800236c:	d009      	beq.n	8002382 <HAL_CAN_IRQHandler+0x2ee>
 800236e:	2b20      	cmp	r3, #32
 8002370:	d00c      	beq.n	800238c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002372:	e024      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002374:	2b50      	cmp	r3, #80	; 0x50
 8002376:	d018      	beq.n	80023aa <HAL_CAN_IRQHandler+0x316>
 8002378:	2b60      	cmp	r3, #96	; 0x60
 800237a:	d01b      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x320>
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d00f      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002380:	e01d      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238a:	e018      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002394:	e013      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800239e:	e00e      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a8:	e009      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b2:	e004      	b.n	80023be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f867 	bl	80024bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4906      	ldr	r1, [pc, #24]	; (8002568 <__NVIC_EnableIRQ+0x34>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100

0800256c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	; (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	; (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf28      	it	cs
 80025de:	2304      	movcs	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d902      	bls.n	80025f0 <NVIC_EncodePriority+0x30>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3b03      	subs	r3, #3
 80025ee:	e000      	b.n	80025f2 <NVIC_EncodePriority+0x32>
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	401a      	ands	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43d9      	mvns	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	4313      	orrs	r3, r2
         );
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff4f 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff64 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ffb2 	bl	80025c0 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff81 	bl	800256c <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff57 	bl	8002534 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e043      	b.n	800272e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_DMA_Init+0xa8>)
 80026ae:	4413      	add	r3, r2
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_DMA_Init+0xac>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_DMA_Init+0xb0>)
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	bffdfff8 	.word	0xbffdfff8
 800273c:	cccccccd 	.word	0xcccccccd
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Start_IT+0x20>
 8002760:	2302      	movs	r3, #2
 8002762:	e04a      	b.n	80027fa <HAL_DMA_Start_IT+0xb6>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002772:	2b01      	cmp	r3, #1
 8002774:	d13a      	bne.n	80027ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f9ae 	bl	8002afc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 020e 	orr.w	r2, r2, #14
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e00f      	b.n	80027da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 020a 	orr.w	r2, r2, #10
 80027d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e005      	b.n	80027f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
 80027f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002816:	2b02      	cmp	r3, #2
 8002818:	d005      	beq.n	8002826 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e051      	b.n	80028ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 020e 	bic.w	r2, r2, #14
 8002834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Abort_IT+0xd0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d029      	beq.n	80028a4 <HAL_DMA_Abort_IT+0xa0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_DMA_Abort_IT+0xd4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x9c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_DMA_Abort_IT+0xd8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01a      	beq.n	800289a <HAL_DMA_Abort_IT+0x96>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_DMA_Abort_IT+0xdc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d012      	beq.n	8002894 <HAL_DMA_Abort_IT+0x90>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_DMA_Abort_IT+0xe0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_DMA_Abort_IT+0x8a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_DMA_Abort_IT+0xe4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d102      	bne.n	8002888 <HAL_DMA_Abort_IT+0x84>
 8002882:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002886:	e00e      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	e00b      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 800288e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002892:	e008      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	e005      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	e002      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 80028a0:	2310      	movs	r3, #16
 80028a2:	e000      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_DMA_Abort_IT+0xe8>)
 80028a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
    } 
  }
  return status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40020008 	.word	0x40020008
 80028d8:	4002001c 	.word	0x4002001c
 80028dc:	40020030 	.word	0x40020030
 80028e0:	40020044 	.word	0x40020044
 80028e4:	40020058 	.word	0x40020058
 80028e8:	4002006c 	.word	0x4002006c
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2204      	movs	r2, #4
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d04f      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xc8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d04a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a66      	ldr	r2, [pc, #408]	; (8002ae0 <HAL_DMA_IRQHandler+0x1f0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d029      	beq.n	800299e <HAL_DMA_IRQHandler+0xae>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_IRQHandler+0xaa>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_DMA_IRQHandler+0x1f8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_IRQHandler+0xa4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a62      	ldr	r2, [pc, #392]	; (8002aec <HAL_DMA_IRQHandler+0x1fc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d012      	beq.n	800298e <HAL_DMA_IRQHandler+0x9e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_DMA_IRQHandler+0x200>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00a      	beq.n	8002988 <HAL_DMA_IRQHandler+0x98>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a5f      	ldr	r2, [pc, #380]	; (8002af4 <HAL_DMA_IRQHandler+0x204>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d102      	bne.n	8002982 <HAL_DMA_IRQHandler+0x92>
 800297c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002980:	e00e      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 8002982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002986:	e00b      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 8002988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800298c:	e008      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 800298e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002992:	e005      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	e002      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	e000      	b.n	80029a0 <HAL_DMA_IRQHandler+0xb0>
 800299e:	2304      	movs	r3, #4
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_DMA_IRQHandler+0x208>)
 80029a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8094 	beq.w	8002ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029b6:	e08e      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2202      	movs	r2, #2
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d056      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x186>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d051      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020a 	bic.w	r2, r2, #10
 80029ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <HAL_DMA_IRQHandler+0x1f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d029      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x166>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x162>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01a      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x15c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_DMA_IRQHandler+0x1fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d012      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x156>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <HAL_DMA_IRQHandler+0x200>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00a      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x150>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a31      	ldr	r2, [pc, #196]	; (8002af4 <HAL_DMA_IRQHandler+0x204>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d102      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x14a>
 8002a34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a38:	e00e      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	e00b      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a44:	e008      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	e005      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a50:	e002      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a52:	2320      	movs	r3, #32
 8002a54:	e000      	b.n	8002a58 <HAL_DMA_IRQHandler+0x168>
 8002a56:	2302      	movs	r3, #2
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_DMA_IRQHandler+0x208>)
 8002a5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d034      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a74:	e02f      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d028      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x1e8>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d023      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
    }
  }
  return;
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
}
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020008 	.word	0x40020008
 8002ae4:	4002001c 	.word	0x4002001c
 8002ae8:	40020030 	.word	0x40020030
 8002aec:	40020044 	.word	0x40020044
 8002af0:	40020058 	.word	0x40020058
 8002af4:	4002006c 	.word	0x4002006c
 8002af8:	40020000 	.word	0x40020000

08002afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d108      	bne.n	8002b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b3a:	e007      	b.n	8002b4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e127      	b.n	8002dbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8116 	bne.w	8002db6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d034      	beq.n	8002bfc <HAL_GPIO_Init+0xa4>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d80d      	bhi.n	8002bb2 <HAL_GPIO_Init+0x5a>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x9a>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d804      	bhi.n	8002ba8 <HAL_GPIO_Init+0x50>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d01c      	beq.n	8002be0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba6:	e048      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d043      	beq.n	8002c34 <HAL_GPIO_Init+0xdc>
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d01b      	beq.n	8002be8 <HAL_GPIO_Init+0x90>
          break;
 8002bb0:	e043      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bb2:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d026      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d806      	bhi.n	8002bcc <HAL_GPIO_Init+0x74>
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_GPIO_Init+0x284>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d020      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bc4:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_GPIO_Init+0x288>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bca:	e036      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bcc:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_GPIO_Init+0x28c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd2:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d016      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd8:	4a84      	ldr	r2, [pc, #528]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e028      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e023      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01e      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e019      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e012      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d801      	bhi.n	8002c44 <HAL_GPIO_Init+0xec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e001      	b.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2bff      	cmp	r3, #255	; 0xff
 8002c4e:	d802      	bhi.n	8002c56 <HAL_GPIO_Init+0xfe>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x104>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3b08      	subs	r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	210f      	movs	r1, #15
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8096 	beq.w	8002db6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6193      	str	r3, [r2, #24]
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca2:	4a54      	ldr	r2, [pc, #336]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x19e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x2a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x19a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x196>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x192>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d08:	493a      	ldr	r1, [pc, #232]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e006      	b.n	8002d3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4933      	ldr	r1, [pc, #204]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
 8002da6:	e006      	b.n	8002db6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f aed0 	bne.w	8002b6c <HAL_GPIO_Init+0x14>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10110000 	.word	0x10110000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10320000 	.word	0x10320000
 8002dec:	10220000 	.word	0x10220000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e001      	b.n	8002e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e10f      	b.n	800306e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd fee0 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e80:	f000 ffd4 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a7b      	ldr	r2, [pc, #492]	; (8003078 <HAL_I2C_Init+0x23c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <HAL_I2C_Init+0x64>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_I2C_Init+0x240>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x72>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a77      	ldr	r2, [pc, #476]	; (8003080 <HAL_I2C_Init+0x244>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0db      	b.n	800306e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a72      	ldr	r2, [pc, #456]	; (8003084 <HAL_I2C_Init+0x248>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a64      	ldr	r2, [pc, #400]	; (8003078 <HAL_I2C_Init+0x23c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_I2C_Init+0xb4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3301      	adds	r3, #1
 8002eee:	e009      	b.n	8002f04 <HAL_I2C_Init+0xc8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_I2C_Init+0x24c>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4956      	ldr	r1, [pc, #344]	; (8003078 <HAL_I2C_Init+0x23c>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d80d      	bhi.n	8002f40 <HAL_I2C_Init+0x104>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e59      	subs	r1, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	bf38      	it	cc
 8002f3c:	2304      	movcc	r3, #4
 8002f3e:	e04f      	b.n	8002fe0 <HAL_I2C_Init+0x1a4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <HAL_I2C_Init+0x130>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e012      	b.n	8002f92 <HAL_I2C_Init+0x156>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x15e>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e022      	b.n	8002fe0 <HAL_I2C_Init+0x1a4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_I2C_Init+0x184>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e58      	subs	r0, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	440b      	add	r3, r1
 8002fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Init+0x1a4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800300e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6911      	ldr	r1, [r2, #16]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	000186a0 	.word	0x000186a0
 800307c:	001e847f 	.word	0x001e847f
 8003080:	003d08ff 	.word	0x003d08ff
 8003084:	431bde83 	.word	0x431bde83
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7fd fff8 	bl	8001094 <HAL_GetTick>
 80030a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	f040 80e0 	bne.w	8003274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2319      	movs	r3, #25
 80030ba:	2201      	movs	r2, #1
 80030bc:	4970      	ldr	r1, [pc, #448]	; (8003280 <HAL_I2C_Master_Transmit+0x1f4>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f958 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0d3      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2C_Master_Transmit+0x50>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0cc      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d007      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2221      	movs	r2, #33	; 0x21
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2210      	movs	r2, #16
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	893a      	ldrh	r2, [r7, #8]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a50      	ldr	r2, [pc, #320]	; (8003284 <HAL_I2C_Master_Transmit+0x1f8>)
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f89c 	bl	8003288 <I2C_MasterRequestWrite>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e08d      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003170:	e066      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	6a39      	ldr	r1, [r7, #32]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f9d2 	bl	8003520 <I2C_WaitOnTXEFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b04      	cmp	r3, #4
 8003188:	d107      	bne.n	800319a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11b      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x188>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	6a39      	ldr	r1, [r7, #32]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f9c2 	bl	80035a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2b04      	cmp	r3, #4
 800322a:	d107      	bne.n	800323c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e01a      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d194      	bne.n	8003172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	00100002 	.word	0x00100002
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d006      	beq.n	80032b2 <I2C_MasterRequestWrite+0x2a>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d003      	beq.n	80032b2 <I2C_MasterRequestWrite+0x2a>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b0:	d108      	bne.n	80032c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e00b      	b.n	80032dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	2b12      	cmp	r3, #18
 80032ca:	d107      	bne.n	80032dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f843 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e035      	b.n	8003364 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e01b      	b.n	800334c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <I2C_MasterRequestWrite+0xe4>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f875 	bl	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e010      	b.n	8003364 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <I2C_MasterRequestWrite+0xe8>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f865 	bl	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010008 	.word	0x00010008
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003384:	e025      	b.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d021      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fd fe81 	bl	8001094 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e023      	b.n	800341a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10d      	bne.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	e00c      	b.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d0b6      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003430:	e051      	b.n	80034d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003440:	d123      	bne.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800345a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e046      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d021      	beq.n	80034d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7fd fdff 	bl	8001094 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d116      	bne.n	80034d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e020      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10c      	bne.n	80034fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e00b      	b.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d18d      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352c:	e02d      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f878 	bl	8003624 <I2C_IsAcknowledgeFailed>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e02d      	b.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d021      	beq.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fd fda5 	bl	8001094 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e007      	b.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d1ca      	bne.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ae:	e02d      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f837 	bl	8003624 <I2C_IsAcknowledgeFailed>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e02d      	b.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d021      	beq.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7fd fd64 	bl	8001094 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d1ca      	bne.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d11b      	bne.n	8003674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0204 	orr.w	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e26c      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8087 	beq.w	80037ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a0:	4b92      	ldr	r3, [pc, #584]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d00c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036ac:	4b8f      	ldr	r3, [pc, #572]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d112      	bne.n	80036de <HAL_RCC_OscConfig+0x5e>
 80036b8:	4b8c      	ldr	r3, [pc, #560]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d10b      	bne.n	80036de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d06c      	beq.n	80037ac <HAL_RCC_OscConfig+0x12c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d168      	bne.n	80037ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e246      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x76>
 80036e8:	4b80      	ldr	r3, [pc, #512]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7f      	ldr	r2, [pc, #508]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e02e      	b.n	8003754 <HAL_RCC_OscConfig+0xd4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x98>
 80036fe:	4b7b      	ldr	r3, [pc, #492]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7a      	ldr	r2, [pc, #488]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b78      	ldr	r3, [pc, #480]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a77      	ldr	r2, [pc, #476]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xd4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0xbc>
 8003722:	4b72      	ldr	r3, [pc, #456]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a71      	ldr	r2, [pc, #452]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6e      	ldr	r2, [pc, #440]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xd4>
 800373c:	4b6b      	ldr	r3, [pc, #428]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6a      	ldr	r2, [pc, #424]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b68      	ldr	r3, [pc, #416]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a67      	ldr	r2, [pc, #412]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fc9a 	bl	8001094 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fc96 	bl	8001094 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1fa      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xe4>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fc86 	bl	8001094 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd fc82 	bl	8001094 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1e6      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x10c>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ba:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x18c>
 80037d2:	4b46      	ldr	r3, [pc, #280]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x176>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1ba      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4939      	ldr	r1, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd fc3b 	bl	8001094 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003822:	f7fd fc37 	bl	8001094 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e19b      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4927      	ldr	r1, [pc, #156]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7fd fc1a 	bl	8001094 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fc16 	bl	8001094 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e17a      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d03a      	beq.n	8003904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d019      	beq.n	80038ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_RCC_OscConfig+0x274>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fbfa 	bl	8001094 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fd fbf6 	bl	8001094 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e15a      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_RCC_OscConfig+0x26c>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f000 fb0a 	bl	8003edc <RCC_Delay>
 80038c8:	e01c      	b.n	8003904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_RCC_OscConfig+0x274>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fd fbe0 	bl	8001094 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d6:	e00f      	b.n	80038f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fd fbdc 	bl	8001094 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d908      	bls.n	80038f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e140      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	42420000 	.word	0x42420000
 80038f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	4b9e      	ldr	r3, [pc, #632]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e9      	bne.n	80038d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a6 	beq.w	8003a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003916:	4b97      	ldr	r3, [pc, #604]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b94      	ldr	r3, [pc, #592]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4a93      	ldr	r2, [pc, #588]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	61d3      	str	r3, [r2, #28]
 800392e:	4b91      	ldr	r3, [pc, #580]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a8a      	ldr	r2, [pc, #552]	; (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003956:	f7fd fb9d 	bl	8001094 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395e:	f7fd fb99 	bl	8001094 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b64      	cmp	r3, #100	; 0x64
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0fd      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x312>
 8003984:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	e02d      	b.n	80039ee <HAL_RCC_OscConfig+0x36e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x334>
 800399a:	4b76      	ldr	r3, [pc, #472]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a75      	ldr	r2, [pc, #468]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a72      	ldr	r2, [pc, #456]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6213      	str	r3, [r2, #32]
 80039b2:	e01c      	b.n	80039ee <HAL_RCC_OscConfig+0x36e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCC_OscConfig+0x356>
 80039bc:	4b6d      	ldr	r3, [pc, #436]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4a6c      	ldr	r2, [pc, #432]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	6213      	str	r3, [r2, #32]
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	e00b      	b.n	80039ee <HAL_RCC_OscConfig+0x36e>
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fd fb4d 	bl	8001094 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fb49 	bl	8001094 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0ab      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a14:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ee      	beq.n	80039fe <HAL_RCC_OscConfig+0x37e>
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd fb37 	bl	8001094 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fd fb33 	bl	8001094 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e095      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a52:	4b48      	ldr	r3, [pc, #288]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	4a47      	ldr	r2, [pc, #284]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8081 	beq.w	8003b6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a68:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d061      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d146      	bne.n	8003b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x4fc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd fb07 	bl	8001094 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd fb03 	bl	8001094 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e067      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	492d      	ldr	r1, [pc, #180]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a19      	ldr	r1, [r3, #32]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	4927      	ldr	r1, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_OscConfig+0x4fc>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fad7 	bl	8001094 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fad3 	bl	8001094 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e037      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x46a>
 8003b08:	e02f      	b.n	8003b6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_OscConfig+0x4fc>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd fac0 	bl	8001094 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fabc 	bl	8001094 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e020      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x498>
 8003b36:	e018      	b.n	8003b6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e013      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_OscConfig+0x4f4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42420060 	.word	0x42420060

08003b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d0      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4965      	ldr	r1, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d040      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d115      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e073      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4936      	ldr	r1, [pc, #216]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fa10 	bl	8001094 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd fa0c 	bl	8001094 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e053      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d210      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	fa21 f303 	lsr.w	r3, r1, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1cc>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1d0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd f86e 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	080063c4 	.word	0x080063c4
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b490      	push	{r4, r7}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d5a:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d5c:	1d3c      	adds	r4, r7, #4
 8003d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d7e:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x46>
 8003d92:	e02d      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d96:	623b      	str	r3, [r7, #32]
      break;
 8003d98:	e02d      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003da6:	4413      	add	r3, r2
 8003da8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c5b      	lsrs	r3, r3, #17
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd2:	fb02 f203 	mul.w	r2, r2, r3
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	e004      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	623b      	str	r3, [r7, #32]
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df2:	623b      	str	r3, [r7, #32]
      break;
 8003df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df6:	6a3b      	ldr	r3, [r7, #32]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc90      	pop	{r4, r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	080063a8 	.word	0x080063a8
 8003e08:	080063b8 	.word	0x080063b8
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	007a1200 	.word	0x007a1200
 8003e14:	003d0900 	.word	0x003d0900

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	20000000 	.word	0x20000000

08003e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	f7ff fff2 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e34:	4601      	mov	r1, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4a03      	ldr	r2, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	080063d4 	.word	0x080063d4

08003e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e58:	f7ff ffde 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	0adb      	lsrs	r3, r3, #11
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000
 8003e78:	080063d4 	.word	0x080063d4

08003e7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	220f      	movs	r2, #15
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_GetClockConfig+0x58>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_RCC_GetClockConfig+0x58>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_GetClockConfig+0x58>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_RCC_GetClockConfig+0x58>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0207 	and.w	r2, r3, #7
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40022000 	.word	0x40022000

08003edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <RCC_Delay+0x34>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <RCC_Delay+0x38>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a5b      	lsrs	r3, r3, #9
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ef8:	bf00      	nop
  }
  while (Delay --);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f9      	bne.n	8003ef8 <RCC_Delay+0x1c>
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000000 	.word	0x20000000
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d07d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4a4b      	ldr	r2, [pc, #300]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	61d3      	str	r3, [r2, #28]
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d118      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f78:	f7fd f88c 	bl	8001094 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	e008      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fd f888 	bl	8001094 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e06d      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02e      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d027      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d014      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fd f857 	bl	8001094 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd f853 	bl	8001094 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4917      	ldr	r1, [pc, #92]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	4313      	orrs	r3, r2
 800401c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	490b      	ldr	r1, [pc, #44]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4904      	ldr	r1, [pc, #16]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	40007000 	.word	0x40007000
 8004080:	42420440 	.word	0x42420440

08004084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e01d      	b.n	80040d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f815 	bl	80040da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 f962 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b06      	cmp	r3, #6
 8004114:	d007      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d122      	bne.n	800418e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d11b      	bne.n	800418e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0202 	mvn.w	r2, #2
 800415e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8ed 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 800417a:	e005      	b.n	8004188 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8e0 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8ef 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d122      	bne.n	80041e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d11b      	bne.n	80041e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0204 	mvn.w	r2, #4
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8c3 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 80041ce:	e005      	b.n	80041dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8b6 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8c5 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d122      	bne.n	8004236 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11b      	bne.n	8004236 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0208 	mvn.w	r2, #8
 8004206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f899 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8004222:	e005      	b.n	8004230 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f88c 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f89b 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d122      	bne.n	800428a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b10      	cmp	r3, #16
 8004250:	d11b      	bne.n	800428a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0210 	mvn.w	r2, #16
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2208      	movs	r2, #8
 8004260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f86f 	bl	8004354 <HAL_TIM_IC_CaptureCallback>
 8004276:	e005      	b.n	8004284 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f862 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f871 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0201 	mvn.w	r2, #1
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc fb81 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8c0 	bl	8004462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f835 	bl	8004378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0220 	mvn.w	r2, #32
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f88b 	bl	8004450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x30>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <TIM_Base_SetConfig+0xbc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <TIM_Base_SetConfig+0xc0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <TIM_Base_SetConfig+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800

08004450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03f      	b.n	8004506 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fc02 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb8d 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b088      	sub	sp, #32
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	f040 8083 	bne.w	8004636 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_UART_Transmit+0x2e>
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e07b      	b.n	8004638 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_UART_Transmit+0x40>
 800454a:	2302      	movs	r3, #2
 800454c:	e074      	b.n	8004638 <HAL_UART_Transmit+0x12a>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2221      	movs	r2, #33	; 0x21
 8004560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004564:	f7fc fd96 	bl	8001094 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004576:	e042      	b.n	80045fe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d122      	bne.n	80045d6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f9b2 	bl	8004904 <UART_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e046      	b.n	8004638 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3302      	adds	r3, #2
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	e017      	b.n	80045fe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	e013      	b.n	80045fe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f98f 	bl	8004904 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e023      	b.n	8004638 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	60ba      	str	r2, [r7, #8]
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1b7      	bne.n	8004578 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f976 	bl	8004904 <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e00a      	b.n	8004638 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	d140      	bne.n	80046dc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_UART_Receive_IT+0x26>
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e039      	b.n	80046de <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_UART_Receive_IT+0x38>
 8004674:	2302      	movs	r3, #2
 8004676:	e032      	b.n	80046de <HAL_UART_Receive_IT+0x9e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2222      	movs	r2, #34	; 0x22
 800469c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0220 	orr.w	r2, r2, #32
 80046d6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x52>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9ce 	bl	8004ad4 <UART_Receive_IT>
      return;
 8004738:	e0cc      	b.n	80048d4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80ab 	beq.w	8004898 <HAL_UART_IRQHandler+0x1b0>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_UART_IRQHandler+0x70>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_UART_IRQHandler+0x90>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_UART_IRQHandler+0xb0>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	f043 0202 	orr.w	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_UART_IRQHandler+0xd0>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	f043 0204 	orr.w	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_UART_IRQHandler+0xf0>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	f043 0208 	orr.w	r2, r3, #8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d078      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_UART_IRQHandler+0x112>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f96d 	bl	8004ad4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <HAL_UART_IRQHandler+0x13a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d031      	beq.n	8004886 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8b8 	bl	8004998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d023      	beq.n	800487e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004844:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	2b00      	cmp	r3, #0
 800484c:	d013      	beq.n	8004876 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_UART_IRQHandler+0x1f4>)
 8004854:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd ffd2 	bl	8002804 <HAL_DMA_Abort_IT>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e00e      	b.n	8004894 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f83b 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	e00a      	b.n	8004894 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f837 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e006      	b.n	8004894 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f833 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004892:	e01e      	b.n	80048d2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	bf00      	nop
    return;
 8004896:	e01c      	b.n	80048d2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_UART_IRQHandler+0x1cc>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8a4 	bl	80049fa <UART_Transmit_IT>
    return;
 80048b2:	e00f      	b.n	80048d4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_UART_IRQHandler+0x1ec>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8eb 	bl	8004aa4 <UART_EndTransmit_IT>
    return;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80048d2:	bf00      	nop
  }
}
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	080049d3 	.word	0x080049d3

080048e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004914:	e02c      	b.n	8004970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d028      	beq.n	8004970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0x30>
 8004924:	f7fc fbb6 	bl	8001094 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d21d      	bcs.n	8004970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e00f      	b.n	8004990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	429a      	cmp	r2, r3
 800498c:	d0c3      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ff80 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b21      	cmp	r3, #33	; 0x21
 8004a0c:	d144      	bne.n	8004a98 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a16:	d11a      	bne.n	8004a4e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]
 8004a40:	e00e      	b.n	8004a60 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	621a      	str	r2, [r3, #32]
 8004a4c:	e008      	b.n	8004a60 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6211      	str	r1, [r2, #32]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ff0b 	bl	80048e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b22      	cmp	r3, #34	; 0x22
 8004ae6:	d171      	bne.n	8004bcc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d123      	bne.n	8004b3a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10e      	bne.n	8004b1e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b1c:	e029      	b.n	8004b72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
 8004b38:	e01b      	b.n	8004b72 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6858      	ldr	r0, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6291      	str	r1, [r2, #40]	; 0x28
 8004b52:	b2c2      	uxtb	r2, r0
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e00c      	b.n	8004b72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	1c58      	adds	r0, r3, #1
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	6288      	str	r0, [r1, #40]	; 0x28
 8004b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0220 	bic.w	r2, r2, #32
 8004b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fb fade 	bl	8000180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e002      	b.n	8004bce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c12:	f023 030c 	bic.w	r3, r3, #12
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a52      	ldr	r2, [pc, #328]	; (8004d84 <UART_SetConfig+0x1ac>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d14e      	bne.n	8004cde <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7ff f908 	bl	8003e54 <HAL_RCC_GetPCLK2Freq>
 8004c44:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	0119      	lsls	r1, r3, #4
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009a      	lsls	r2, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c7c:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2064      	movs	r0, #100	; 0x64
 8004c86:	fb00 f303 	mul.w	r3, r0, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a3d      	ldr	r2, [pc, #244]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9c:	4419      	add	r1, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009a      	lsls	r2, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb4:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2064      	movs	r0, #100	; 0x64
 8004cbe:	fb00 f303 	mul.w	r3, r0, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	3332      	adds	r3, #50	; 0x32
 8004cc8:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 020f 	and.w	r2, r3, #15
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	440a      	add	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004cdc:	e04d      	b.n	8004d7a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7ff f8a5 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8004ce2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009a      	lsls	r2, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	4a23      	ldr	r2, [pc, #140]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	0119      	lsls	r1, r3, #4
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009a      	lsls	r2, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2064      	movs	r0, #100	; 0x64
 8004d24:	fb00 f303 	mul.w	r3, r0, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	3332      	adds	r3, #50	; 0x32
 8004d2e:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3a:	4419      	add	r1, r3
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009a      	lsls	r2, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004d54:	fba3 0302 	umull	r0, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	2064      	movs	r0, #100	; 0x64
 8004d5c:	fb00 f303 	mul.w	r3, r0, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	3332      	adds	r3, #50	; 0x32
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <UART_SetConfig+0x1b0>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f003 020f 	and.w	r2, r3, #15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	440a      	add	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40013800 	.word	0x40013800
 8004d88:	51eb851f 	.word	0x51eb851f

08004d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 0208 	add.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295
 8004da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f103 0208 	add.w	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f103 0208 	add.w	r2, r3, #8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d103      	bne.n	8004e48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	e00c      	b.n	8004e62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e002      	b.n	8004e56 <vListInsert+0x2e>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d2f6      	bcs.n	8004e50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6852      	ldr	r2, [r2, #4]
 8004eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d103      	bne.n	8004ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b08e      	sub	sp, #56	; 0x38
 8004eee:	af04      	add	r7, sp, #16
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	623b      	str	r3, [r7, #32]
 8004f10:	e7fe      	b.n	8004f10 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <xTaskCreateStatic+0x42>
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e7fe      	b.n	8004f2a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f2c:	2354      	movs	r3, #84	; 0x54
 8004f2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b54      	cmp	r3, #84	; 0x54
 8004f34:	d009      	beq.n	8004f4a <xTaskCreateStatic+0x60>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e7fe      	b.n	8004f48 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01e      	beq.n	8004f8e <xTaskCreateStatic+0xa4>
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9303      	str	r3, [sp, #12]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	f107 0314 	add.w	r3, r7, #20
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f850 	bl	8005026 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f88:	f000 f8cc 	bl	8005124 <prvAddNewTaskToReadyList>
 8004f8c:	e001      	b.n	8004f92 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f92:	697b      	ldr	r3, [r7, #20]
	}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 ffcf 	bl	8005f54 <pvPortMalloc>
 8004fb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fbe:	2054      	movs	r0, #84	; 0x54
 8004fc0:	f000 ffc8 	bl	8005f54 <pvPortMalloc>
 8004fc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fd2:	e005      	b.n	8004fe0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fd4:	6978      	ldr	r0, [r7, #20]
 8004fd6:	f001 f87f 	bl	80060d8 <vPortFree>
 8004fda:	e001      	b.n	8004fe0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9303      	str	r3, [sp, #12]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f80e 	bl	8005026 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800500a:	69f8      	ldr	r0, [r7, #28]
 800500c:	f000 f88a 	bl	8005124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e002      	b.n	800501c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800501c:	69bb      	ldr	r3, [r7, #24]
	}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b088      	sub	sp, #32
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800503e:	3b01      	subs	r3, #1
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f023 0307 	bic.w	r3, r3, #7
 800504c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <prvInitialiseNewTask+0x46>
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e7fe      	b.n	800506a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e012      	b.n	8005098 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	7819      	ldrb	r1, [r3, #0]
 800507a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	3334      	adds	r3, #52	; 0x34
 8005082:	460a      	mov	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d9e9      	bls.n	8005072 <prvInitialiseNewTask+0x4c>
 800509e:	e000      	b.n	80050a2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80050a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d901      	bls.n	80050b4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050b0:	2306      	movs	r3, #6
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2200      	movs	r2, #0
 80050c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fe7d 	bl	8004dca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	3318      	adds	r3, #24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fe78 	bl	8004dca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	f1c3 0207 	rsb	r2, r3, #7
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f000 fd42 	bl	8005b8c <pxPortInitialiseStack>
 8005108:	4602      	mov	r2, r0
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800511a:	bf00      	nop
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800512c:	f000 fe1c 	bl	8005d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005130:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <prvAddNewTaskToReadyList+0xb8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a29      	ldr	r2, [pc, #164]	; (80051dc <prvAddNewTaskToReadyList+0xb8>)
 8005138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800513a:	4b29      	ldr	r3, [pc, #164]	; (80051e0 <prvAddNewTaskToReadyList+0xbc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005142:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <prvAddNewTaskToReadyList+0xbc>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005148:	4b24      	ldr	r3, [pc, #144]	; (80051dc <prvAddNewTaskToReadyList+0xb8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d110      	bne.n	8005172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005150:	f000 fbf8 	bl	8005944 <prvInitialiseTaskLists>
 8005154:	e00d      	b.n	8005172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005156:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <prvAddNewTaskToReadyList+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <prvAddNewTaskToReadyList+0xbc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	429a      	cmp	r2, r3
 800516a:	d802      	bhi.n	8005172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800516c:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <prvAddNewTaskToReadyList+0xbc>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <prvAddNewTaskToReadyList+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <prvAddNewTaskToReadyList+0xc4>)
 800517a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	4a18      	ldr	r2, [pc, #96]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <prvAddNewTaskToReadyList+0xcc>)
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7ff fe1c 	bl	8004de2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051aa:	f000 fe0b 	bl	8005dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <prvAddNewTaskToReadyList+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <prvAddNewTaskToReadyList+0xbc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d207      	bcs.n	80051d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <prvAddNewTaskToReadyList+0xd0>)
 80051c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000380 	.word	0x20000380
 80051e0:	20000280 	.word	0x20000280
 80051e4:	2000038c 	.word	0x2000038c
 80051e8:	2000039c 	.word	0x2000039c
 80051ec:	20000388 	.word	0x20000388
 80051f0:	20000284 	.word	0x20000284
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <vTaskDelay+0x60>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <vTaskDelay+0x2e>
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	e7fe      	b.n	8005224 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005226:	f000 f9b5 	bl	8005594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800522a:	2100      	movs	r1, #0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fc47 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005232:	f000 f9bd 	bl	80055b0 <xTaskResumeAll>
 8005236:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d107      	bne.n	800524e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <vTaskDelay+0x64>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200003a8 	.word	0x200003a8
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005268:	f000 fd7e 	bl	8005d68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <vTaskSuspend+0x18>
 8005272:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <vTaskSuspend+0x104>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	e000      	b.n	800527a <vTaskSuspend+0x1a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fe09 	bl	8004e98 <uxListRemove>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4935      	ldr	r1, [pc, #212]	; (8005368 <vTaskSuspend+0x108>)
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <vTaskSuspend+0x58>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	2201      	movs	r2, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43da      	mvns	r2, r3
 80052ae:	4b2f      	ldr	r3, [pc, #188]	; (800536c <vTaskSuspend+0x10c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4013      	ands	r3, r2
 80052b4:	4a2d      	ldr	r2, [pc, #180]	; (800536c <vTaskSuspend+0x10c>)
 80052b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3318      	adds	r3, #24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fde7 	bl	8004e98 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4827      	ldr	r0, [pc, #156]	; (8005370 <vTaskSuspend+0x110>)
 80052d2:	f7ff fd86 	bl	8004de2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d103      	bne.n	80052ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80052ea:	f000 fd6b 	bl	8005dc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <vTaskSuspend+0x114>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80052f6:	f000 fd37 	bl	8005d68 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80052fa:	f000 fbbd 	bl	8005a78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80052fe:	f000 fd61 	bl	8005dc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <vTaskSuspend+0x104>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d126      	bne.n	800535a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <vTaskSuspend+0x114>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d016      	beq.n	8005342 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <vTaskSuspend+0x118>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <vTaskSuspend+0xd0>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	e7fe      	b.n	800532e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <vTaskSuspend+0x11c>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005340:	e00b      	b.n	800535a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <vTaskSuspend+0x110>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <vTaskSuspend+0x120>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d103      	bne.n	8005356 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <vTaskSuspend+0x104>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
	}
 8005354:	e001      	b.n	800535a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8005356:	f000 fa83 	bl	8005860 <vTaskSwitchContext>
	}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000280 	.word	0x20000280
 8005368:	20000284 	.word	0x20000284
 800536c:	20000388 	.word	0x20000388
 8005370:	2000036c 	.word	0x2000036c
 8005374:	2000038c 	.word	0x2000038c
 8005378:	200003a8 	.word	0x200003a8
 800537c:	e000ed04 	.word	0xe000ed04
 8005380:	20000380 	.word	0x20000380

08005384 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <prvTaskIsTaskSuspended+0x2a>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e7fe      	b.n	80053ac <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <prvTaskIsTaskSuspended+0x6c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d101      	bne.n	80053bc <prvTaskIsTaskSuspended+0x38>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <prvTaskIsTaskSuspended+0x3a>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00f      	beq.n	80053e2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <prvTaskIsTaskSuspended+0x70>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00a      	beq.n	80053e2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <prvTaskIsTaskSuspended+0x54>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <prvTaskIsTaskSuspended+0x56>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053e2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	2000036c 	.word	0x2000036c
 80053f4:	20000340 	.word	0x20000340

080053f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <xTaskResumeFromISR+0x2a>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e7fe      	b.n	8005420 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005422:	f000 fd5b 	bl	8005edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005426:	f3ef 8211 	mrs	r2, BASEPRI
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	617a      	str	r2, [r7, #20]
 800543c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800543e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005440:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005442:	6a38      	ldr	r0, [r7, #32]
 8005444:	f7ff ff9e 	bl	8005384 <prvTaskIsTaskSuspended>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02f      	beq.n	80054ae <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <xTaskResumeFromISR+0xcc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d125      	bne.n	80054a2 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <xTaskResumeFromISR+0xd0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	d301      	bcc.n	8005468 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fd13 	bl	8004e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	2201      	movs	r2, #1
 8005478:	409a      	lsls	r2, r3
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <xTaskResumeFromISR+0xd4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	4a12      	ldr	r2, [pc, #72]	; (80054cc <xTaskResumeFromISR+0xd4>)
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xTaskResumeFromISR+0xd8>)
 8005492:	441a      	add	r2, r3
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f7ff fca1 	bl	8004de2 <vListInsertEnd>
 80054a0:	e005      	b.n	80054ae <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	3318      	adds	r3, #24
 80054a6:	4619      	mov	r1, r3
 80054a8:	480a      	ldr	r0, [pc, #40]	; (80054d4 <xTaskResumeFromISR+0xdc>)
 80054aa:	f7ff fc9a 	bl	8004de2 <vListInsertEnd>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3728      	adds	r7, #40	; 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200003a8 	.word	0x200003a8
 80054c8:	20000280 	.word	0x20000280
 80054cc:	20000388 	.word	0x20000388
 80054d0:	20000284 	.word	0x20000284
 80054d4:	20000340 	.word	0x20000340

080054d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054e6:	463a      	mov	r2, r7
 80054e8:	1d39      	adds	r1, r7, #4
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fa fe2e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	9202      	str	r2, [sp, #8]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	2300      	movs	r3, #0
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	460a      	mov	r2, r1
 8005506:	491d      	ldr	r1, [pc, #116]	; (800557c <vTaskStartScheduler+0xa4>)
 8005508:	481d      	ldr	r0, [pc, #116]	; (8005580 <vTaskStartScheduler+0xa8>)
 800550a:	f7ff fcee 	bl	8004eea <xTaskCreateStatic>
 800550e:	4602      	mov	r2, r0
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <vTaskStartScheduler+0xac>)
 8005512:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005514:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <vTaskStartScheduler+0xac>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e001      	b.n	8005526 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d115      	bne.n	8005558 <vTaskStartScheduler+0x80>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <vTaskStartScheduler+0xb0>)
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <vTaskStartScheduler+0xb4>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <vTaskStartScheduler+0xb8>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005552:	f000 fb99 	bl	8005c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005556:	e00d      	b.n	8005574 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d109      	bne.n	8005574 <vTaskStartScheduler+0x9c>
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e7fe      	b.n	8005572 <vTaskStartScheduler+0x9a>
}
 8005574:	bf00      	nop
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	080063bc 	.word	0x080063bc
 8005580:	08005915 	.word	0x08005915
 8005584:	200003a4 	.word	0x200003a4
 8005588:	200003a0 	.word	0x200003a0
 800558c:	2000038c 	.word	0x2000038c
 8005590:	20000384 	.word	0x20000384

08005594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <vTaskSuspendAll+0x18>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a03      	ldr	r2, [pc, #12]	; (80055ac <vTaskSuspendAll+0x18>)
 80055a0:	6013      	str	r3, [r2, #0]
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	200003a8 	.word	0x200003a8

080055b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055be:	4b41      	ldr	r3, [pc, #260]	; (80056c4 <xTaskResumeAll+0x114>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <xTaskResumeAll+0x2a>
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	e7fe      	b.n	80055d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055da:	f000 fbc5 	bl	8005d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055de:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <xTaskResumeAll+0x114>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4a37      	ldr	r2, [pc, #220]	; (80056c4 <xTaskResumeAll+0x114>)
 80055e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e8:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <xTaskResumeAll+0x114>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d161      	bne.n	80056b4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <xTaskResumeAll+0x118>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d05d      	beq.n	80056b4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f8:	e02e      	b.n	8005658 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <xTaskResumeAll+0x11c>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3318      	adds	r3, #24
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fc46 	bl	8004e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fc41 	bl	8004e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	2201      	movs	r2, #1
 800561c:	409a      	lsls	r2, r3
 800561e:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <xTaskResumeAll+0x120>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <xTaskResumeAll+0x120>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <xTaskResumeAll+0x124>)
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7ff fbcf 	bl	8004de2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <xTaskResumeAll+0x128>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <xTaskResumeAll+0x12c>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005658:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <xTaskResumeAll+0x11c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cc      	bne.n	80055fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005666:	f000 fa07 	bl	8005a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <xTaskResumeAll+0x130>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d010      	beq.n	8005698 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005676:	f000 f837 	bl	80056e8 <xTaskIncrementTick>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <xTaskResumeAll+0x12c>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3b01      	subs	r3, #1
 800568a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f1      	bne.n	8005676 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <xTaskResumeAll+0x130>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <xTaskResumeAll+0x12c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <xTaskResumeAll+0x134>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b4:	f000 fb86 	bl	8005dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80056b8:	68bb      	ldr	r3, [r7, #8]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200003a8 	.word	0x200003a8
 80056c8:	20000380 	.word	0x20000380
 80056cc:	20000340 	.word	0x20000340
 80056d0:	20000388 	.word	0x20000388
 80056d4:	20000284 	.word	0x20000284
 80056d8:	20000280 	.word	0x20000280
 80056dc:	20000394 	.word	0x20000394
 80056e0:	20000390 	.word	0x20000390
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f2:	4b50      	ldr	r3, [pc, #320]	; (8005834 <xTaskIncrementTick+0x14c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 808c 	bne.w	8005814 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056fc:	4b4e      	ldr	r3, [pc, #312]	; (8005838 <xTaskIncrementTick+0x150>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005704:	4a4c      	ldr	r2, [pc, #304]	; (8005838 <xTaskIncrementTick+0x150>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11f      	bne.n	8005750 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005710:	4b4a      	ldr	r3, [pc, #296]	; (800583c <xTaskIncrementTick+0x154>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <xTaskIncrementTick+0x46>
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	e7fe      	b.n	800572c <xTaskIncrementTick+0x44>
 800572e:	4b43      	ldr	r3, [pc, #268]	; (800583c <xTaskIncrementTick+0x154>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	4b42      	ldr	r3, [pc, #264]	; (8005840 <xTaskIncrementTick+0x158>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a40      	ldr	r2, [pc, #256]	; (800583c <xTaskIncrementTick+0x154>)
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4a40      	ldr	r2, [pc, #256]	; (8005840 <xTaskIncrementTick+0x158>)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b40      	ldr	r3, [pc, #256]	; (8005844 <xTaskIncrementTick+0x15c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3301      	adds	r3, #1
 8005748:	4a3e      	ldr	r2, [pc, #248]	; (8005844 <xTaskIncrementTick+0x15c>)
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	f000 f994 	bl	8005a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <xTaskIncrementTick+0x160>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d34d      	bcc.n	80057f6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575a:	4b38      	ldr	r3, [pc, #224]	; (800583c <xTaskIncrementTick+0x154>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <xTaskIncrementTick+0x80>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <xTaskIncrementTick+0x82>
 8005768:	2300      	movs	r3, #0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576e:	4b36      	ldr	r3, [pc, #216]	; (8005848 <xTaskIncrementTick+0x160>)
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	601a      	str	r2, [r3, #0]
					break;
 8005776:	e03e      	b.n	80057f6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005778:	4b30      	ldr	r3, [pc, #192]	; (800583c <xTaskIncrementTick+0x154>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d203      	bcs.n	8005798 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <xTaskIncrementTick+0x160>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
						break;
 8005796:	e02e      	b.n	80057f6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fb7b 	bl	8004e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fb72 	bl	8004e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	4b23      	ldr	r3, [pc, #140]	; (800584c <xTaskIncrementTick+0x164>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	4a22      	ldr	r2, [pc, #136]	; (800584c <xTaskIncrementTick+0x164>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <xTaskIncrementTick+0x168>)
 80057d4:	441a      	add	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7ff fb00 	bl	8004de2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <xTaskIncrementTick+0x16c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d3b4      	bcc.n	800575a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f4:	e7b1      	b.n	800575a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057f6:	4b17      	ldr	r3, [pc, #92]	; (8005854 <xTaskIncrementTick+0x16c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4914      	ldr	r1, [pc, #80]	; (8005850 <xTaskIncrementTick+0x168>)
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d907      	bls.n	800581e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e004      	b.n	800581e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005814:	4b10      	ldr	r3, [pc, #64]	; (8005858 <xTaskIncrementTick+0x170>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a0f      	ldr	r2, [pc, #60]	; (8005858 <xTaskIncrementTick+0x170>)
 800581c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <xTaskIncrementTick+0x174>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800582a:	697b      	ldr	r3, [r7, #20]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200003a8 	.word	0x200003a8
 8005838:	20000384 	.word	0x20000384
 800583c:	20000338 	.word	0x20000338
 8005840:	2000033c 	.word	0x2000033c
 8005844:	20000398 	.word	0x20000398
 8005848:	200003a0 	.word	0x200003a0
 800584c:	20000388 	.word	0x20000388
 8005850:	20000284 	.word	0x20000284
 8005854:	20000280 	.word	0x20000280
 8005858:	20000390 	.word	0x20000390
 800585c:	20000394 	.word	0x20000394

08005860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <vTaskSwitchContext+0xa0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800586e:	4b25      	ldr	r3, [pc, #148]	; (8005904 <vTaskSwitchContext+0xa4>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005874:	e03e      	b.n	80058f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005876:	4b23      	ldr	r3, [pc, #140]	; (8005904 <vTaskSwitchContext+0xa4>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800587c:	4b22      	ldr	r3, [pc, #136]	; (8005908 <vTaskSwitchContext+0xa8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	f1c3 031f 	rsb	r3, r3, #31
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	491e      	ldr	r1, [pc, #120]	; (800590c <vTaskSwitchContext+0xac>)
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	e7fe      	b.n	80058b8 <vTaskSwitchContext+0x58>
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4a11      	ldr	r2, [pc, #68]	; (800590c <vTaskSwitchContext+0xac>)
 80058c6:	4413      	add	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3308      	adds	r3, #8
 80058dc:	429a      	cmp	r2, r3
 80058de:	d104      	bne.n	80058ea <vTaskSwitchContext+0x8a>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a07      	ldr	r2, [pc, #28]	; (8005910 <vTaskSwitchContext+0xb0>)
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	200003a8 	.word	0x200003a8
 8005904:	20000394 	.word	0x20000394
 8005908:	20000388 	.word	0x20000388
 800590c:	20000284 	.word	0x20000284
 8005910:	20000280 	.word	0x20000280

08005914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800591c:	f000 f852 	bl	80059c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvIdleTask+0x28>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d9f9      	bls.n	800591c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <prvIdleTask+0x2c>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005938:	e7f0      	b.n	800591c <prvIdleTask+0x8>
 800593a:	bf00      	nop
 800593c:	20000284 	.word	0x20000284
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e00c      	b.n	800596a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <prvInitialiseTaskLists+0x60>)
 800595c:	4413      	add	r3, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fa14 	bl	8004d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d9ef      	bls.n	8005950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005972:	f7ff fa0b 	bl	8004d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005976:	480d      	ldr	r0, [pc, #52]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005978:	f7ff fa08 	bl	8004d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800597c:	480c      	ldr	r0, [pc, #48]	; (80059b0 <prvInitialiseTaskLists+0x6c>)
 800597e:	f7ff fa05 	bl	8004d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005982:	480c      	ldr	r0, [pc, #48]	; (80059b4 <prvInitialiseTaskLists+0x70>)
 8005984:	f7ff fa02 	bl	8004d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005988:	480b      	ldr	r0, [pc, #44]	; (80059b8 <prvInitialiseTaskLists+0x74>)
 800598a:	f7ff f9ff 	bl	8004d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <prvInitialiseTaskLists+0x78>)
 8005990:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvInitialiseTaskLists+0x7c>)
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000284 	.word	0x20000284
 80059a8:	20000310 	.word	0x20000310
 80059ac:	20000324 	.word	0x20000324
 80059b0:	20000340 	.word	0x20000340
 80059b4:	20000354 	.word	0x20000354
 80059b8:	2000036c 	.word	0x2000036c
 80059bc:	20000338 	.word	0x20000338
 80059c0:	2000033c 	.word	0x2000033c

080059c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ca:	e019      	b.n	8005a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059cc:	f000 f9cc 	bl	8005d68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <prvCheckTasksWaitingTermination+0x4c>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fa5b 	bl	8004e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <prvCheckTasksWaitingTermination+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <prvCheckTasksWaitingTermination+0x50>)
 80059ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059f6:	f000 f9e5 	bl	8005dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f80e 	bl	8005a1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e1      	bne.n	80059cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000354 	.word	0x20000354
 8005a14:	20000380 	.word	0x20000380
 8005a18:	20000368 	.word	0x20000368

08005a1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d108      	bne.n	8005a40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fb50 	bl	80060d8 <vPortFree>
				vPortFree( pxTCB );
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fb4d 	bl	80060d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a3e:	e017      	b.n	8005a70 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d103      	bne.n	8005a52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb44 	bl	80060d8 <vPortFree>
	}
 8005a50:	e00e      	b.n	8005a70 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d009      	beq.n	8005a70 <prvDeleteTCB+0x54>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e7fe      	b.n	8005a6e <prvDeleteTCB+0x52>
	}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <prvResetNextTaskUnblockTime+0x40>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <prvResetNextTaskUnblockTime+0x14>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <prvResetNextTaskUnblockTime+0x16>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <prvResetNextTaskUnblockTime+0x44>)
 8005a94:	f04f 32ff 	mov.w	r2, #4294967295
 8005a98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a9a:	e008      	b.n	8005aae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <prvResetNextTaskUnblockTime+0x40>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4a04      	ldr	r2, [pc, #16]	; (8005abc <prvResetNextTaskUnblockTime+0x44>)
 8005aac:	6013      	str	r3, [r2, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr
 8005ab8:	20000338 	.word	0x20000338
 8005abc:	200003a0 	.word	0x200003a0

08005ac0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aca:	4b29      	ldr	r3, [pc, #164]	; (8005b70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad0:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff f9de 	bl	8004e98 <uxListRemove>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	2201      	movs	r2, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43da      	mvns	r2, r3
 8005af0:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4013      	ands	r3, r2
 8005af6:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005af8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d10a      	bne.n	8005b18 <prvAddCurrentTaskToDelayedList+0x58>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	481a      	ldr	r0, [pc, #104]	; (8005b7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b12:	f7ff f966 	bl	8004de2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b16:	e026      	b.n	8005b66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b20:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d209      	bcs.n	8005b44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7ff f973 	bl	8004e28 <vListInsert>
}
 8005b42:	e010      	b.n	8005b66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7ff f969 	bl	8004e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d202      	bcs.n	8005b66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b60:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6013      	str	r3, [r2, #0]
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000384 	.word	0x20000384
 8005b74:	20000280 	.word	0x20000280
 8005b78:	20000388 	.word	0x20000388
 8005b7c:	2000036c 	.word	0x2000036c
 8005b80:	2000033c 	.word	0x2000033c
 8005b84:	20000338 	.word	0x20000338
 8005b88:	200003a0 	.word	0x200003a0

08005b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b04      	subs	r3, #4
 8005b9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b04      	subs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <pxPortInitialiseStack+0x54>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3b14      	subs	r3, #20
 8005bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3b20      	subs	r3, #32
 8005bd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	08005be5 	.word	0x08005be5

08005be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <prvTaskExitError+0x4c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d009      	beq.n	8005c0c <prvTaskExitError+0x28>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e7fe      	b.n	8005c0a <prvTaskExitError+0x26>
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c1e:	bf00      	nop
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0fc      	beq.n	8005c20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	2000000c 	.word	0x2000000c
	...

08005c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <pxCurrentTCBConst2>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c4a:	f380 8809 	msr	PSP, r0
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c5e:	4770      	bx	lr

08005c60 <pxCurrentTCBConst2>:
 8005c60:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005c68:	4806      	ldr	r0, [pc, #24]	; (8005c84 <prvPortStartFirstTask+0x1c>)
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	6800      	ldr	r0, [r0, #0]
 8005c6e:	f380 8808 	msr	MSP, r0
 8005c72:	b662      	cpsie	i
 8005c74:	b661      	cpsie	f
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	df00      	svc	0
 8005c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c82:	bf00      	nop
 8005c84:	e000ed08 	.word	0xe000ed08

08005c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c8e:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <xPortStartScheduler+0xcc>)
 8005c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <xPortStartScheduler+0xd0>)
 8005cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cb6:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005cb8:	2207      	movs	r2, #7
 8005cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cbc:	e009      	b.n	8005cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005cbe:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d0ef      	beq.n	8005cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cde:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1c3 0307 	rsb	r3, r3, #7
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d009      	beq.n	8005cfe <xPortStartScheduler+0x76>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	e7fe      	b.n	8005cfc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	4a15      	ldr	r2, [pc, #84]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d10:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <xPortStartScheduler+0xd4>)
 8005d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <xPortStartScheduler+0xd8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0f      	ldr	r2, [pc, #60]	; (8005d60 <xPortStartScheduler+0xd8>)
 8005d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <xPortStartScheduler+0xd8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <xPortStartScheduler+0xd8>)
 8005d2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d34:	f000 f8b0 	bl	8005e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <xPortStartScheduler+0xdc>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d3e:	f7ff ff93 	bl	8005c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d42:	f7ff fd8d 	bl	8005860 <vTaskSwitchContext>
	prvTaskExitError();
 8005d46:	f7ff ff4d 	bl	8005be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	e000e400 	.word	0xe000e400
 8005d58:	200003ac 	.word	0x200003ac
 8005d5c:	200003b0 	.word	0x200003b0
 8005d60:	e000ed20 	.word	0xe000ed20
 8005d64:	2000000c 	.word	0x2000000c

08005d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <vPortEnterCritical+0x54>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <vPortEnterCritical+0x54>)
 8005d88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <vPortEnterCritical+0x54>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10e      	bne.n	8005db0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <vPortEnterCritical+0x58>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <vPortEnterCritical+0x48>
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	e7fe      	b.n	8005dae <vPortEnterCritical+0x46>
	}
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000000c 	.word	0x2000000c
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <vPortExitCritical+0x48>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <vPortExitCritical+0x22>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	e7fe      	b.n	8005de4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <vPortExitCritical+0x48>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <vPortExitCritical+0x48>)
 8005dee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <vPortExitCritical+0x48>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <vPortExitCritical+0x3e>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	2000000c 	.word	0x2000000c

08005e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e10:	f3ef 8009 	mrs	r0, PSP
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <pxCurrentTCBConst>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e20:	6010      	str	r0, [r2, #0]
 8005e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e2a:	f380 8811 	msr	BASEPRI, r0
 8005e2e:	f7ff fd17 	bl	8005860 <vTaskSwitchContext>
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e46:	f380 8809 	msr	PSP, r0
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	4770      	bx	lr

08005e50 <pxCurrentTCBConst>:
 8005e50:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e70:	f7ff fc3a 	bl	80056e8 <xTaskIncrementTick>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <SysTick_Handler+0x3c>)
 8005e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortSetupTimerInterrupt+0x30>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <vPortSetupTimerInterrupt+0x34>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <vPortSetupTimerInterrupt+0x38>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <vPortSetupTimerInterrupt+0x3c>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	099b      	lsrs	r3, r3, #6
 8005eb4:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <vPortSetupTimerInterrupt+0x40>)
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <vPortSetupTimerInterrupt+0x30>)
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	e000e010 	.word	0xe000e010
 8005ecc:	e000e018 	.word	0xe000e018
 8005ed0:	20000000 	.word	0x20000000
 8005ed4:	10624dd3 	.word	0x10624dd3
 8005ed8:	e000e014 	.word	0xe000e014

08005edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ee2:	f3ef 8305 	mrs	r3, IPSR
 8005ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d913      	bls.n	8005f16 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eee:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <vPortValidateInterruptPriority+0x68>)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <vPortValidateInterruptPriority+0x6c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	7afa      	ldrb	r2, [r7, #11]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d209      	bcs.n	8005f16 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e7fe      	b.n	8005f14 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <vPortValidateInterruptPriority+0x70>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <vPortValidateInterruptPriority+0x74>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d909      	bls.n	8005f3a <vPortValidateInterruptPriority+0x5e>
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	e7fe      	b.n	8005f38 <vPortValidateInterruptPriority+0x5c>
	}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	e000e3f0 	.word	0xe000e3f0
 8005f48:	200003ac 	.word	0x200003ac
 8005f4c:	e000ed0c 	.word	0xe000ed0c
 8005f50:	200003b0 	.word	0x200003b0

08005f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f60:	f7ff fb18 	bl	8005594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f64:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <pvPortMalloc+0x170>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f6c:	f000 f90c 	bl	8006188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f70:	4b55      	ldr	r3, [pc, #340]	; (80060c8 <pvPortMalloc+0x174>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f040 808c 	bne.w	8006096 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01c      	beq.n	8005fbe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005f84:	2208      	movs	r2, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d013      	beq.n	8005fbe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <pvPortMalloc+0x6a>
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e7fe      	b.n	8005fbc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d068      	beq.n	8006096 <pvPortMalloc+0x142>
 8005fc4:	4b41      	ldr	r3, [pc, #260]	; (80060cc <pvPortMalloc+0x178>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d863      	bhi.n	8006096 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fce:	4b40      	ldr	r3, [pc, #256]	; (80060d0 <pvPortMalloc+0x17c>)
 8005fd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fd2:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <pvPortMalloc+0x17c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd8:	e004      	b.n	8005fe4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <pvPortMalloc+0xa2>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ff6:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <pvPortMalloc+0x170>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d04a      	beq.n	8006096 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	4413      	add	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	2308      	movs	r3, #8
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	429a      	cmp	r2, r3
 8006020:	d91e      	bls.n	8006060 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <pvPortMalloc+0xf4>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	e7fe      	b.n	8006046 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800605a:	69b8      	ldr	r0, [r7, #24]
 800605c:	f000 f8f6 	bl	800624c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006060:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <pvPortMalloc+0x178>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <pvPortMalloc+0x178>)
 800606c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <pvPortMalloc+0x178>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <pvPortMalloc+0x180>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <pvPortMalloc+0x178>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <pvPortMalloc+0x180>)
 8006080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <pvPortMalloc+0x174>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	431a      	orrs	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006096:	f7ff fa8b 	bl	80055b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <pvPortMalloc+0x164>
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e7fe      	b.n	80060b6 <pvPortMalloc+0x162>
	return pvReturn;
 80060b8:	69fb      	ldr	r3, [r7, #28]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20002bbc 	.word	0x20002bbc
 80060c8:	20002bc8 	.word	0x20002bc8
 80060cc:	20002bc0 	.word	0x20002bc0
 80060d0:	20002bb4 	.word	0x20002bb4
 80060d4:	20002bc4 	.word	0x20002bc4

080060d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d046      	beq.n	8006178 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ea:	2308      	movs	r3, #8
 80060ec:	425b      	negs	r3, r3
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b20      	ldr	r3, [pc, #128]	; (8006180 <vPortFree+0xa8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <vPortFree+0x42>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e7fe      	b.n	8006118 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <vPortFree+0x5e>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	e7fe      	b.n	8006134 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <vPortFree+0xa8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d019      	beq.n	8006178 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d115      	bne.n	8006178 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortFree+0xa8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800615c:	f7ff fa1a 	bl	8005594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <vPortFree+0xac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4413      	add	r3, r2
 800616a:	4a06      	ldr	r2, [pc, #24]	; (8006184 <vPortFree+0xac>)
 800616c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800616e:	6938      	ldr	r0, [r7, #16]
 8006170:	f000 f86c 	bl	800624c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006174:	f7ff fa1c 	bl	80055b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20002bc8 	.word	0x20002bc8
 8006184:	20002bc0 	.word	0x20002bc0

08006188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800618e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006194:	4b27      	ldr	r3, [pc, #156]	; (8006234 <prvHeapInit+0xac>)
 8006196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3307      	adds	r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <prvHeapInit+0xac>)
 80061b8:	4413      	add	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <prvHeapInit+0xb0>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061c6:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <prvHeapInit+0xb0>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061d4:	2208      	movs	r2, #8
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <prvHeapInit+0xb4>)
 80061e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <prvHeapInit+0xb4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <prvHeapInit+0xb4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <prvHeapInit+0xb4>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <prvHeapInit+0xb8>)
 8006216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <prvHeapInit+0xbc>)
 800621e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <prvHeapInit+0xc0>)
 8006222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006226:	601a      	str	r2, [r3, #0]
}
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200003b4 	.word	0x200003b4
 8006238:	20002bb4 	.word	0x20002bb4
 800623c:	20002bbc 	.word	0x20002bbc
 8006240:	20002bc4 	.word	0x20002bc4
 8006244:	20002bc0 	.word	0x20002bc0
 8006248:	20002bc8 	.word	0x20002bc8

0800624c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <prvInsertBlockIntoFreeList+0x14>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d8f7      	bhi.n	800625a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d108      	bne.n	800628e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	441a      	add	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d118      	bne.n	80062d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <prvInsertBlockIntoFreeList+0xac>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d00d      	beq.n	80062ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	441a      	add	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e008      	b.n	80062dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <prvInsertBlockIntoFreeList+0xac>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e003      	b.n	80062dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d002      	beq.n	80062ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	20002bb4 	.word	0x20002bb4
 80062f8:	20002bbc 	.word	0x20002bbc

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	2500      	movs	r5, #0
 8006300:	4e0c      	ldr	r6, [pc, #48]	; (8006334 <__libc_init_array+0x38>)
 8006302:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006304:	1ba4      	subs	r4, r4, r6
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	42a5      	cmp	r5, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	f000 f822 	bl	8006354 <_init>
 8006310:	2500      	movs	r5, #0
 8006312:	4e0a      	ldr	r6, [pc, #40]	; (800633c <__libc_init_array+0x40>)
 8006314:	4c0a      	ldr	r4, [pc, #40]	; (8006340 <__libc_init_array+0x44>)
 8006316:	1ba4      	subs	r4, r4, r6
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	42a5      	cmp	r5, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006324:	4798      	blx	r3
 8006326:	3501      	adds	r5, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800632e:	4798      	blx	r3
 8006330:	3501      	adds	r5, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	080063dc 	.word	0x080063dc
 8006338:	080063dc 	.word	0x080063dc
 800633c:	080063dc 	.word	0x080063dc
 8006340:	080063e0 	.word	0x080063e0

08006344 <memset>:
 8006344:	4603      	mov	r3, r0
 8006346:	4402      	add	r2, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <_init>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr

08006360 <_fini>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr
