
user_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e4  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080096f0  080096f0  000096f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800972c  0800972c  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800972c  0800972c  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800972c  0800972c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800972c  0800972c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009730  08009730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009734  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08009740  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08009740  00010070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005629  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010fd  00000000  00000000  0001565e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  00016760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00016d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001648c  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f28  00000000  00000000  0002d754  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e34  00000000  00000000  0003267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b34b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016ac  00000000  00000000  000b352c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	2000000c 	.word	0x2000000c
 8008128:	00000000 	.word	0x00000000
 800812c:	080096d8 	.word	0x080096d8

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000010 	.word	0x20000010
 8008148:	080096d8 	.word	0x080096d8

0800814c <strlen>:
 800814c:	4603      	mov	r3, r0
 800814e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008152:	2a00      	cmp	r2, #0
 8008154:	d1fb      	bne.n	800814e <strlen+0x2>
 8008156:	1a18      	subs	r0, r3, r0
 8008158:	3801      	subs	r0, #1
 800815a:	4770      	bx	lr

0800815c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800815c:	b590      	push	{r4, r7, lr}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008162:	f000 f9c5 	bl	80084f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008166:	f000 f829 	bl	80081bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800816a:	f000 f897 	bl	800829c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800816e:	f000 f86b 	bl	8008248 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008176:	480e      	ldr	r0, [pc, #56]	; (80081b0 <main+0x54>)
 8008178:	f000 fc94 	bl	8008aa4 <HAL_GPIO_TogglePin>
	  char str[] = "hello world!\r\n";
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <main+0x58>)
 800817e:	463c      	mov	r4, r7
 8008180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008182:	c407      	stmia	r4!, {r0, r1, r2}
 8008184:	8023      	strh	r3, [r4, #0]
 8008186:	3402      	adds	r4, #2
 8008188:	0c1b      	lsrs	r3, r3, #16
 800818a:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800818c:	463b      	mov	r3, r7
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff ffdc 	bl	800814c <strlen>
 8008194:	4603      	mov	r3, r0
 8008196:	b29a      	uxth	r2, r3
 8008198:	4639      	mov	r1, r7
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	4806      	ldr	r0, [pc, #24]	; (80081b8 <main+0x5c>)
 80081a0:	f001 f903 	bl	80093aa <HAL_UART_Transmit>
	  HAL_Delay(500);
 80081a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081a8:	f000 fa04 	bl	80085b4 <HAL_Delay>
  {
 80081ac:	e7e1      	b.n	8008172 <main+0x16>
 80081ae:	bf00      	nop
 80081b0:	40011000 	.word	0x40011000
 80081b4:	080096f0 	.word	0x080096f0
 80081b8:	20000028 	.word	0x20000028

080081bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b090      	sub	sp, #64	; 0x40
 80081c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081c2:	f107 0318 	add.w	r3, r7, #24
 80081c6:	2228      	movs	r2, #40	; 0x28
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fa7c 	bl	80096c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	609a      	str	r2, [r3, #8]
 80081da:	60da      	str	r2, [r3, #12]
 80081dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80081de:	2301      	movs	r3, #1
 80081e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80081e8:	2300      	movs	r3, #0
 80081ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081ec:	2301      	movs	r3, #1
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081f0:	2302      	movs	r3, #2
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008200:	f107 0318 	add.w	r3, r7, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fc67 	bl	8008ad8 <HAL_RCC_OscConfig>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008210:	f000 f890 	bl	8008334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008214:	230f      	movs	r3, #15
 8008216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008218:	2302      	movs	r3, #2
 800821a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	2102      	movs	r1, #2
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fed2 	bl	8008fd8 <HAL_RCC_ClockConfig>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800823a:	f000 f87b 	bl	8008334 <Error_Handler>
  }
}
 800823e:	bf00      	nop
 8008240:	3740      	adds	r7, #64	; 0x40
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800824e:	4a12      	ldr	r2, [pc, #72]	; (8008298 <MX_USART1_UART_Init+0x50>)
 8008250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800825c:	2200      	movs	r2, #0
 800825e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008262:	2200      	movs	r2, #0
 8008264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008268:	2200      	movs	r2, #0
 800826a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800826e:	220c      	movs	r2, #12
 8008270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008274:	2200      	movs	r2, #0
 8008276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800827a:	2200      	movs	r2, #0
 800827c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008280:	f001 f846 	bl	8009310 <HAL_UART_Init>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800828a:	f000 f853 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000028 	.word	0x20000028
 8008298:	40013800 	.word	0x40013800

0800829c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	609a      	str	r2, [r3, #8]
 80082ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <MX_GPIO_Init+0x90>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	4a1d      	ldr	r2, [pc, #116]	; (800832c <MX_GPIO_Init+0x90>)
 80082b6:	f043 0310 	orr.w	r3, r3, #16
 80082ba:	6193      	str	r3, [r2, #24]
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <MX_GPIO_Init+0x90>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c8:	4b18      	ldr	r3, [pc, #96]	; (800832c <MX_GPIO_Init+0x90>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <MX_GPIO_Init+0x90>)
 80082ce:	f043 0320 	orr.w	r3, r3, #32
 80082d2:	6193      	str	r3, [r2, #24]
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <MX_GPIO_Init+0x90>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082e0:	4b12      	ldr	r3, [pc, #72]	; (800832c <MX_GPIO_Init+0x90>)
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	4a11      	ldr	r2, [pc, #68]	; (800832c <MX_GPIO_Init+0x90>)
 80082e6:	f043 0304 	orr.w	r3, r3, #4
 80082ea:	6193      	str	r3, [r2, #24]
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <MX_GPIO_Init+0x90>)
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80082f8:	2200      	movs	r2, #0
 80082fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082fe:	480c      	ldr	r0, [pc, #48]	; (8008330 <MX_GPIO_Init+0x94>)
 8008300:	f000 fbb8 	bl	8008a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800830a:	2301      	movs	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008312:	2302      	movs	r3, #2
 8008314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008316:	f107 0310 	add.w	r3, r7, #16
 800831a:	4619      	mov	r1, r3
 800831c:	4804      	ldr	r0, [pc, #16]	; (8008330 <MX_GPIO_Init+0x94>)
 800831e:	f000 fa4f 	bl	80087c0 <HAL_GPIO_Init>

}
 8008322:	bf00      	nop
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40021000 	.word	0x40021000
 8008330:	40011000 	.word	0x40011000

08008334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008338:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800833a:	e7fe      	b.n	800833a <Error_Handler+0x6>

0800833c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <HAL_MspInit+0x5c>)
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_MspInit+0x5c>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6193      	str	r3, [r2, #24]
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_MspInit+0x5c>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <HAL_MspInit+0x5c>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	4a0e      	ldr	r2, [pc, #56]	; (8008398 <HAL_MspInit+0x5c>)
 8008360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008364:	61d3      	str	r3, [r2, #28]
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <HAL_MspInit+0x5c>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <HAL_MspInit+0x60>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	4a04      	ldr	r2, [pc, #16]	; (800839c <HAL_MspInit+0x60>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	40021000 	.word	0x40021000
 800839c:	40010000 	.word	0x40010000

080083a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a8:	f107 0310 	add.w	r3, r7, #16
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	605a      	str	r2, [r3, #4]
 80083b2:	609a      	str	r2, [r3, #8]
 80083b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1c      	ldr	r2, [pc, #112]	; (800842c <HAL_UART_MspInit+0x8c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d131      	bne.n	8008424 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083c0:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083ca:	6193      	str	r3, [r2, #24]
 80083cc:	4b18      	ldr	r3, [pc, #96]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	4a14      	ldr	r2, [pc, #80]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	6193      	str	r3, [r2, #24]
 80083e4:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_UART_MspInit+0x90>)
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80083f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f6:	2302      	movs	r3, #2
 80083f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083fa:	2303      	movs	r3, #3
 80083fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	4619      	mov	r1, r3
 8008404:	480b      	ldr	r0, [pc, #44]	; (8008434 <HAL_UART_MspInit+0x94>)
 8008406:	f000 f9db 	bl	80087c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800840a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008414:	2300      	movs	r3, #0
 8008416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	4619      	mov	r1, r3
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <HAL_UART_MspInit+0x94>)
 8008420:	f000 f9ce 	bl	80087c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008424:	bf00      	nop
 8008426:	3720      	adds	r7, #32
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40013800 	.word	0x40013800
 8008430:	40021000 	.word	0x40021000
 8008434:	40010800 	.word	0x40010800

08008438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800843c:	e7fe      	b.n	800843c <NMI_Handler+0x4>

0800843e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800843e:	b480      	push	{r7}
 8008440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008442:	e7fe      	b.n	8008442 <HardFault_Handler+0x4>

08008444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008448:	e7fe      	b.n	8008448 <MemManage_Handler+0x4>

0800844a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800844a:	b480      	push	{r7}
 800844c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800844e:	e7fe      	b.n	800844e <BusFault_Handler+0x4>

08008450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008454:	e7fe      	b.n	8008454 <UsageFault_Handler+0x4>

08008456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008456:	b480      	push	{r7}
 8008458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800845a:	bf00      	nop
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr

08008462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008462:	b480      	push	{r7}
 8008464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008466:	bf00      	nop
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr

0800846e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800846e:	b480      	push	{r7}
 8008470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008472:	bf00      	nop
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr

0800847a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800847e:	f000 f87d 	bl	800857c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008482:	bf00      	nop
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800848c:	4b03      	ldr	r3, [pc, #12]	; (800849c <SystemInit+0x14>)
 800848e:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <SystemInit+0x18>)
 8008490:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008492:	bf00      	nop
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	e000ed00 	.word	0xe000ed00
 80084a0:	08008000 	.word	0x08008000

080084a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80084a4:	480c      	ldr	r0, [pc, #48]	; (80084d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80084a6:	490d      	ldr	r1, [pc, #52]	; (80084dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80084a8:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80084aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084ac:	e002      	b.n	80084b4 <LoopCopyDataInit>

080084ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084b2:	3304      	adds	r3, #4

080084b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084b8:	d3f9      	bcc.n	80084ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084ba:	4a0a      	ldr	r2, [pc, #40]	; (80084e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80084bc:	4c0a      	ldr	r4, [pc, #40]	; (80084e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80084be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084c0:	e001      	b.n	80084c6 <LoopFillZerobss>

080084c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084c4:	3204      	adds	r2, #4

080084c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084c8:	d3fb      	bcc.n	80084c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80084ca:	f7ff ffdd 	bl	8008488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084ce:	f001 f8d7 	bl	8009680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80084d2:	f7ff fe43 	bl	800815c <main>
  bx lr
 80084d6:	4770      	bx	lr
  ldr r0, =_sdata
 80084d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80084e0:	08009734 	.word	0x08009734
  ldr r2, =_sbss
 80084e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80084e8:	20000070 	.word	0x20000070

080084ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80084ec:	e7fe      	b.n	80084ec <ADC1_2_IRQHandler>
	...

080084f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <HAL_Init+0x28>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a07      	ldr	r2, [pc, #28]	; (8008518 <HAL_Init+0x28>)
 80084fa:	f043 0310 	orr.w	r3, r3, #16
 80084fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008500:	2003      	movs	r0, #3
 8008502:	f000 f929 	bl	8008758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008506:	2000      	movs	r0, #0
 8008508:	f000 f808 	bl	800851c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800850c:	f7ff ff16 	bl	800833c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40022000 	.word	0x40022000

0800851c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <HAL_InitTick+0x54>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <HAL_InitTick+0x58>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	4619      	mov	r1, r3
 800852e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008532:	fbb3 f3f1 	udiv	r3, r3, r1
 8008536:	fbb2 f3f3 	udiv	r3, r2, r3
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f933 	bl	80087a6 <HAL_SYSTICK_Config>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e00e      	b.n	8008568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b0f      	cmp	r3, #15
 800854e:	d80a      	bhi.n	8008566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008550:	2200      	movs	r2, #0
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	f000 f909 	bl	800876e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800855c:	4a06      	ldr	r2, [pc, #24]	; (8008578 <HAL_InitTick+0x5c>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	e000      	b.n	8008568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000000 	.word	0x20000000
 8008574:	20000008 	.word	0x20000008
 8008578:	20000004 	.word	0x20000004

0800857c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_IncTick+0x1c>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_IncTick+0x20>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4413      	add	r3, r2
 800858c:	4a03      	ldr	r2, [pc, #12]	; (800859c <HAL_IncTick+0x20>)
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr
 8008598:	20000008 	.word	0x20000008
 800859c:	2000006c 	.word	0x2000006c

080085a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return uwTick;
 80085a4:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <HAL_GetTick+0x10>)
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	2000006c 	.word	0x2000006c

080085b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085bc:	f7ff fff0 	bl	80085a0 <HAL_GetTick>
 80085c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d005      	beq.n	80085da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <HAL_Delay+0x40>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80085da:	bf00      	nop
 80085dc:	f7ff ffe0 	bl	80085a0 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d8f7      	bhi.n	80085dc <HAL_Delay+0x28>
  {
  }
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000008 	.word	0x20000008

080085f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <__NVIC_SetPriorityGrouping+0x44>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008614:	4013      	ands	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800862a:	4a04      	ldr	r2, [pc, #16]	; (800863c <__NVIC_SetPriorityGrouping+0x44>)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	60d3      	str	r3, [r2, #12]
}
 8008630:	bf00      	nop
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	e000ed00 	.word	0xe000ed00

08008640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <__NVIC_GetPriorityGrouping+0x18>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	f003 0307 	and.w	r3, r3, #7
}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	e000ed00 	.word	0xe000ed00

0800865c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866c:	2b00      	cmp	r3, #0
 800866e:	db0a      	blt.n	8008686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	490c      	ldr	r1, [pc, #48]	; (80086a8 <__NVIC_SetPriority+0x4c>)
 8008676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800867a:	0112      	lsls	r2, r2, #4
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	440b      	add	r3, r1
 8008680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008684:	e00a      	b.n	800869c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	4908      	ldr	r1, [pc, #32]	; (80086ac <__NVIC_SetPriority+0x50>)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	3b04      	subs	r3, #4
 8008694:	0112      	lsls	r2, r2, #4
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	440b      	add	r3, r1
 800869a:	761a      	strb	r2, [r3, #24]
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	e000e100 	.word	0xe000e100
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f1c3 0307 	rsb	r3, r3, #7
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	bf28      	it	cs
 80086ce:	2304      	movcs	r3, #4
 80086d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3304      	adds	r3, #4
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d902      	bls.n	80086e0 <NVIC_EncodePriority+0x30>
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3b03      	subs	r3, #3
 80086de:	e000      	b.n	80086e2 <NVIC_EncodePriority+0x32>
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43da      	mvns	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	401a      	ands	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086f8:	f04f 31ff 	mov.w	r1, #4294967295
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008702:	43d9      	mvns	r1, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008708:	4313      	orrs	r3, r2
         );
}
 800870a:	4618      	mov	r0, r3
 800870c:	3724      	adds	r7, #36	; 0x24
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3b01      	subs	r3, #1
 8008720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008724:	d301      	bcc.n	800872a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008726:	2301      	movs	r3, #1
 8008728:	e00f      	b.n	800874a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800872a:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <SysTick_Config+0x40>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3b01      	subs	r3, #1
 8008730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008732:	210f      	movs	r1, #15
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	f7ff ff90 	bl	800865c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <SysTick_Config+0x40>)
 800873e:	2200      	movs	r2, #0
 8008740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008742:	4b04      	ldr	r3, [pc, #16]	; (8008754 <SysTick_Config+0x40>)
 8008744:	2207      	movs	r2, #7
 8008746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	e000e010 	.word	0xe000e010

08008758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ff49 	bl	80085f8 <__NVIC_SetPriorityGrouping>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	4603      	mov	r3, r0
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008780:	f7ff ff5e 	bl	8008640 <__NVIC_GetPriorityGrouping>
 8008784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f7ff ff90 	bl	80086b0 <NVIC_EncodePriority>
 8008790:	4602      	mov	r2, r0
 8008792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff ff5f 	bl	800865c <__NVIC_SetPriority>
}
 800879e:	bf00      	nop
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ffb0 	bl	8008714 <SysTick_Config>
 80087b4:	4603      	mov	r3, r0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b08b      	sub	sp, #44	; 0x2c
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087ca:	2300      	movs	r3, #0
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80087ce:	2300      	movs	r3, #0
 80087d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087d2:	e127      	b.n	8008a24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80087d4:	2201      	movs	r2, #1
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	4013      	ands	r3, r2
 80087e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	f040 8116 	bne.w	8008a1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b12      	cmp	r3, #18
 80087f8:	d034      	beq.n	8008864 <HAL_GPIO_Init+0xa4>
 80087fa:	2b12      	cmp	r3, #18
 80087fc:	d80d      	bhi.n	800881a <HAL_GPIO_Init+0x5a>
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d02b      	beq.n	800885a <HAL_GPIO_Init+0x9a>
 8008802:	2b02      	cmp	r3, #2
 8008804:	d804      	bhi.n	8008810 <HAL_GPIO_Init+0x50>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d031      	beq.n	800886e <HAL_GPIO_Init+0xae>
 800880a:	2b01      	cmp	r3, #1
 800880c:	d01c      	beq.n	8008848 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800880e:	e048      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008810:	2b03      	cmp	r3, #3
 8008812:	d043      	beq.n	800889c <HAL_GPIO_Init+0xdc>
 8008814:	2b11      	cmp	r3, #17
 8008816:	d01b      	beq.n	8008850 <HAL_GPIO_Init+0x90>
          break;
 8008818:	e043      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800881a:	4a89      	ldr	r2, [pc, #548]	; (8008a40 <HAL_GPIO_Init+0x280>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d026      	beq.n	800886e <HAL_GPIO_Init+0xae>
 8008820:	4a87      	ldr	r2, [pc, #540]	; (8008a40 <HAL_GPIO_Init+0x280>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d806      	bhi.n	8008834 <HAL_GPIO_Init+0x74>
 8008826:	4a87      	ldr	r2, [pc, #540]	; (8008a44 <HAL_GPIO_Init+0x284>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d020      	beq.n	800886e <HAL_GPIO_Init+0xae>
 800882c:	4a86      	ldr	r2, [pc, #536]	; (8008a48 <HAL_GPIO_Init+0x288>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01d      	beq.n	800886e <HAL_GPIO_Init+0xae>
          break;
 8008832:	e036      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008834:	4a85      	ldr	r2, [pc, #532]	; (8008a4c <HAL_GPIO_Init+0x28c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d019      	beq.n	800886e <HAL_GPIO_Init+0xae>
 800883a:	4a85      	ldr	r2, [pc, #532]	; (8008a50 <HAL_GPIO_Init+0x290>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d016      	beq.n	800886e <HAL_GPIO_Init+0xae>
 8008840:	4a84      	ldr	r2, [pc, #528]	; (8008a54 <HAL_GPIO_Init+0x294>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_GPIO_Init+0xae>
          break;
 8008846:	e02c      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	623b      	str	r3, [r7, #32]
          break;
 800884e:	e028      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	3304      	adds	r3, #4
 8008856:	623b      	str	r3, [r7, #32]
          break;
 8008858:	e023      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	3308      	adds	r3, #8
 8008860:	623b      	str	r3, [r7, #32]
          break;
 8008862:	e01e      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	330c      	adds	r3, #12
 800886a:	623b      	str	r3, [r7, #32]
          break;
 800886c:	e019      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008876:	2304      	movs	r3, #4
 8008878:	623b      	str	r3, [r7, #32]
          break;
 800887a:	e012      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d105      	bne.n	8008890 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008884:	2308      	movs	r3, #8
 8008886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	611a      	str	r2, [r3, #16]
          break;
 800888e:	e008      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008890:	2308      	movs	r3, #8
 8008892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	615a      	str	r2, [r3, #20]
          break;
 800889a:	e002      	b.n	80088a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
          break;
 80088a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2bff      	cmp	r3, #255	; 0xff
 80088a6:	d801      	bhi.n	80088ac <HAL_GPIO_Init+0xec>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	e001      	b.n	80088b0 <HAL_GPIO_Init+0xf0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2bff      	cmp	r3, #255	; 0xff
 80088b6:	d802      	bhi.n	80088be <HAL_GPIO_Init+0xfe>
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	e002      	b.n	80088c4 <HAL_GPIO_Init+0x104>
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	3b08      	subs	r3, #8
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	210f      	movs	r1, #15
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	43db      	mvns	r3, r3
 80088d4:	401a      	ands	r2, r3
 80088d6:	6a39      	ldr	r1, [r7, #32]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	fa01 f303 	lsl.w	r3, r1, r3
 80088de:	431a      	orrs	r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8096 	beq.w	8008a1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80088f2:	4b59      	ldr	r3, [pc, #356]	; (8008a58 <HAL_GPIO_Init+0x298>)
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	4a58      	ldr	r2, [pc, #352]	; (8008a58 <HAL_GPIO_Init+0x298>)
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	6193      	str	r3, [r2, #24]
 80088fe:	4b56      	ldr	r3, [pc, #344]	; (8008a58 <HAL_GPIO_Init+0x298>)
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	60bb      	str	r3, [r7, #8]
 8008908:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800890a:	4a54      	ldr	r2, [pc, #336]	; (8008a5c <HAL_GPIO_Init+0x29c>)
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	089b      	lsrs	r3, r3, #2
 8008910:	3302      	adds	r3, #2
 8008912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008916:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	220f      	movs	r2, #15
 8008922:	fa02 f303 	lsl.w	r3, r2, r3
 8008926:	43db      	mvns	r3, r3
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4013      	ands	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a4b      	ldr	r2, [pc, #300]	; (8008a60 <HAL_GPIO_Init+0x2a0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <HAL_GPIO_Init+0x19e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a4a      	ldr	r2, [pc, #296]	; (8008a64 <HAL_GPIO_Init+0x2a4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00d      	beq.n	800895a <HAL_GPIO_Init+0x19a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a49      	ldr	r2, [pc, #292]	; (8008a68 <HAL_GPIO_Init+0x2a8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <HAL_GPIO_Init+0x196>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a48      	ldr	r2, [pc, #288]	; (8008a6c <HAL_GPIO_Init+0x2ac>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d101      	bne.n	8008952 <HAL_GPIO_Init+0x192>
 800894e:	2303      	movs	r3, #3
 8008950:	e006      	b.n	8008960 <HAL_GPIO_Init+0x1a0>
 8008952:	2304      	movs	r3, #4
 8008954:	e004      	b.n	8008960 <HAL_GPIO_Init+0x1a0>
 8008956:	2302      	movs	r3, #2
 8008958:	e002      	b.n	8008960 <HAL_GPIO_Init+0x1a0>
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <HAL_GPIO_Init+0x1a0>
 800895e:	2300      	movs	r3, #0
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	f002 0203 	and.w	r2, r2, #3
 8008966:	0092      	lsls	r2, r2, #2
 8008968:	4093      	lsls	r3, r2
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008970:	493a      	ldr	r1, [pc, #232]	; (8008a5c <HAL_GPIO_Init+0x29c>)
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	089b      	lsrs	r3, r3, #2
 8008976:	3302      	adds	r3, #2
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d006      	beq.n	8008998 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4938      	ldr	r1, [pc, #224]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	4313      	orrs	r3, r2
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	e006      	b.n	80089a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008998:	4b35      	ldr	r3, [pc, #212]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	43db      	mvns	r3, r3
 80089a0:	4933      	ldr	r1, [pc, #204]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d006      	beq.n	80089c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80089b2:	4b2f      	ldr	r3, [pc, #188]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	492e      	ldr	r1, [pc, #184]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	604b      	str	r3, [r1, #4]
 80089be:	e006      	b.n	80089ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80089c0:	4b2b      	ldr	r3, [pc, #172]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	43db      	mvns	r3, r3
 80089c8:	4929      	ldr	r1, [pc, #164]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80089da:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	4924      	ldr	r1, [pc, #144]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	608b      	str	r3, [r1, #8]
 80089e6:	e006      	b.n	80089f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80089e8:	4b21      	ldr	r3, [pc, #132]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	43db      	mvns	r3, r3
 80089f0:	491f      	ldr	r1, [pc, #124]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d006      	beq.n	8008a10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	491a      	ldr	r1, [pc, #104]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60cb      	str	r3, [r1, #12]
 8008a0e:	e006      	b.n	8008a1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a10:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	43db      	mvns	r3, r3
 8008a18:	4915      	ldr	r1, [pc, #84]	; (8008a70 <HAL_GPIO_Init+0x2b0>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	3301      	adds	r3, #1
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f47f aed0 	bne.w	80087d4 <HAL_GPIO_Init+0x14>
  }
}
 8008a34:	bf00      	nop
 8008a36:	372c      	adds	r7, #44	; 0x2c
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	10210000 	.word	0x10210000
 8008a44:	10110000 	.word	0x10110000
 8008a48:	10120000 	.word	0x10120000
 8008a4c:	10310000 	.word	0x10310000
 8008a50:	10320000 	.word	0x10320000
 8008a54:	10220000 	.word	0x10220000
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40010800 	.word	0x40010800
 8008a64:	40010c00 	.word	0x40010c00
 8008a68:	40011000 	.word	0x40011000
 8008a6c:	40011400 	.word	0x40011400
 8008a70:	40010400 	.word	0x40010400

08008a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	807b      	strh	r3, [r7, #2]
 8008a80:	4613      	mov	r3, r2
 8008a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a84:	787b      	ldrb	r3, [r7, #1]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a8a:	887a      	ldrh	r2, [r7, #2]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008a90:	e003      	b.n	8008a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a92:	887b      	ldrh	r3, [r7, #2]
 8008a94:	041a      	lsls	r2, r3, #16
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	611a      	str	r2, [r3, #16]
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ab6:	887a      	ldrh	r2, [r7, #2]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4013      	ands	r3, r2
 8008abc:	041a      	lsls	r2, r3, #16
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	43d9      	mvns	r1, r3
 8008ac2:	887b      	ldrh	r3, [r7, #2]
 8008ac4:	400b      	ands	r3, r1
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	611a      	str	r2, [r3, #16]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
	...

08008ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e26c      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8087 	beq.w	8008c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008af8:	4b92      	ldr	r3, [pc, #584]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f003 030c 	and.w	r3, r3, #12
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d00c      	beq.n	8008b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b04:	4b8f      	ldr	r3, [pc, #572]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f003 030c 	and.w	r3, r3, #12
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d112      	bne.n	8008b36 <HAL_RCC_OscConfig+0x5e>
 8008b10:	4b8c      	ldr	r3, [pc, #560]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1c:	d10b      	bne.n	8008b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b1e:	4b89      	ldr	r3, [pc, #548]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d06c      	beq.n	8008c04 <HAL_RCC_OscConfig+0x12c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d168      	bne.n	8008c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e246      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3e:	d106      	bne.n	8008b4e <HAL_RCC_OscConfig+0x76>
 8008b40:	4b80      	ldr	r3, [pc, #512]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a7f      	ldr	r2, [pc, #508]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	e02e      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <HAL_RCC_OscConfig+0x98>
 8008b56:	4b7b      	ldr	r3, [pc, #492]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a7a      	ldr	r2, [pc, #488]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	4b78      	ldr	r3, [pc, #480]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a77      	ldr	r2, [pc, #476]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	e01d      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b78:	d10c      	bne.n	8008b94 <HAL_RCC_OscConfig+0xbc>
 8008b7a:	4b72      	ldr	r3, [pc, #456]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a71      	ldr	r2, [pc, #452]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	4b6f      	ldr	r3, [pc, #444]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a6e      	ldr	r2, [pc, #440]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e00b      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b94:	4b6b      	ldr	r3, [pc, #428]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a6a      	ldr	r2, [pc, #424]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	4b68      	ldr	r3, [pc, #416]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a67      	ldr	r2, [pc, #412]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d013      	beq.n	8008bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb4:	f7ff fcf4 	bl	80085a0 <HAL_GetTick>
 8008bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bbc:	f7ff fcf0 	bl	80085a0 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b64      	cmp	r3, #100	; 0x64
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e1fa      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bce:	4b5d      	ldr	r3, [pc, #372]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0xe4>
 8008bda:	e014      	b.n	8008c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bdc:	f7ff fce0 	bl	80085a0 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008be4:	f7ff fcdc 	bl	80085a0 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b64      	cmp	r3, #100	; 0x64
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e1e6      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bf6:	4b53      	ldr	r3, [pc, #332]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x10c>
 8008c02:	e000      	b.n	8008c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d063      	beq.n	8008cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c12:	4b4c      	ldr	r3, [pc, #304]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f003 030c 	and.w	r3, r3, #12
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00b      	beq.n	8008c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c1e:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 030c 	and.w	r3, r3, #12
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d11c      	bne.n	8008c64 <HAL_RCC_OscConfig+0x18c>
 8008c2a:	4b46      	ldr	r3, [pc, #280]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d116      	bne.n	8008c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c36:	4b43      	ldr	r3, [pc, #268]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_RCC_OscConfig+0x176>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d001      	beq.n	8008c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e1ba      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c4e:	4b3d      	ldr	r3, [pc, #244]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	4939      	ldr	r1, [pc, #228]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c62:	e03a      	b.n	8008cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d020      	beq.n	8008cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c6c:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <HAL_RCC_OscConfig+0x270>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c72:	f7ff fc95 	bl	80085a0 <HAL_GetTick>
 8008c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c78:	e008      	b.n	8008c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c7a:	f7ff fc91 	bl	80085a0 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e19b      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0f0      	beq.n	8008c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4927      	ldr	r1, [pc, #156]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	600b      	str	r3, [r1, #0]
 8008cac:	e015      	b.n	8008cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cae:	4b26      	ldr	r3, [pc, #152]	; (8008d48 <HAL_RCC_OscConfig+0x270>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb4:	f7ff fc74 	bl	80085a0 <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cbc:	f7ff fc70 	bl	80085a0 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e17a      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cce:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f0      	bne.n	8008cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0308 	and.w	r3, r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d03a      	beq.n	8008d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d019      	beq.n	8008d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cee:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <HAL_RCC_OscConfig+0x274>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cf4:	f7ff fc54 	bl	80085a0 <HAL_GetTick>
 8008cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cfc:	f7ff fc50 	bl	80085a0 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e15a      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <HAL_RCC_OscConfig+0x26c>)
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f0      	beq.n	8008cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f000 fada 	bl	80092d4 <RCC_Delay>
 8008d20:	e01c      	b.n	8008d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <HAL_RCC_OscConfig+0x274>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d28:	f7ff fc3a 	bl	80085a0 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d2e:	e00f      	b.n	8008d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d30:	f7ff fc36 	bl	80085a0 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d908      	bls.n	8008d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e140      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
 8008d42:	bf00      	nop
 8008d44:	40021000 	.word	0x40021000
 8008d48:	42420000 	.word	0x42420000
 8008d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d50:	4b9e      	ldr	r3, [pc, #632]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e9      	bne.n	8008d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80a6 	beq.w	8008eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d6e:	4b97      	ldr	r3, [pc, #604]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d7a:	4b94      	ldr	r3, [pc, #592]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	4a93      	ldr	r2, [pc, #588]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d84:	61d3      	str	r3, [r2, #28]
 8008d86:	4b91      	ldr	r3, [pc, #580]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d8e:	60bb      	str	r3, [r7, #8]
 8008d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d92:	2301      	movs	r3, #1
 8008d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d96:	4b8e      	ldr	r3, [pc, #568]	; (8008fd0 <HAL_RCC_OscConfig+0x4f8>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d118      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008da2:	4b8b      	ldr	r3, [pc, #556]	; (8008fd0 <HAL_RCC_OscConfig+0x4f8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a8a      	ldr	r2, [pc, #552]	; (8008fd0 <HAL_RCC_OscConfig+0x4f8>)
 8008da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dae:	f7ff fbf7 	bl	80085a0 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008db4:	e008      	b.n	8008dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008db6:	f7ff fbf3 	bl	80085a0 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b64      	cmp	r3, #100	; 0x64
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e0fd      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc8:	4b81      	ldr	r3, [pc, #516]	; (8008fd0 <HAL_RCC_OscConfig+0x4f8>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0f0      	beq.n	8008db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d106      	bne.n	8008dea <HAL_RCC_OscConfig+0x312>
 8008ddc:	4b7b      	ldr	r3, [pc, #492]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	4a7a      	ldr	r2, [pc, #488]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	6213      	str	r3, [r2, #32]
 8008de8:	e02d      	b.n	8008e46 <HAL_RCC_OscConfig+0x36e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10c      	bne.n	8008e0c <HAL_RCC_OscConfig+0x334>
 8008df2:	4b76      	ldr	r3, [pc, #472]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	4a75      	ldr	r2, [pc, #468]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008df8:	f023 0301 	bic.w	r3, r3, #1
 8008dfc:	6213      	str	r3, [r2, #32]
 8008dfe:	4b73      	ldr	r3, [pc, #460]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	4a72      	ldr	r2, [pc, #456]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e04:	f023 0304 	bic.w	r3, r3, #4
 8008e08:	6213      	str	r3, [r2, #32]
 8008e0a:	e01c      	b.n	8008e46 <HAL_RCC_OscConfig+0x36e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d10c      	bne.n	8008e2e <HAL_RCC_OscConfig+0x356>
 8008e14:	4b6d      	ldr	r3, [pc, #436]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	4a6c      	ldr	r2, [pc, #432]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e1a:	f043 0304 	orr.w	r3, r3, #4
 8008e1e:	6213      	str	r3, [r2, #32]
 8008e20:	4b6a      	ldr	r3, [pc, #424]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	4a69      	ldr	r2, [pc, #420]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	6213      	str	r3, [r2, #32]
 8008e2c:	e00b      	b.n	8008e46 <HAL_RCC_OscConfig+0x36e>
 8008e2e:	4b67      	ldr	r3, [pc, #412]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	4a66      	ldr	r2, [pc, #408]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	6213      	str	r3, [r2, #32]
 8008e3a:	4b64      	ldr	r3, [pc, #400]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	4a63      	ldr	r2, [pc, #396]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e40:	f023 0304 	bic.w	r3, r3, #4
 8008e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d015      	beq.n	8008e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e4e:	f7ff fba7 	bl	80085a0 <HAL_GetTick>
 8008e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e54:	e00a      	b.n	8008e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e56:	f7ff fba3 	bl	80085a0 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d901      	bls.n	8008e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e0ab      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6c:	4b57      	ldr	r3, [pc, #348]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0ee      	beq.n	8008e56 <HAL_RCC_OscConfig+0x37e>
 8008e78:	e014      	b.n	8008ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e7a:	f7ff fb91 	bl	80085a0 <HAL_GetTick>
 8008e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e80:	e00a      	b.n	8008e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e82:	f7ff fb8d 	bl	80085a0 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e095      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e98:	4b4c      	ldr	r3, [pc, #304]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1ee      	bne.n	8008e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d105      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eaa:	4b48      	ldr	r3, [pc, #288]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	4a47      	ldr	r2, [pc, #284]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8081 	beq.w	8008fc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ec0:	4b42      	ldr	r3, [pc, #264]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f003 030c 	and.w	r3, r3, #12
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d061      	beq.n	8008f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d146      	bne.n	8008f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ed4:	4b3f      	ldr	r3, [pc, #252]	; (8008fd4 <HAL_RCC_OscConfig+0x4fc>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eda:	f7ff fb61 	bl	80085a0 <HAL_GetTick>
 8008ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ee0:	e008      	b.n	8008ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ee2:	f7ff fb5d 	bl	80085a0 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d901      	bls.n	8008ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e067      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ef4:	4b35      	ldr	r3, [pc, #212]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1f0      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f08:	d108      	bne.n	8008f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f0a:	4b30      	ldr	r3, [pc, #192]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	492d      	ldr	r1, [pc, #180]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a19      	ldr	r1, [r3, #32]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	4927      	ldr	r1, [pc, #156]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f34:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <HAL_RCC_OscConfig+0x4fc>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f3a:	f7ff fb31 	bl	80085a0 <HAL_GetTick>
 8008f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f42:	f7ff fb2d 	bl	80085a0 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e037      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f54:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f0      	beq.n	8008f42 <HAL_RCC_OscConfig+0x46a>
 8008f60:	e02f      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <HAL_RCC_OscConfig+0x4fc>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f68:	f7ff fb1a 	bl	80085a0 <HAL_GetTick>
 8008f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f6e:	e008      	b.n	8008f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f70:	f7ff fb16 	bl	80085a0 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e020      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f82:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f0      	bne.n	8008f70 <HAL_RCC_OscConfig+0x498>
 8008f8e:	e018      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e013      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <HAL_RCC_OscConfig+0x4f4>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d106      	bne.n	8008fbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d001      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	40007000 	.word	0x40007000
 8008fd4:	42420060 	.word	0x42420060

08008fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0d0      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fec:	4b6a      	ldr	r3, [pc, #424]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d910      	bls.n	800901c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ffa:	4b67      	ldr	r3, [pc, #412]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f023 0207 	bic.w	r2, r3, #7
 8009002:	4965      	ldr	r1, [pc, #404]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	4313      	orrs	r3, r2
 8009008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800900a:	4b63      	ldr	r3, [pc, #396]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d001      	beq.n	800901c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0b8      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d020      	beq.n	800906a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009034:	4b59      	ldr	r3, [pc, #356]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	4a58      	ldr	r2, [pc, #352]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 800903a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800903e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800904c:	4b53      	ldr	r3, [pc, #332]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a52      	ldr	r2, [pc, #328]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009058:	4b50      	ldr	r3, [pc, #320]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	494d      	ldr	r1, [pc, #308]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009066:	4313      	orrs	r3, r2
 8009068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d040      	beq.n	80090f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d107      	bne.n	800908e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800907e:	4b47      	ldr	r3, [pc, #284]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d115      	bne.n	80090b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e07f      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d107      	bne.n	80090a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009096:	4b41      	ldr	r3, [pc, #260]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e073      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090a6:	4b3d      	ldr	r3, [pc, #244]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e06b      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090b6:	4b39      	ldr	r3, [pc, #228]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f023 0203 	bic.w	r2, r3, #3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4936      	ldr	r1, [pc, #216]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090c8:	f7ff fa6a 	bl	80085a0 <HAL_GetTick>
 80090cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ce:	e00a      	b.n	80090e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090d0:	f7ff fa66 	bl	80085a0 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	f241 3288 	movw	r2, #5000	; 0x1388
 80090de:	4293      	cmp	r3, r2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e053      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090e6:	4b2d      	ldr	r3, [pc, #180]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f003 020c 	and.w	r2, r3, #12
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d1eb      	bne.n	80090d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090f8:	4b27      	ldr	r3, [pc, #156]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d210      	bcs.n	8009128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009106:	4b24      	ldr	r3, [pc, #144]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f023 0207 	bic.w	r2, r3, #7
 800910e:	4922      	ldr	r1, [pc, #136]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	4313      	orrs	r3, r2
 8009114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009116:	4b20      	ldr	r3, [pc, #128]	; (8009198 <HAL_RCC_ClockConfig+0x1c0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d001      	beq.n	8009128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e032      	b.n	800918e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009134:	4b19      	ldr	r3, [pc, #100]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	4916      	ldr	r1, [pc, #88]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009142:	4313      	orrs	r3, r2
 8009144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009152:	4b12      	ldr	r3, [pc, #72]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	490e      	ldr	r1, [pc, #56]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 8009162:	4313      	orrs	r3, r2
 8009164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009166:	f000 f821 	bl	80091ac <HAL_RCC_GetSysClockFreq>
 800916a:	4601      	mov	r1, r0
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <HAL_RCC_ClockConfig+0x1c4>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	4a0a      	ldr	r2, [pc, #40]	; (80091a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009178:	5cd3      	ldrb	r3, [r2, r3]
 800917a:	fa21 f303 	lsr.w	r3, r1, r3
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <HAL_RCC_ClockConfig+0x1cc>)
 8009180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009182:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <HAL_RCC_ClockConfig+0x1d0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff f9c8 	bl	800851c <HAL_InitTick>

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40022000 	.word	0x40022000
 800919c:	40021000 	.word	0x40021000
 80091a0:	08009714 	.word	0x08009714
 80091a4:	20000000 	.word	0x20000000
 80091a8:	20000004 	.word	0x20000004

080091ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091ac:	b490      	push	{r4, r7}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80091b2:	4b2a      	ldr	r3, [pc, #168]	; (800925c <HAL_RCC_GetSysClockFreq+0xb0>)
 80091b4:	1d3c      	adds	r4, r7, #4
 80091b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <HAL_RCC_GetSysClockFreq+0xb4>)
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	2300      	movs	r3, #0
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80091d6:	4b23      	ldr	r3, [pc, #140]	; (8009264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	f003 030c 	and.w	r3, r3, #12
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d002      	beq.n	80091ec <HAL_RCC_GetSysClockFreq+0x40>
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d003      	beq.n	80091f2 <HAL_RCC_GetSysClockFreq+0x46>
 80091ea:	e02d      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091ee:	623b      	str	r3, [r7, #32]
      break;
 80091f0:	e02d      	b.n	800924e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	0c9b      	lsrs	r3, r3, #18
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80091fe:	4413      	add	r3, r2
 8009200:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009204:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d013      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	0c5b      	lsrs	r3, r3, #17
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800921e:	4413      	add	r3, r2
 8009220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009224:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	4a0f      	ldr	r2, [pc, #60]	; (8009268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800922a:	fb02 f203 	mul.w	r2, r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	fbb2 f3f3 	udiv	r3, r2, r3
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
 8009236:	e004      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	4a0c      	ldr	r2, [pc, #48]	; (800926c <HAL_RCC_GetSysClockFreq+0xc0>)
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	623b      	str	r3, [r7, #32]
      break;
 8009246:	e002      	b.n	800924e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009248:	4b07      	ldr	r3, [pc, #28]	; (8009268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800924a:	623b      	str	r3, [r7, #32]
      break;
 800924c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800924e:	6a3b      	ldr	r3, [r7, #32]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3728      	adds	r7, #40	; 0x28
 8009254:	46bd      	mov	sp, r7
 8009256:	bc90      	pop	{r4, r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	08009700 	.word	0x08009700
 8009260:	08009710 	.word	0x08009710
 8009264:	40021000 	.word	0x40021000
 8009268:	007a1200 	.word	0x007a1200
 800926c:	003d0900 	.word	0x003d0900

08009270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <HAL_RCC_GetHCLKFreq+0x10>)
 8009276:	681b      	ldr	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	20000000 	.word	0x20000000

08009284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009288:	f7ff fff2 	bl	8009270 <HAL_RCC_GetHCLKFreq>
 800928c:	4601      	mov	r1, r0
 800928e:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	4a03      	ldr	r2, [pc, #12]	; (80092a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929a:	5cd3      	ldrb	r3, [r2, r3]
 800929c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40021000 	.word	0x40021000
 80092a8:	08009724 	.word	0x08009724

080092ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092b0:	f7ff ffde 	bl	8009270 <HAL_RCC_GetHCLKFreq>
 80092b4:	4601      	mov	r1, r0
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	0adb      	lsrs	r3, r3, #11
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	4a03      	ldr	r2, [pc, #12]	; (80092d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c2:	5cd3      	ldrb	r3, [r2, r3]
 80092c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40021000 	.word	0x40021000
 80092d0:	08009724 	.word	0x08009724

080092d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <RCC_Delay+0x34>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a0a      	ldr	r2, [pc, #40]	; (800930c <RCC_Delay+0x38>)
 80092e2:	fba2 2303 	umull	r2, r3, r2, r3
 80092e6:	0a5b      	lsrs	r3, r3, #9
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80092f0:	bf00      	nop
  }
  while (Delay --);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1e5a      	subs	r2, r3, #1
 80092f6:	60fa      	str	r2, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f9      	bne.n	80092f0 <RCC_Delay+0x1c>
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	20000000 	.word	0x20000000
 800930c:	10624dd3 	.word	0x10624dd3

08009310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e03f      	b.n	80093a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f832 	bl	80083a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2224      	movs	r2, #36	; 0x24
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f905 	bl	8009564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b08a      	sub	sp, #40	; 0x28
 80093ae:	af02      	add	r7, sp, #8
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d17c      	bne.n	80094c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <HAL_UART_Transmit+0x2c>
 80093d0:	88fb      	ldrh	r3, [r7, #6]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e075      	b.n	80094c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_UART_Transmit+0x3e>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e06e      	b.n	80094c6 <HAL_UART_Transmit+0x11c>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2221      	movs	r2, #33	; 0x21
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093fe:	f7ff f8cf 	bl	80085a0 <HAL_GetTick>
 8009402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	88fa      	ldrh	r2, [r7, #6]
 8009408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	88fa      	ldrh	r2, [r7, #6]
 800940e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009418:	d108      	bne.n	800942c <HAL_UART_Transmit+0x82>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e003      	b.n	8009434 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800943c:	e02a      	b.n	8009494 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2200      	movs	r2, #0
 8009446:	2180      	movs	r1, #128	; 0x80
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f840 	bl	80094ce <UART_WaitOnFlagUntilTimeout>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e036      	b.n	80094c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10b      	bne.n	8009476 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800946c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	3302      	adds	r3, #2
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	e007      	b.n	8009486 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	3301      	adds	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1cf      	bne.n	800943e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2200      	movs	r2, #0
 80094a6:	2140      	movs	r1, #64	; 0x40
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 f810 	bl	80094ce <UART_WaitOnFlagUntilTimeout>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e006      	b.n	80094c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e000      	b.n	80094c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094c4:	2302      	movs	r3, #2
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	4613      	mov	r3, r2
 80094dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094de:	e02c      	b.n	800953a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d028      	beq.n	800953a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x30>
 80094ee:	f7ff f857 	bl	80085a0 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d21d      	bcs.n	800953a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800950c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	695a      	ldr	r2, [r3, #20]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2220      	movs	r2, #32
 8009522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e00f      	b.n	800955a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4013      	ands	r3, r2
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	bf0c      	ite	eq
 800954a:	2301      	moveq	r3, #1
 800954c:	2300      	movne	r3, #0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	429a      	cmp	r2, r3
 8009556:	d0c3      	beq.n	80094e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800959e:	f023 030c 	bic.w	r3, r3, #12
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	430b      	orrs	r3, r1
 80095aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a2c      	ldr	r2, [pc, #176]	; (8009678 <UART_SetConfig+0x114>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d103      	bne.n	80095d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80095cc:	f7ff fe6e 	bl	80092ac <HAL_RCC_GetPCLK2Freq>
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	e002      	b.n	80095da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80095d4:	f7ff fe56 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 80095d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009a      	lsls	r2, r3, #2
 80095e4:	441a      	add	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	4a22      	ldr	r2, [pc, #136]	; (800967c <UART_SetConfig+0x118>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	095b      	lsrs	r3, r3, #5
 80095f8:	0119      	lsls	r1, r3, #4
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009a      	lsls	r2, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009610:	4b1a      	ldr	r3, [pc, #104]	; (800967c <UART_SetConfig+0x118>)
 8009612:	fba3 0302 	umull	r0, r3, r3, r2
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	2064      	movs	r0, #100	; 0x64
 800961a:	fb00 f303 	mul.w	r3, r0, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	3332      	adds	r3, #50	; 0x32
 8009624:	4a15      	ldr	r2, [pc, #84]	; (800967c <UART_SetConfig+0x118>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009630:	4419      	add	r1, r3
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009a      	lsls	r2, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	fbb2 f2f3 	udiv	r2, r2, r3
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <UART_SetConfig+0x118>)
 800964a:	fba3 0302 	umull	r0, r3, r3, r2
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	2064      	movs	r0, #100	; 0x64
 8009652:	fb00 f303 	mul.w	r3, r0, r3
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	3332      	adds	r3, #50	; 0x32
 800965c:	4a07      	ldr	r2, [pc, #28]	; (800967c <UART_SetConfig+0x118>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	f003 020f 	and.w	r2, r3, #15
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	440a      	add	r2, r1
 800966e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	40013800 	.word	0x40013800
 800967c:	51eb851f 	.word	0x51eb851f

08009680 <__libc_init_array>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	2500      	movs	r5, #0
 8009684:	4e0c      	ldr	r6, [pc, #48]	; (80096b8 <__libc_init_array+0x38>)
 8009686:	4c0d      	ldr	r4, [pc, #52]	; (80096bc <__libc_init_array+0x3c>)
 8009688:	1ba4      	subs	r4, r4, r6
 800968a:	10a4      	asrs	r4, r4, #2
 800968c:	42a5      	cmp	r5, r4
 800968e:	d109      	bne.n	80096a4 <__libc_init_array+0x24>
 8009690:	f000 f822 	bl	80096d8 <_init>
 8009694:	2500      	movs	r5, #0
 8009696:	4e0a      	ldr	r6, [pc, #40]	; (80096c0 <__libc_init_array+0x40>)
 8009698:	4c0a      	ldr	r4, [pc, #40]	; (80096c4 <__libc_init_array+0x44>)
 800969a:	1ba4      	subs	r4, r4, r6
 800969c:	10a4      	asrs	r4, r4, #2
 800969e:	42a5      	cmp	r5, r4
 80096a0:	d105      	bne.n	80096ae <__libc_init_array+0x2e>
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096a8:	4798      	blx	r3
 80096aa:	3501      	adds	r5, #1
 80096ac:	e7ee      	b.n	800968c <__libc_init_array+0xc>
 80096ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096b2:	4798      	blx	r3
 80096b4:	3501      	adds	r5, #1
 80096b6:	e7f2      	b.n	800969e <__libc_init_array+0x1e>
 80096b8:	0800972c 	.word	0x0800972c
 80096bc:	0800972c 	.word	0x0800972c
 80096c0:	0800972c 	.word	0x0800972c
 80096c4:	08009730 	.word	0x08009730

080096c8 <memset>:
 80096c8:	4603      	mov	r3, r0
 80096ca:	4402      	add	r2, r0
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d100      	bne.n	80096d2 <memset+0xa>
 80096d0:	4770      	bx	lr
 80096d2:	f803 1b01 	strb.w	r1, [r3], #1
 80096d6:	e7f9      	b.n	80096cc <memset+0x4>

080096d8 <_init>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr

080096e4 <_fini>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr
