
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800617c  0800617c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800617c  0800617c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800617c  0800617c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  20000010  08006194  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d60  08006194  00021d60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142b3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003115  00000000  00000000  000342ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  00037408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00038768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ea2  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f985  00000000  00000000  00050802  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000802f5  00000000  00000000  00060187  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e047c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  000e04f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080060f4 	.word	0x080060f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080060f4 	.word	0x080060f4

08000150 <GetPage>:
/* STM32F103 have 128 PAGES (Page 0 to Page 127) of 1 KB each. This makes up 128 KB Flash Memory
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address) {
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++) {
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
 800015c:	e016      	b.n	800018c <GetPage+0x3c>
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1))))
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000164:	3301      	adds	r3, #1
 8000166:	029b      	lsls	r3, r3, #10
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	429a      	cmp	r2, r3
 800016c:	d20b      	bcs.n	8000186 <GetPage+0x36>
				&& (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) {
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000174:	029b      	lsls	r3, r3, #10
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d304      	bcc.n	8000186 <GetPage+0x36>
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000182:	029b      	lsls	r3, r3, #10
 8000184:	e006      	b.n	8000194 <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++) {
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	3301      	adds	r3, #1
 800018a:	60fb      	str	r3, [r7, #12]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2b7f      	cmp	r3, #127	; 0x7f
 8000190:	dde5      	ble.n	800015e <GetPage+0xe>
		}
	}

	return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <float2Bytes>:

uint8_t bytes_temp[4];

void float2Bytes(uint8_t *ftoa_bytes_temp, uint32_t float_variable) {
 800019e:	b480      	push	{r7}
 80001a0:	b085      	sub	sp, #20
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
 80001a6:	6039      	str	r1, [r7, #0]
	union {
		uint32_t a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 80001ac:	2300      	movs	r3, #0
 80001ae:	73fb      	strb	r3, [r7, #15]
 80001b0:	e00c      	b.n	80001cc <float2Bytes+0x2e>
		ftoa_bytes_temp[i] = thing.bytes[i];
 80001b2:	7bfa      	ldrb	r2, [r7, #15]
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	6879      	ldr	r1, [r7, #4]
 80001b8:	440b      	add	r3, r1
 80001ba:	f107 0110 	add.w	r1, r7, #16
 80001be:	440a      	add	r2, r1
 80001c0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80001c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	3301      	adds	r3, #1
 80001ca:	73fb      	strb	r3, [r7, #15]
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d9ef      	bls.n	80001b2 <float2Bytes+0x14>
	}

}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <Bytes2float>:

uint32_t Bytes2float(uint8_t *ftoa_bytes_temp) {
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	union {
		uint32_t a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 80001e4:	2300      	movs	r3, #0
 80001e6:	75fb      	strb	r3, [r7, #23]
 80001e8:	e00c      	b.n	8000204 <Bytes2float+0x28>
		thing.bytes[i] = ftoa_bytes_temp[i];
 80001ea:	7dfb      	ldrb	r3, [r7, #23]
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	441a      	add	r2, r3
 80001f0:	7dfb      	ldrb	r3, [r7, #23]
 80001f2:	7812      	ldrb	r2, [r2, #0]
 80001f4:	f107 0118 	add.w	r1, r7, #24
 80001f8:	440b      	add	r3, r1
 80001fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	3301      	adds	r3, #1
 8000202:	75fb      	strb	r3, [r7, #23]
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	2b03      	cmp	r3, #3
 8000208:	d9ef      	bls.n	80001ea <Bytes2float+0xe>
	}

	uint32_t float_variable = thing.a;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	613b      	str	r3, [r7, #16]
	return float_variable;
 800020e:	693b      	ldr	r3, [r7, #16]
}
 8000210:	4618      	mov	r0, r3
 8000212:	371c      	adds	r7, #28
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
	...

0800021c <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data,
		uint16_t numberofwords) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b08b      	sub	sp, #44	; 0x2c
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	4613      	mov	r3, r2
 8000228:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800022e:	f002 fc79 	bl	8002b24 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f7ff ff8c 	bl	8000150 <GetPage>
 8000238:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000246:	69f8      	ldr	r0, [r7, #28]
 8000248:	f7ff ff82 	bl	8000150 <GetPage>
 800024c:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000254:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000256:	6a3b      	ldr	r3, [r7, #32]
 8000258:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 800025a:	69ba      	ldr	r2, [r7, #24]
 800025c:	6a3b      	ldr	r3, [r7, #32]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	0a9b      	lsrs	r3, r3, #10
 8000262:	3301      	adds	r3, #1
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000266:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4619      	mov	r1, r3
 800026e:	4818      	ldr	r0, [pc, #96]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000270:	f002 fd4a 	bl	8002d08 <HAL_FLASHEx_Erase>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d01e      	beq.n	80002b8 <Flash_Write_Data+0x9c>
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 800027a:	f002 fc89 	bl	8002b90 <HAL_FLASH_GetError>
 800027e:	4603      	mov	r3, r0
 8000280:	e021      	b.n	80002c6 <Flash_Write_Data+0xaa>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
				Data[sofar]) == HAL_OK) {
 8000282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	4413      	add	r3, r2
 800028a:	681b      	ldr	r3, [r3, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
 800028c:	f04f 0400 	mov.w	r4, #0
 8000290:	461a      	mov	r2, r3
 8000292:	4623      	mov	r3, r4
 8000294:	68f9      	ldr	r1, [r7, #12]
 8000296:	2002      	movs	r0, #2
 8000298:	f002 fbd4 	bl	8002a44 <HAL_FLASH_Program>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <Flash_Write_Data+0x94>
			StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	3304      	adds	r3, #4
 80002a6:	60fb      	str	r3, [r7, #12]
			sofar++;
 80002a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002aa:	3301      	adds	r3, #1
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
 80002ae:	e003      	b.n	80002b8 <Flash_Write_Data+0x9c>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 80002b0:	f002 fc6e 	bl	8002b90 <HAL_FLASH_GetError>
 80002b4:	4603      	mov	r3, r0
 80002b6:	e006      	b.n	80002c6 <Flash_Write_Data+0xaa>
	while (sofar < numberofwords) {
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbe0      	blt.n	8000282 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80002c0:	f002 fc56 	bl	8002b70 <HAL_FLASH_Lock>

	return 0;
 80002c4:	2300      	movs	r3, #0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	372c      	adds	r7, #44	; 0x2c
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd90      	pop	{r4, r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	4613      	mov	r3, r2
 80002e0:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3304      	adds	r3, #4
 80002ee:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	3304      	adds	r3, #4
 80002f4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	1e5a      	subs	r2, r3, #1
 80002fa:	80fa      	strh	r2, [r7, #6]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d000      	beq.n	8000302 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000300:	e7ef      	b.n	80002e2 <Flash_Read_Data+0xe>
			break;
 8000302:	bf00      	nop
	}
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
	...

08000310 <Flash_Write_NUM>:
	for (int i = 0; i < numberofbytes; i++) {
		Buf[i] = Data[i / 4] >> (8 * (i % 4));
	}
}

void Flash_Write_NUM(uint32_t StartSectorAddress, uint32_t Num) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]

	float2Bytes(bytes_temp, Num);
 800031a:	6839      	ldr	r1, [r7, #0]
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <Flash_Write_NUM+0x24>)
 800031e:	f7ff ff3e 	bl	800019e <float2Bytes>

	Flash_Write_Data(StartSectorAddress, (uint32_t*) bytes_temp, 1);
 8000322:	2201      	movs	r2, #1
 8000324:	4903      	ldr	r1, [pc, #12]	; (8000334 <Flash_Write_NUM+0x24>)
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff78 	bl	800021c <Flash_Write_Data>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20001be4 	.word	0x20001be4

08000338 <Flash_Read_NUM>:

uint32_t Flash_Read_NUM(uint32_t StartSectorAddress) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	uint32_t value;

	Flash_Read_Data(StartSectorAddress, (uint32_t*) buffer, 1);
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f7ff ffc3 	bl	80002d4 <Flash_Read_Data>
	value = Bytes2float(buffer);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff42 	bl	80001dc <Bytes2float>
 8000358:	60f8      	str	r0, [r7, #12]
	return value;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <vApplicationGetIdleTaskMemory+0x28>)
 8000374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <vApplicationGetIdleTaskMemory+0x2c>)
 800037a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000003c 	.word	0x2000003c
 8000390:	20000090 	.word	0x20000090

08000394 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800039a:	f000 ff47 	bl	800122c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800039e:	f000 f899 	bl	80004d4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003a2:	f000 f9df 	bl	8000764 <MX_GPIO_Init>
	MX_DMA_Init();
 80003a6:	f000 f9bf 	bl	8000728 <MX_DMA_Init>
	MX_ADC1_Init();
 80003aa:	f000 f8ef 	bl	800058c <MX_ADC1_Init>
	MX_CAN_Init();
 80003ae:	f000 f957 	bl	8000660 <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	MX_I2C2_Init();
 80003b2:	f000 f98b 	bl	80006cc <MX_I2C2_Init>

	OD = Flash_Read_NUM(0x0801FC00);
 80003b6:	4830      	ldr	r0, [pc, #192]	; (8000478 <main+0xe4>)
 80003b8:	f7ff ffbe 	bl	8000338 <Flash_Read_NUM>
 80003bc:	4602      	mov	r2, r0
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <main+0xe8>)
 80003c0:	601a      	str	r2, [r3, #0]

	CAN_Filter_Config();
 80003c2:	f000 faab 	bl	800091c <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80003c6:	f240 4101 	movw	r1, #1025	; 0x401
 80003ca:	482d      	ldr	r0, [pc, #180]	; (8000480 <main+0xec>)
 80003cc:	f001 fe20 	bl	8002010 <HAL_CAN_ActivateNotification>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <main+0x46>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80003d6:	f000 fccd 	bl	8000d74 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 80003da:	4829      	ldr	r0, [pc, #164]	; (8000480 <main+0xec>)
 80003dc:	f001 fcfa 	bl	8001dd4 <HAL_CAN_Start>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <main+0x56>
		Error_Handler();
 80003e6:	f000 fcc5 	bl	8000d74 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 2);
 80003ea:	2202      	movs	r2, #2
 80003ec:	4925      	ldr	r1, [pc, #148]	; (8000484 <main+0xf0>)
 80003ee:	4826      	ldr	r0, [pc, #152]	; (8000488 <main+0xf4>)
 80003f0:	f001 f848 	bl	8001484 <HAL_ADC_Start_DMA>

	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 80003f4:	4b25      	ldr	r3, [pc, #148]	; (800048c <main+0xf8>)
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2304      	movs	r3, #4
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	4923      	ldr	r1, [pc, #140]	; (8000490 <main+0xfc>)
 8000402:	4824      	ldr	r0, [pc, #144]	; (8000494 <main+0x100>)
 8000404:	f004 fc4b 	bl	8004c9e <xTaskCreate>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <main+0x104>)
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2304      	movs	r3, #4
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	4921      	ldr	r1, [pc, #132]	; (800049c <main+0x108>)
 8000416:	4822      	ldr	r0, [pc, #136]	; (80004a0 <main+0x10c>)
 8000418:	f004 fc41 	bl	8004c9e <xTaskCreate>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <main+0x110>)
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2304      	movs	r3, #4
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2300      	movs	r3, #0
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	491f      	ldr	r1, [pc, #124]	; (80004a8 <main+0x114>)
 800042a:	4820      	ldr	r0, [pc, #128]	; (80004ac <main+0x118>)
 800042c:	f004 fc37 	bl	8004c9e <xTaskCreate>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <main+0x11c>)
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	2305      	movs	r3, #5
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2300      	movs	r3, #0
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	491d      	ldr	r1, [pc, #116]	; (80004b4 <main+0x120>)
 800043e:	481e      	ldr	r0, [pc, #120]	; (80004b8 <main+0x124>)
 8000440:	f004 fc2d 	bl	8004c9e <xTaskCreate>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <main+0x128>)
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2304      	movs	r3, #4
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	491b      	ldr	r1, [pc, #108]	; (80004c0 <main+0x12c>)
 8000452:	481c      	ldr	r0, [pc, #112]	; (80004c4 <main+0x130>)
 8000454:	f004 fc23 	bl	8004c9e <xTaskCreate>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 6, &OD_Task);
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <main+0x134>)
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	2306      	movs	r3, #6
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	2300      	movs	r3, #0
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	4919      	ldr	r1, [pc, #100]	; (80004cc <main+0x138>)
 8000466:	481a      	ldr	r0, [pc, #104]	; (80004d0 <main+0x13c>)
 8000468:	f004 fc19 	bl	8004c9e <xTaskCreate>

	vTaskStartScheduler();
 800046c:	f004 fefa 	bl	8005264 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 8000470:	2001      	movs	r0, #1
 8000472:	f000 ff0d 	bl	8001290 <HAL_Delay>
 8000476:	e7fb      	b.n	8000470 <main+0xdc>
 8000478:	0801fc00 	.word	0x0801fc00
 800047c:	20000290 	.word	0x20000290
 8000480:	20001c4c 	.word	0x20001c4c
 8000484:	20001be8 	.word	0x20001be8
 8000488:	20001c7c 	.word	0x20001c7c
 800048c:	20001c74 	.word	0x20001c74
 8000490:	0800610c 	.word	0x0800610c
 8000494:	08000969 	.word	0x08000969
 8000498:	20001c48 	.word	0x20001c48
 800049c:	08006114 	.word	0x08006114
 80004a0:	080009dd 	.word	0x080009dd
 80004a4:	20001c78 	.word	0x20001c78
 80004a8:	08006120 	.word	0x08006120
 80004ac:	08000a4d 	.word	0x08000a4d
 80004b0:	20001cf4 	.word	0x20001cf4
 80004b4:	0800612c 	.word	0x0800612c
 80004b8:	08000b25 	.word	0x08000b25
 80004bc:	20001c44 	.word	0x20001c44
 80004c0:	08006138 	.word	0x08006138
 80004c4:	08000ab9 	.word	0x08000ab9
 80004c8:	20001bec 	.word	0x20001bec
 80004cc:	08006140 	.word	0x08006140
 80004d0:	08000c89 	.word	0x08000c89

080004d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 fdfe 	bl	80060e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000520:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fb90 	bl	8003c50 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x66>
		Error_Handler();
 8000536:	f000 fc1d 	bl	8000d74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fdfa 	bl	8004150 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x92>
		Error_Handler();
 8000562:	f000 fc07 	bl	8000d74 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000566:	2302      	movs	r3, #2
 8000568:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800056a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f003 ffb8 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xae>
		Error_Handler();
 800057e:	f000 fbf9 	bl	8000d74 <Error_Handler>
	}
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800059c:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_ADC1_Init+0xcc>)
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xd0>)
 80005a0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005bc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80005ca:	4823      	ldr	r0, [pc, #140]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005cc:	f000 fe82 	bl	80012d4 <HAL_ADC_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x4e>
		Error_Handler();
 80005d6:	f000 fbcd 	bl	8000d74 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80005da:	2302      	movs	r3, #2
 80005dc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80005de:	2301      	movs	r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005e2:	2307      	movs	r3, #7
 80005e4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <MX_ADC1_Init+0xcc>)
 80005ec:	f001 f844 	bl	8001678 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x6e>
		Error_Handler();
 80005f6:	f000 fbbd 	bl	8000d74 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80005fe:	2302      	movs	r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <MX_ADC1_Init+0xcc>)
 8000608:	f001 f836 	bl	8001678 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x8a>
		Error_Handler();
 8000612:	f000 fbaf 	bl	8000d74 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000616:	2308      	movs	r3, #8
 8000618:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800061a:	2303      	movs	r3, #3
 800061c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_ADC1_Init+0xcc>)
 8000624:	f001 f828 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xa6>
		Error_Handler();
 800062e:	f000 fba1 	bl	8000d74 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000632:	2309      	movs	r3, #9
 8000634:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000636:	2304      	movs	r3, #4
 8000638:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0xcc>)
 8000640:	f001 f81a 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xc2>
		Error_Handler();
 800064a:	f000 fb93 	bl	8000d74 <Error_Handler>
	}
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20001c7c 	.word	0x20001c7c
 800065c:	40012400 	.word	0x40012400

08000660 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_CAN_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_CAN_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_CAN_Init+0x64>)
 800066c:	2209      	movs	r2, #9
 800066e:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_CAN_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_CAN_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_CAN_Init+0x64>)
 800067e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000682:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_CAN_Init+0x64>)
 8000686:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800068a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_CAN_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CAN_Init+0x64>)
 8000694:	2201      	movs	r2, #1
 8000696:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_CAN_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_CAN_Init+0x64>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CAN_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CAN_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CAN_Init+0x64>)
 80006b2:	f001 f9cb 	bl	8001a4c <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN_Init+0x60>
		Error_Handler();
 80006bc:	f000 fb5a 	bl	8000d74 <Error_Handler>
	}
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20001c4c 	.word	0x20001c4c
 80006c8:	40006400 	.word	0x40006400

080006cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C2_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C2_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C2_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C2_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C2_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C2_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C2_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C2_Init+0x50>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C2_Init+0x50>)
 800070a:	f002 fd69 	bl	80031e0 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fb2e 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20001bf0 	.word	0x20001bf0
 8000720:	40005800 	.word	0x40005800
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_DMA_Init+0x38>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <MX_DMA_Init+0x38>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_DMA_Init+0x38>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2105      	movs	r1, #5
 800074a:	200b      	movs	r0, #11
 800074c:	f001 ff61 	bl	8002612 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000750:	200b      	movs	r0, #11
 8000752:	f001 ff7a 	bl	800264a <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <MX_GPIO_Init+0x164>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a52      	ldr	r2, [pc, #328]	; (80008c8 <MX_GPIO_Init+0x164>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <MX_GPIO_Init+0x164>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <MX_GPIO_Init+0x164>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a4c      	ldr	r2, [pc, #304]	; (80008c8 <MX_GPIO_Init+0x164>)
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x164>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a46      	ldr	r2, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a40      	ldr	r2, [pc, #256]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x164>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0308 	and.w	r3, r3, #8
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	483b      	ldr	r0, [pc, #236]	; (80008cc <MX_GPIO_Init+0x168>)
 80007e0:	f002 fcab 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	4838      	ldr	r0, [pc, #224]	; (80008cc <MX_GPIO_Init+0x168>)
 80007ec:	f002 fca5 	bl	800313a <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f6:	4836      	ldr	r0, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x16c>)
 80007f8:	f002 fc9f 	bl	800313a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2108      	movs	r1, #8
 8000800:	4834      	ldr	r0, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x170>)
 8000802:	f002 fc9a 	bl	800313a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2302      	movs	r3, #2
 8000816:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	482b      	ldr	r0, [pc, #172]	; (80008cc <MX_GPIO_Init+0x168>)
 8000820:	f002 fb1a 	bl	8002e58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000828:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <MX_GPIO_Init+0x168>)
 800083e:	f002 fb0b 	bl	8002e58 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000846:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	481d      	ldr	r0, [pc, #116]	; (80008d0 <MX_GPIO_Init+0x16c>)
 800085c:	f002 fafc 	bl	8002e58 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0x174>)
 8000868:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_GPIO_Init+0x16c>)
 8000876:	f002 faef 	bl	8002e58 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	210a      	movs	r1, #10
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	f001 fec7 	bl	8002612 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000884:	2028      	movs	r0, #40	; 0x28
 8000886:	f001 fee0 	bl	800264a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088a:	2308      	movs	r3, #8
 800088c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0x170>)
 80008a2:	f002 fad9 	bl	8002e58 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008a6:	2310      	movs	r3, #16
 80008a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_GPIO_Init+0x170>)
 80008ba:	f002 facd 	bl	8002e58 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40010800 	.word	0x40010800
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	10210000 	.word	0x10210000

080008dc <EXTI15_10_IRQHandler>:

/*Configure GPIO pin INTERRUPT HANDLER */
void EXTI15_10_IRQHandler(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80008e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008e6:	f002 fc59 	bl	800319c <HAL_GPIO_EXTI_IRQHandler>

	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(OD_Task);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <EXTI15_10_IRQHandler+0x38>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fc48 	bl	8005184 <xTaskResumeFromISR>
 80008f4:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d007      	beq.n	800090c <EXTI15_10_IRQHandler+0x30>
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <EXTI15_10_IRQHandler+0x3c>)
 80008fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	f3bf 8f6f 	isb	sy
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20001bec 	.word	0x20001bec
 8000918:	e000ed04 	.word	0xe000ed04

0800091c <CAN_Filter_Config>:

/*Configure can filters */
void CAN_Filter_Config(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <CAN_Filter_Config+0x48>)
 800094c:	f001 f979 	bl	8001c42 <HAL_CAN_ConfigFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <CAN_Filter_Config+0x3e>
		Error_Handler();
 8000956:	f000 fa0d 	bl	8000d74 <Error_Handler>
	}
}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20001c4c 	.word	0x20001c4c

08000968 <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;  //Ticks to wait since routine starts
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000976:	f004 fd7d 	bl	8005474 <xTaskGetTickCount>
 800097a:	4603      	mov	r3, r0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		//buffer[0] = (uint8_t) (analog[0] >> 8) & 0xFF;  //bat CALIBRAR
		//buffer[1] = (uint8_t) analog[0] & 0xFF;

		uint8_t batbuff[2];
		batbuff[0] = (uint8_t) (analog[0] >> 8) & 0xFF;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <Bat_taskF+0x6c>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		batbuff[1] = (uint8_t) analog[0] & 0xFF;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <Bat_taskF+0x6c>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
		BatHeader.StdId = 0x650;
 800099a:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 800099e:	60bb      	str	r3, [r7, #8]
		BatHeader.IDE = CAN_ID_STD;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
		BatHeader.RTR = CAN_RTR_DATA;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009b0:	f107 0108 	add.w	r1, r7, #8
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <Bat_taskF+0x70>)
 80009b6:	f001 fa51 	bl	8001e5c <HAL_CAN_AddTxMessage>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <Bat_taskF+0x5c>
				!= HAL_OK) {
			Error_Handler();
 80009c0:	f000 f9d8 	bl	8000d74 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*1Hz frequency*/
 80009c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 fa94 	bl	8004ef8 <vTaskDelayUntil>
	while (1) {
 80009d0:	e7d5      	b.n	800097e <Bat_taskF+0x16>
 80009d2:	bf00      	nop
 80009d4:	20001be8 	.word	0x20001be8
 80009d8:	20001c4c 	.word	0x20001c4c

080009dc <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;  //Ticks to wait since routine starts
 80009e4:	2314      	movs	r3, #20
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 80009e8:	f004 fd44 	bl	8005474 <xTaskGetTickCount>
 80009ec:	4603      	mov	r3, r0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28

	while (1) {
		uint8_t fuelbuff[2];
		fuelbuff[0] = (uint8_t) (analog[1] >> 8) & 0xFF;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <Fuel_taskF+0x68>)
 80009f2:	885b      	ldrh	r3, [r3, #2]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		fuelbuff[1] = (uint8_t) analog[1] & 0xFF;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <Fuel_taskF+0x68>)
 8000a00:	885b      	ldrh	r3, [r3, #2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
		FuelHeader.StdId = 0x652;
 8000a0c:	f240 6352 	movw	r3, #1618	; 0x652
 8000a10:	60bb      	str	r3, [r7, #8]
		FuelHeader.IDE = CAN_ID_STD;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
		FuelHeader.RTR = CAN_RTR_DATA;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a22:	f107 0108 	add.w	r1, r7, #8
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <Fuel_taskF+0x6c>)
 8000a28:	f001 fa18 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <Fuel_taskF+0x5a>
				!= HAL_OK) {
			Error_Handler();
 8000a32:	f000 f99f 	bl	8000d74 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*50Hz frequency*/
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fa5b 	bl	8004ef8 <vTaskDelayUntil>
	while (1) {
 8000a42:	e7d5      	b.n	80009f0 <Fuel_taskF+0x14>
 8000a44:	20001be8 	.word	0x20001be8
 8000a48:	20001c4c 	.word	0x20001c4c

08000a4c <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000a54:	230a      	movs	r3, #10
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000a58:	f004 fd0c 	bl	8005474 <xTaskGetTickCount>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		uint8_t speedbuff[2];
		HAL_I2C_Master_Receive (&hi2c2, (0x4<<1), speedbuff, 2, 10);
 8000a60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a64:	230a      	movs	r3, #10
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2302      	movs	r3, #2
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <Speed_taskF+0x64>)
 8000a6e:	f002 fcdf 	bl	8003430 <HAL_I2C_Master_Receive>

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 8000a76:	f240 6353 	movw	r3, #1619	; 0x653
 8000a7a:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <Speed_taskF+0x68>)
 8000a92:	f001 f9e3 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <Speed_taskF+0x54>
				!= HAL_OK) {
			Error_Handler();
 8000a9c:	f000 f96a 	bl	8000d74 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fa26 	bl	8004ef8 <vTaskDelayUntil>
	while (1) {
 8000aac:	e7d8      	b.n	8000a60 <Speed_taskF+0x14>
 8000aae:	bf00      	nop
 8000ab0:	20001bf0 	.word	0x20001bf0
 8000ab4:	20001c4c 	.word	0x20001c4c

08000ab8 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000ac4:	f004 fcd6 	bl	8005474 <xTaskGetTickCount>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28

		//buffer[6] = (uint8_t) (analog[3] >> 8) & 0xFF;  //rpm CALIBRAR
		//buffer[7] = (uint8_t) analog[3] & 0xFF;

		uint8_t rpmbuff[2];
		HAL_I2C_Master_Receive (&hi2c2, (0x5<<1), rpmbuff, 2, 10);
 8000acc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	210a      	movs	r1, #10
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <RPM_taskF+0x64>)
 8000ada:	f002 fca9 	bl	8003430 <HAL_I2C_Master_Receive>

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
		RPMHeader.StdId = 0x654;
 8000ae2:	f240 6354 	movw	r3, #1620	; 0x654
 8000ae6:	60bb      	str	r3, [r7, #8]
		RPMHeader.IDE = CAN_ID_STD;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
		RPMHeader.RTR = CAN_RTR_DATA;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000af8:	f107 0108 	add.w	r1, r7, #8
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <RPM_taskF+0x68>)
 8000afe:	f001 f9ad 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <RPM_taskF+0x54>
				!= HAL_OK) {
			Error_Handler();
 8000b08:	f000 f934 	bl	8000d74 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 f9f0 	bl	8004ef8 <vTaskDelayUntil>
	while (1) {
 8000b18:	e7d8      	b.n	8000acc <RPM_taskF+0x14>
 8000b1a:	bf00      	nop
 8000b1c:	20001bf0 	.word	0x20001bf0
 8000b20:	20001c4c 	.word	0x20001c4c

08000b24 <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b092      	sub	sp, #72	; 0x48
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 8000b2c:	23c8      	movs	r3, #200	; 0xc8
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 8000b30:	f004 fca0 	bl	8005474 <xTaskGetTickCount>
 8000b34:	4603      	mov	r3, r0
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (1) {
		uint8_t tempdata[16];

		CSen
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3e:	484e      	ldr	r0, [pc, #312]	; (8000c78 <Temp_taskF+0x154>)
 8000b40:	f002 fafb 	bl	800313a <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
 8000b48:	e018      	b.n	8000b7c <Temp_taskF+0x58>
			SCK_H
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	484b      	ldr	r0, [pc, #300]	; (8000c7c <Temp_taskF+0x158>)
 8000b50:	f002 faf3 	bl	800313a <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000b54:	2110      	movs	r1, #16
 8000b56:	4849      	ldr	r0, [pc, #292]	; (8000c7c <Temp_taskF+0x158>)
 8000b58:	f002 fad8 	bl	800310c <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b66:	4413      	add	r3, r2
 8000b68:	460a      	mov	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
			SCK_L
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4842      	ldr	r0, [pc, #264]	; (8000c7c <Temp_taskF+0x158>)
 8000b72:	f002 fae2 	bl	800313a <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b78:	3301      	adds	r3, #1
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8000b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	dde3      	ble.n	8000b4a <Temp_taskF+0x26>
		}
		CSdis
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b88:	483b      	ldr	r0, [pc, #236]	; (8000c78 <Temp_taskF+0x154>)
 8000b8a:	f002 fad6 	bl	800313a <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 8000b8e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d146      	bne.n	8000c24 <Temp_taskF+0x100>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ba8:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000bb8:	4413      	add	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000bc0:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <Temp_taskF+0x15c>)
 8000bca:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <Temp_taskF+0x15c>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	b29a      	uxth	r2, r3
					+ tempdata[12];
 8000c16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <Temp_taskF+0x15c>)
 8000c22:	801a      	strh	r2, [r3, #0]
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <Temp_taskF+0x15c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <Temp_taskF+0x15c>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 8000c40:	f240 6351 	movw	r3, #1617	; 0x651
 8000c44:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <Temp_taskF+0x160>)
 8000c5c:	f001 f8fe 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <Temp_taskF+0x146>
				!= HAL_OK) {
			Error_Handler();
 8000c66:	f000 f885 	bl	8000d74 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f941 	bl	8004ef8 <vTaskDelayUntil>
	while (1) {
 8000c76:	e75f      	b.n	8000b38 <Temp_taskF+0x14>
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	20001cac 	.word	0x20001cac
 8000c84:	20001c4c 	.word	0x20001c4c

08000c88 <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	while (1) {

		vTaskSuspend(NULL);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f004 f9ab 	bl	8004fec <vTaskSuspend>
		PULSO += 1;
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <OD_taskF+0xb4>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <OD_taskF+0xb4>)
 8000ca0:	701a      	strb	r2, [r3, #0]
		if (PULSO == 1) { //ODOMETRO 100m A CADA 58 VOLTAS!!!
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <OD_taskF+0xb4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1f2      	bne.n	8000c90 <OD_taskF+0x8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <OD_taskF+0xb8>)
 8000cb0:	f002 fa5b 	bl	800316a <HAL_GPIO_TogglePin>
			PULSO = 0;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <OD_taskF+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
			uint8_t odbuff[4];

			OD = Flash_Read_NUM(0x0801FC00);
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <OD_taskF+0xbc>)
 8000cbc:	f7ff fb3c 	bl	8000338 <Flash_Read_NUM>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <OD_taskF+0xc0>)
 8000cc4:	601a      	str	r2, [r3, #0]
			OD += 100;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <OD_taskF+0xc0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3364      	adds	r3, #100	; 0x64
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <OD_taskF+0xc0>)
 8000cce:	6013      	str	r3, [r2, #0]
			Flash_Write_NUM(0x0801FC00, OD);
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <OD_taskF+0xc0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481b      	ldr	r0, [pc, #108]	; (8000d44 <OD_taskF+0xbc>)
 8000cd8:	f7ff fb1a 	bl	8000310 <Flash_Write_NUM>
			odbuff[0] = (uint8_t) (OD >> 24) & 0xFF;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <OD_taskF+0xc0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0e1b      	lsrs	r3, r3, #24
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			odbuff[1] = (uint8_t) (OD >> 16) & 0xFF;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <OD_taskF+0xc0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0c1b      	lsrs	r3, r3, #16
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			odbuff[2] = (uint8_t) (OD >> 8) & 0xFF;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <OD_taskF+0xc0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			odbuff[3] = (uint8_t) OD & 0xFF;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <OD_taskF+0xc0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			uint32_t TxMailbox;

			CAN_TxHeaderTypeDef odHeader;

			odHeader.DLC = 4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
			odHeader.StdId = 0x655;
 8000d0e:	f240 6355 	movw	r3, #1621	; 0x655
 8000d12:	60bb      	str	r3, [r7, #8]
			odHeader.IDE = CAN_ID_STD;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
			odHeader.RTR = CAN_RTR_DATA;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

			if (HAL_CAN_AddTxMessage(&hcan, &odHeader, odbuff, &TxMailbox)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d24:	f107 0108 	add.w	r1, r7, #8
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <OD_taskF+0xc4>)
 8000d2a:	f001 f897 	bl	8001e5c <HAL_CAN_AddTxMessage>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0ad      	beq.n	8000c90 <OD_taskF+0x8>
					!= HAL_OK) {
				Error_Handler();
 8000d34:	f000 f81e 	bl	8000d74 <Error_Handler>
		vTaskSuspend(NULL);
 8000d38:	e7aa      	b.n	8000c90 <OD_taskF+0x8>
 8000d3a:	bf00      	nop
 8000d3c:	20000294 	.word	0x20000294
 8000d40:	40011000 	.word	0x40011000
 8000d44:	0801fc00 	.word	0x0801fc00
 8000d48:	20000290 	.word	0x20000290
 8000d4c:	20001c4c 	.word	0x20001c4c

08000d50 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d62:	f000 fa79 	bl	8001258 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00

08000d74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_MspInit+0x68>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_MspInit+0x68>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_MspInit+0x68>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x68>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_MspInit+0x68>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x68>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f001 fc28 	bl	8002612 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x6c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_MspInit+0x6c>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d124      	bne.n	8000e5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e1a:	61d3      	str	r3, [r2, #28]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e46:	2312      	movs	r3, #18
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_I2C_MspInit+0x7c>)
 8000e56:	f001 ffff 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40005800 	.word	0x40005800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <HAL_ADC_MspInit+0xe8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d15f      	bne.n	8000f50 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_ADC_MspInit+0xec>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481e      	ldr	r0, [pc, #120]	; (8000f60 <HAL_ADC_MspInit+0xf0>)
 8000ee8:	f001 ffb6 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eec:	2303      	movs	r3, #3
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <HAL_ADC_MspInit+0xf4>)
 8000efc:	f001 ffac 	bl	8002e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_ADC_MspInit+0xfc>)
 8000f04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f36:	f001 fb97 	bl	8002668 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000f40:	f7ff ff18 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f48:	621a      	str	r2, [r3, #32]
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_ADC_MspInit+0xf8>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012400 	.word	0x40012400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	20001cb0 	.word	0x20001cb0
 8000f6c:	40020008 	.word	0x40020008

08000f70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a35      	ldr	r2, [pc, #212]	; (8001060 <HAL_CAN_MspInit+0xf0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d163      	bne.n	8001058 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <HAL_CAN_MspInit+0xf4>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4824      	ldr	r0, [pc, #144]	; (8001068 <HAL_CAN_MspInit+0xf8>)
 8000fd6:	f001 ff3f 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	481e      	ldr	r0, [pc, #120]	; (8001068 <HAL_CAN_MspInit+0xf8>)
 8000ff0:	f001 ff32 	bl	8002e58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_CAN_MspInit+0xfc>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_CAN_MspInit+0xfc>)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2105      	movs	r1, #5
 800101c:	2013      	movs	r0, #19
 800101e:	f001 faf8 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001022:	2013      	movs	r0, #19
 8001024:	f001 fb11 	bl	800264a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2105      	movs	r1, #5
 800102c:	2014      	movs	r0, #20
 800102e:	f001 faf0 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001032:	2014      	movs	r0, #20
 8001034:	f001 fb09 	bl	800264a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2105      	movs	r1, #5
 800103c:	2015      	movs	r0, #21
 800103e:	f001 fae8 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001042:	2015      	movs	r0, #21
 8001044:	f001 fb01 	bl	800264a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2105      	movs	r1, #5
 800104c:	2016      	movs	r0, #22
 800104e:	f001 fae0 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001052:	2016      	movs	r0, #22
 8001054:	f001 faf9 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40006400 	.word	0x40006400
 8001064:	40021000 	.word	0x40021000
 8001068:	40010c00 	.word	0x40010c00
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2019      	movs	r0, #25
 8001086:	f001 fac4 	bl	8002612 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800108a:	2019      	movs	r0, #25
 800108c:	f001 fadd 	bl	800264a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_InitTick+0x9c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <HAL_InitTick+0x9c>)
 8001096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_InitTick+0x9c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f9ca 	bl	800444c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010b8:	f003 f9b4 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 80010bc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_InitTick+0xa0>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3b01      	subs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0xa4>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_InitTick+0xa8>)
 80010d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_InitTick+0xa4>)
 80010d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_InitTick+0xa4>)
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_InitTick+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_InitTick+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_InitTick+0xa4>)
 80010ee:	f003 fab1 	bl	8004654 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <HAL_InitTick+0xa4>)
 80010fa:	f003 fadf 	bl	80046bc <HAL_TIM_Base_Start_IT>
 80010fe:	4603      	mov	r3, r0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	431bde83 	.word	0x431bde83
 8001114:	20001cf8 	.word	0x20001cf8
 8001118:	40012c00 	.word	0x40012c00

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <HardFault_Handler+0x4>

0800112e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <BusFault_Handler+0x4>

0800113a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <UsageFault_Handler+0x4>

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA1_Channel1_IRQHandler+0x10>)
 8001152:	f001 fb43 	bl	80027dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20001cb0 	.word	0x20001cb0

08001160 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001166:	f000 ff78 	bl	800205a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20001c4c 	.word	0x20001c4c

08001174 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800117a:	f000 ff6e 	bl	800205a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20001c4c 	.word	0x20001c4c

08001188 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <CAN1_RX1_IRQHandler+0x10>)
 800118e:	f000 ff64 	bl	800205a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001c4c 	.word	0x20001c4c

0800119c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <CAN1_SCE_IRQHandler+0x10>)
 80011a2:	f000 ff5a 	bl	800205a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001c4c 	.word	0x20001c4c

080011b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_UP_IRQHandler+0x10>)
 80011b6:	f003 faa4 	bl	8004702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20001cf8 	.word	0x20001cf8

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <SystemInit+0x5c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <SystemInit+0x5c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SystemInit+0x5c>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4911      	ldr	r1, [pc, #68]	; (8001220 <SystemInit+0x5c>)
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SystemInit+0x60>)
 80011dc:	4013      	ands	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <SystemInit+0x5c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <SystemInit+0x5c>)
 80011e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <SystemInit+0x5c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SystemInit+0x5c>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <SystemInit+0x5c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <SystemInit+0x5c>)
 8001202:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001206:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SystemInit+0x5c>)
 800120a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800120e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SystemInit+0x64>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	609a      	str	r2, [r3, #8]
#endif 
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	f8ff0000 	.word	0xf8ff0000
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_Init+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_Init+0x28>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f001 f9dd 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ff14 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fd9a 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_IncTick+0x20>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000008 	.word	0x20000008
 8001278:	20001d38 	.word	0x20001d38

0800127c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20001d38 	.word	0x20001d38

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fff0 	bl	800127c <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_Delay+0x40>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffe0 	bl	800127c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0be      	b.n	8001474 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fdac 	bl	8000e70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 faf7 	bl	800190c <ADC_ConversionStop_Disable>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 8099 	bne.w	8001462 <HAL_ADC_Init+0x18e>
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 8095 	bne.w	8001462 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001354:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7b1b      	ldrb	r3, [r3, #12]
 800135a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800135c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4313      	orrs	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800136c:	d003      	beq.n	8001376 <HAL_ADC_Init+0xa2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d102      	bne.n	800137c <HAL_ADC_Init+0xa8>
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	e000      	b.n	800137e <HAL_ADC_Init+0xaa>
 800137c:	2300      	movs	r3, #0
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7d1b      	ldrb	r3, [r3, #20]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d119      	bne.n	80013c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7b1b      	ldrb	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	3b01      	subs	r3, #1
 800139a:	035a      	lsls	r2, r3, #13
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	e00b      	b.n	80013c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_ADC_Init+0x1a8>)
 80013dc:	4013      	ands	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d003      	beq.n	80013fa <HAL_ADC_Init+0x126>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d104      	bne.n	8001404 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	3b01      	subs	r3, #1
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	430a      	orrs	r2, r1
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_ADC_Init+0x1ac>)
 8001420:	4013      	ands	r3, r2
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800143e:	e018      	b.n	8001472 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f023 0312 	bic.w	r3, r3, #18
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001460:	e007      	b.n	8001472 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001472:	7dfb      	ldrb	r3, [r7, #23]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	ffe1f7fd 	.word	0xffe1f7fd
 8001480:	ff1f0efe 	.word	0xff1f0efe

08001484 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_Start_DMA+0x24>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a63      	ldr	r2, [pc, #396]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x32>
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 80b3 	bne.w	800161c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x40>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e0ae      	b.n	8001622 <HAL_ADC_Start_DMA+0x19e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f9cb 	bl	8001868 <ADC_Enable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 809a 	bne.w	8001612 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d105      	bne.n	8001508 <HAL_ADC_Start_DMA+0x84>
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d115      	bne.n	8001534 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d026      	beq.n	8001570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001532:	e01d      	b.n	8001570 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a39      	ldr	r2, [pc, #228]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d004      	beq.n	8001554 <HAL_ADC_Start_DMA+0xd0>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a38      	ldr	r2, [pc, #224]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10d      	bne.n	8001570 <HAL_ADC_Start_DMA+0xec>
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	f023 0206 	bic.w	r2, r3, #6
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
 8001588:	e002      	b.n	8001590 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <HAL_ADC_Start_DMA+0x1b0>)
 800159e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_ADC_Start_DMA+0x1b4>)
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_ADC_Start_DMA+0x1b8>)
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0202 	mvn.w	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a18      	ldr	r0, [r3, #32]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	334c      	adds	r3, #76	; 0x4c
 80015d4:	4619      	mov	r1, r3
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f001 f89f 	bl	800271c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015fe:	e00f      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800160e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001610:	e006      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800161a:	e001      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40012400 	.word	0x40012400
 8001630:	40012800 	.word	0x40012800
 8001634:	08001981 	.word	0x08001981
 8001638:	080019fd 	.word	0x080019fd
 800163c:	08001a19 	.word	0x08001a19

08001640 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x20>
 8001694:	2302      	movs	r3, #2
 8001696:	e0dc      	b.n	8001852 <HAL_ADC_ConfigChannel+0x1da>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d81c      	bhi.n	80016e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	221f      	movs	r2, #31
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4019      	ands	r1, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	3b05      	subs	r3, #5
 80016d4:	fa00 f203 	lsl.w	r2, r0, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
 80016e0:	e03c      	b.n	800175c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d81c      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b23      	subs	r3, #35	; 0x23
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	4019      	ands	r1, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	; 0x23
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
 8001722:	e01b      	b.n	800175c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b41      	subs	r3, #65	; 0x41
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d91c      	bls.n	800179e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	3b1e      	subs	r3, #30
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	3b1e      	subs	r3, #30
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	e019      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6898      	ldr	r0, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d132      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_ADC_ConfigChannel+0x1e4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d125      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d126      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001808:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d11a      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_ADC_ConfigChannel+0x1e8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_ADC_ConfigChannel+0x1ec>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9a      	lsrs	r2, r3, #18
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001828:	e002      	b.n	8001830 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3b01      	subs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_ConfigChannel+0x1b2>
 8001836:	e007      	b.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f043 0220 	orr.w	r2, r3, #32
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40012400 	.word	0x40012400
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d039      	beq.n	80018fa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <ADC_Enable+0x9c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <ADC_Enable+0xa0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018a4:	e002      	b.n	80018ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fce3 	bl	800127c <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018b8:	e018      	b.n	80018ec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ba:	f7ff fcdf 	bl	800127c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d911      	bls.n	80018ec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e007      	b.n	80018fc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d1df      	bne.n	80018ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d127      	bne.n	8001976 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001936:	f7ff fca1 	bl	800127c <HAL_GetTick>
 800193a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800193c:	e014      	b.n	8001968 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800193e:	f7ff fc9d 	bl	800127c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d90d      	bls.n	8001968 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f043 0210 	orr.w	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e007      	b.n	8001978 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d0e3      	beq.n	800193e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001996:	2b00      	cmp	r3, #0
 8001998:	d127      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019b4:	d115      	bne.n	80019e2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d111      	bne.n	80019e2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff fe2c 	bl	8001640 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019e8:	e004      	b.n	80019f4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fe21 	bl	8001652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f043 0204 	orr.w	r2, r3, #4
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff fe10 	bl	8001664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0ed      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fa80 	bl	8000f70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0202 	bic.w	r2, r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fbfc 	bl	800127c <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a86:	e012      	b.n	8001aae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a88:	f7ff fbf8 	bl	800127c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b0a      	cmp	r3, #10
 8001a94:	d90b      	bls.n	8001aae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0c5      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e5      	bne.n	8001a88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff fbd6 	bl	800127c <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	e012      	b.n	8001afa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad4:	f7ff fbd2 	bl	800127c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d90b      	bls.n	8001afa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2205      	movs	r2, #5
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e09f      	b.n	8001c3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0e5      	beq.n	8001ad4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e007      	b.n	8001b32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e5b      	ldrb	r3, [r3, #25]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7e9b      	ldrb	r3, [r3, #26]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0220 	bic.w	r2, r2, #32
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7edb      	ldrb	r3, [r3, #27]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0210 	bic.w	r2, r2, #16
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0210 	orr.w	r2, r2, #16
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f1b      	ldrb	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0208 	bic.w	r2, r2, #8
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7f5b      	ldrb	r3, [r3, #29]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0204 	orr.w	r2, r2, #4
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e007      	b.n	8001c04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	ea42 0103 	orr.w	r1, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_ConfigFilter+0x26>
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f040 80aa 	bne.w	8001dbc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c6e:	f043 0201 	orr.w	r2, r3, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2201      	movs	r2, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d123      	bne.n	8001cea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	401a      	ands	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3248      	adds	r2, #72	; 0x48
 8001cca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce0:	6979      	ldr	r1, [r7, #20]
 8001ce2:	3348      	adds	r3, #72	; 0x48
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d122      	bne.n	8001d38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3248      	adds	r2, #72	; 0x48
 8001d18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d52:	e007      	b.n	8001d64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d7e:	e007      	b.n	8001d90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dae:	f023 0201 	bic.w	r2, r3, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d12e      	bne.n	8001e46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fa3c 	bl	800127c <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e06:	e012      	b.n	8001e2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e08:	f7ff fa38 	bl	800127c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d90b      	bls.n	8001e2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2205      	movs	r2, #5
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e012      	b.n	8001e54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e5      	bne.n	8001e08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e006      	b.n	8001e54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_AddTxMessage+0x2c>
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	f040 80b8 	bne.w	8001ff8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a0 	beq.w	8001fe8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	0e1b      	lsrs	r3, r3, #24
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e09e      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3318      	adds	r3, #24
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	440b      	add	r3, r1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e00f      	b.n	8001f16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3318      	adds	r3, #24
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3318      	adds	r3, #24
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	440b      	add	r3, r1
 8001f26:	3304      	adds	r3, #4
 8001f28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	7d1b      	ldrb	r3, [r3, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d111      	bne.n	8001f56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3318      	adds	r3, #24
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3307      	adds	r3, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	061a      	lsls	r2, r3, #24
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3306      	adds	r3, #6
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3305      	adds	r3, #5
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	4313      	orrs	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	3204      	adds	r2, #4
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	ea43 0200 	orr.w	r2, r3, r0
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3303      	adds	r3, #3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	4610      	mov	r0, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	6811      	ldr	r1, [r2, #0]
 8001fb4:	ea43 0200 	orr.w	r2, r3, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3318      	adds	r3, #24
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e00e      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e006      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002020:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <HAL_CAN_ActivateNotification+0x1e>
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d109      	bne.n	8002042 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6959      	ldr	r1, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e006      	b.n	8002050 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08a      	sub	sp, #40	; 0x28
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d07c      	beq.n	800219a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d023      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f97d 	bl	80023bc <HAL_CAN_TxMailbox0CompleteCallback>
 80020c2:	e016      	b.n	80020f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	e00c      	b.n	80020f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e002      	b.n	80020f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f980 	bl	80023f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d024      	beq.n	8002146 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002104:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f95c 	bl	80023ce <HAL_CAN_TxMailbox1CompleteCallback>
 8002116:	e016      	b.n	8002146 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	e00c      	b.n	8002146 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e002      	b.n	8002146 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f95f 	bl	8002404 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d024      	beq.n	800219a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002158:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f93b 	bl	80023e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800216a:	e016      	b.n	800219a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e00c      	b.n	800219a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	e002      	b.n	800219a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f93e 	bl	8002416 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00c      	beq.n	80021be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2210      	movs	r2, #16
 80021bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2208      	movs	r2, #8
 80021d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f92d 	bl	800243a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f915 	bl	8002428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002218:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2208      	movs	r2, #8
 800223c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f90d 	bl	800245e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8f5 	bl	800244c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2210      	movs	r2, #16
 800227c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8f6 	bl	8002470 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2208      	movs	r2, #8
 800229e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f8ee 	bl	8002482 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d075      	beq.n	800239c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03d      	beq.n	8002394 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d038      	beq.n	8002394 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002328:	2b30      	cmp	r3, #48	; 0x30
 800232a:	d017      	beq.n	800235c <HAL_CAN_IRQHandler+0x302>
 800232c:	2b30      	cmp	r3, #48	; 0x30
 800232e:	d804      	bhi.n	800233a <HAL_CAN_IRQHandler+0x2e0>
 8002330:	2b10      	cmp	r3, #16
 8002332:	d009      	beq.n	8002348 <HAL_CAN_IRQHandler+0x2ee>
 8002334:	2b20      	cmp	r3, #32
 8002336:	d00c      	beq.n	8002352 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002338:	e024      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800233a:	2b50      	cmp	r3, #80	; 0x50
 800233c:	d018      	beq.n	8002370 <HAL_CAN_IRQHandler+0x316>
 800233e:	2b60      	cmp	r3, #96	; 0x60
 8002340:	d01b      	beq.n	800237a <HAL_CAN_IRQHandler+0x320>
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d00f      	beq.n	8002366 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002346:	e01d      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002350:	e018      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235a:	e013      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002364:	e00e      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800236e:	e009      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002378:	e004      	b.n	8002384 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002382:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002392:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2204      	movs	r2, #4
 800239a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f870 	bl	8002494 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4906      	ldr	r1, [pc, #24]	; (8002540 <__NVIC_EnableIRQ+0x34>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff4f 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff64 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ffb2 	bl	8002598 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff81 	bl	8002544 <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff57 	bl	800250c <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e043      	b.n	8002706 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_DMA_Init+0xa8>)
 8002686:	4413      	add	r3, r2
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Init+0xac>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_DMA_Init+0xb0>)
 800269a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	bffdfff8 	.word	0xbffdfff8
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	40020000 	.word	0x40020000

0800271c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_DMA_Start_IT+0x20>
 8002738:	2302      	movs	r3, #2
 800273a:	e04a      	b.n	80027d2 <HAL_DMA_Start_IT+0xb6>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274a:	2b01      	cmp	r3, #1
 800274c:	d13a      	bne.n	80027c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f938 	bl	80029e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 020e 	orr.w	r2, r2, #14
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e00f      	b.n	80027b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0204 	bic.w	r2, r2, #4
 80027a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 020a 	orr.w	r2, r2, #10
 80027b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e005      	b.n	80027d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2204      	movs	r2, #4
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d04f      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xc8>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_DMA_IRQHandler+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d029      	beq.n	800288a <HAL_DMA_IRQHandler+0xae>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_DMA_IRQHandler+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_IRQHandler+0xaa>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0xa4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a62      	ldr	r2, [pc, #392]	; (80029d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0x9e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_DMA_IRQHandler+0x200>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x98>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5f      	ldr	r2, [pc, #380]	; (80029e0 <HAL_DMA_IRQHandler+0x204>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_DMA_IRQHandler+0x92>
 8002868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800286c:	e00e      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800286e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002872:	e00b      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002878:	e008      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800287a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287e:	e005      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002884:	e002      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	e000      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800288a:	2304      	movs	r3, #4
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_DMA_IRQHandler+0x208>)
 800288e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8094 	beq.w	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028a2:	e08e      	b.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2202      	movs	r2, #2
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d056      	beq.n	8002962 <HAL_DMA_IRQHandler+0x186>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d051      	beq.n	8002962 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020a 	bic.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_DMA_IRQHandler+0x1f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d029      	beq.n	8002942 <HAL_DMA_IRQHandler+0x166>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_DMA_IRQHandler+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_IRQHandler+0x162>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <HAL_DMA_IRQHandler+0x1f8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x15c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d012      	beq.n	8002932 <HAL_DMA_IRQHandler+0x156>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_DMA_IRQHandler+0x200>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00a      	beq.n	800292c <HAL_DMA_IRQHandler+0x150>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <HAL_DMA_IRQHandler+0x204>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d102      	bne.n	8002926 <HAL_DMA_IRQHandler+0x14a>
 8002920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002924:	e00e      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292a:	e00b      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	e008      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002936:	e005      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293c:	e002      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 800293e:	2320      	movs	r3, #32
 8002940:	e000      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002942:	2302      	movs	r3, #2
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_DMA_IRQHandler+0x208>)
 8002946:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d034      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002960:	e02f      	b.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020e 	bic.w	r2, r2, #14
 800298a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
    }
  }
  return;
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
}
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40020008 	.word	0x40020008
 80029d0:	4002001c 	.word	0x4002001c
 80029d4:	40020030 	.word	0x40020030
 80029d8:	40020044 	.word	0x40020044
 80029dc:	40020058 	.word	0x40020058
 80029e0:	4002006c 	.word	0x4002006c
 80029e4:	40020000 	.word	0x40020000

080029e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d108      	bne.n	8002a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a26:	e007      	b.n	8002a38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_FLASH_Program+0xd8>)
 8002a60:	7e1b      	ldrb	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_FLASH_Program+0x26>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e054      	b.n	8002b14 <HAL_FLASH_Program+0xd0>
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_FLASH_Program+0xd8>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a74:	f000 f8b2 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d144      	bne.n	8002b0c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	757b      	strb	r3, [r7, #21]
 8002a8c:	e007      	b.n	8002a9e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d102      	bne.n	8002a9a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002a94:	2302      	movs	r3, #2
 8002a96:	757b      	strb	r3, [r7, #21]
 8002a98:	e001      	b.n	8002a9e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75bb      	strb	r3, [r7, #22]
 8002aa2:	e02d      	b.n	8002b00 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	005a      	lsls	r2, r3, #1
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	eb02 0c03 	add.w	ip, r2, r3
 8002aae:	7dbb      	ldrb	r3, [r7, #22]
 8002ab0:	0119      	lsls	r1, r3, #4
 8002ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab6:	f1c1 0620 	rsb	r6, r1, #32
 8002aba:	f1a1 0020 	sub.w	r0, r1, #32
 8002abe:	fa22 f401 	lsr.w	r4, r2, r1
 8002ac2:	fa03 f606 	lsl.w	r6, r3, r6
 8002ac6:	4334      	orrs	r4, r6
 8002ac8:	fa23 f000 	lsr.w	r0, r3, r0
 8002acc:	4304      	orrs	r4, r0
 8002ace:	fa23 f501 	lsr.w	r5, r3, r1
 8002ad2:	b2a3      	uxth	r3, r4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4660      	mov	r0, ip
 8002ad8:	f000 f864 	bl	8002ba4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002adc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ae0:	f000 f87c 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_FLASH_Program+0xdc>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_FLASH_Program+0xdc>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002afa:	7dbb      	ldrb	r3, [r7, #22]
 8002afc:	3301      	adds	r3, #1
 8002afe:	75bb      	strb	r3, [r7, #22]
 8002b00:	7dba      	ldrb	r2, [r7, #22]
 8002b02:	7d7b      	ldrb	r3, [r7, #21]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3cd      	bcc.n	8002aa4 <HAL_FLASH_Program+0x60>
 8002b08:	e000      	b.n	8002b0c <HAL_FLASH_Program+0xc8>
      {
        break;
 8002b0a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_FLASH_Program+0xd8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	761a      	strb	r2, [r3, #24]

  return status;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1c:	20001d40 	.word	0x20001d40
 8002b20:	40022000 	.word	0x40022000

08002b24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_FLASH_Unlock+0x40>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_FLASH_Unlock+0x40>)
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_FLASH_Unlock+0x44>)
 8002b3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_FLASH_Unlock+0x40>)
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_FLASH_Unlock+0x48>)
 8002b44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_FLASH_Unlock+0x40>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002b56:	79fb      	ldrb	r3, [r7, #7]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40022000 	.word	0x40022000
 8002b68:	45670123 	.word	0x45670123
 8002b6c:	cdef89ab 	.word	0xcdef89ab

08002b70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_FLASH_Lock+0x1c>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_FLASH_Lock+0x1c>)
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000

08002b90 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_FLASH_GetError+0x10>)
 8002b96:	69db      	ldr	r3, [r3, #28]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20001d40 	.word	0x20001d40

08002ba4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <FLASH_Program_HalfWord+0x30>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <FLASH_Program_HalfWord+0x34>)
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <FLASH_Program_HalfWord+0x34>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	801a      	strh	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20001d40 	.word	0x20001d40
 8002bd8:	40022000 	.word	0x40022000

08002bdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7fe fb4a 	bl	800127c <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002bea:	e010      	b.n	8002c0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d00c      	beq.n	8002c0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <FLASH_WaitForLastOperation+0x2e>
 8002bfa:	f7fe fb3f 	bl	800127c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d201      	bcs.n	8002c0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e025      	b.n	8002c5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e8      	bne.n	8002bec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c28:	2220      	movs	r2, #32
 8002c2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <FLASH_WaitForLastOperation+0x88>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c50:	f000 f80a 	bl	8002c68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000

08002c68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c7e:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002c88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002ca8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <FLASH_SetErrorCode+0x9c>)
 8002cc8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f240 1201 	movw	r2, #257	; 0x101
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d106      	bne.n	8002cee <FLASH_SetErrorCode+0x86>
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	61d3      	str	r3, [r2, #28]
}  
 8002cec:	e002      	b.n	8002cf4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <FLASH_SetErrorCode+0x98>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60d3      	str	r3, [r2, #12]
}  
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	20001d40 	.word	0x20001d40

08002d08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d1c:	7e1b      	ldrb	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_FLASHEx_Erase+0x1e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e053      	b.n	8002dce <HAL_FLASHEx_Erase+0xc6>
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d116      	bne.n	8002d62 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d38:	f7ff ff50 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d141      	bne.n	8002dc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f000 f84c 	bl	8002de0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d4c:	f7ff ff46 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_FLASHEx_Erase+0xd4>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_FLASHEx_Erase+0xd4>)
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	6113      	str	r3, [r2, #16]
 8002d60:	e031      	b.n	8002dc6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d66:	f7ff ff39 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d12a      	bne.n	8002dc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f04f 32ff 	mov.w	r2, #4294967295
 8002d76:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e019      	b.n	8002db4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002d80:	68b8      	ldr	r0, [r7, #8]
 8002d82:	f000 f849 	bl	8002e18 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d8a:	f7ff ff27 	bl	8002bdc <FLASH_WaitForLastOperation>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_FLASHEx_Erase+0xd4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_FLASHEx_Erase+0xd4>)
 8002d98:	f023 0302 	bic.w	r3, r3, #2
 8002d9c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	601a      	str	r2, [r3, #0]
            break;
 8002daa:	e00c      	b.n	8002dc6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	029a      	lsls	r2, r3, #10
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3dc      	bcc.n	8002d80 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	761a      	strb	r2, [r3, #24]

  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20001d40 	.word	0x20001d40
 8002ddc:	40022000 	.word	0x40022000

08002de0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <FLASH_MassErase+0x30>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <FLASH_MassErase+0x34>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <FLASH_MassErase+0x34>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <FLASH_MassErase+0x34>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <FLASH_MassErase+0x34>)
 8002e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e04:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	20001d40 	.word	0x20001d40
 8002e14:	40022000 	.word	0x40022000

08002e18 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <FLASH_PageErase+0x38>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <FLASH_PageErase+0x3c>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <FLASH_PageErase+0x3c>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <FLASH_PageErase+0x3c>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <FLASH_PageErase+0x3c>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <FLASH_PageErase+0x3c>)
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20001d40 	.word	0x20001d40
 8002e54:	40022000 	.word	0x40022000

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e127      	b.n	80030bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8116 	bne.w	80030b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b12      	cmp	r3, #18
 8002e90:	d034      	beq.n	8002efc <HAL_GPIO_Init+0xa4>
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d80d      	bhi.n	8002eb2 <HAL_GPIO_Init+0x5a>
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x9a>
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d804      	bhi.n	8002ea8 <HAL_GPIO_Init+0x50>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d031      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ea6:	e048      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d043      	beq.n	8002f34 <HAL_GPIO_Init+0xdc>
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d01b      	beq.n	8002ee8 <HAL_GPIO_Init+0x90>
          break;
 8002eb0:	e043      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_GPIO_Init+0x280>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d026      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002eb8:	4a87      	ldr	r2, [pc, #540]	; (80030d8 <HAL_GPIO_Init+0x280>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d806      	bhi.n	8002ecc <HAL_GPIO_Init+0x74>
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_GPIO_Init+0x284>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d020      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ec4:	4a86      	ldr	r2, [pc, #536]	; (80030e0 <HAL_GPIO_Init+0x288>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
          break;
 8002eca:	e036      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ecc:	4a85      	ldr	r2, [pc, #532]	; (80030e4 <HAL_GPIO_Init+0x28c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ed2:	4a85      	ldr	r2, [pc, #532]	; (80030e8 <HAL_GPIO_Init+0x290>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d016      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ed8:	4a84      	ldr	r2, [pc, #528]	; (80030ec <HAL_GPIO_Init+0x294>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
          break;
 8002ede:	e02c      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e028      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e023      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e01e      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	330c      	adds	r3, #12
 8002f02:	623b      	str	r3, [r7, #32]
          break;
 8002f04:	e019      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e012      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	611a      	str	r2, [r3, #16]
          break;
 8002f26:	e008      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f28:	2308      	movs	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	615a      	str	r2, [r3, #20]
          break;
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
          break;
 8002f38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2bff      	cmp	r3, #255	; 0xff
 8002f3e:	d801      	bhi.n	8002f44 <HAL_GPIO_Init+0xec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	e001      	b.n	8002f48 <HAL_GPIO_Init+0xf0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d802      	bhi.n	8002f56 <HAL_GPIO_Init+0xfe>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x104>
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3b08      	subs	r3, #8
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	210f      	movs	r1, #15
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8096 	beq.w	80030b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6193      	str	r3, [r2, #24]
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fa2:	4a54      	ldr	r2, [pc, #336]	; (80030f4 <HAL_GPIO_Init+0x29c>)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4b      	ldr	r2, [pc, #300]	; (80030f8 <HAL_GPIO_Init+0x2a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x19e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4a      	ldr	r2, [pc, #296]	; (80030fc <HAL_GPIO_Init+0x2a4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x19a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	; (8003100 <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x196>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a48      	ldr	r2, [pc, #288]	; (8003104 <HAL_GPIO_Init+0x2ac>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x192>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003008:	493a      	ldr	r1, [pc, #232]	; (80030f4 <HAL_GPIO_Init+0x29c>)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4938      	ldr	r1, [pc, #224]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	43db      	mvns	r3, r3
 8003038:	4933      	ldr	r1, [pc, #204]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800303a:	4013      	ands	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	492e      	ldr	r1, [pc, #184]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	e006      	b.n	8003066 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	43db      	mvns	r3, r3
 8003060:	4929      	ldr	r1, [pc, #164]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003062:	4013      	ands	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	4924      	ldr	r1, [pc, #144]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	e006      	b.n	800308e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	43db      	mvns	r3, r3
 8003088:	491f      	ldr	r1, [pc, #124]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800308a:	4013      	ands	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	491a      	ldr	r1, [pc, #104]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4915      	ldr	r1, [pc, #84]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f aed0 	bne.w	8002e6c <HAL_GPIO_Init+0x14>
  }
}
 80030cc:	bf00      	nop
 80030ce:	372c      	adds	r7, #44	; 0x2c
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	10210000 	.word	0x10210000
 80030dc:	10110000 	.word	0x10110000
 80030e0:	10120000 	.word	0x10120000
 80030e4:	10310000 	.word	0x10310000
 80030e8:	10320000 	.word	0x10320000
 80030ec:	10220000 	.word	0x10220000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40010c00 	.word	0x40010c00
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e001      	b.n	800312e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
 8003146:	4613      	mov	r3, r2
 8003148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314a:	787b      	ldrb	r3, [r7, #1]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003156:	e003      	b.n	8003160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003188:	e002      	b.n	8003190 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d006      	beq.n	80031c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f806 	bl	80031cc <HAL_GPIO_EXTI_Callback>
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40010400 	.word	0x40010400

080031cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e10f      	b.n	8003412 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fdf2 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003224:	f001 f8ea 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a7b      	ldr	r2, [pc, #492]	; (800341c <HAL_I2C_Init+0x23c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d807      	bhi.n	8003244 <HAL_I2C_Init+0x64>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a7a      	ldr	r2, [pc, #488]	; (8003420 <HAL_I2C_Init+0x240>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf94      	ite	ls
 800323c:	2301      	movls	r3, #1
 800323e:	2300      	movhi	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e006      	b.n	8003252 <HAL_I2C_Init+0x72>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a77      	ldr	r2, [pc, #476]	; (8003424 <HAL_I2C_Init+0x244>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0db      	b.n	8003412 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a72      	ldr	r2, [pc, #456]	; (8003428 <HAL_I2C_Init+0x248>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0c9b      	lsrs	r3, r3, #18
 8003264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a64      	ldr	r2, [pc, #400]	; (800341c <HAL_I2C_Init+0x23c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d802      	bhi.n	8003294 <HAL_I2C_Init+0xb4>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3301      	adds	r3, #1
 8003292:	e009      	b.n	80032a8 <HAL_I2C_Init+0xc8>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_I2C_Init+0x24c>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	3301      	adds	r3, #1
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4956      	ldr	r1, [pc, #344]	; (800341c <HAL_I2C_Init+0x23c>)
 80032c4:	428b      	cmp	r3, r1
 80032c6:	d80d      	bhi.n	80032e4 <HAL_I2C_Init+0x104>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e59      	subs	r1, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b04      	cmp	r3, #4
 80032de:	bf38      	it	cc
 80032e0:	2304      	movcc	r3, #4
 80032e2:	e04f      	b.n	8003384 <HAL_I2C_Init+0x1a4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_I2C_Init+0x130>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e012      	b.n	8003336 <HAL_I2C_Init+0x156>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Init+0x15e>
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_I2C_Init+0x1a4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <HAL_I2C_Init+0x184>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1e58      	subs	r0, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	440b      	add	r3, r1
 8003354:	fbb0 f3f3 	udiv	r3, r0, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	e00f      	b.n	8003384 <HAL_I2C_Init+0x1a4>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	0099      	lsls	r1, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6911      	ldr	r1, [r2, #16]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68d2      	ldr	r2, [r2, #12]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	000186a0 	.word	0x000186a0
 8003420:	001e847f 	.word	0x001e847f
 8003424:	003d08ff 	.word	0x003d08ff
 8003428:	431bde83 	.word	0x431bde83
 800342c:	10624dd3 	.word	0x10624dd3

08003430 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
 8003440:	4613      	mov	r3, r2
 8003442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7fd ff1a 	bl	800127c <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 8213 	bne.w	800387e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	497e      	ldr	r1, [pc, #504]	; (800365c <HAL_I2C_Master_Receive+0x22c>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fac8 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e206      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_Master_Receive+0x50>
 800347c:	2302      	movs	r3, #2
 800347e:	e1ff      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d007      	beq.n	80034a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2222      	movs	r2, #34	; 0x22
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2210      	movs	r2, #16
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <HAL_I2C_Master_Receive+0x230>)
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f9cc 	bl	800388c <I2C_MasterRequestRead>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c0      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e194      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11d      	bne.n	8003572 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003546:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800356e:	b662      	cpsie	i
 8003570:	e172      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	2b02      	cmp	r3, #2
 8003578:	d11d      	bne.n	80035b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800358a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035b2:	b662      	cpsie	i
 80035b4:	e150      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035dc:	e13c      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	f200 80f5 	bhi.w	80037d2 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d123      	bne.n	8003638 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fad5 	bl	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e13d      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003636:	e10f      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	2b02      	cmp	r3, #2
 800363e:	d150      	bne.n	80036e2 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	4906      	ldr	r1, [pc, #24]	; (8003664 <HAL_I2C_Master_Receive+0x234>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9d4 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e112      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
 800365a:	bf00      	nop
 800365c:	00100002 	.word	0x00100002
 8003660:	ffff0000 	.word	0xffff0000
 8003664:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003668:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ac:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e0:	e0ba      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2200      	movs	r2, #0
 80036ea:	4967      	ldr	r1, [pc, #412]	; (8003888 <HAL_I2C_Master_Receive+0x458>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f983 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0c1      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	494f      	ldr	r1, [pc, #316]	; (8003888 <HAL_I2C_Master_Receive+0x458>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f954 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e092      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800379c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d0:	e042      	b.n	8003858 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f9e4 	bl	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e04c      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d118      	bne.n	8003858 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f aebe 	bne.w	80035de <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	00010004 	.word	0x00010004

0800388c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	460b      	mov	r3, r1
 800389a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d006      	beq.n	80038c6 <I2C_MasterRequestRead+0x3a>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d003      	beq.n	80038c6 <I2C_MasterRequestRead+0x3a>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c4:	d108      	bne.n	80038d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e00b      	b.n	80038f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	2b11      	cmp	r3, #17
 80038de:	d107      	bne.n	80038f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f87b 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e06d      	b.n	80039e8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003914:	d108      	bne.n	8003928 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]
 8003926:	e053      	b.n	80039d0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	11db      	asrs	r3, r3, #7
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0306 	and.w	r3, r3, #6
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f063 030f 	orn	r3, r3, #15
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	492a      	ldr	r1, [pc, #168]	; (80039f0 <I2C_MasterRequestRead+0x164>)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8ad 	bl	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e048      	b.n	80039e8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4923      	ldr	r1, [pc, #140]	; (80039f4 <I2C_MasterRequestRead+0x168>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f89d 	bl	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e038      	b.n	80039e8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f825 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e017      	b.n	80039e8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030e 	orn	r3, r3, #14
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <I2C_MasterRequestRead+0x168>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f865 	bl	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	00010008 	.word	0x00010008
 80039f4:	00010002 	.word	0x00010002

080039f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a08:	e025      	b.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d021      	beq.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fd fc33 	bl	800127c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e023      	b.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d10d      	bne.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	e00c      	b.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d0b6      	beq.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab4:	e051      	b.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac4:	d123      	bne.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e046      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d021      	beq.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b16:	f7fd fbb1 	bl	800127c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e020      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10c      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	e00b      	b.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	43da      	mvns	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d18d      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb0:	e042      	b.n	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d119      	bne.n	8003bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0210 	mvn.w	r2, #16
 8003bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e029      	b.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fd fb42 	bl	800127c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d1b5      	bne.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e26c      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8087 	beq.w	8003d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c70:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c7c:	4b8f      	ldr	r3, [pc, #572]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d112      	bne.n	8003cae <HAL_RCC_OscConfig+0x5e>
 8003c88:	4b8c      	ldr	r3, [pc, #560]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d10b      	bne.n	8003cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c96:	4b89      	ldr	r3, [pc, #548]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x12c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d168      	bne.n	8003d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e246      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x76>
 8003cb8:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7f      	ldr	r2, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e02e      	b.n	8003d24 <HAL_RCC_OscConfig+0xd4>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x98>
 8003cce:	4b7b      	ldr	r3, [pc, #492]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7a      	ldr	r2, [pc, #488]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b78      	ldr	r3, [pc, #480]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a77      	ldr	r2, [pc, #476]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xd4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0xbc>
 8003cf2:	4b72      	ldr	r3, [pc, #456]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a71      	ldr	r2, [pc, #452]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xd4>
 8003d0c:	4b6b      	ldr	r3, [pc, #428]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a67      	ldr	r2, [pc, #412]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd faa6 	bl	800127c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fd faa2 	bl	800127c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1fa      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe4>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd fa92 	bl	800127c <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd fa8e 	bl	800127c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1e6      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x10c>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x18c>
 8003da2:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x176>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1ba      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4939      	ldr	r1, [pc, #228]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x270>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fd fa47 	bl	800127c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fd fa43 	bl	800127c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e19b      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4927      	ldr	r1, [pc, #156]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_RCC_OscConfig+0x270>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fa26 	bl	800127c <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fd fa22 	bl	800127c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e17a      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d03a      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_RCC_OscConfig+0x274>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fa06 	bl	800127c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd fa02 	bl	800127c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e15a      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCC_OscConfig+0x26c>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f000 fb0a 	bl	80044ac <RCC_Delay>
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_OscConfig+0x274>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea0:	f7fd f9ec 	bl	800127c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fd f9e8 	bl	800127c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d908      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e140      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	42420000 	.word	0x42420000
 8003ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	4b9e      	ldr	r3, [pc, #632]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e9      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a6 	beq.w	800402e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b97      	ldr	r3, [pc, #604]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b94      	ldr	r3, [pc, #592]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4a93      	ldr	r2, [pc, #588]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	61d3      	str	r3, [r2, #28]
 8003efe:	4b91      	ldr	r3, [pc, #580]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b8e      	ldr	r3, [pc, #568]	; (8004148 <HAL_RCC_OscConfig+0x4f8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d118      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	4b8b      	ldr	r3, [pc, #556]	; (8004148 <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a8a      	ldr	r2, [pc, #552]	; (8004148 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f26:	f7fd f9a9 	bl	800127c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fd f9a5 	bl	800127c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0fd      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	4b81      	ldr	r3, [pc, #516]	; (8004148 <HAL_RCC_OscConfig+0x4f8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x312>
 8003f54:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6213      	str	r3, [r2, #32]
 8003f60:	e02d      	b.n	8003fbe <HAL_RCC_OscConfig+0x36e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x334>
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4a75      	ldr	r2, [pc, #468]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6213      	str	r3, [r2, #32]
 8003f76:	4b73      	ldr	r3, [pc, #460]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a72      	ldr	r2, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	6213      	str	r3, [r2, #32]
 8003f82:	e01c      	b.n	8003fbe <HAL_RCC_OscConfig+0x36e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x356>
 8003f8c:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	4a6c      	ldr	r2, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6213      	str	r3, [r2, #32]
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4a69      	ldr	r2, [pc, #420]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6213      	str	r3, [r2, #32]
 8003fa4:	e00b      	b.n	8003fbe <HAL_RCC_OscConfig+0x36e>
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a66      	ldr	r2, [pc, #408]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a63      	ldr	r2, [pc, #396]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d015      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f959 	bl	800127c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fd f955 	bl	800127c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0ab      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	4b57      	ldr	r3, [pc, #348]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ee      	beq.n	8003fce <HAL_RCC_OscConfig+0x37e>
 8003ff0:	e014      	b.n	800401c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd f943 	bl	800127c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fd f93f 	bl	800127c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e095      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ee      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4b48      	ldr	r3, [pc, #288]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4a47      	ldr	r2, [pc, #284]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8081 	beq.w	800413a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d061      	beq.n	8004108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d146      	bne.n	80040da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_OscConfig+0x4fc>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fd f913 	bl	800127c <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fd f90f 	bl	800127c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e067      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004080:	d108      	bne.n	8004094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	492d      	ldr	r1, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a19      	ldr	r1, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	430b      	orrs	r3, r1
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x4fc>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fd f8e3 	bl	800127c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd f8df 	bl	800127c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e037      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x46a>
 80040d8:	e02f      	b.n	800413a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <HAL_RCC_OscConfig+0x4fc>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f8cc 	bl	800127c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd f8c8 	bl	800127c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e020      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x498>
 8004106:	e018      	b.n	800413a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e013      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x4f4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	40007000 	.word	0x40007000
 800414c:	42420060 	.word	0x42420060

08004150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0d0      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	4965      	ldr	r1, [pc, #404]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b63      	ldr	r3, [pc, #396]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0b8      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ac:	4b59      	ldr	r3, [pc, #356]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a58      	ldr	r2, [pc, #352]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041c4:	4b53      	ldr	r3, [pc, #332]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a52      	ldr	r2, [pc, #328]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d0:	4b50      	ldr	r3, [pc, #320]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	494d      	ldr	r1, [pc, #308]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d040      	beq.n	8004270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	4b47      	ldr	r3, [pc, #284]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d115      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e07f      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e073      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06b      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4936      	ldr	r1, [pc, #216]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004240:	f7fd f81c 	bl	800127c <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd f818 	bl	800127c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e053      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d210      	bcs.n	80042a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 0207 	bic.w	r2, r3, #7
 8004286:	4922      	ldr	r1, [pc, #136]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e032      	b.n	8004306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4916      	ldr	r1, [pc, #88]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	490e      	ldr	r1, [pc, #56]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042de:	f000 f821 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 80042e2:	4601      	mov	r1, r0
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	fa21 f303 	lsr.w	r3, r1, r3
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_RCC_ClockConfig+0x1cc>)
 80042f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCC_ClockConfig+0x1d0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc feb6 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000
 8004314:	40021000 	.word	0x40021000
 8004318:	08006164 	.word	0x08006164
 800431c:	20000000 	.word	0x20000000
 8004320:	20000004 	.word	0x20000004

08004324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004324:	b490      	push	{r4, r7}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800432c:	1d3c      	adds	r4, r7, #4
 800432e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800434e:	4b23      	ldr	r3, [pc, #140]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x40>
 800435e:	2b08      	cmp	r3, #8
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x46>
 8004362:	e02d      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004366:	623b      	str	r3, [r7, #32]
      break;
 8004368:	e02d      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004376:	4413      	add	r3, r2
 8004378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800437c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c5b      	lsrs	r3, r3, #17
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004396:	4413      	add	r3, r2
 8004398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800439c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a2:	fb02 f203 	mul.w	r2, r2, r3
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e004      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	623b      	str	r3, [r7, #32]
      break;
 80043be:	e002      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c2:	623b      	str	r3, [r7, #32]
      break;
 80043c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c6:	6a3b      	ldr	r3, [r7, #32]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3728      	adds	r7, #40	; 0x28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc90      	pop	{r4, r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	08006148 	.word	0x08006148
 80043d8:	08006158 	.word	0x08006158
 80043dc:	40021000 	.word	0x40021000
 80043e0:	007a1200 	.word	0x007a1200
 80043e4:	003d0900 	.word	0x003d0900

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	20000000 	.word	0x20000000

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004400:	f7ff fff2 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004404:	4601      	mov	r1, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	08006174 	.word	0x08006174

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004428:	f7ff ffde 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 800442c:	4601      	mov	r1, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	0adb      	lsrs	r3, r3, #11
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4a03      	ldr	r2, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	08006174 	.word	0x08006174

0800444c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	220f      	movs	r2, #15
 800445a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_RCC_GetClockConfig+0x58>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0203 	and.w	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_RCC_GetClockConfig+0x58>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_GetClockConfig+0x58>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_GetClockConfig+0x58>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0207 	and.w	r2, r3, #7
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40022000 	.word	0x40022000

080044ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <RCC_Delay+0x34>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <RCC_Delay+0x38>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0a5b      	lsrs	r3, r3, #9
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c8:	bf00      	nop
  }
  while (Delay --);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f9      	bne.n	80044c8 <RCC_Delay+0x1c>
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d07d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004508:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b4c      	ldr	r3, [pc, #304]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	61d3      	str	r3, [r2, #28]
 8004520:	4b49      	ldr	r3, [pc, #292]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d118      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004548:	f7fc fe98 	bl	800127c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	e008      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fc fe94 	bl	800127c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e06d      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d027      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458c:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459c:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fc fe63 	bl	800127c <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fc fe5f 	bl	800127c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e036      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4917      	ldr	r1, [pc, #92]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	490b      	ldr	r1, [pc, #44]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4904      	ldr	r1, [pc, #16]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	42420440 	.word	0x42420440

08004654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e01d      	b.n	80046a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f815 	bl	80046aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 f962 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d007      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d122      	bne.n	800475e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d11b      	bne.n	800475e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0202 	mvn.w	r2, #2
 800472e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8ed 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 800474a:	e005      	b.n	8004758 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8e0 	bl	8004912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8ef 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d122      	bne.n	80047b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d11b      	bne.n	80047b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0204 	mvn.w	r2, #4
 8004782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8c3 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 800479e:	e005      	b.n	80047ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f8b6 	bl	8004912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8c5 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d122      	bne.n	8004806 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0208 	mvn.w	r2, #8
 80047d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f899 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f88c 	bl	8004912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f89b 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b10      	cmp	r3, #16
 8004812:	d122      	bne.n	800485a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d11b      	bne.n	800485a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0210 	mvn.w	r2, #16
 800482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2208      	movs	r2, #8
 8004830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f86f 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 8004846:	e005      	b.n	8004854 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f862 	bl	8004912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f871 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10e      	bne.n	8004886 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0201 	mvn.w	r2, #1
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fc fa65 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d10e      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d107      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8c0 	bl	8004a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d10e      	bne.n	80048de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d107      	bne.n	80048de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f835 	bl	8004948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0220 	mvn.w	r2, #32
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f88b 	bl	8004a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <TIM_Base_SetConfig+0xb8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00b      	beq.n	800498c <TIM_Base_SetConfig+0x30>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d007      	beq.n	800498c <TIM_Base_SetConfig+0x30>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0xbc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0x30>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <TIM_Base_SetConfig+0xc0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d108      	bne.n	800499e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <TIM_Base_SetConfig+0xb8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_Base_SetConfig+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d007      	beq.n	80049be <TIM_Base_SetConfig+0x62>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <TIM_Base_SetConfig+0xbc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_Base_SetConfig+0x62>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <TIM_Base_SetConfig+0xc0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a07      	ldr	r2, [pc, #28]	; (8004a14 <TIM_Base_SetConfig+0xb8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d103      	bne.n	8004a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	615a      	str	r2, [r3, #20]
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800

08004a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004a44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004a46:	e003      	b.n	8004a50 <LoopCopyDataInit>

08004a48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004a4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004a4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004a4e:	3104      	adds	r1, #4

08004a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004a50:	480a      	ldr	r0, [pc, #40]	; (8004a7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004a54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004a56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004a58:	d3f6      	bcc.n	8004a48 <CopyDataInit>
  ldr r2, =_sbss
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004a5c:	e002      	b.n	8004a64 <LoopFillZerobss>

08004a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004a5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004a60:	f842 3b04 	str.w	r3, [r2], #4

08004a64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004a66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004a68:	d3f9      	bcc.n	8004a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a6a:	f7fc fbab 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a6e:	f001 fb15 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a72:	f7fb fc8f 	bl	8000394 <main>
  bx lr
 8004a76:	4770      	bx	lr
  ldr r3, =_sidata
 8004a78:	08006184 	.word	0x08006184
  ldr r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004a80:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004a84:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004a88:	20001d60 	.word	0x20001d60

08004a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC1_2_IRQHandler>

08004a8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f103 0208 	add.w	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f103 0208 	add.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 0208 	add.w	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d103      	bne.n	8004b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e00c      	b.n	8004b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e002      	b.n	8004b58 <vListInsert+0x2e>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d2f6      	bcs.n	8004b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d103      	bne.n	8004bce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08e      	sub	sp, #56	; 0x38
 8004bf0:	af04      	add	r7, sp, #16
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	e7fe      	b.n	8004c12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <xTaskCreateStatic+0x42>
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e7fe      	b.n	8004c2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c2e:	2354      	movs	r3, #84	; 0x54
 8004c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b54      	cmp	r3, #84	; 0x54
 8004c36:	d009      	beq.n	8004c4c <xTaskCreateStatic+0x60>
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e7fe      	b.n	8004c4a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01e      	beq.n	8004c90 <xTaskCreateStatic+0xa4>
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f850 	bl	8004d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c8a:	f000 f8cb 	bl	8004e24 <prvAddNewTaskToReadyList>
 8004c8e:	e001      	b.n	8004c94 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c94:	697b      	ldr	r3, [r7, #20]
	}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08c      	sub	sp, #48	; 0x30
 8004ca2:	af04      	add	r7, sp, #16
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 f81e 	bl	8005cf4 <pvPortMalloc>
 8004cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004cc0:	2054      	movs	r0, #84	; 0x54
 8004cc2:	f001 f817 	bl	8005cf4 <pvPortMalloc>
 8004cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd4:	e005      	b.n	8004ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f001 f8ce 	bl	8005e78 <vPortFree>
 8004cdc:	e001      	b.n	8004ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d017      	beq.n	8004d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f80e 	bl	8004d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d0c:	69f8      	ldr	r0, [r7, #28]
 8004d0e:	f000 f889 	bl	8004e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e002      	b.n	8004d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d40:	3b01      	subs	r3, #1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <prvInitialiseNewTask+0x46>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e7fe      	b.n	8004d6c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e012      	b.n	8004d9a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	7819      	ldrb	r1, [r3, #0]
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	3334      	adds	r3, #52	; 0x34
 8004d84:	460a      	mov	r2, r1
 8004d86:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d9e9      	bls.n	8004d74 <prvInitialiseNewTask+0x4c>
 8004da0:	e000      	b.n	8004da4 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004da2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d901      	bls.n	8004db6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db2:	2306      	movs	r3, #6
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fe7d 	bl	8004acc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fe78 	bl	8004acc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f1c3 0207 	rsb	r2, r3, #7
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2200      	movs	r2, #0
 8004df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	69b8      	ldr	r0, [r7, #24]
 8004e06:	f000 fd95 	bl	8005934 <pxPortInitialiseStack>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e1c:	bf00      	nop
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e2c:	f000 fe6c 	bl	8005b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <prvAddNewTaskToReadyList+0xb8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <prvAddNewTaskToReadyList+0xb8>)
 8004e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e3a:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <prvAddNewTaskToReadyList+0xbc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <prvAddNewTaskToReadyList+0xbc>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <prvAddNewTaskToReadyList+0xb8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d110      	bne.n	8004e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e50:	f000 fc4c 	bl	80056ec <prvInitialiseTaskLists>
 8004e54:	e00d      	b.n	8004e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <prvAddNewTaskToReadyList+0xc0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <prvAddNewTaskToReadyList+0xbc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d802      	bhi.n	8004e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ee0 <prvAddNewTaskToReadyList+0xbc>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <prvAddNewTaskToReadyList+0xc4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <prvAddNewTaskToReadyList+0xc4>)
 8004e7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	2201      	movs	r2, #1
 8004e82:	409a      	lsls	r2, r3
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <prvAddNewTaskToReadyList+0xc8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	4a18      	ldr	r2, [pc, #96]	; (8004eec <prvAddNewTaskToReadyList+0xc8>)
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <prvAddNewTaskToReadyList+0xcc>)
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7ff fe1d 	bl	8004ae4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eaa:	f000 fe5b 	bl	8005b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <prvAddNewTaskToReadyList+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <prvAddNewTaskToReadyList+0xbc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d207      	bcs.n	8004ed4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <prvAddNewTaskToReadyList+0xd0>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000398 	.word	0x20000398
 8004ee0:	20000298 	.word	0x20000298
 8004ee4:	200003a4 	.word	0x200003a4
 8004ee8:	200003b4 	.word	0x200003b4
 8004eec:	200003a0 	.word	0x200003a0
 8004ef0:	2000029c 	.word	0x2000029c
 8004ef4:	e000ed04 	.word	0xe000ed04

08004ef8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <vTaskDelayUntil+0x28>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e7fe      	b.n	8004f1e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <vTaskDelayUntil+0x42>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e7fe      	b.n	8004f38 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8004f3a:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <vTaskDelayUntil+0xe8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <vTaskDelayUntil+0x5e>
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e7fe      	b.n	8004f54 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004f56:	f000 f9e3 	bl	8005320 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <vTaskDelayUntil+0xec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	4413      	add	r3, r2
 8004f68:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d20b      	bcs.n	8004f8c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d211      	bcs.n	8004fa2 <vTaskDelayUntil+0xaa>
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90d      	bls.n	8004fa2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	e00a      	b.n	8004fa2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d303      	bcc.n	8004f9e <vTaskDelayUntil+0xa6>
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d901      	bls.n	8004fa2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fc56 	bl	8005868 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004fbc:	f000 f9be 	bl	800533c <xTaskResumeAll>
 8004fc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004fc8:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <vTaskDelayUntil+0xf0>)
 8004fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fd8:	bf00      	nop
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200003c0 	.word	0x200003c0
 8004fe4:	2000039c 	.word	0x2000039c
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004ff4:	f000 fd88 	bl	8005b08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <vTaskSuspend+0x18>
 8004ffe:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <vTaskSuspend+0x104>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e000      	b.n	8005006 <vTaskSuspend+0x1a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3304      	adds	r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fdc4 	bl	8004b9a <uxListRemove>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d115      	bne.n	8005044 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	4935      	ldr	r1, [pc, #212]	; (80050f4 <vTaskSuspend+0x108>)
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <vTaskSuspend+0x58>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	2201      	movs	r2, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43da      	mvns	r2, r3
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <vTaskSuspend+0x10c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4013      	ands	r3, r2
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <vTaskSuspend+0x10c>)
 8005042:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3318      	adds	r3, #24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fda2 	bl	8004b9a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4827      	ldr	r0, [pc, #156]	; (80050fc <vTaskSuspend+0x110>)
 800505e:	f7ff fd41 	bl	8004ae4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d103      	bne.n	8005076 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005076:	f000 fd75 	bl	8005b64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800507a:	4b21      	ldr	r3, [pc, #132]	; (8005100 <vTaskSuspend+0x114>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005082:	f000 fd41 	bl	8005b08 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005086:	f000 fbcb 	bl	8005820 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800508a:	f000 fd6b 	bl	8005b64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <vTaskSuspend+0x104>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d126      	bne.n	80050e6 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <vTaskSuspend+0x114>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d016      	beq.n	80050ce <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80050a0:	4b18      	ldr	r3, [pc, #96]	; (8005104 <vTaskSuspend+0x118>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <vTaskSuspend+0xd0>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	e7fe      	b.n	80050ba <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <vTaskSuspend+0x11c>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050cc:	e00b      	b.n	80050e6 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <vTaskSuspend+0x110>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <vTaskSuspend+0x120>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d103      	bne.n	80050e2 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <vTaskSuspend+0x104>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
	}
 80050e0:	e001      	b.n	80050e6 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80050e2:	f000 fa91 	bl	8005608 <vTaskSwitchContext>
	}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000298 	.word	0x20000298
 80050f4:	2000029c 	.word	0x2000029c
 80050f8:	200003a0 	.word	0x200003a0
 80050fc:	20000384 	.word	0x20000384
 8005100:	200003a4 	.word	0x200003a4
 8005104:	200003c0 	.word	0x200003c0
 8005108:	e000ed04 	.word	0xe000ed04
 800510c:	20000398 	.word	0x20000398

08005110 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <prvTaskIsTaskSuspended+0x2a>
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e7fe      	b.n	8005138 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4a0f      	ldr	r2, [pc, #60]	; (800517c <prvTaskIsTaskSuspended+0x6c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <prvTaskIsTaskSuspended+0x38>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <prvTaskIsTaskSuspended+0x3a>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00f      	beq.n	800516e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <prvTaskIsTaskSuspended+0x70>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00a      	beq.n	800516e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <prvTaskIsTaskSuspended+0x54>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <prvTaskIsTaskSuspended+0x56>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800516e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000384 	.word	0x20000384
 8005180:	20000358 	.word	0x20000358

08005184 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <xTaskResumeFromISR+0x2a>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	e7fe      	b.n	80051ac <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ae:	f000 fd65 	bl	8005c7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051b2:	f3ef 8211 	mrs	r2, BASEPRI
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	617a      	str	r2, [r7, #20]
 80051c8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051ca:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051cc:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80051ce:	6a38      	ldr	r0, [r7, #32]
 80051d0:	f7ff ff9e 	bl	8005110 <prvTaskIsTaskSuspended>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d02f      	beq.n	800523a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <xTaskResumeFromISR+0xcc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d125      	bne.n	800522e <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <xTaskResumeFromISR+0xd0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d301      	bcc.n	80051f4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fcce 	bl	8004b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	2201      	movs	r2, #1
 8005204:	409a      	lsls	r2, r3
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <xTaskResumeFromISR+0xd4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	4a12      	ldr	r2, [pc, #72]	; (8005258 <xTaskResumeFromISR+0xd4>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4a0f      	ldr	r2, [pc, #60]	; (800525c <xTaskResumeFromISR+0xd8>)
 800521e:	441a      	add	r2, r3
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f7ff fc5c 	bl	8004ae4 <vListInsertEnd>
 800522c:	e005      	b.n	800523a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	3318      	adds	r3, #24
 8005232:	4619      	mov	r1, r3
 8005234:	480a      	ldr	r0, [pc, #40]	; (8005260 <xTaskResumeFromISR+0xdc>)
 8005236:	f7ff fc55 	bl	8004ae4 <vListInsertEnd>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005246:	4618      	mov	r0, r3
 8005248:	3728      	adds	r7, #40	; 0x28
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200003c0 	.word	0x200003c0
 8005254:	20000298 	.word	0x20000298
 8005258:	200003a0 	.word	0x200003a0
 800525c:	2000029c 	.word	0x2000029c
 8005260:	20000358 	.word	0x20000358

08005264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005272:	463a      	mov	r2, r7
 8005274:	1d39      	adds	r1, r7, #4
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f7fb f872 	bl	8000364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	9202      	str	r2, [sp, #8]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	460a      	mov	r2, r1
 8005292:	491d      	ldr	r1, [pc, #116]	; (8005308 <vTaskStartScheduler+0xa4>)
 8005294:	481d      	ldr	r0, [pc, #116]	; (800530c <vTaskStartScheduler+0xa8>)
 8005296:	f7ff fca9 	bl	8004bec <xTaskCreateStatic>
 800529a:	4602      	mov	r2, r0
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <vTaskStartScheduler+0xac>)
 800529e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <vTaskStartScheduler+0xac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e001      	b.n	80052b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d115      	bne.n	80052e4 <vTaskStartScheduler+0x80>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <vTaskStartScheduler+0xb0>)
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <vTaskStartScheduler+0xb4>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <vTaskStartScheduler+0xb8>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052de:	f000 fba3 	bl	8005a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052e2:	e00d      	b.n	8005300 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d109      	bne.n	8005300 <vTaskStartScheduler+0x9c>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e7fe      	b.n	80052fe <vTaskStartScheduler+0x9a>
}
 8005300:	bf00      	nop
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	0800615c 	.word	0x0800615c
 800530c:	080056bd 	.word	0x080056bd
 8005310:	200003bc 	.word	0x200003bc
 8005314:	200003b8 	.word	0x200003b8
 8005318:	200003a4 	.word	0x200003a4
 800531c:	2000039c 	.word	0x2000039c

08005320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <vTaskSuspendAll+0x18>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	4a03      	ldr	r2, [pc, #12]	; (8005338 <vTaskSuspendAll+0x18>)
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	200003c0 	.word	0x200003c0

0800533c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800534a:	4b41      	ldr	r3, [pc, #260]	; (8005450 <xTaskResumeAll+0x114>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <xTaskResumeAll+0x2a>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	e7fe      	b.n	8005364 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005366:	f000 fbcf 	bl	8005b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800536a:	4b39      	ldr	r3, [pc, #228]	; (8005450 <xTaskResumeAll+0x114>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	4a37      	ldr	r2, [pc, #220]	; (8005450 <xTaskResumeAll+0x114>)
 8005372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005374:	4b36      	ldr	r3, [pc, #216]	; (8005450 <xTaskResumeAll+0x114>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d161      	bne.n	8005440 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <xTaskResumeAll+0x118>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05d      	beq.n	8005440 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005384:	e02e      	b.n	80053e4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <xTaskResumeAll+0x11c>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3318      	adds	r3, #24
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fc01 	bl	8004b9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3304      	adds	r3, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fbfc 	bl	8004b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	2201      	movs	r2, #1
 80053a8:	409a      	lsls	r2, r3
 80053aa:	4b2c      	ldr	r3, [pc, #176]	; (800545c <xTaskResumeAll+0x120>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <xTaskResumeAll+0x120>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <xTaskResumeAll+0x124>)
 80053c2:	441a      	add	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f7ff fb8a 	bl	8004ae4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <xTaskResumeAll+0x128>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <xTaskResumeAll+0x12c>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <xTaskResumeAll+0x11c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1cc      	bne.n	8005386 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053f2:	f000 fa15 	bl	8005820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053f6:	4b1d      	ldr	r3, [pc, #116]	; (800546c <xTaskResumeAll+0x130>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005402:	f000 f845 	bl	8005490 <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <xTaskResumeAll+0x12c>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f1      	bne.n	8005402 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <xTaskResumeAll+0x130>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <xTaskResumeAll+0x12c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <xTaskResumeAll+0x134>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005440:	f000 fb90 	bl	8005b64 <vPortExitCritical>

	return xAlreadyYielded;
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200003c0 	.word	0x200003c0
 8005454:	20000398 	.word	0x20000398
 8005458:	20000358 	.word	0x20000358
 800545c:	200003a0 	.word	0x200003a0
 8005460:	2000029c 	.word	0x2000029c
 8005464:	20000298 	.word	0x20000298
 8005468:	200003ac 	.word	0x200003ac
 800546c:	200003a8 	.word	0x200003a8
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <xTaskGetTickCount+0x18>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005480:	687b      	ldr	r3, [r7, #4]
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	2000039c 	.word	0x2000039c

08005490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549a:	4b50      	ldr	r3, [pc, #320]	; (80055dc <xTaskIncrementTick+0x14c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 808c 	bne.w	80055bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054a4:	4b4e      	ldr	r3, [pc, #312]	; (80055e0 <xTaskIncrementTick+0x150>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054ac:	4a4c      	ldr	r2, [pc, #304]	; (80055e0 <xTaskIncrementTick+0x150>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11f      	bne.n	80054f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80054b8:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <xTaskIncrementTick+0x154>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <xTaskIncrementTick+0x46>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	e7fe      	b.n	80054d4 <xTaskIncrementTick+0x44>
 80054d6:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <xTaskIncrementTick+0x154>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <xTaskIncrementTick+0x158>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <xTaskIncrementTick+0x154>)
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4a40      	ldr	r2, [pc, #256]	; (80055e8 <xTaskIncrementTick+0x158>)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <xTaskIncrementTick+0x15c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	4a3e      	ldr	r2, [pc, #248]	; (80055ec <xTaskIncrementTick+0x15c>)
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	f000 f994 	bl	8005820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <xTaskIncrementTick+0x160>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d34d      	bcc.n	800559e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005502:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <xTaskIncrementTick+0x154>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <xTaskIncrementTick+0x80>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <xTaskIncrementTick+0x82>
 8005510:	2300      	movs	r3, #0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <xTaskIncrementTick+0x160>)
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	601a      	str	r2, [r3, #0]
					break;
 800551e:	e03e      	b.n	800559e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005520:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <xTaskIncrementTick+0x154>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d203      	bcs.n	8005540 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005538:	4a2d      	ldr	r2, [pc, #180]	; (80055f0 <xTaskIncrementTick+0x160>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
						break;
 800553e:	e02e      	b.n	800559e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	3304      	adds	r3, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fb28 	bl	8004b9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	3318      	adds	r3, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fb1f 	bl	8004b9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <xTaskIncrementTick+0x164>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <xTaskIncrementTick+0x164>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <xTaskIncrementTick+0x168>)
 800557c:	441a      	add	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7ff faad 	bl	8004ae4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <xTaskIncrementTick+0x16c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d3b4      	bcc.n	8005502 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800559c:	e7b1      	b.n	8005502 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <xTaskIncrementTick+0x16c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4914      	ldr	r1, [pc, #80]	; (80055f8 <xTaskIncrementTick+0x168>)
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d907      	bls.n	80055c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e004      	b.n	80055c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055bc:	4b10      	ldr	r3, [pc, #64]	; (8005600 <xTaskIncrementTick+0x170>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <xTaskIncrementTick+0x170>)
 80055c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <xTaskIncrementTick+0x174>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055d2:	697b      	ldr	r3, [r7, #20]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200003c0 	.word	0x200003c0
 80055e0:	2000039c 	.word	0x2000039c
 80055e4:	20000350 	.word	0x20000350
 80055e8:	20000354 	.word	0x20000354
 80055ec:	200003b0 	.word	0x200003b0
 80055f0:	200003b8 	.word	0x200003b8
 80055f4:	200003a0 	.word	0x200003a0
 80055f8:	2000029c 	.word	0x2000029c
 80055fc:	20000298 	.word	0x20000298
 8005600:	200003a8 	.word	0x200003a8
 8005604:	200003ac 	.word	0x200003ac

08005608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <vTaskSwitchContext+0xa0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005616:	4b25      	ldr	r3, [pc, #148]	; (80056ac <vTaskSwitchContext+0xa4>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800561c:	e03e      	b.n	800569c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800561e:	4b23      	ldr	r3, [pc, #140]	; (80056ac <vTaskSwitchContext+0xa4>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <vTaskSwitchContext+0xa8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005632:	7afb      	ldrb	r3, [r7, #11]
 8005634:	f1c3 031f 	rsb	r3, r3, #31
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	491e      	ldr	r1, [pc, #120]	; (80056b4 <vTaskSwitchContext+0xac>)
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <vTaskSwitchContext+0x5a>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e7fe      	b.n	8005660 <vTaskSwitchContext+0x58>
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a11      	ldr	r2, [pc, #68]	; (80056b4 <vTaskSwitchContext+0xac>)
 800566e:	4413      	add	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3308      	adds	r3, #8
 8005684:	429a      	cmp	r2, r3
 8005686:	d104      	bne.n	8005692 <vTaskSwitchContext+0x8a>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <vTaskSwitchContext+0xb0>)
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	200003c0 	.word	0x200003c0
 80056ac:	200003ac 	.word	0x200003ac
 80056b0:	200003a0 	.word	0x200003a0
 80056b4:	2000029c 	.word	0x2000029c
 80056b8:	20000298 	.word	0x20000298

080056bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056c4:	f000 f852 	bl	800576c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvIdleTask+0x28>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d9f9      	bls.n	80056c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <prvIdleTask+0x2c>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056e0:	e7f0      	b.n	80056c4 <prvIdleTask+0x8>
 80056e2:	bf00      	nop
 80056e4:	2000029c 	.word	0x2000029c
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	e00c      	b.n	8005712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a12      	ldr	r2, [pc, #72]	; (800574c <prvInitialiseTaskLists+0x60>)
 8005704:	4413      	add	r3, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff f9c1 	bl	8004a8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3301      	adds	r3, #1
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b06      	cmp	r3, #6
 8005716:	d9ef      	bls.n	80056f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005718:	480d      	ldr	r0, [pc, #52]	; (8005750 <prvInitialiseTaskLists+0x64>)
 800571a:	f7ff f9b8 	bl	8004a8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800571e:	480d      	ldr	r0, [pc, #52]	; (8005754 <prvInitialiseTaskLists+0x68>)
 8005720:	f7ff f9b5 	bl	8004a8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005724:	480c      	ldr	r0, [pc, #48]	; (8005758 <prvInitialiseTaskLists+0x6c>)
 8005726:	f7ff f9b2 	bl	8004a8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800572a:	480c      	ldr	r0, [pc, #48]	; (800575c <prvInitialiseTaskLists+0x70>)
 800572c:	f7ff f9af 	bl	8004a8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005730:	480b      	ldr	r0, [pc, #44]	; (8005760 <prvInitialiseTaskLists+0x74>)
 8005732:	f7ff f9ac 	bl	8004a8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <prvInitialiseTaskLists+0x78>)
 8005738:	4a05      	ldr	r2, [pc, #20]	; (8005750 <prvInitialiseTaskLists+0x64>)
 800573a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <prvInitialiseTaskLists+0x7c>)
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <prvInitialiseTaskLists+0x68>)
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	2000029c 	.word	0x2000029c
 8005750:	20000328 	.word	0x20000328
 8005754:	2000033c 	.word	0x2000033c
 8005758:	20000358 	.word	0x20000358
 800575c:	2000036c 	.word	0x2000036c
 8005760:	20000384 	.word	0x20000384
 8005764:	20000350 	.word	0x20000350
 8005768:	20000354 	.word	0x20000354

0800576c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005772:	e019      	b.n	80057a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005774:	f000 f9c8 	bl	8005b08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <prvCheckTasksWaitingTermination+0x4c>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fa08 	bl	8004b9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <prvCheckTasksWaitingTermination+0x50>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3b01      	subs	r3, #1
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvCheckTasksWaitingTermination+0x50>)
 8005792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <prvCheckTasksWaitingTermination+0x54>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3b01      	subs	r3, #1
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvCheckTasksWaitingTermination+0x54>)
 800579c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800579e:	f000 f9e1 	bl	8005b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f80e 	bl	80057c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <prvCheckTasksWaitingTermination+0x54>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e1      	bne.n	8005774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	2000036c 	.word	0x2000036c
 80057bc:	20000398 	.word	0x20000398
 80057c0:	20000380 	.word	0x20000380

080057c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fb4c 	bl	8005e78 <vPortFree>
				vPortFree( pxTCB );
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fb49 	bl	8005e78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057e6:	e017      	b.n	8005818 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d103      	bne.n	80057fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb40 	bl	8005e78 <vPortFree>
	}
 80057f8:	e00e      	b.n	8005818 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005800:	2b02      	cmp	r3, #2
 8005802:	d009      	beq.n	8005818 <prvDeleteTCB+0x54>
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e7fe      	b.n	8005816 <prvDeleteTCB+0x52>
	}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005826:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <prvResetNextTaskUnblockTime+0x40>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <prvResetNextTaskUnblockTime+0x14>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <prvResetNextTaskUnblockTime+0x16>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <prvResetNextTaskUnblockTime+0x44>)
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005842:	e008      	b.n	8005856 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <prvResetNextTaskUnblockTime+0x40>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4a04      	ldr	r2, [pc, #16]	; (8005864 <prvResetNextTaskUnblockTime+0x44>)
 8005854:	6013      	str	r3, [r2, #0]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	20000350 	.word	0x20000350
 8005864:	200003b8 	.word	0x200003b8

08005868 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f98b 	bl	8004b9a <uxListRemove>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	4b21      	ldr	r3, [pc, #132]	; (8005920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d10a      	bne.n	80058c0 <prvAddCurrentTaskToDelayedList+0x58>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b0:	4b1a      	ldr	r3, [pc, #104]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	481a      	ldr	r0, [pc, #104]	; (8005924 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058ba:	f7ff f913 	bl	8004ae4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058be:	e026      	b.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d209      	bcs.n	80058ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7ff f920 	bl	8004b2a <vListInsert>
}
 80058ea:	e010      	b.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <prvAddCurrentTaskToDelayedList+0xc4>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7ff f916 	bl	8004b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d202      	bcs.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6013      	str	r3, [r2, #0]
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2000039c 	.word	0x2000039c
 800591c:	20000298 	.word	0x20000298
 8005920:	200003a0 	.word	0x200003a0
 8005924:	20000384 	.word	0x20000384
 8005928:	20000354 	.word	0x20000354
 800592c:	20000350 	.word	0x20000350
 8005930:	200003b8 	.word	0x200003b8

08005934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3b04      	subs	r3, #4
 8005944:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800594c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b04      	subs	r3, #4
 8005952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b04      	subs	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <pxPortInitialiseStack+0x54>)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b14      	subs	r3, #20
 800596e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b20      	subs	r3, #32
 800597a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	0800598d 	.word	0x0800598d

0800598c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005992:	2300      	movs	r3, #0
 8005994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005996:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <prvTaskExitError+0x4c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d009      	beq.n	80059b4 <prvTaskExitError+0x28>
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e7fe      	b.n	80059b2 <prvTaskExitError+0x26>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059c6:	bf00      	nop
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0fc      	beq.n	80059c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	2000000c 	.word	0x2000000c
 80059dc:	00000000 	.word	0x00000000

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80059fe:	4770      	bx	lr

08005a00 <pxCurrentTCBConst2>:
 8005a00:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a08:	4806      	ldr	r0, [pc, #24]	; (8005a24 <prvPortStartFirstTask+0x1c>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	b662      	cpsie	i
 8005a14:	b661      	cpsie	f
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	df00      	svc	0
 8005a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed08 	.word	0xe000ed08

08005a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <xPortStartScheduler+0xcc>)
 8005a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	22ff      	movs	r2, #255	; 0xff
 8005a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <xPortStartScheduler+0xd0>)
 8005a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a56:	4b29      	ldr	r3, [pc, #164]	; (8005afc <xPortStartScheduler+0xd4>)
 8005a58:	2207      	movs	r2, #7
 8005a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a5c:	e009      	b.n	8005a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <xPortStartScheduler+0xd4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	4a25      	ldr	r2, [pc, #148]	; (8005afc <xPortStartScheduler+0xd4>)
 8005a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d0ef      	beq.n	8005a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a7e:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <xPortStartScheduler+0xd4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1c3 0307 	rsb	r3, r3, #7
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d009      	beq.n	8005a9e <xPortStartScheduler+0x76>
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	e7fe      	b.n	8005a9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a9e:	4b17      	ldr	r3, [pc, #92]	; (8005afc <xPortStartScheduler+0xd4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <xPortStartScheduler+0xd4>)
 8005aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <xPortStartScheduler+0xd4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab0:	4a12      	ldr	r2, [pc, #72]	; (8005afc <xPortStartScheduler+0xd4>)
 8005ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005abc:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <xPortStartScheduler+0xd8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <xPortStartScheduler+0xd8>)
 8005ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <xPortStartScheduler+0xd8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <xPortStartScheduler+0xd8>)
 8005ace:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ad4:	f000 f8b0 	bl	8005c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <xPortStartScheduler+0xdc>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ade:	f7ff ff93 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ae2:	f7ff fd91 	bl	8005608 <vTaskSwitchContext>
	prvTaskExitError();
 8005ae6:	f7ff ff51 	bl	800598c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000e400 	.word	0xe000e400
 8005af8:	200003c4 	.word	0x200003c4
 8005afc:	200003c8 	.word	0x200003c8
 8005b00:	e000ed20 	.word	0xe000ed20
 8005b04:	2000000c 	.word	0x2000000c

08005b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <vPortEnterCritical+0x54>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <vPortEnterCritical+0x54>)
 8005b28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <vPortEnterCritical+0x54>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d10e      	bne.n	8005b50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortEnterCritical+0x58>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <vPortEnterCritical+0x48>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	e7fe      	b.n	8005b4e <vPortEnterCritical+0x46>
	}
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b6a:	4b10      	ldr	r3, [pc, #64]	; (8005bac <vPortExitCritical+0x48>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <vPortExitCritical+0x22>
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	e7fe      	b.n	8005b84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <vPortExitCritical+0x48>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4a07      	ldr	r2, [pc, #28]	; (8005bac <vPortExitCritical+0x48>)
 8005b8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <vPortExitCritical+0x48>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <vPortExitCritical+0x3e>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bb0:	f3ef 8009 	mrs	r0, PSP
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <pxCurrentTCBConst>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005bc0:	6010      	str	r0, [r2, #0]
 8005bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005bc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bca:	f380 8811 	msr	BASEPRI, r0
 8005bce:	f7ff fd1b 	bl	8005608 <vTaskSwitchContext>
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	f380 8811 	msr	BASEPRI, r0
 8005bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005bde:	6819      	ldr	r1, [r3, #0]
 8005be0:	6808      	ldr	r0, [r1, #0]
 8005be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005be6:	f380 8809 	msr	PSP, r0
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	4770      	bx	lr

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c10:	f7ff fc3e 	bl	8005490 <xTaskIncrementTick>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <SysTick_Handler+0x3c>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <vPortSetupTimerInterrupt+0x30>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <vPortSetupTimerInterrupt+0x34>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <vPortSetupTimerInterrupt+0x38>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <vPortSetupTimerInterrupt+0x3c>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <vPortSetupTimerInterrupt+0x40>)
 8005c56:	3b01      	subs	r3, #1
 8005c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c5a:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <vPortSetupTimerInterrupt+0x30>)
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	601a      	str	r2, [r3, #0]
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	e000e010 	.word	0xe000e010
 8005c6c:	e000e018 	.word	0xe000e018
 8005c70:	20000000 	.word	0x20000000
 8005c74:	10624dd3 	.word	0x10624dd3
 8005c78:	e000e014 	.word	0xe000e014

08005c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c82:	f3ef 8305 	mrs	r3, IPSR
 8005c86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d913      	bls.n	8005cb6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c8e:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <vPortValidateInterruptPriority+0x68>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <vPortValidateInterruptPriority+0x6c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	7afa      	ldrb	r2, [r7, #11]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d209      	bcs.n	8005cb6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	e7fe      	b.n	8005cb4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <vPortValidateInterruptPriority+0x70>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <vPortValidateInterruptPriority+0x74>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d909      	bls.n	8005cda <vPortValidateInterruptPriority+0x5e>
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	e7fe      	b.n	8005cd8 <vPortValidateInterruptPriority+0x5c>
	}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	e000e3f0 	.word	0xe000e3f0
 8005ce8:	200003c4 	.word	0x200003c4
 8005cec:	e000ed0c 	.word	0xe000ed0c
 8005cf0:	200003c8 	.word	0x200003c8

08005cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d00:	f7ff fb0e 	bl	8005320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d04:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <pvPortMalloc+0x170>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d0c:	f000 f90c 	bl	8005f28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d10:	4b55      	ldr	r3, [pc, #340]	; (8005e68 <pvPortMalloc+0x174>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 808c 	bne.w	8005e36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01c      	beq.n	8005d5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005d24:	2208      	movs	r2, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f023 0307 	bic.w	r3, r3, #7
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <pvPortMalloc+0x6a>
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e7fe      	b.n	8005d5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d068      	beq.n	8005e36 <pvPortMalloc+0x142>
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <pvPortMalloc+0x178>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d863      	bhi.n	8005e36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d6e:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <pvPortMalloc+0x17c>)
 8005d70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d72:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <pvPortMalloc+0x17c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d78:	e004      	b.n	8005d84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d903      	bls.n	8005d96 <pvPortMalloc+0xa2>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f1      	bne.n	8005d7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d96:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <pvPortMalloc+0x170>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d04a      	beq.n	8005e36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2208      	movs	r2, #8
 8005da6:	4413      	add	r3, r2
 8005da8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1ad2      	subs	r2, r2, r3
 8005dba:	2308      	movs	r3, #8
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d91e      	bls.n	8005e00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <pvPortMalloc+0xf4>
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e7fe      	b.n	8005de6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	1ad2      	subs	r2, r2, r3
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dfa:	69b8      	ldr	r0, [r7, #24]
 8005dfc:	f000 f8f6 	bl	8005fec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <pvPortMalloc+0x178>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <pvPortMalloc+0x178>)
 8005e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e0e:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <pvPortMalloc+0x178>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <pvPortMalloc+0x180>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d203      	bcs.n	8005e22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <pvPortMalloc+0x178>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <pvPortMalloc+0x180>)
 8005e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <pvPortMalloc+0x174>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e36:	f7ff fa81 	bl	800533c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <pvPortMalloc+0x164>
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e7fe      	b.n	8005e56 <pvPortMalloc+0x162>
	return pvReturn;
 8005e58:	69fb      	ldr	r3, [r7, #28]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3728      	adds	r7, #40	; 0x28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20001bd4 	.word	0x20001bd4
 8005e68:	20001be0 	.word	0x20001be0
 8005e6c:	20001bd8 	.word	0x20001bd8
 8005e70:	20001bcc 	.word	0x20001bcc
 8005e74:	20001bdc 	.word	0x20001bdc

08005e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d046      	beq.n	8005f18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <vPortFree+0xa8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <vPortFree+0x42>
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e7fe      	b.n	8005eb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <vPortFree+0x5e>
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	e7fe      	b.n	8005ed4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <vPortFree+0xa8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d019      	beq.n	8005f18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <vPortFree+0xa8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005efc:	f7ff fa10 	bl	8005320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <vPortFree+0xac>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	4a06      	ldr	r2, [pc, #24]	; (8005f24 <vPortFree+0xac>)
 8005f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f0e:	6938      	ldr	r0, [r7, #16]
 8005f10:	f000 f86c 	bl	8005fec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f14:	f7ff fa12 	bl	800533c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20001be0 	.word	0x20001be0
 8005f24:	20001bd8 	.word	0x20001bd8

08005f28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <prvHeapInit+0xac>)
 8005f36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00c      	beq.n	8005f5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3307      	adds	r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <prvHeapInit+0xac>)
 8005f58:	4413      	add	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f60:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <prvHeapInit+0xb0>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <prvHeapInit+0xb0>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f74:	2208      	movs	r2, #8
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0307 	bic.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <prvHeapInit+0xb4>)
 8005f88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <prvHeapInit+0xb4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <prvHeapInit+0xb4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <prvHeapInit+0xb4>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <prvHeapInit+0xb8>)
 8005fb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <prvHeapInit+0xbc>)
 8005fbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <prvHeapInit+0xc0>)
 8005fc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fc6:	601a      	str	r2, [r3, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	200003cc 	.word	0x200003cc
 8005fd8:	20001bcc 	.word	0x20001bcc
 8005fdc:	20001bd4 	.word	0x20001bd4
 8005fe0:	20001bdc 	.word	0x20001bdc
 8005fe4:	20001bd8 	.word	0x20001bd8
 8005fe8:	20001be0 	.word	0x20001be0

08005fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ff4:	4b27      	ldr	r3, [pc, #156]	; (8006094 <prvInsertBlockIntoFreeList+0xa8>)
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e002      	b.n	8006000 <prvInsertBlockIntoFreeList+0x14>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d8f7      	bhi.n	8005ffa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	4413      	add	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d108      	bne.n	800602e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	441a      	add	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d118      	bne.n	8006074 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <prvInsertBlockIntoFreeList+0xac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d00d      	beq.n	800606a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	441a      	add	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e008      	b.n	800607c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <prvInsertBlockIntoFreeList+0xac>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e003      	b.n	800607c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d002      	beq.n	800608a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	20001bcc 	.word	0x20001bcc
 8006098:	20001bd4 	.word	0x20001bd4

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	2500      	movs	r5, #0
 80060a0:	4e0c      	ldr	r6, [pc, #48]	; (80060d4 <__libc_init_array+0x38>)
 80060a2:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a4:	1ba4      	subs	r4, r4, r6
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	42a5      	cmp	r5, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	f000 f822 	bl	80060f4 <_init>
 80060b0:	2500      	movs	r5, #0
 80060b2:	4e0a      	ldr	r6, [pc, #40]	; (80060dc <__libc_init_array+0x40>)
 80060b4:	4c0a      	ldr	r4, [pc, #40]	; (80060e0 <__libc_init_array+0x44>)
 80060b6:	1ba4      	subs	r4, r4, r6
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	42a5      	cmp	r5, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060c4:	4798      	blx	r3
 80060c6:	3501      	adds	r5, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060ce:	4798      	blx	r3
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	0800617c 	.word	0x0800617c
 80060d8:	0800617c 	.word	0x0800617c
 80060dc:	0800617c 	.word	0x0800617c
 80060e0:	08006180 	.word	0x08006180

080060e4 <memset>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	4402      	add	r2, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <_init>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr

08006100 <_fini>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr
