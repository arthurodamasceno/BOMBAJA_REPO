
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df8  08007df8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007df8  08007df8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007df8  08007df8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002390  20000010  08007e10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  08007e10  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adba  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035fe  00000000  00000000  0003adf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0003e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049d5  00000000  00000000  000410b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001284a  00000000  00000000  00045a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086409  00000000  00000000  000582cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de6d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c8  00000000  00000000  000de754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ce8 	.word	0x08007ce8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007ce8 	.word	0x08007ce8

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200022f8 	.word	0x200022f8

080001dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a06      	ldr	r2, [pc, #24]	; (8000204 <vApplicationGetIdleTaskMemory+0x28>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <vApplicationGetIdleTaskMemory+0x2c>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	2000002c 	.word	0x2000002c
 8000208:	20000080 	.word	0x20000080

0800020c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000212:	b662      	cpsie	i
	/* MCU Configuration--------------------------------------------------------*/
	__enable_irq();
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000214:	f000 ff7e 	bl	8001114 <HAL_Init>

	HAL_Delay(2000);
 8000218:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800021c:	f000 ffac 	bl	8001178 <HAL_Delay>
	/* Configure the system clock */
	SystemClock_Config();
 8000220:	f000 f848 	bl	80002b4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000224:	f000 f98e 	bl	8000544 <MX_GPIO_Init>
	MX_DMA_Init();
 8000228:	f000 f96e 	bl	8000508 <MX_DMA_Init>
	MX_ADC1_Init();
 800022c:	f000 f89e 	bl	800036c <MX_ADC1_Init>
	MX_CAN_Init();
 8000230:	f000 f906 	bl	8000440 <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	MX_I2C2_Init();
 8000234:	f000 f93a 	bl	80004ac <MX_I2C2_Init>

	DWT_CTRL |= (1 << 0);
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0x8c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]

	//OD = Flash_Read_NUM(0x0801FC00);

	CAN_Filter_Config();
 8000244:	f000 fa4e 	bl	80006e4 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 8000248:	f240 4101 	movw	r1, #1025	; 0x401
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <main+0x90>)
 800024e:	f001 fe53 	bl	8001ef8 <HAL_CAN_ActivateNotification>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <main+0x50>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 8000258:	f000 fcfe 	bl	8000c58 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 800025c:	480f      	ldr	r0, [pc, #60]	; (800029c <main+0x90>)
 800025e:	f001 fd2d 	bl	8001cbc <HAL_CAN_Start>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <main+0x60>
		Error_Handler();
 8000268:	f000 fcf6 	bl	8000c58 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 4);
 800026c:	2204      	movs	r2, #4
 800026e:	490c      	ldr	r1, [pc, #48]	; (80002a0 <main+0x94>)
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0x98>)
 8000272:	f001 f87b 	bl	800136c <HAL_ADC_Start_DMA>

	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();

	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <main+0x9c>)
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2307      	movs	r3, #7
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2300      	movs	r3, #0
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	490a      	ldr	r1, [pc, #40]	; (80002ac <main+0xa0>)
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <main+0xa4>)
 8000286:	f004 fcd9 	bl	8004c3c <xTaskCreate>

	vTaskStartScheduler();
 800028a:	f004 ff75 	bl	8005178 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 800028e:	2001      	movs	r0, #1
 8000290:	f000 ff72 	bl	8001178 <HAL_Delay>
 8000294:	e7fb      	b.n	800028e <main+0x82>
 8000296:	bf00      	nop
 8000298:	e0001000 	.word	0xe0001000
 800029c:	20002204 	.word	0x20002204
 80002a0:	20002198 	.word	0x20002198
 80002a4:	20002234 	.word	0x20002234
 80002a8:	200022b0 	.word	0x200022b0
 80002ac:	08007d00 	.word	0x08007d00
 80002b0:	08000731 	.word	0x08000731

080002b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b094      	sub	sp, #80	; 0x50
 80002b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f007 fd08 	bl	8007cd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000304:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030a:	4618      	mov	r0, r3
 800030c:	f003 f9e8 	bl	80036e0 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x66>
		Error_Handler();
 8000316:	f000 fc9f 	bl	8000c58 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f003 fc52 	bl	8003be0 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x92>
		Error_Handler();
 8000342:	f000 fc89 	bl	8000c58 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000346:	2302      	movs	r3, #2
 8000348:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800034a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800034e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fe10 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xae>
		Error_Handler();
 800035e:	f000 fc7b 	bl	8000c58 <Error_Handler>
	}
}
 8000362:	bf00      	nop
 8000364:	3750      	adds	r7, #80	; 0x50
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <MX_ADC1_Init+0xcc>)
 800037e:	4a2f      	ldr	r2, [pc, #188]	; (800043c <MX_ADC1_Init+0xd0>)
 8000380:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000388:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <MX_ADC1_Init+0xcc>)
 800038c:	2201      	movs	r2, #1
 800038e:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000398:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800039c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039e:	4b26      	ldr	r3, [pc, #152]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003aa:	4823      	ldr	r0, [pc, #140]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003ac:	f000 ff06 	bl	80011bc <HAL_ADC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0x4e>
		Error_Handler();
 80003b6:	f000 fc4f 	bl	8000c58 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80003c2:	2306      	movs	r3, #6
 80003c4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	481b      	ldr	r0, [pc, #108]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003cc:	f001 f8c8 	bl	8001560 <HAL_ADC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0x6e>
		Error_Handler();
 80003d6:	f000 fc3f 	bl	8000c58 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80003da:	2301      	movs	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80003de:	2302      	movs	r3, #2
 80003e0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	4814      	ldr	r0, [pc, #80]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003e8:	f001 f8ba 	bl	8001560 <HAL_ADC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0x8a>
		Error_Handler();
 80003f2:	f000 fc31 	bl	8000c58 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80003f6:	2308      	movs	r3, #8
 80003f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000404:	f001 f8ac 	bl	8001560 <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0xa6>
		Error_Handler();
 800040e:	f000 fc23 	bl	8000c58 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000412:	2309      	movs	r3, #9
 8000414:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000416:	2304      	movs	r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000420:	f001 f89e 	bl	8001560 <HAL_ADC_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0xc2>
		Error_Handler();
 800042a:	f000 fc15 	bl	8000c58 <Error_Handler>
	}
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20002234 	.word	0x20002234
 800043c:	40012400 	.word	0x40012400

08000440 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_CAN_Init+0x64>)
 8000446:	4a18      	ldr	r2, [pc, #96]	; (80004a8 <MX_CAN_Init+0x68>)
 8000448:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <MX_CAN_Init+0x64>)
 800044c:	2209      	movs	r2, #9
 800044e:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_CAN_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_CAN_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_CAN_Init+0x64>)
 800045e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000462:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_CAN_Init+0x64>)
 8000466:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800046a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <MX_CAN_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_CAN_Init+0x64>)
 8000474:	2201      	movs	r2, #1
 8000476:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MX_CAN_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_CAN_Init+0x64>)
 8000480:	2201      	movs	r2, #1
 8000482:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <MX_CAN_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_CAN_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_CAN_Init+0x64>)
 8000492:	f001 fa4f 	bl	8001934 <HAL_CAN_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_CAN_Init+0x60>
		Error_Handler();
 800049c:	f000 fbdc 	bl	8000c58 <Error_Handler>
	}
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20002204 	.word	0x20002204
 80004a8:	40006400 	.word	0x40006400

080004ac <MX_I2C2_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c2.Instance = I2C2;
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <MX_I2C2_Init+0x50>)
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <MX_I2C2_Init+0x54>)
 80004b4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_I2C2_Init+0x50>)
 80004b8:	4a12      	ldr	r2, [pc, #72]	; (8000504 <MX_I2C2_Init+0x58>)
 80004ba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_I2C2_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_I2C2_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_I2C2_Init+0x50>)
 80004ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ce:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <MX_I2C2_Init+0x50>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_I2C2_Init+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <MX_I2C2_Init+0x50>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_I2C2_Init+0x50>)
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_I2C2_Init+0x50>)
 80004ea:	f002 fbc1 	bl	8002c70 <HAL_I2C_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80004f4:	f000 fbb0 	bl	8000c58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200021a4 	.word	0x200021a4
 8000500:	40005800 	.word	0x40005800
 8000504:	000186a0 	.word	0x000186a0

08000508 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_DMA_Init+0x38>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <MX_DMA_Init+0x38>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_DMA_Init+0x38>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2105      	movs	r1, #5
 800052a:	200b      	movs	r0, #11
 800052c:	f001 ffe5 	bl	80024fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000530:	200b      	movs	r0, #11
 8000532:	f001 fffe 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	4b5d      	ldr	r3, [pc, #372]	; (80006d0 <MX_GPIO_Init+0x18c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a5c      	ldr	r2, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x18c>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <MX_GPIO_Init+0x18c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0310 	and.w	r3, r3, #16
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <MX_GPIO_Init+0x18c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a56      	ldr	r2, [pc, #344]	; (80006d0 <MX_GPIO_Init+0x18c>)
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <MX_GPIO_Init+0x18c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0320 	and.w	r3, r3, #32
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <MX_GPIO_Init+0x18c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a50      	ldr	r2, [pc, #320]	; (80006d0 <MX_GPIO_Init+0x18c>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <MX_GPIO_Init+0x18c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b4b      	ldr	r3, [pc, #300]	; (80006d0 <MX_GPIO_Init+0x18c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <MX_GPIO_Init+0x18c>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b48      	ldr	r3, [pc, #288]	; (80006d0 <MX_GPIO_Init+0x18c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	4845      	ldr	r0, [pc, #276]	; (80006d4 <MX_GPIO_Init+0x190>)
 80005c0:	f002 fb25 	bl	8002c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4842      	ldr	r0, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x190>)
 80005cc:	f002 fb1f 	bl	8002c0e <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d6:	4840      	ldr	r0, [pc, #256]	; (80006d8 <MX_GPIO_Init+0x194>)
 80005d8:	f002 fb19 	bl	8002c0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	483e      	ldr	r0, [pc, #248]	; (80006dc <MX_GPIO_Init+0x198>)
 80005e2:	f002 fb14 	bl	8002c0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4835      	ldr	r0, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x190>)
 8000600:	f002 f994 	bl	800292c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000608:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2302      	movs	r3, #2
 8000614:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	482d      	ldr	r0, [pc, #180]	; (80006d4 <MX_GPIO_Init+0x190>)
 800061e:	f002 f985 	bl	800292c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000626:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4827      	ldr	r0, [pc, #156]	; (80006d8 <MX_GPIO_Init+0x194>)
 800063c:	f002 f976 	bl	800292c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x19c>)
 8000648:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x194>)
 8000656:	f002 f969 	bl	800292c <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	210f      	movs	r1, #15
 800065e:	2028      	movs	r0, #40	; 0x28
 8000660:	f001 ff4b 	bl	80024fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	f001 ff64 	bl	8002532 <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_GPIO_Init+0x19c>)
 8000672:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <MX_GPIO_Init+0x194>)
 8000680:	f002 f954 	bl	800292c <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	210f      	movs	r1, #15
 8000688:	2017      	movs	r0, #23
 800068a:	f001 ff36 	bl	80024fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800068e:	2017      	movs	r0, #23
 8000690:	f001 ff4f 	bl	8002532 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000694:	2308      	movs	r3, #8
 8000696:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_GPIO_Init+0x198>)
 80006ac:	f002 f93e 	bl	800292c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006b0:	2310      	movs	r3, #16
 80006b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_GPIO_Init+0x198>)
 80006c4:	f002 f932 	bl	800292c <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	10210000 	.word	0x10210000

080006e4 <CAN_Filter_Config>:
//void EXTI9_5_IRQHandler(void) {
//	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
//	p_rpm += 1;
//}
/*Configure can filters */
void CAN_Filter_Config(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 800070a:	2301      	movs	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <CAN_Filter_Config+0x48>)
 8000714:	f001 fa09 	bl	8001b2a <HAL_CAN_ConfigFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <CAN_Filter_Config+0x3e>
		Error_Handler();
 800071e:	f000 fa9b 	bl	8000c58 <Error_Handler>
	}
}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20002204 	.word	0x20002204

08000730 <Start_taskF>:

void Start_taskF(void *pvParameters) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 8000738:	2203      	movs	r2, #3
 800073a:	2100      	movs	r1, #0
 800073c:	2001      	movs	r0, #1
 800073e:	f004 f805 	bl	800474c <xQueueGenericCreate>
 8000742:	4602      	mov	r2, r0
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <Start_taskF+0xd0>)
 8000746:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f004 fcdd 	bl	8005108 <vTaskDelay>
	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <Start_taskF+0xd4>)
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2304      	movs	r3, #4
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	492b      	ldr	r1, [pc, #172]	; (8000808 <Start_taskF+0xd8>)
 800075c:	482b      	ldr	r0, [pc, #172]	; (800080c <Start_taskF+0xdc>)
 800075e:	f004 fa6d 	bl	8004c3c <xTaskCreate>
	vTaskDelay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f004 fcd0 	bl	8005108 <vTaskDelay>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <Start_taskF+0xe0>)
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2304      	movs	r3, #4
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	4927      	ldr	r1, [pc, #156]	; (8000814 <Start_taskF+0xe4>)
 8000776:	4828      	ldr	r0, [pc, #160]	; (8000818 <Start_taskF+0xe8>)
 8000778:	f004 fa60 	bl	8004c3c <xTaskCreate>
	vTaskDelay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f004 fcc3 	bl	8005108 <vTaskDelay>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <Start_taskF+0xec>)
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2304      	movs	r3, #4
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	4924      	ldr	r1, [pc, #144]	; (8000820 <Start_taskF+0xf0>)
 8000790:	4824      	ldr	r0, [pc, #144]	; (8000824 <Start_taskF+0xf4>)
 8000792:	f004 fa53 	bl	8004c3c <xTaskCreate>
	vTaskDelay(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f004 fcb6 	bl	8005108 <vTaskDelay>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <Start_taskF+0xf8>)
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	2305      	movs	r3, #5
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2300      	movs	r3, #0
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	4920      	ldr	r1, [pc, #128]	; (800082c <Start_taskF+0xfc>)
 80007aa:	4821      	ldr	r0, [pc, #132]	; (8000830 <Start_taskF+0x100>)
 80007ac:	f004 fa46 	bl	8004c3c <xTaskCreate>
	vTaskDelay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f004 fca9 	bl	8005108 <vTaskDelay>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <Start_taskF+0x104>)
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	2304      	movs	r3, #4
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	491d      	ldr	r1, [pc, #116]	; (8000838 <Start_taskF+0x108>)
 80007c4:	481d      	ldr	r0, [pc, #116]	; (800083c <Start_taskF+0x10c>)
 80007c6:	f004 fa39 	bl	8004c3c <xTaskCreate>
	vTaskDelay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f004 fc9c 	bl	8005108 <vTaskDelay>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 2, &OD_Task);
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <Start_taskF+0x110>)
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2302      	movs	r3, #2
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2300      	movs	r3, #0
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	4919      	ldr	r1, [pc, #100]	; (8000844 <Start_taskF+0x114>)
 80007de:	481a      	ldr	r0, [pc, #104]	; (8000848 <Start_taskF+0x118>)
 80007e0:	f004 fa2c 	bl	8004c3c <xTaskCreate>

	if (Start_Task != NULL) {
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <Start_taskF+0x11c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <Start_taskF+0xc6>
		vTaskDelete(Start_Task);
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <Start_taskF+0x11c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fb6f 	bl	8004ed4 <vTaskDelete>
	}

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20002200 	.word	0x20002200
 8000804:	2000222c 	.word	0x2000222c
 8000808:	08007d0c 	.word	0x08007d0c
 800080c:	08000851 	.word	0x08000851
 8000810:	200021fc 	.word	0x200021fc
 8000814:	08007d14 	.word	0x08007d14
 8000818:	080008d5 	.word	0x080008d5
 800081c:	20002230 	.word	0x20002230
 8000820:	08007d20 	.word	0x08007d20
 8000824:	08000945 	.word	0x08000945
 8000828:	200022ac 	.word	0x200022ac
 800082c:	08007d2c 	.word	0x08007d2c
 8000830:	08000a9d 	.word	0x08000a9d
 8000834:	200021f8 	.word	0x200021f8
 8000838:	08007d38 	.word	0x08007d38
 800083c:	080009f1 	.word	0x080009f1
 8000840:	200021a0 	.word	0x200021a0
 8000844:	08007d40 	.word	0x08007d40
 8000848:	08000c01 	.word	0x08000c01
 800084c:	200022b0 	.word	0x200022b0

08000850 <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;  //Ticks to wait since routine starts
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 800085e:	f004 fd97 	bl	8005390 <xTaskGetTickCount>
 8000862:	4603      	mov	r3, r0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		//buffer[0] = (uint8_t) (analog[0] >> 8) & 0xFF;  //bat CALIBRAR
		//buffer[1] = (uint8_t) analog[0] & 0xFF;

		uint8_t batbuff[2];
		uint16_t batval = analog[0];
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <Bat_taskF+0x78>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	867b      	strh	r3, [r7, #50]	; 0x32
		/*if (batval < 2100) {
			batval = batval_old;
		} else {
			batval_old = batval;
		}*/
		batbuff[0] = (uint8_t) (batval >> 8) & 0xFF;
 800086c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b29b      	uxth	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		batbuff[1] = (uint8_t) batval & 0xFF;
 8000878:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
		BatHeader.StdId = 0x650;
 8000884:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8000888:	60fb      	str	r3, [r7, #12]
		BatHeader.IDE = CAN_ID_STD;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
		BatHeader.RTR = CAN_RTR_DATA;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800089a:	f107 010c 	add.w	r1, r7, #12
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <Bat_taskF+0x7c>)
 80008a0:	f001 fa50 	bl	8001d44 <HAL_CAN_AddTxMessage>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <Bat_taskF+0x5e>
				!= HAL_OK) {

			Error_Handler();
 80008aa:	f000 f9d5 	bl	8000c58 <Error_Handler>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <Bat_taskF+0x80>)
 80008b4:	f002 f9c3 	bl	8002c3e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*1Hz frequency*/
 80008b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fba4 	bl	800500c <vTaskDelayUntil>
	while (1) {
 80008c4:	e7cf      	b.n	8000866 <Bat_taskF+0x16>
 80008c6:	bf00      	nop
 80008c8:	20002198 	.word	0x20002198
 80008cc:	20002204 	.word	0x20002204
 80008d0:	40011000 	.word	0x40011000

080008d4 <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;  //Ticks to wait since routine starts
 80008dc:	2314      	movs	r3, #20
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 80008e0:	f004 fd56 	bl	8005390 <xTaskGetTickCount>
 80008e4:	4603      	mov	r3, r0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28

	while (1) {
		uint8_t fuelbuff[2];
		fuelbuff[0] = (uint8_t) (analog[1] >> 8) & 0xFF;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <Fuel_taskF+0x68>)
 80008ea:	885b      	ldrh	r3, [r3, #2]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		fuelbuff[1] = (uint8_t) analog[1] & 0xFF;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <Fuel_taskF+0x68>)
 80008f8:	885b      	ldrh	r3, [r3, #2]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
		FuelHeader.StdId = 0x652;
 8000904:	f240 6352 	movw	r3, #1618	; 0x652
 8000908:	60bb      	str	r3, [r7, #8]
		FuelHeader.IDE = CAN_ID_STD;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
		FuelHeader.RTR = CAN_RTR_DATA;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800091a:	f107 0108 	add.w	r1, r7, #8
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <Fuel_taskF+0x6c>)
 8000920:	f001 fa10 	bl	8001d44 <HAL_CAN_AddTxMessage>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <Fuel_taskF+0x5a>
				!= HAL_OK) {
			Error_Handler();
 800092a:	f000 f995 	bl	8000c58 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*50Hz frequency*/
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fb69 	bl	800500c <vTaskDelayUntil>
	while (1) {
 800093a:	e7d5      	b.n	80008e8 <Fuel_taskF+0x14>
 800093c:	20002198 	.word	0x20002198
 8000940:	20002204 	.word	0x20002204

08000944 <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 800094c:	23c8      	movs	r3, #200	; 0xc8
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 8000950:	f004 fd1e 	bl	8005390 <xTaskGetTickCount>
 8000954:	4603      	mov	r3, r0
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
//		speedbuff[0] = 0;
//		speedbuff[1] = p_spd*5;
//		p_spd = 0;
		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &test[0], 1, 100);
 8000958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	2108      	movs	r1, #8
 8000964:	4820      	ldr	r0, [pc, #128]	; (80009e8 <Speed_taskF+0xa4>)
 8000966:	f002 faab 	bl	8002ec0 <HAL_I2C_Master_Receive>
		if (test[0] != 0xAA) {
 800096a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800096e:	2baa      	cmp	r3, #170	; 0xaa
 8000970:	d008      	beq.n	8000984 <Speed_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &dump[0], 1, 100);
 8000972:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	2108      	movs	r1, #8
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <Speed_taskF+0xa4>)
 8000980:	f002 fa9e 	bl	8002ec0 <HAL_I2C_Master_Receive>
		}
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[0], 1, 100);
 8000984:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2301      	movs	r3, #1
 800098e:	2108      	movs	r1, #8
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <Speed_taskF+0xa4>)
 8000992:	f002 fa95 	bl	8002ec0 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[1], 1, 100);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2108      	movs	r1, #8
 80009a4:	4810      	ldr	r0, [pc, #64]	; (80009e8 <Speed_taskF+0xa4>)
 80009a6:	f002 fa8b 	bl	8002ec0 <HAL_I2C_Master_Receive>

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 80009ae:	f240 6353 	movw	r3, #1619	; 0x653
 80009b2:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <Speed_taskF+0xa8>)
 80009ca:	f001 f9bb 	bl	8001d44 <HAL_CAN_AddTxMessage>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <Speed_taskF+0x94>
				!= HAL_OK) {
			Error_Handler();
 80009d4:	f000 f940 	bl	8000c58 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 80009d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 fb14 	bl	800500c <vTaskDelayUntil>
	while (1) {
 80009e4:	e7b8      	b.n	8000958 <Speed_taskF+0x14>
 80009e6:	bf00      	nop
 80009e8:	200021a4 	.word	0x200021a4
 80009ec:	20002204 	.word	0x20002204

080009f0 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b090      	sub	sp, #64	; 0x40
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 80009f8:	23c8      	movs	r3, #200	; 0xc8
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 80009fc:	f004 fcc8 	bl	8005390 <xTaskGetTickCount>
 8000a00:	4603      	mov	r3, r0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
		//rpmbuff[0] = (uint8_t) (analog[3] >> 8) & 0xFF;
		//rpmbuff[1] = (uint8_t) analog[3] & 0xFF;

		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &test[0], 1, 10);
 8000a04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a08:	230a      	movs	r3, #10
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	210a      	movs	r1, #10
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <RPM_taskF+0xa4>)
 8000a12:	f002 fa55 	bl	8002ec0 <HAL_I2C_Master_Receive>
		if (test[0] != 0xAA) {
 8000a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a1a:	2baa      	cmp	r3, #170	; 0xaa
 8000a1c:	d008      	beq.n	8000a30 <RPM_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &dump[0], 1, 10);
 8000a1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a22:	230a      	movs	r3, #10
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2301      	movs	r3, #1
 8000a28:	210a      	movs	r1, #10
 8000a2a:	481a      	ldr	r0, [pc, #104]	; (8000a94 <RPM_taskF+0xa4>)
 8000a2c:	f002 fa48 	bl	8002ec0 <HAL_I2C_Master_Receive>
		}

		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[0], 1, 10);
 8000a30:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a34:	230a      	movs	r3, #10
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	210a      	movs	r1, #10
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <RPM_taskF+0xa4>)
 8000a3e:	f002 fa3f 	bl	8002ec0 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[1], 1, 10);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	230a      	movs	r3, #10
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	210a      	movs	r1, #10
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <RPM_taskF+0xa4>)
 8000a52:	f002 fa35 	bl	8002ec0 <HAL_I2C_Master_Receive>
//		rpmbuff[1]=123;


		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
		RPMHeader.StdId = 0x654;
 8000a5a:	f240 6354 	movw	r3, #1620	; 0x654
 8000a5e:	60bb      	str	r3, [r7, #8]
		RPMHeader.IDE = CAN_ID_STD;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
		RPMHeader.RTR = CAN_RTR_DATA;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a70:	f107 0108 	add.w	r1, r7, #8
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <RPM_taskF+0xa8>)
 8000a76:	f001 f965 	bl	8001d44 <HAL_CAN_AddTxMessage>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <RPM_taskF+0x94>
				!= HAL_OK) {
			Error_Handler();
 8000a80:	f000 f8ea 	bl	8000c58 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f004 fabe 	bl	800500c <vTaskDelayUntil>
	while (1) {
 8000a90:	e7b8      	b.n	8000a04 <RPM_taskF+0x14>
 8000a92:	bf00      	nop
 8000a94:	200021a4 	.word	0x200021a4
 8000a98:	20002204 	.word	0x20002204

08000a9c <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b092      	sub	sp, #72	; 0x48
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 8000aa4:	23c8      	movs	r3, #200	; 0xc8
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 8000aa8:	f004 fc72 	bl	8005390 <xTaskGetTickCount>
 8000aac:	4603      	mov	r3, r0
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (1) {
		uint8_t tempdata[16];

		CSen
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab6:	484e      	ldr	r0, [pc, #312]	; (8000bf0 <Temp_taskF+0x154>)
 8000ab8:	f002 f8a9 	bl	8002c0e <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
 8000ac0:	e018      	b.n	8000af4 <Temp_taskF+0x58>
			SCK_H
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	484b      	ldr	r0, [pc, #300]	; (8000bf4 <Temp_taskF+0x158>)
 8000ac8:	f002 f8a1 	bl	8002c0e <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000acc:	2110      	movs	r1, #16
 8000ace:	4849      	ldr	r0, [pc, #292]	; (8000bf4 <Temp_taskF+0x158>)
 8000ad0:	f002 f886 	bl	8002be0 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ade:	4413      	add	r3, r2
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	701a      	strb	r2, [r3, #0]
			SCK_L
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4842      	ldr	r0, [pc, #264]	; (8000bf4 <Temp_taskF+0x158>)
 8000aea:	f002 f890 	bl	8002c0e <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af0:	3301      	adds	r3, #1
 8000af2:	647b      	str	r3, [r7, #68]	; 0x44
 8000af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	dde3      	ble.n	8000ac2 <Temp_taskF+0x26>
		}
		CSdis
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b00:	483b      	ldr	r0, [pc, #236]	; (8000bf0 <Temp_taskF+0x154>)
 8000b02:	f002 f884 	bl	8002c0e <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 8000b06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d146      	bne.n	8000b9c <Temp_taskF+0x100>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000b18:	4413      	add	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b20:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b28:	4413      	add	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000b38:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <Temp_taskF+0x15c>)
 8000b42:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <Temp_taskF+0x15c>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29a      	uxth	r2, r3
					+ tempdata[12];
 8000b8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <Temp_taskF+0x15c>)
 8000b9a:	801a      	strh	r2, [r3, #0]
			//	temp16 += tempdata[n] * (2048 / (1 << (n - 1)));
			//}
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <Temp_taskF+0x15c>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <Temp_taskF+0x15c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 8000bb8:	f240 6351 	movw	r3, #1617	; 0x651
 8000bbc:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bce:	f107 010c 	add.w	r1, r7, #12
 8000bd2:	480a      	ldr	r0, [pc, #40]	; (8000bfc <Temp_taskF+0x160>)
 8000bd4:	f001 f8b6 	bl	8001d44 <HAL_CAN_AddTxMessage>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <Temp_taskF+0x146>
				!= HAL_OK) {
			Error_Handler();
 8000bde:	f000 f83b 	bl	8000c58 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fa0f 	bl	800500c <vTaskDelayUntil>
	while (1) {
 8000bee:	e75f      	b.n	8000ab0 <Temp_taskF+0x14>
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	20002264 	.word	0x20002264
 8000bfc:	20002204 	.word	0x20002204

08000c00 <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	while (1) {
		if ( xSemaphoreTake( xSemaphore, LONG_TIME ) == pdTRUE) {
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <OD_taskF+0x2c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fdfd 	bl	8004810 <xQueueSemaphoreTake>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d1f5      	bne.n	8000c08 <OD_taskF+0x8>
			PULSO += 1;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <OD_taskF+0x30>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <OD_taskF+0x30>)
 8000c26:	701a      	strb	r2, [r3, #0]
		if ( xSemaphoreTake( xSemaphore, LONG_TIME ) == pdTRUE) {
 8000c28:	e7ee      	b.n	8000c08 <OD_taskF+0x8>
 8000c2a:	bf00      	nop
 8000c2c:	20002200 	.word	0x20002200
 8000c30:	20000280 	.word	0x20000280

08000c34 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c46:	f000 fa7b 	bl	8001140 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x6c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f001 fc2a 	bl	80024fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_MspInit+0x70>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <HAL_MspInit+0x70>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cc2:	f005 f941 	bl	8005f48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d124      	bne.n	8000d42 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_I2C_MspInit+0x7c>)
 8000d3e:	f001 fdf5 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40005800 	.word	0x40005800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d15f      	bne.n	8000e38 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a2b      	ldr	r2, [pc, #172]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481e      	ldr	r0, [pc, #120]	; (8000e48 <HAL_ADC_MspInit+0xf0>)
 8000dd0:	f001 fdac 	bl	800292c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481a      	ldr	r0, [pc, #104]	; (8000e4c <HAL_ADC_MspInit+0xf4>)
 8000de4:	f001 fda2 	bl	800292c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000dea:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <HAL_ADC_MspInit+0xfc>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e12:	2220      	movs	r2, #32
 8000e14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e1e:	f001 fb97 	bl	8002550 <HAL_DMA_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000e28:	f7ff ff16 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e30:	621a      	str	r2, [r3, #32]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_ADC_MspInit+0xf8>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012400 	.word	0x40012400
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	20002268 	.word	0x20002268
 8000e54:	40020008 	.word	0x40020008

08000e58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <HAL_CAN_MspInit+0xf0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d163      	bne.n	8000f40 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4a33      	ldr	r2, [pc, #204]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_CAN_MspInit+0xf4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4824      	ldr	r0, [pc, #144]	; (8000f50 <HAL_CAN_MspInit+0xf8>)
 8000ebe:	f001 fd35 	bl	800292c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481e      	ldr	r0, [pc, #120]	; (8000f50 <HAL_CAN_MspInit+0xf8>)
 8000ed8:	f001 fd28 	bl	800292c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_CAN_MspInit+0xfc>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_CAN_MspInit+0xfc>)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2105      	movs	r1, #5
 8000f04:	2013      	movs	r0, #19
 8000f06:	f001 faf8 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000f0a:	2013      	movs	r0, #19
 8000f0c:	f001 fb11 	bl	8002532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2105      	movs	r1, #5
 8000f14:	2014      	movs	r0, #20
 8000f16:	f001 faf0 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f001 fb09 	bl	8002532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	2015      	movs	r0, #21
 8000f26:	f001 fae8 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f2a:	2015      	movs	r0, #21
 8000f2c:	f001 fb01 	bl	8002532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2105      	movs	r1, #5
 8000f34:	2016      	movs	r0, #22
 8000f36:	f001 fae0 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f3a:	2016      	movs	r0, #22
 8000f3c:	f001 faf9 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40006400 	.word	0x40006400
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010000 	.word	0x40010000

08000f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	2019      	movs	r0, #25
 8000f6e:	f001 fac4 	bl	80024fa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f72:	2019      	movs	r0, #25
 8000f74:	f001 fadd 	bl	8002532 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_InitTick+0x9c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_InitTick+0x9c>)
 8000f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_InitTick+0x9c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f90:	f107 0210 	add.w	r2, r7, #16
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 ff9e 	bl	8003edc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fa0:	f002 ff88 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8000fa4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_InitTick+0xa0>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9b      	lsrs	r3, r3, #18
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_InitTick+0xa8>)
 8000fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fd6:	f003 f885 	bl	80040e4 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d104      	bne.n	8000fea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <HAL_InitTick+0xa4>)
 8000fe2:	f003 f8b3 	bl	800414c <HAL_TIM_Base_Start_IT>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	431bde83 	.word	0x431bde83
 8000ffc:	200022b4 	.word	0x200022b4
 8001000:	40012c00 	.word	0x40012c00

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <HardFault_Handler+0x4>

08001016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <BusFault_Handler+0x4>

08001022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <UsageFault_Handler+0x4>

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA1_Channel1_IRQHandler+0x10>)
 800103a:	f001 fb43 	bl	80026c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20002268 	.word	0x20002268

08001048 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800104e:	f000 ff78 	bl	8001f42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20002204 	.word	0x20002204

0800105c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001062:	f000 ff6e 	bl	8001f42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20002204 	.word	0x20002204

08001070 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <CAN1_RX1_IRQHandler+0x10>)
 8001076:	f000 ff64 	bl	8001f42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20002204 	.word	0x20002204

08001084 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <CAN1_SCE_IRQHandler+0x10>)
 800108a:	f000 ff5a 	bl	8001f42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20002204 	.word	0x20002204

08001098 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM1_UP_IRQHandler+0x10>)
 800109e:	f003 f878 	bl	8004192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200022b4 	.word	0x200022b4

080010ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <SystemInit+0x5c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <SystemInit+0x5c>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <SystemInit+0x5c>)
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4911      	ldr	r1, [pc, #68]	; (8001108 <SystemInit+0x5c>)
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <SystemInit+0x60>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <SystemInit+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <SystemInit+0x5c>)
 80010ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SystemInit+0x5c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SystemInit+0x5c>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <SystemInit+0x5c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <SystemInit+0x5c>)
 80010ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SystemInit+0x5c>)
 80010f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SystemInit+0x64>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	f8ff0000 	.word	0xf8ff0000
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x28>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f001 f9dd 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff14 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fd98 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000008 	.word	0x20000008
 8001160:	200022f4 	.word	0x200022f4

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	200022f4 	.word	0x200022f4

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff fff0 	bl	8001164 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_Delay+0x40>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffe0 	bl	8001164 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0be      	b.n	800135c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fdac 	bl	8000d58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 faf7 	bl	80017f4 <ADC_ConversionStop_Disable>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8099 	bne.w	800134a <HAL_ADC_Init+0x18e>
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8095 	bne.w	800134a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001228:	f023 0302 	bic.w	r3, r3, #2
 800122c:	f043 0202 	orr.w	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7b1b      	ldrb	r3, [r3, #12]
 8001242:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001244:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4313      	orrs	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001254:	d003      	beq.n	800125e <HAL_ADC_Init+0xa2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_ADC_Init+0xa8>
 800125e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001262:	e000      	b.n	8001266 <HAL_ADC_Init+0xaa>
 8001264:	2300      	movs	r3, #0
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7d1b      	ldrb	r3, [r3, #20]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d119      	bne.n	80012a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d109      	bne.n	8001290 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	3b01      	subs	r3, #1
 8001282:	035a      	lsls	r2, r3, #13
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	e00b      	b.n	80012a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_ADC_Init+0x1a8>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d8:	d003      	beq.n	80012e2 <HAL_ADC_Init+0x126>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d104      	bne.n	80012ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	051b      	lsls	r3, r3, #20
 80012ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_ADC_Init+0x1ac>)
 8001308:	4013      	ands	r3, r2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d10b      	bne.n	8001328 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	f023 0303 	bic.w	r3, r3, #3
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001326:	e018      	b.n	800135a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f023 0312 	bic.w	r3, r3, #18
 8001330:	f043 0210 	orr.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001348:	e007      	b.n	800135a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f043 0210 	orr.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800135a:	7dfb      	ldrb	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	ffe1f7fd 	.word	0xffe1f7fd
 8001368:	ff1f0efe 	.word	0xff1f0efe

0800136c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a64      	ldr	r2, [pc, #400]	; (8001514 <HAL_ADC_Start_DMA+0x1a8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d004      	beq.n	8001390 <HAL_ADC_Start_DMA+0x24>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a63      	ldr	r2, [pc, #396]	; (8001518 <HAL_ADC_Start_DMA+0x1ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d106      	bne.n	800139e <HAL_ADC_Start_DMA+0x32>
 8001390:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_ADC_Start_DMA+0x1a8>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 80b3 	bne.w	8001504 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Start_DMA+0x40>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e0ae      	b.n	800150a <HAL_ADC_Start_DMA+0x19e>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f9cb 	bl	8001750 <ADC_Enable>
 80013ba:	4603      	mov	r3, r0
 80013bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f040 809a 	bne.w	80014fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_ADC_Start_DMA+0x1ac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_Start_DMA+0x84>
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_ADC_Start_DMA+0x1a8>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d115      	bne.n	800141c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d026      	beq.n	8001458 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800141a:	e01d      	b.n	8001458 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a39      	ldr	r2, [pc, #228]	; (8001514 <HAL_ADC_Start_DMA+0x1a8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d004      	beq.n	800143c <HAL_ADC_Start_DMA+0xd0>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_ADC_Start_DMA+0x1ac>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d10d      	bne.n	8001458 <HAL_ADC_Start_DMA+0xec>
 800143c:	4b35      	ldr	r3, [pc, #212]	; (8001514 <HAL_ADC_Start_DMA+0x1a8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001450:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	f023 0206 	bic.w	r2, r3, #6
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001470:	e002      	b.n	8001478 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_ADC_Start_DMA+0x1b0>)
 8001486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_ADC_Start_DMA+0x1b4>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_ADC_Start_DMA+0x1b8>)
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f06f 0202 	mvn.w	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a18      	ldr	r0, [r3, #32]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	334c      	adds	r3, #76	; 0x4c
 80014bc:	4619      	mov	r1, r3
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f001 f89f 	bl	8002604 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014d4:	d108      	bne.n	80014e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014e6:	e00f      	b.n	8001508 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014f8:	e006      	b.n	8001508 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001502:	e001      	b.n	8001508 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001508:	7dfb      	ldrb	r3, [r7, #23]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012400 	.word	0x40012400
 8001518:	40012800 	.word	0x40012800
 800151c:	08001869 	.word	0x08001869
 8001520:	080018e5 	.word	0x080018e5
 8001524:	08001901 	.word	0x08001901

08001528 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
	...

08001560 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e0dc      	b.n	800173a <HAL_ADC_ConfigChannel+0x1da>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d81c      	bhi.n	80015ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4019      	ands	r1, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b05      	subs	r3, #5
 80015bc:	fa00 f203 	lsl.w	r2, r0, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
 80015c8:	e03c      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d81c      	bhi.n	800160c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b23      	subs	r3, #35	; 0x23
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4019      	ands	r1, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b23      	subs	r3, #35	; 0x23
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	e01b      	b.n	8001644 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b41      	subs	r3, #65	; 0x41
 800161e:	221f      	movs	r2, #31
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b41      	subs	r3, #65	; 0x41
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d91c      	bls.n	8001686 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68d9      	ldr	r1, [r3, #12]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	3b1e      	subs	r3, #30
 800165e:	2207      	movs	r2, #7
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3b1e      	subs	r3, #30
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	e019      	b.n	80016ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6919      	ldr	r1, [r3, #16]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	2207      	movs	r2, #7
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	4019      	ands	r1, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6898      	ldr	r0, [r3, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d132      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_ADC_ConfigChannel+0x1e4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d125      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d126      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016f0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d11a      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_ADC_ConfigChannel+0x1e8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_ADC_ConfigChannel+0x1ec>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9a      	lsrs	r2, r3, #18
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001710:	e002      	b.n	8001718 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3b01      	subs	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f9      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x1b2>
 800171e:	e007      	b.n	8001730 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f043 0220 	orr.w	r2, r3, #32
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40012400 	.word	0x40012400
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d039      	beq.n	80017e2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <ADC_Enable+0x9c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <ADC_Enable+0xa0>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800178c:	e002      	b.n	8001794 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800179a:	f7ff fce3 	bl	8001164 <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	e018      	b.n	80017d4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017a2:	f7ff fcdf 	bl	8001164 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d911      	bls.n	80017d4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e007      	b.n	80017e4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d1df      	bne.n	80017a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	431bde83 	.word	0x431bde83

080017f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d127      	bne.n	800185e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800181e:	f7ff fca1 	bl	8001164 <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001824:	e014      	b.n	8001850 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001826:	f7ff fc9d 	bl	8001164 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d90d      	bls.n	8001850 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e007      	b.n	8001860 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d0e3      	beq.n	8001826 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800187e:	2b00      	cmp	r3, #0
 8001880:	d127      	bne.n	80018d2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001898:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800189c:	d115      	bne.n	80018ca <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d111      	bne.n	80018ca <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff fe2c 	bl	8001528 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018d0:	e004      	b.n	80018dc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fe21 	bl	800153a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f043 0204 	orr.w	r2, r3, #4
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7ff fe10 	bl	800154c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0ed      	b.n	8001b22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fa80 	bl	8000e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0202 	bic.w	r2, r2, #2
 8001966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001968:	f7ff fbfc 	bl	8001164 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800196e:	e012      	b.n	8001996 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001970:	f7ff fbf8 	bl	8001164 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d90b      	bls.n	8001996 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2205      	movs	r2, #5
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0c5      	b.n	8001b22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e5      	bne.n	8001970 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b4:	f7ff fbd6 	bl	8001164 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ba:	e012      	b.n	80019e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019bc:	f7ff fbd2 	bl	8001164 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b0a      	cmp	r3, #10
 80019c8:	d90b      	bls.n	80019e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2205      	movs	r2, #5
 80019da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e09f      	b.n	8001b22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0e5      	beq.n	80019bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7e1b      	ldrb	r3, [r3, #24]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e007      	b.n	8001a1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7e5b      	ldrb	r3, [r3, #25]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e9b      	ldrb	r3, [r3, #26]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0220 	bic.w	r2, r2, #32
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7edb      	ldrb	r3, [r3, #27]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0210 	bic.w	r2, r2, #16
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0210 	orr.w	r2, r2, #16
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0208 	orr.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0208 	bic.w	r2, r2, #8
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7f5b      	ldrb	r3, [r3, #29]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0204 	orr.w	r2, r2, #4
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e007      	b.n	8001aec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0204 	bic.w	r2, r2, #4
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	ea42 0103 	orr.w	r1, r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	1e5a      	subs	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d003      	beq.n	8001b50 <HAL_CAN_ConfigFilter+0x26>
 8001b48:	7cfb      	ldrb	r3, [r7, #19]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	f040 80aa 	bne.w	8001ca4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2201      	movs	r2, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d123      	bne.n	8001bd2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3248      	adds	r2, #72	; 0x48
 8001bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	3348      	adds	r3, #72	; 0x48
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d122      	bne.n	8001c20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3248      	adds	r2, #72	; 0x48
 8001c00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c16:	6979      	ldr	r1, [r7, #20]
 8001c18:	3348      	adds	r3, #72	; 0x48
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c66:	e007      	b.n	8001c78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c96:	f023 0201 	bic.w	r2, r3, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e006      	b.n	8001cb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d12e      	bne.n	8001d2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa3c 	bl	8001164 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cee:	e012      	b.n	8001d16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf0:	f7ff fa38 	bl	8001164 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b0a      	cmp	r3, #10
 8001cfc:	d90b      	bls.n	8001d16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e012      	b.n	8001d3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e5      	bne.n	8001cf0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e006      	b.n	8001d3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d003      	beq.n	8001d70 <HAL_CAN_AddTxMessage+0x2c>
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	f040 80b8 	bne.w	8001ee0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a0 	beq.w	8001ed0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	0e1b      	lsrs	r3, r3, #24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d907      	bls.n	8001db0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e09e      	b.n	8001eee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001db0:	2201      	movs	r2, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	409a      	lsls	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	440b      	add	r3, r1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e00f      	b.n	8001dfe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001df2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3318      	adds	r3, #24
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d111      	bne.n	8001e3e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3318      	adds	r3, #24
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3318      	adds	r3, #24
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3307      	adds	r3, #7
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	061a      	lsls	r2, r3, #24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3306      	adds	r3, #6
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3305      	adds	r3, #5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	3204      	adds	r2, #4
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	4610      	mov	r0, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6811      	ldr	r1, [r2, #0]
 8001e66:	ea43 0200 	orr.w	r2, r3, r0
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3303      	adds	r3, #3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	061a      	lsls	r2, r3, #24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3302      	adds	r3, #2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	4313      	orrs	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	4610      	mov	r0, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6811      	ldr	r1, [r2, #0]
 8001e9c:	ea43 0200 	orr.w	r2, r3, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eaa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3318      	adds	r3, #24
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	440b      	add	r3, r1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e00e      	b.n	8001eee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e006      	b.n	8001eee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d002      	beq.n	8001f16 <HAL_CAN_ActivateNotification+0x1e>
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d109      	bne.n	8001f2a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e006      	b.n	8001f38 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08a      	sub	sp, #40	; 0x28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07c      	beq.n	8002082 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f97d 	bl	80022a4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001faa:	e016      	b.n	8001fda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	e00c      	b.n	8001fda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e002      	b.n	8001fda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f980 	bl	80022da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d024      	beq.n	800202e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f95c 	bl	80022b6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ffe:	e016      	b.n	800202e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e00c      	b.n	800202e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201a:	2b00      	cmp	r3, #0
 800201c:	d004      	beq.n	8002028 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	e002      	b.n	800202e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f95f 	bl	80022ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d024      	beq.n	8002082 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002040:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f93b 	bl	80022c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002052:	e016      	b.n	8002082 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e00c      	b.n	8002082 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	e002      	b.n	8002082 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f93e 	bl	80022fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00c      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f92d 	bl	8002322 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f915 	bl	8002310 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00c      	beq.n	800210a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002100:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f90d 	bl	8002346 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8f5 	bl	8002334 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2210      	movs	r2, #16
 8002164:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8f6 	bl	8002358 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2208      	movs	r2, #8
 8002186:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f8ee 	bl	800236a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d075      	beq.n	8002284 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03d      	beq.n	800227c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d038      	beq.n	800227c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002210:	2b30      	cmp	r3, #48	; 0x30
 8002212:	d017      	beq.n	8002244 <HAL_CAN_IRQHandler+0x302>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d804      	bhi.n	8002222 <HAL_CAN_IRQHandler+0x2e0>
 8002218:	2b10      	cmp	r3, #16
 800221a:	d009      	beq.n	8002230 <HAL_CAN_IRQHandler+0x2ee>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d00c      	beq.n	800223a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002220:	e024      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002222:	2b50      	cmp	r3, #80	; 0x50
 8002224:	d018      	beq.n	8002258 <HAL_CAN_IRQHandler+0x316>
 8002226:	2b60      	cmp	r3, #96	; 0x60
 8002228:	d01b      	beq.n	8002262 <HAL_CAN_IRQHandler+0x320>
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d00f      	beq.n	800224e <HAL_CAN_IRQHandler+0x30c>
            break;
 800222e:	e01d      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002238:	e018      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002242:	e013      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f043 0320 	orr.w	r3, r3, #32
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800224c:	e00e      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002256:	e009      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002260:	e004      	b.n	800226c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800227a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2204      	movs	r2, #4
 8002282:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f870 	bl	800237c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
	...

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <__NVIC_EnableIRQ+0x34>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff4f 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff64 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ffb2 	bl	8002480 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff81 	bl	800242c <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff57 	bl	80023f4 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e043      	b.n	80025ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_DMA_Init+0xa8>)
 800256e:	4413      	add	r3, r2
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_DMA_Init+0xac>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <HAL_DMA_Init+0xb0>)
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800259a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800259e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	bffdfff8 	.word	0xbffdfff8
 80025fc:	cccccccd 	.word	0xcccccccd
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Start_IT+0x20>
 8002620:	2302      	movs	r3, #2
 8002622:	e04a      	b.n	80026ba <HAL_DMA_Start_IT+0xb6>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002632:	2b01      	cmp	r3, #1
 8002634:	d13a      	bne.n	80026ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f938 	bl	80028d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 020e 	orr.w	r2, r2, #14
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e00f      	b.n	800269a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0204 	bic.w	r2, r2, #4
 8002688:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 020a 	orr.w	r2, r2, #10
 8002698:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e005      	b.n	80026b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2204      	movs	r2, #4
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04f      	beq.n	800278c <HAL_DMA_IRQHandler+0xc8>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04a      	beq.n	800278c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a66      	ldr	r2, [pc, #408]	; (80028b4 <HAL_DMA_IRQHandler+0x1f0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d029      	beq.n	8002772 <HAL_DMA_IRQHandler+0xae>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <HAL_DMA_IRQHandler+0xaa>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a63      	ldr	r2, [pc, #396]	; (80028bc <HAL_DMA_IRQHandler+0x1f8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01a      	beq.n	8002768 <HAL_DMA_IRQHandler+0xa4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a62      	ldr	r2, [pc, #392]	; (80028c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d012      	beq.n	8002762 <HAL_DMA_IRQHandler+0x9e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_DMA_IRQHandler+0x200>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00a      	beq.n	800275c <HAL_DMA_IRQHandler+0x98>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_DMA_IRQHandler+0x204>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d102      	bne.n	8002756 <HAL_DMA_IRQHandler+0x92>
 8002750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002754:	e00e      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 8002756:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800275a:	e00b      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 800275c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002760:	e008      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 8002762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002766:	e005      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	e002      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 800276e:	2340      	movs	r3, #64	; 0x40
 8002770:	e000      	b.n	8002774 <HAL_DMA_IRQHandler+0xb0>
 8002772:	2304      	movs	r3, #4
 8002774:	4a55      	ldr	r2, [pc, #340]	; (80028cc <HAL_DMA_IRQHandler+0x208>)
 8002776:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8094 	beq.w	80028aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800278a:	e08e      	b.n	80028aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2202      	movs	r2, #2
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d056      	beq.n	800284a <HAL_DMA_IRQHandler+0x186>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d051      	beq.n	800284a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020a 	bic.w	r2, r2, #10
 80027c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <HAL_DMA_IRQHandler+0x1f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d029      	beq.n	800282a <HAL_DMA_IRQHandler+0x166>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <HAL_DMA_IRQHandler+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x162>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a35      	ldr	r2, [pc, #212]	; (80028bc <HAL_DMA_IRQHandler+0x1f8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01a      	beq.n	8002820 <HAL_DMA_IRQHandler+0x15c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_DMA_IRQHandler+0x1fc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d012      	beq.n	800281a <HAL_DMA_IRQHandler+0x156>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <HAL_DMA_IRQHandler+0x200>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00a      	beq.n	8002814 <HAL_DMA_IRQHandler+0x150>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_DMA_IRQHandler+0x204>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d102      	bne.n	800280e <HAL_DMA_IRQHandler+0x14a>
 8002808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800280c:	e00e      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	e00b      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	e008      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 800281a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800281e:	e005      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 8002820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002824:	e002      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 8002826:	2320      	movs	r3, #32
 8002828:	e000      	b.n	800282c <HAL_DMA_IRQHandler+0x168>
 800282a:	2302      	movs	r3, #2
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_DMA_IRQHandler+0x208>)
 800282e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d034      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002848:	e02f      	b.n	80028aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2208      	movs	r2, #8
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d028      	beq.n	80028ac <HAL_DMA_IRQHandler+0x1e8>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d023      	beq.n	80028ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 020e 	bic.w	r2, r2, #14
 8002872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
    }
  }
  return;
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
}
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40020008 	.word	0x40020008
 80028b8:	4002001c 	.word	0x4002001c
 80028bc:	40020030 	.word	0x40020030
 80028c0:	40020044 	.word	0x40020044
 80028c4:	40020058 	.word	0x40020058
 80028c8:	4002006c 	.word	0x4002006c
 80028cc:	40020000 	.word	0x40020000

080028d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d108      	bne.n	8002910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800290e:	e007      	b.n	8002920 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293e:	e127      	b.n	8002b90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002940:	2201      	movs	r2, #1
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	429a      	cmp	r2, r3
 800295a:	f040 8116 	bne.w	8002b8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b12      	cmp	r3, #18
 8002964:	d034      	beq.n	80029d0 <HAL_GPIO_Init+0xa4>
 8002966:	2b12      	cmp	r3, #18
 8002968:	d80d      	bhi.n	8002986 <HAL_GPIO_Init+0x5a>
 800296a:	2b02      	cmp	r3, #2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x9a>
 800296e:	2b02      	cmp	r3, #2
 8002970:	d804      	bhi.n	800297c <HAL_GPIO_Init+0x50>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d031      	beq.n	80029da <HAL_GPIO_Init+0xae>
 8002976:	2b01      	cmp	r3, #1
 8002978:	d01c      	beq.n	80029b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297a:	e048      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800297c:	2b03      	cmp	r3, #3
 800297e:	d043      	beq.n	8002a08 <HAL_GPIO_Init+0xdc>
 8002980:	2b11      	cmp	r3, #17
 8002982:	d01b      	beq.n	80029bc <HAL_GPIO_Init+0x90>
          break;
 8002984:	e043      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002986:	4a89      	ldr	r2, [pc, #548]	; (8002bac <HAL_GPIO_Init+0x280>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d026      	beq.n	80029da <HAL_GPIO_Init+0xae>
 800298c:	4a87      	ldr	r2, [pc, #540]	; (8002bac <HAL_GPIO_Init+0x280>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d806      	bhi.n	80029a0 <HAL_GPIO_Init+0x74>
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_GPIO_Init+0x284>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d020      	beq.n	80029da <HAL_GPIO_Init+0xae>
 8002998:	4a86      	ldr	r2, [pc, #536]	; (8002bb4 <HAL_GPIO_Init+0x288>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_GPIO_Init+0xae>
          break;
 800299e:	e036      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029a0:	4a85      	ldr	r2, [pc, #532]	; (8002bb8 <HAL_GPIO_Init+0x28c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0xae>
 80029a6:	4a85      	ldr	r2, [pc, #532]	; (8002bbc <HAL_GPIO_Init+0x290>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d016      	beq.n	80029da <HAL_GPIO_Init+0xae>
 80029ac:	4a84      	ldr	r2, [pc, #528]	; (8002bc0 <HAL_GPIO_Init+0x294>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0xae>
          break;
 80029b2:	e02c      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e028      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	623b      	str	r3, [r7, #32]
          break;
 80029c4:	e023      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	3308      	adds	r3, #8
 80029cc:	623b      	str	r3, [r7, #32]
          break;
 80029ce:	e01e      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	330c      	adds	r3, #12
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e019      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029e2:	2304      	movs	r3, #4
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e012      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f0:	2308      	movs	r3, #8
 80029f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	611a      	str	r2, [r3, #16]
          break;
 80029fa:	e008      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029fc:	2308      	movs	r3, #8
 80029fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	615a      	str	r2, [r3, #20]
          break;
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2bff      	cmp	r3, #255	; 0xff
 8002a12:	d801      	bhi.n	8002a18 <HAL_GPIO_Init+0xec>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	e001      	b.n	8002a1c <HAL_GPIO_Init+0xf0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2bff      	cmp	r3, #255	; 0xff
 8002a22:	d802      	bhi.n	8002a2a <HAL_GPIO_Init+0xfe>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x104>
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3b08      	subs	r3, #8
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	210f      	movs	r1, #15
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	401a      	ands	r2, r3
 8002a42:	6a39      	ldr	r1, [r7, #32]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8096 	beq.w	8002b8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_GPIO_Init+0x298>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <HAL_GPIO_Init+0x298>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6193      	str	r3, [r2, #24]
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_GPIO_Init+0x298>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a76:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_GPIO_Init+0x29c>)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_GPIO_Init+0x2a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x19e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_GPIO_Init+0x2a4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x19a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_GPIO_Init+0x2a8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x196>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a48      	ldr	r2, [pc, #288]	; (8002bd8 <HAL_GPIO_Init+0x2ac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x192>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x1a0>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x1a0>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x1a0>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x1a0>
 8002aca:	2300      	movs	r3, #0
 8002acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002adc:	493a      	ldr	r1, [pc, #232]	; (8002bc8 <HAL_GPIO_Init+0x29c>)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4938      	ldr	r1, [pc, #224]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4933      	ldr	r1, [pc, #204]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	492e      	ldr	r1, [pc, #184]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	4929      	ldr	r1, [pc, #164]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	4924      	ldr	r1, [pc, #144]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	491f      	ldr	r1, [pc, #124]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	491a      	ldr	r1, [pc, #104]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
 8002b7a:	e006      	b.n	8002b8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4915      	ldr	r1, [pc, #84]	; (8002bdc <HAL_GPIO_Init+0x2b0>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f aed0 	bne.w	8002940 <HAL_GPIO_Init+0x14>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	372c      	adds	r7, #44	; 0x2c
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	10210000 	.word	0x10210000
 8002bb0:	10110000 	.word	0x10110000
 8002bb4:	10120000 	.word	0x10120000
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10320000 	.word	0x10320000
 8002bc0:	10220000 	.word	0x10220000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	40010c00 	.word	0x40010c00
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40011400 	.word	0x40011400
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e001      	b.n	8002c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1e:	787b      	ldrb	r3, [r7, #1]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c24:	887a      	ldrh	r2, [r7, #2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c2a:	e003      	b.n	8002c34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	041a      	lsls	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e10f      	b.n	8002ea2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f81e 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f001 f8ea 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x64>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_I2C_Init+0x240>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x72>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_I2C_Init+0x244>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0db      	b.n	8002ea2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <HAL_I2C_Init+0x248>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a64      	ldr	r2, [pc, #400]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xb4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xc8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_I2C_Init+0x24c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4956      	ldr	r1, [pc, #344]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d80d      	bhi.n	8002d74 <HAL_I2C_Init+0x104>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	bf38      	it	cc
 8002d70:	2304      	movcc	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x130>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x156>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x15e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x184>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	; 0x30
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7fe f946 	bl	8001164 <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 8213 	bne.w	800330e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	497e      	ldr	r1, [pc, #504]	; (80030ec <HAL_I2C_Master_Receive+0x22c>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fac8 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e206      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Receive+0x50>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e1ff      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2222      	movs	r2, #34	; 0x22
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_I2C_Master_Receive+0x230>)
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f9cc 	bl	800331c <I2C_MasterRequestRead>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1c0      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d113      	bne.n	8002fbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e194      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d11d      	bne.n	8003002 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ffe:	b662      	cpsie	i
 8003000:	e172      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b02      	cmp	r3, #2
 8003008:	d11d      	bne.n	8003046 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800301a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003042:	b662      	cpsie	i
 8003044:	e150      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800306c:	e13c      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	2b03      	cmp	r3, #3
 8003074:	f200 80f5 	bhi.w	8003262 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b01      	cmp	r3, #1
 800307e:	d123      	bne.n	80030c8 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fad5 	bl	8003634 <I2C_WaitOnRXNEFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e13d      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030c6:	e10f      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d150      	bne.n	8003172 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	2200      	movs	r2, #0
 80030d8:	4906      	ldr	r1, [pc, #24]	; (80030f4 <HAL_I2C_Master_Receive+0x234>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9d4 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e112      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
 80030ea:	bf00      	nop
 80030ec:	00100002 	.word	0x00100002
 80030f0:	ffff0000 	.word	0xffff0000
 80030f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800313c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003170:	e0ba      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	4967      	ldr	r1, [pc, #412]	; (8003318 <HAL_I2C_Master_Receive+0x458>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f983 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0c1      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800319c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	494f      	ldr	r1, [pc, #316]	; (8003318 <HAL_I2C_Master_Receive+0x458>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f954 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e092      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800322c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003260:	e042      	b.n	80032e8 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f9e4 	bl	8003634 <I2C_WaitOnRXNEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e04c      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d118      	bne.n	80032e8 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f aebe 	bne.w	800306e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	; 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	00010004 	.word	0x00010004

0800331c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d006      	beq.n	8003356 <I2C_MasterRequestRead+0x3a>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d003      	beq.n	8003356 <I2C_MasterRequestRead+0x3a>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003354:	d108      	bne.n	8003368 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e00b      	b.n	8003380 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	2b11      	cmp	r3, #17
 800336e:	d107      	bne.n	8003380 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f87b 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e06d      	b.n	8003478 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a4:	d108      	bne.n	80033b8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	e053      	b.n	8003460 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	11db      	asrs	r3, r3, #7
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f063 030f 	orn	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <I2C_MasterRequestRead+0x164>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8ad 	bl	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e048      	b.n	8003478 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4923      	ldr	r1, [pc, #140]	; (8003484 <I2C_MasterRequestRead+0x168>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f89d 	bl	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e038      	b.n	8003478 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f825 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e017      	b.n	8003478 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	11db      	asrs	r3, r3, #7
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f063 030e 	orn	r3, r3, #14
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <I2C_MasterRequestRead+0x168>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f865 	bl	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010008 	.word	0x00010008
 8003484:	00010002 	.word	0x00010002

08003488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	e025      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d021      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fd fe5f 	bl	8001164 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e023      	b.n	800352e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10d      	bne.n	800350c <I2C_WaitOnFlagUntilTimeout+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	e00c      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d0b6      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003544:	e051      	b.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003554:	d123      	bne.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e046      	b.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d021      	beq.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fd fddd 	bl	8001164 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e020      	b.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10c      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e00b      	b.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d18d      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003640:	e042      	b.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d119      	bne.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e029      	b.n	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fd fd6e 	bl	8001164 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d1b5      	bne.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e26c      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8087 	beq.w	800380e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003700:	4b92      	ldr	r3, [pc, #584]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b04      	cmp	r3, #4
 800370a:	d00c      	beq.n	8003726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800370c:	4b8f      	ldr	r3, [pc, #572]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d112      	bne.n	800373e <HAL_RCC_OscConfig+0x5e>
 8003718:	4b8c      	ldr	r3, [pc, #560]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d10b      	bne.n	800373e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003726:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d06c      	beq.n	800380c <HAL_RCC_OscConfig+0x12c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d168      	bne.n	800380c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e246      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x76>
 8003748:	4b80      	ldr	r3, [pc, #512]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7f      	ldr	r2, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e02e      	b.n	80037b4 <HAL_RCC_OscConfig+0xd4>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x98>
 800375e:	4b7b      	ldr	r3, [pc, #492]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7a      	ldr	r2, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b78      	ldr	r3, [pc, #480]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a77      	ldr	r2, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xd4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0xbc>
 8003782:	4b72      	ldr	r3, [pc, #456]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a71      	ldr	r2, [pc, #452]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xd4>
 800379c:	4b6b      	ldr	r3, [pc, #428]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6a      	ldr	r2, [pc, #424]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a67      	ldr	r2, [pc, #412]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fcd2 	bl	8001164 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fcce 	bl	8001164 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1fa      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5d      	ldr	r3, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe4>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fcbe 	bl	8001164 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fcba 	bl	8001164 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1e6      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x10c>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800381a:	4b4c      	ldr	r3, [pc, #304]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x18c>
 8003832:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x176>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1ba      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4939      	ldr	r1, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <HAL_RCC_OscConfig+0x270>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fc73 	bl	8001164 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd fc6f 	bl	8001164 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e19b      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4927      	ldr	r1, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x270>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fd fc52 	bl	8001164 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fd fc4e 	bl	8001164 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e17a      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03a      	beq.n	8003964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <HAL_RCC_OscConfig+0x274>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fd fc32 	bl	8001164 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003904:	f7fd fc2e 	bl	8001164 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e15a      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_OscConfig+0x26c>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003922:	2001      	movs	r0, #1
 8003924:	f000 fb0a 	bl	8003f3c <RCC_Delay>
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_RCC_OscConfig+0x274>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fd fc18 	bl	8001164 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003936:	e00f      	b.n	8003958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fd fc14 	bl	8001164 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d908      	bls.n	8003958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e140      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	42420000 	.word	0x42420000
 8003954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b9e      	ldr	r3, [pc, #632]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e9      	bne.n	8003938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a6 	beq.w	8003abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b97      	ldr	r3, [pc, #604]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	4b94      	ldr	r3, [pc, #592]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4a93      	ldr	r2, [pc, #588]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	61d3      	str	r3, [r2, #28]
 800398e:	4b91      	ldr	r3, [pc, #580]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b8e      	ldr	r3, [pc, #568]	; (8003bd8 <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d118      	bne.n	80039dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	4b8b      	ldr	r3, [pc, #556]	; (8003bd8 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a8a      	ldr	r2, [pc, #552]	; (8003bd8 <HAL_RCC_OscConfig+0x4f8>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b6:	f7fd fbd5 	bl	8001164 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039be:	f7fd fbd1 	bl	8001164 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0fd      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <HAL_RCC_OscConfig+0x4f8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x312>
 80039e4:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a7a      	ldr	r2, [pc, #488]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e02d      	b.n	8003a4e <HAL_RCC_OscConfig+0x36e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x334>
 80039fa:	4b76      	ldr	r3, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4a75      	ldr	r2, [pc, #468]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a72      	ldr	r2, [pc, #456]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f023 0304 	bic.w	r3, r3, #4
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	e01c      	b.n	8003a4e <HAL_RCC_OscConfig+0x36e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x356>
 8003a1c:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a69      	ldr	r2, [pc, #420]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	e00b      	b.n	8003a4e <HAL_RCC_OscConfig+0x36e>
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a66      	ldr	r2, [pc, #408]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	4b64      	ldr	r3, [pc, #400]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a63      	ldr	r2, [pc, #396]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d015      	beq.n	8003a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fb85 	bl	8001164 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fb81 	bl	8001164 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e0ab      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCC_OscConfig+0x37e>
 8003a80:	e014      	b.n	8003aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a82:	f7fd fb6f 	bl	8001164 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd fb6b 	bl	8001164 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e095      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ee      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab2:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a47      	ldr	r2, [pc, #284]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8081 	beq.w	8003bca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac8:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d061      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d146      	bne.n	8003b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <HAL_RCC_OscConfig+0x4fc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fb3f 	bl	8001164 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fb3b 	bl	8001164 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e067      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b10:	d108      	bne.n	8003b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	492d      	ldr	r1, [pc, #180]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a19      	ldr	r1, [r3, #32]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	430b      	orrs	r3, r1
 8003b36:	4927      	ldr	r1, [pc, #156]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x4fc>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fd fb0f 	bl	8001164 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fb0b 	bl	8001164 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e037      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x46a>
 8003b68:	e02f      	b.n	8003bca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <HAL_RCC_OscConfig+0x4fc>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fd faf8 	bl	8001164 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd faf4 	bl	8001164 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e020      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x498>
 8003b96:	e018      	b.n	8003bca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e013      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42420060 	.word	0x42420060

08003be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0d0      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d910      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 0207 	bic.w	r2, r3, #7
 8003c0a:	4965      	ldr	r1, [pc, #404]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0b8      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b59      	ldr	r3, [pc, #356]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a58      	ldr	r2, [pc, #352]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c54:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	494d      	ldr	r1, [pc, #308]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d040      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d115      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e07f      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	4b41      	ldr	r3, [pc, #260]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e073      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06b      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4936      	ldr	r1, [pc, #216]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fa48 	bl	8001164 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fd fa44 	bl	8001164 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e053      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 020c 	and.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d210      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e032      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4916      	ldr	r1, [pc, #88]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	490e      	ldr	r1, [pc, #56]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d6e:	f000 f821 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d72:	4601      	mov	r1, r0
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	fa21 f303 	lsr.w	r3, r1, r3
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_ClockConfig+0x1cc>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd f8e2 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08007dd4 	.word	0x08007dd4
 8003dac:	20000000 	.word	0x20000000
 8003db0:	20000004 	.word	0x20000004

08003db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b490      	push	{r4, r7}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dba:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dbc:	1d3c      	adds	r4, r7, #4
 8003dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x46>
 8003df2:	e02d      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df6:	623b      	str	r3, [r7, #32]
      break;
 8003df8:	e02d      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	0c9b      	lsrs	r3, r3, #18
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e06:	4413      	add	r3, r2
 8003e08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d013      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c5b      	lsrs	r3, r3, #17
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e26:	4413      	add	r3, r2
 8003e28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e32:	fb02 f203 	mul.w	r2, r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e004      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	623b      	str	r3, [r7, #32]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e52:	623b      	str	r3, [r7, #32]
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc90      	pop	{r4, r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	08007d48 	.word	0x08007d48
 8003e68:	08007d58 	.word	0x08007d58
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	003d0900 	.word	0x003d0900

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000000 	.word	0x20000000

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff2 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e94:	4601      	mov	r1, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08007de4 	.word	0x08007de4

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb8:	f7ff ffde 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0adb      	lsrs	r3, r3, #11
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08007de4 	.word	0x08007de4

08003edc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	220f      	movs	r2, #15
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_RCC_GetClockConfig+0x58>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetClockConfig+0x5c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40022000 	.word	0x40022000

08003f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <RCC_Delay+0x34>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <RCC_Delay+0x38>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0a5b      	lsrs	r3, r3, #9
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f58:	bf00      	nop
  }
  while (Delay --);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	60fa      	str	r2, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f9      	bne.n	8003f58 <RCC_Delay+0x1c>
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000
 8003f74:	10624dd3 	.word	0x10624dd3

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d07d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f98:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	61d3      	str	r3, [r2, #28]
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4b46      	ldr	r3, [pc, #280]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d118      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd f8c4 	bl	8001164 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fd f8c0 	bl	8001164 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e06d      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d027      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800401c:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f88f 	bl	8001164 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd f88b 	bl	8001164 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e036      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4917      	ldr	r1, [pc, #92]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	4313      	orrs	r3, r2
 800407c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	490b      	ldr	r1, [pc, #44]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4904      	ldr	r1, [pc, #16]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42420440 	.word	0x42420440

080040e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e01d      	b.n	8004132 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f815 	bl	800413a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 f962 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d007      	beq.n	8004186 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d122      	bne.n	80041ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0202 	mvn.w	r2, #2
 80041be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8ed 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 80041da:	e005      	b.n	80041e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8e0 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8ef 	bl	80043c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d122      	bne.n	8004242 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d11b      	bne.n	8004242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0204 	mvn.w	r2, #4
 8004212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8c3 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 800422e:	e005      	b.n	800423c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8b6 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8c5 	bl	80043c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d122      	bne.n	8004296 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d11b      	bne.n	8004296 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0208 	mvn.w	r2, #8
 8004266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f899 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 8004282:	e005      	b.n	8004290 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f88c 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f89b 	bl	80043c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d122      	bne.n	80042ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d11b      	bne.n	80042ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0210 	mvn.w	r2, #16
 80042ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2208      	movs	r2, #8
 80042c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f86f 	bl	80043b4 <HAL_TIM_IC_CaptureCallback>
 80042d6:	e005      	b.n	80042e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f862 	bl	80043a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f871 	bl	80043c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10e      	bne.n	8004316 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0201 	mvn.w	r2, #1
 800430e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fc fc8f 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d10e      	bne.n	8004342 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d107      	bne.n	8004342 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800433a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8c0 	bl	80044c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d10e      	bne.n	800436e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d107      	bne.n	800436e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f835 	bl	80043d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b20      	cmp	r3, #32
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0220 	mvn.w	r2, #32
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f88b 	bl	80044b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <TIM_Base_SetConfig+0xb8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <TIM_Base_SetConfig+0xbc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a25      	ldr	r2, [pc, #148]	; (80044ac <TIM_Base_SetConfig+0xc0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <TIM_Base_SetConfig+0xb8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <TIM_Base_SetConfig+0xbc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <TIM_Base_SetConfig+0xc0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <TIM_Base_SetConfig+0xb8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	615a      	str	r2, [r3, #20]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800

080044b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044d6:	e003      	b.n	80044e0 <LoopCopyDataInit>

080044d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80044dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80044de:	3104      	adds	r1, #4

080044e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80044e0:	480a      	ldr	r0, [pc, #40]	; (800450c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80044e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80044e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80044e8:	d3f6      	bcc.n	80044d8 <CopyDataInit>
  ldr r2, =_sbss
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80044ec:	e002      	b.n	80044f4 <LoopFillZerobss>

080044ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80044ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80044f0:	f842 3b04 	str.w	r3, [r2], #4

080044f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80044f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80044f8:	d3f9      	bcc.n	80044ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044fa:	f7fc fdd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044fe:	f003 fbad 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004502:	f7fb fe83 	bl	800020c <main>
  bx lr
 8004506:	4770      	bx	lr
  ldr r3, =_sidata
 8004508:	08007e00 	.word	0x08007e00
  ldr r0, =_sdata
 800450c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004510:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004514:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004518:	200023a0 	.word	0x200023a0

0800451c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800451c:	e7fe      	b.n	800451c <ADC1_2_IRQHandler>

0800451e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f103 0208 	add.w	r2, r3, #8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f103 0208 	add.w	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d103      	bne.n	80045da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e00c      	b.n	80045f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3308      	adds	r3, #8
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e002      	b.n	80045e8 <vListInsert+0x2e>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d2f6      	bcs.n	80045e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6892      	ldr	r2, [r2, #8]
 8004640:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6852      	ldr	r2, [r2, #4]
 800464a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d103      	bne.n	800465e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046a4:	f001 fca6 	bl	8005ff4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	441a      	add	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	3b01      	subs	r3, #1
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d114      	bne.n	8004724 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01a      	beq.n	8004738 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3310      	adds	r3, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f000 ff9c 	bl	8005644 <xTaskRemoveFromEventList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <xQueueGenericReset+0xcc>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e009      	b.n	8004738 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3310      	adds	r3, #16
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fef8 	bl	800451e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fef3 	bl	800451e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004738:	f001 fc8a 	bl	8006050 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800473c:	2301      	movs	r3, #1
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <xQueueGenericCreate+0x28>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e7fe      	b.n	8004772 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e004      	b.n	800478a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3348      	adds	r3, #72	; 0x48
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fcf4 	bl	800617c <pvPortMalloc>
 8004794:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00f      	beq.n	80047bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3348      	adds	r3, #72	; 0x48
 80047a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047aa:	79fa      	ldrb	r2, [r7, #7]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f805 	bl	80047c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047bc:	69bb      	ldr	r3, [r7, #24]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e002      	b.n	80047e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047f4:	2101      	movs	r1, #1
 80047f6:	69b8      	ldr	r0, [r7, #24]
 80047f8:	f7ff ff40 	bl	800467c <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	2073      	movs	r0, #115	; 0x73
 8004804:	f002 fb7c 	bl	8006f00 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b091      	sub	sp, #68	; 0x44
 8004814:	af02      	add	r7, sp, #8
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <xQueueSemaphoreTake+0x30>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e7fe      	b.n	800483e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <xQueueSemaphoreTake+0x4c>
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e7fe      	b.n	800485a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800485c:	f001 f8b0 	bl	80059c0 <xTaskGetSchedulerState>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <xQueueSemaphoreTake+0x5c>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xQueueSemaphoreTake+0x60>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <xQueueSemaphoreTake+0x62>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <xQueueSemaphoreTake+0x7a>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e7fe      	b.n	8004888 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800488a:	f001 fbb3 	bl	8005ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d036      	beq.n	8004908 <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	4618      	mov	r0, r3
 800489e:	f003 f895 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 80048a2:	4604      	mov	r4, r0
 80048a4:	2000      	movs	r0, #0
 80048a6:	f003 f891 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 80048aa:	4601      	mov	r1, r0
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	2301      	movs	r3, #1
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	460a      	mov	r2, r1
 80048b6:	4621      	mov	r1, r4
 80048b8:	205c      	movs	r0, #92	; 0x5c
 80048ba:	f002 fb97 	bl	8006fec <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <xQueueSemaphoreTake+0xc8>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80048ce:	f001 f9c5 	bl	8005c5c <pvTaskIncrementMutexHeldCount>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00f      	beq.n	8004900 <xQueueSemaphoreTake+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	3310      	adds	r3, #16
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fead 	bl	8005644 <xTaskRemoveFromEventList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <xQueueSemaphoreTake+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048f0:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <xQueueSemaphoreTake+0x278>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004900:	f001 fba6 	bl	8006050 <vPortExitCritical>
				return pdPASS;
 8004904:	2301      	movs	r3, #1
 8004906:	e0ba      	b.n	8004a7e <xQueueSemaphoreTake+0x26e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d122      	bne.n	8004954 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <xQueueSemaphoreTake+0x118>
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e7fe      	b.n	8004926 <xQueueSemaphoreTake+0x116>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004928:	f001 fb92 	bl	8006050 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	4618      	mov	r0, r3
 8004930:	f003 f84c 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 8004934:	4604      	mov	r4, r0
 8004936:	2000      	movs	r0, #0
 8004938:	f003 f848 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 800493c:	4601      	mov	r1, r0
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	2301      	movs	r3, #1
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	460a      	mov	r2, r1
 8004948:	4621      	mov	r1, r4
 800494a:	205c      	movs	r0, #92	; 0x5c
 800494c:	f002 fb4e 	bl	8006fec <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004950:	2300      	movs	r3, #0
 8004952:	e094      	b.n	8004a7e <xQueueSemaphoreTake+0x26e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fed6 	bl	8005710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004968:	f001 fb72 	bl	8006050 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496c:	f000 fc62 	bl	8005234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004970:	f001 fb40 	bl	8005ff4 <vPortEnterCritical>
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497a:	b25b      	sxtb	r3, r3
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d103      	bne.n	800498a <xQueueSemaphoreTake+0x17a>
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d103      	bne.n	80049a0 <xQueueSemaphoreTake+0x190>
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	f001 fb56 	bl	8006050 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a4:	463a      	mov	r2, r7
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fec5 	bl	800573c <xTaskCheckForTimeOut>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d132      	bne.n	8004a1e <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ba:	f000 f8d0 	bl	8004b5e <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d026      	beq.n	8004a12 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 80049cc:	f001 fb12 	bl	8005ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f811 	bl	80059fc <xTaskPriorityInherit>
 80049da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049dc:	f001 fb38 	bl	8006050 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe07 	bl	80055fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f0:	f000 f863 	bl	8004aba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049f4:	f000 fc2c 	bl	8005250 <xTaskResumeAll>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f47f af45 	bne.w	800488a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <xQueueSemaphoreTake+0x278>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	e73b      	b.n	800488a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a14:	f000 f851 	bl	8004aba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a18:	f000 fc1a 	bl	8005250 <xTaskResumeAll>
 8004a1c:	e735      	b.n	800488a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a20:	f000 f84b 	bl	8004aba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a24:	f000 fc14 	bl	8005250 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2a:	f000 f898 	bl	8004b5e <prvIsQueueEmpty>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f43f af2a 	beq.w	800488a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8004a3c:	f001 fada 	bl	8005ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a42:	f000 f823 	bl	8004a8c <prvGetDisinheritPriorityAfterTimeout>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f85e 	bl	8005b10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a54:	f001 fafc 	bl	8006050 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f002 ffb6 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 8004a60:	4604      	mov	r4, r0
 8004a62:	2000      	movs	r0, #0
 8004a64:	f002 ffb2 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 8004a68:	4601      	mov	r1, r0
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	460a      	mov	r2, r1
 8004a74:	4621      	mov	r1, r4
 8004a76:	205c      	movs	r0, #92	; 0x5c
 8004a78:	f002 fab8 	bl	8006fec <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	373c      	adds	r7, #60	; 0x3c
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1c3 0307 	rsb	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e001      	b.n	8004aae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004aae:	68fb      	ldr	r3, [r7, #12]
	}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ac2:	f001 fa97 	bl	8005ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004acc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ace:	e011      	b.n	8004af4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fdb1 	bl	8005644 <xTaskRemoveFromEventList>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ae8:	f000 fe88 	bl	80057fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dce9      	bgt.n	8004ad0 <prvUnlockQueue+0x16>
 8004afc:	e000      	b.n	8004b00 <prvUnlockQueue+0x46>
					break;
 8004afe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b08:	f001 faa2 	bl	8006050 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b0c:	f001 fa72 	bl	8005ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b18:	e011      	b.n	8004b3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3310      	adds	r3, #16
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fd8c 	bl	8005644 <xTaskRemoveFromEventList>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b32:	f000 fe63 	bl	80057fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dce9      	bgt.n	8004b1a <prvUnlockQueue+0x60>
 8004b46:	e000      	b.n	8004b4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	22ff      	movs	r2, #255	; 0xff
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b52:	f001 fa7d 	bl	8006050 <vPortExitCritical>
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b66:	f001 fa45 	bl	8005ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e001      	b.n	8004b7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b7c:	f001 fa68 	bl	8006050 <vPortExitCritical>

	return xReturn;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08e      	sub	sp, #56	; 0x38
 8004b8e:	af04      	add	r7, sp, #16
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <xTaskCreateStatic+0x28>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	e7fe      	b.n	8004bb0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <xTaskCreateStatic+0x42>
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e7fe      	b.n	8004bca <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bcc:	2354      	movs	r3, #84	; 0x54
 8004bce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b54      	cmp	r3, #84	; 0x54
 8004bd4:	d009      	beq.n	8004bea <xTaskCreateStatic+0x60>
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	e7fe      	b.n	8004be8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01e      	beq.n	8004c2e <xTaskCreateStatic+0xa4>
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01b      	beq.n	8004c2e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9303      	str	r3, [sp, #12]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f850 	bl	8004cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c28:	f000 f8cc 	bl	8004dc4 <prvAddNewTaskToReadyList>
 8004c2c:	e001      	b.n	8004c32 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c32:	697b      	ldr	r3, [r7, #20]
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af04      	add	r7, sp, #16
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 fa93 	bl	800617c <pvPortMalloc>
 8004c56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c5e:	2054      	movs	r0, #84	; 0x54
 8004c60:	f001 fa8c 	bl	800617c <pvPortMalloc>
 8004c64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
 8004c72:	e005      	b.n	8004c80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f001 fb43 	bl	8006300 <vPortFree>
 8004c7a:	e001      	b.n	8004c80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d017      	beq.n	8004cb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	2300      	movs	r3, #0
 8004c92:	9303      	str	r3, [sp, #12]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f80e 	bl	8004cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004caa:	69f8      	ldr	r0, [r7, #28]
 8004cac:	f000 f88a 	bl	8004dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e002      	b.n	8004cbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
	}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <prvInitialiseNewTask+0x46>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e7fe      	b.n	8004d0a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	e012      	b.n	8004d38 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	7819      	ldrb	r1, [r3, #0]
 8004d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	3334      	adds	r3, #52	; 0x34
 8004d22:	460a      	mov	r2, r1
 8004d24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d9e9      	bls.n	8004d12 <prvInitialiseNewTask+0x4c>
 8004d3e:	e000      	b.n	8004d42 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004d40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d901      	bls.n	8004d54 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d50:	2306      	movs	r3, #6
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	2200      	movs	r2, #0
 8004d64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fbf6 	bl	800455c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	3318      	adds	r3, #24
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fbf1 	bl	800455c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	f1c3 0207 	rsb	r2, r3, #7
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2200      	movs	r2, #0
 8004d94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	69b8      	ldr	r0, [r7, #24]
 8004da4:	f000 ffe6 	bl	8005d74 <pxPortInitialiseStack>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc4:	b5b0      	push	{r4, r5, r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dcc:	f001 f912 	bl	8005ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd0:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <prvAddNewTaskToReadyList+0xf4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a38      	ldr	r2, [pc, #224]	; (8004eb8 <prvAddNewTaskToReadyList+0xf4>)
 8004dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dda:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <prvAddNewTaskToReadyList+0xf8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004de2:	4a36      	ldr	r2, [pc, #216]	; (8004ebc <prvAddNewTaskToReadyList+0xf8>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de8:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <prvAddNewTaskToReadyList+0xf4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d110      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df0:	f000 fd28 	bl	8005844 <prvInitialiseTaskLists>
 8004df4:	e00d      	b.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004df6:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <prvAddNewTaskToReadyList+0xfc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <prvAddNewTaskToReadyList+0xf8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d802      	bhi.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <prvAddNewTaskToReadyList+0xf8>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <prvAddNewTaskToReadyList+0x100>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <prvAddNewTaskToReadyList+0x100>)
 8004e1a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <prvAddNewTaskToReadyList+0x8c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f002 fcab 	bl	8007780 <SEGGER_SYSVIEW_OnTaskCreate>
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461c      	mov	r4, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	1ae3      	subs	r3, r4, r3
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	f001 fb6a 	bl	8006524 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 fd18 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <prvAddNewTaskToReadyList+0x104>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <prvAddNewTaskToReadyList+0x104>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <prvAddNewTaskToReadyList+0x108>)
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7ff fb77 	bl	8004574 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e86:	f001 f8e3 	bl	8006050 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <prvAddNewTaskToReadyList+0xfc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <prvAddNewTaskToReadyList+0xf8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d207      	bcs.n	8004eb0 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb8:	20000384 	.word	0x20000384
 8004ebc:	20000284 	.word	0x20000284
 8004ec0:	20000390 	.word	0x20000390
 8004ec4:	200003a0 	.word	0x200003a0
 8004ec8:	2000038c 	.word	0x2000038c
 8004ecc:	20000288 	.word	0x20000288
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004edc:	f001 f88a 	bl	8005ff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <vTaskDelete+0x18>
 8004ee6:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <vTaskDelete+0x110>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	e000      	b.n	8004eee <vTaskDelete+0x1a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fb98 	bl	800462a <uxListRemove>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d115      	bne.n	8004f2c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4938      	ldr	r1, [pc, #224]	; (8004fe8 <vTaskDelete+0x114>)
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <vTaskDelete+0x58>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43da      	mvns	r2, r3
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <vTaskDelete+0x118>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4013      	ands	r3, r2
 8004f28:	4a30      	ldr	r2, [pc, #192]	; (8004fec <vTaskDelete+0x118>)
 8004f2a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3318      	adds	r3, #24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fb76 	bl	800462a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004f3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <vTaskDelete+0x11c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <vTaskDelete+0x11c>)
 8004f46:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <vTaskDelete+0x110>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10b      	bne.n	8004f6a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4826      	ldr	r0, [pc, #152]	; (8004ff4 <vTaskDelete+0x120>)
 8004f5a:	f7ff fb0b 	bl	8004574 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <vTaskDelete+0x124>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <vTaskDelete+0x124>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e009      	b.n	8004f7e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <vTaskDelete+0x128>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <vTaskDelete+0x128>)
 8004f72:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fcd1 	bl	800591c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004f7a:	f000 fcfd 	bl	8005978 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f002 fd23 	bl	80079cc <SEGGER_SYSVIEW_ShrinkId>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4619      	mov	r1, r3
 8004f8a:	2022      	movs	r0, #34	; 0x22
 8004f8c:	f001 ff22 	bl	8006dd4 <SEGGER_SYSVIEW_RecordU32>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fb2e 	bl	80065f4 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8004f98:	f001 f85a 	bl	8006050 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <vTaskDelete+0x12c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <vTaskDelete+0x110>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d115      	bne.n	8004fda <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004fae:	4b15      	ldr	r3, [pc, #84]	; (8005004 <vTaskDelete+0x130>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <vTaskDelete+0xf6>
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	e7fe      	b.n	8004fc8 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <vTaskDelete+0x134>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000284 	.word	0x20000284
 8004fe8:	20000288 	.word	0x20000288
 8004fec:	2000038c 	.word	0x2000038c
 8004ff0:	200003a0 	.word	0x200003a0
 8004ff4:	20000358 	.word	0x20000358
 8004ff8:	2000036c 	.word	0x2000036c
 8004ffc:	20000384 	.word	0x20000384
 8005000:	20000390 	.word	0x20000390
 8005004:	200003ac 	.word	0x200003ac
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <vTaskDelayUntil+0x28>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e7fe      	b.n	8005032 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <vTaskDelayUntil+0x42>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	e7fe      	b.n	800504c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <vTaskDelayUntil+0xf0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <vTaskDelayUntil+0x5e>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e7fe      	b.n	8005068 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800506a:	f000 f8e3 	bl	8005234 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <vTaskDelayUntil+0xf4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	4413      	add	r3, r2
 800507c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	429a      	cmp	r2, r3
 8005086:	d20b      	bcs.n	80050a0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	429a      	cmp	r2, r3
 8005090:	d211      	bcs.n	80050b6 <vTaskDelayUntil+0xaa>
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	429a      	cmp	r2, r3
 8005098:	d90d      	bls.n	80050b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
 800509e:	e00a      	b.n	80050b6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d303      	bcc.n	80050b2 <vTaskDelayUntil+0xa6>
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d901      	bls.n	80050b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80050c2:	2024      	movs	r0, #36	; 0x24
 80050c4:	f001 fe68 	bl	8006d98 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fdd7 	bl	8005c84 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80050d6:	f000 f8bb 	bl	8005250 <xTaskResumeAll>
 80050da:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <vTaskDelayUntil+0xf8>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200003ac 	.word	0x200003ac
 8005100:	20000388 	.word	0x20000388
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01a      	beq.n	8005150 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <vTaskDelay+0x68>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <vTaskDelay+0x2e>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	e7fe      	b.n	8005134 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005136:	f000 f87d 	bl	8005234 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	2023      	movs	r0, #35	; 0x23
 800513e:	f001 fe49 	bl	8006dd4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fd9d 	bl	8005c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800514a:	f000 f881 	bl	8005250 <xTaskResumeAll>
 800514e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <vTaskDelay+0x6c>)
 8005158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200003ac 	.word	0x200003ac
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005186:	463a      	mov	r2, r7
 8005188:	1d39      	adds	r1, r7, #4
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f824 	bl	80001dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	9202      	str	r2, [sp, #8]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	2300      	movs	r3, #0
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	460a      	mov	r2, r1
 80051a6:	491d      	ldr	r1, [pc, #116]	; (800521c <vTaskStartScheduler+0xa4>)
 80051a8:	481d      	ldr	r0, [pc, #116]	; (8005220 <vTaskStartScheduler+0xa8>)
 80051aa:	f7ff fcee 	bl	8004b8a <xTaskCreateStatic>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <vTaskStartScheduler+0xac>)
 80051b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <vTaskStartScheduler+0xac>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e001      	b.n	80051c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d115      	bne.n	80051f8 <vTaskStartScheduler+0x80>
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <vTaskStartScheduler+0xb0>)
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <vTaskStartScheduler+0xb4>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <vTaskStartScheduler+0xb8>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051f2:	f000 fe39 	bl	8005e68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051f6:	e00d      	b.n	8005214 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d109      	bne.n	8005214 <vTaskStartScheduler+0x9c>
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e7fe      	b.n	8005212 <vTaskStartScheduler+0x9a>
}
 8005214:	bf00      	nop
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	08007d5c 	.word	0x08007d5c
 8005220:	08005815 	.word	0x08005815
 8005224:	200003a8 	.word	0x200003a8
 8005228:	200003a4 	.word	0x200003a4
 800522c:	20000390 	.word	0x20000390
 8005230:	20000388 	.word	0x20000388

08005234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <vTaskSuspendAll+0x18>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	4a03      	ldr	r2, [pc, #12]	; (800524c <vTaskSuspendAll+0x18>)
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	200003ac 	.word	0x200003ac

08005250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800525e:	4b43      	ldr	r3, [pc, #268]	; (800536c <xTaskResumeAll+0x11c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <xTaskResumeAll+0x2a>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	e7fe      	b.n	8005278 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800527a:	f000 febb 	bl	8005ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <xTaskResumeAll+0x11c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3b01      	subs	r3, #1
 8005284:	4a39      	ldr	r2, [pc, #228]	; (800536c <xTaskResumeAll+0x11c>)
 8005286:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <xTaskResumeAll+0x11c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d165      	bne.n	800535c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005290:	4b37      	ldr	r3, [pc, #220]	; (8005370 <xTaskResumeAll+0x120>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d061      	beq.n	800535c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005298:	e032      	b.n	8005300 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <xTaskResumeAll+0x124>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3318      	adds	r3, #24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff f9bf 	bl	800462a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff f9ba 	bl	800462a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f002 fae5 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	2201      	movs	r2, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <xTaskResumeAll+0x128>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <xTaskResumeAll+0x128>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <xTaskResumeAll+0x12c>)
 80052de:	441a      	add	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7ff f944 	bl	8004574 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4b23      	ldr	r3, [pc, #140]	; (8005380 <xTaskResumeAll+0x130>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80052fa:	4b22      	ldr	r3, [pc, #136]	; (8005384 <xTaskResumeAll+0x134>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005300:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <xTaskResumeAll+0x124>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1c8      	bne.n	800529a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800530e:	f000 fb33 	bl	8005978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <xTaskResumeAll+0x138>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800531e:	f000 f845 	bl	80053ac <xTaskIncrementTick>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <xTaskResumeAll+0x134>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f1      	bne.n	800531e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <xTaskResumeAll+0x138>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <xTaskResumeAll+0x134>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <xTaskResumeAll+0x13c>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800535c:	f000 fe78 	bl	8006050 <vPortExitCritical>

	return xAlreadyYielded;
 8005360:	68bb      	ldr	r3, [r7, #8]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200003ac 	.word	0x200003ac
 8005370:	20000384 	.word	0x20000384
 8005374:	20000344 	.word	0x20000344
 8005378:	2000038c 	.word	0x2000038c
 800537c:	20000288 	.word	0x20000288
 8005380:	20000284 	.word	0x20000284
 8005384:	20000398 	.word	0x20000398
 8005388:	20000394 	.word	0x20000394
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <xTaskGetTickCount+0x18>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800539c:	687b      	ldr	r3, [r7, #4]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	20000388 	.word	0x20000388

080053ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b6:	4b52      	ldr	r3, [pc, #328]	; (8005500 <xTaskIncrementTick+0x154>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 8090 	bne.w	80054e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053c0:	4b50      	ldr	r3, [pc, #320]	; (8005504 <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053c8:	4a4e      	ldr	r2, [pc, #312]	; (8005504 <xTaskIncrementTick+0x158>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11f      	bne.n	8005414 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <xTaskIncrementTick+0x15c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <xTaskIncrementTick+0x46>
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	e7fe      	b.n	80053f0 <xTaskIncrementTick+0x44>
 80053f2:	4b45      	ldr	r3, [pc, #276]	; (8005508 <xTaskIncrementTick+0x15c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	4b44      	ldr	r3, [pc, #272]	; (800550c <xTaskIncrementTick+0x160>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a42      	ldr	r2, [pc, #264]	; (8005508 <xTaskIncrementTick+0x15c>)
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4a42      	ldr	r2, [pc, #264]	; (800550c <xTaskIncrementTick+0x160>)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b42      	ldr	r3, [pc, #264]	; (8005510 <xTaskIncrementTick+0x164>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	4a40      	ldr	r2, [pc, #256]	; (8005510 <xTaskIncrementTick+0x164>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	f000 fab2 	bl	8005978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005414:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <xTaskIncrementTick+0x168>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d351      	bcc.n	80054c2 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <xTaskIncrementTick+0x15c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <xTaskIncrementTick+0x80>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <xTaskIncrementTick+0x82>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	4b38      	ldr	r3, [pc, #224]	; (8005514 <xTaskIncrementTick+0x168>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
					break;
 800543a:	e042      	b.n	80054c2 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800543c:	4b32      	ldr	r3, [pc, #200]	; (8005508 <xTaskIncrementTick+0x15c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d203      	bcs.n	800545c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005454:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <xTaskIncrementTick+0x168>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6013      	str	r3, [r2, #0]
						break;
 800545a:	e032      	b.n	80054c2 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3304      	adds	r3, #4
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff f8e2 	bl	800462a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	3318      	adds	r3, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f8d9 	bl	800462a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f002 fa04 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	2201      	movs	r2, #1
 8005486:	409a      	lsls	r2, r3
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <xTaskIncrementTick+0x16c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4313      	orrs	r3, r2
 800548e:	4a22      	ldr	r2, [pc, #136]	; (8005518 <xTaskIncrementTick+0x16c>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4a1f      	ldr	r2, [pc, #124]	; (800551c <xTaskIncrementTick+0x170>)
 80054a0:	441a      	add	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7ff f863 	bl	8004574 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <xTaskIncrementTick+0x174>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3b0      	bcc.n	800541e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80054bc:	2301      	movs	r3, #1
 80054be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c0:	e7ad      	b.n	800541e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <xTaskIncrementTick+0x174>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	4914      	ldr	r1, [pc, #80]	; (800551c <xTaskIncrementTick+0x170>)
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d907      	bls.n	80054ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e004      	b.n	80054ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <xTaskIncrementTick+0x178>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <xTaskIncrementTick+0x178>)
 80054e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <xTaskIncrementTick+0x17c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200003ac 	.word	0x200003ac
 8005504:	20000388 	.word	0x20000388
 8005508:	2000033c 	.word	0x2000033c
 800550c:	20000340 	.word	0x20000340
 8005510:	2000039c 	.word	0x2000039c
 8005514:	200003a4 	.word	0x200003a4
 8005518:	2000038c 	.word	0x2000038c
 800551c:	20000288 	.word	0x20000288
 8005520:	20000284 	.word	0x20000284
 8005524:	20000394 	.word	0x20000394
 8005528:	20000398 	.word	0x20000398

0800552c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <vTaskSwitchContext+0xb8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <vTaskSwitchContext+0xbc>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005540:	e04c      	b.n	80055dc <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8005542:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <vTaskSwitchContext+0xbc>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005548:	4b28      	ldr	r3, [pc, #160]	; (80055ec <vTaskSwitchContext+0xc0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	f1c3 031f 	rsb	r3, r3, #31
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	4924      	ldr	r1, [pc, #144]	; (80055f0 <vTaskSwitchContext+0xc4>)
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	e7fe      	b.n	8005584 <vTaskSwitchContext+0x58>
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <vTaskSwitchContext+0xc4>)
 8005592:	4413      	add	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3308      	adds	r3, #8
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <vTaskSwitchContext+0x8a>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <vTaskSwitchContext+0xc8>)
 80055be:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <vTaskSwitchContext+0xc8>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <vTaskSwitchContext+0xcc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d102      	bne.n	80055d2 <vTaskSwitchContext+0xa6>
 80055cc:	f002 f8bc 	bl	8007748 <SEGGER_SYSVIEW_OnIdle>
}
 80055d0:	e004      	b.n	80055dc <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <vTaskSwitchContext+0xc8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f002 f914 	bl	8007804 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200003ac 	.word	0x200003ac
 80055e8:	20000398 	.word	0x20000398
 80055ec:	2000038c 	.word	0x2000038c
 80055f0:	20000288 	.word	0x20000288
 80055f4:	20000284 	.word	0x20000284
 80055f8:	200003a8 	.word	0x200003a8

080055fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <vTaskPlaceOnEventList+0x24>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e7fe      	b.n	800561e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <vTaskPlaceOnEventList+0x44>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3318      	adds	r3, #24
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7fe ffc6 	bl	80045ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800562e:	2101      	movs	r1, #1
 8005630:	6838      	ldr	r0, [r7, #0]
 8005632:	f000 fb27 	bl	8005c84 <prvAddCurrentTaskToDelayedList>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000284 	.word	0x20000284

08005644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <xTaskRemoveFromEventList+0x2a>
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e7fe      	b.n	800566c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3318      	adds	r3, #24
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe ffd9 	bl	800462a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005678:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <xTaskRemoveFromEventList+0xb4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d120      	bne.n	80056c2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe ffd0 	bl	800462a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4618      	mov	r0, r3
 800568e:	f002 f8fb 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	2201      	movs	r2, #1
 8005698:	409a      	lsls	r2, r3
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <xTaskRemoveFromEventList+0xb8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4313      	orrs	r3, r2
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <xTaskRemoveFromEventList+0xb8>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a13      	ldr	r2, [pc, #76]	; (8005700 <xTaskRemoveFromEventList+0xbc>)
 80056b2:	441a      	add	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe ff5a 	bl	8004574 <vListInsertEnd>
 80056c0:	e005      	b.n	80056ce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3318      	adds	r3, #24
 80056c6:	4619      	mov	r1, r3
 80056c8:	480e      	ldr	r0, [pc, #56]	; (8005704 <xTaskRemoveFromEventList+0xc0>)
 80056ca:	f7fe ff53 	bl	8004574 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <xTaskRemoveFromEventList+0xc4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d905      	bls.n	80056e8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <xTaskRemoveFromEventList+0xc8>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e001      	b.n	80056ec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80056ec:	697b      	ldr	r3, [r7, #20]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200003ac 	.word	0x200003ac
 80056fc:	2000038c 	.word	0x2000038c
 8005700:	20000288 	.word	0x20000288
 8005704:	20000344 	.word	0x20000344
 8005708:	20000284 	.word	0x20000284
 800570c:	20000398 	.word	0x20000398

08005710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <vTaskInternalSetTimeOutState+0x24>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <vTaskInternalSetTimeOutState+0x28>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	605a      	str	r2, [r3, #4]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	2000039c 	.word	0x2000039c
 8005738:	20000388 	.word	0x20000388

0800573c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <xTaskCheckForTimeOut+0x24>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e7fe      	b.n	800575e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <xTaskCheckForTimeOut+0x3e>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e7fe      	b.n	8005778 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800577a:	f000 fc3b 	bl	8005ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <xTaskCheckForTimeOut+0xb8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	e023      	b.n	80057e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <xTaskCheckForTimeOut+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d007      	beq.n	80057ba <xTaskCheckForTimeOut+0x7e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e015      	b.n	80057e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d20b      	bcs.n	80057dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff9d 	bl	8005710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e004      	b.n	80057e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057e6:	f000 fc33 	bl	8006050 <vPortExitCritical>

	return xReturn;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000388 	.word	0x20000388
 80057f8:	2000039c 	.word	0x2000039c

080057fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <vTaskMissedYield+0x14>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000398 	.word	0x20000398

08005814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800581c:	f000 f852 	bl	80058c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <prvIdleTask+0x28>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d9f9      	bls.n	800581c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <prvIdleTask+0x2c>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005838:	e7f0      	b.n	800581c <prvIdleTask+0x8>
 800583a:	bf00      	nop
 800583c:	20000288 	.word	0x20000288
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	e00c      	b.n	800586a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <prvInitialiseTaskLists+0x60>)
 800585c:	4413      	add	r3, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fe5d 	bl	800451e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3301      	adds	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b06      	cmp	r3, #6
 800586e:	d9ef      	bls.n	8005850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x64>)
 8005872:	f7fe fe54 	bl	800451e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005876:	480d      	ldr	r0, [pc, #52]	; (80058ac <prvInitialiseTaskLists+0x68>)
 8005878:	f7fe fe51 	bl	800451e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800587c:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x6c>)
 800587e:	f7fe fe4e 	bl	800451e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005882:	480c      	ldr	r0, [pc, #48]	; (80058b4 <prvInitialiseTaskLists+0x70>)
 8005884:	f7fe fe4b 	bl	800451e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005888:	480b      	ldr	r0, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x74>)
 800588a:	f7fe fe48 	bl	800451e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <prvInitialiseTaskLists+0x78>)
 8005890:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x64>)
 8005892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005894:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <prvInitialiseTaskLists+0x7c>)
 8005896:	4a05      	ldr	r2, [pc, #20]	; (80058ac <prvInitialiseTaskLists+0x68>)
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000288 	.word	0x20000288
 80058a8:	20000314 	.word	0x20000314
 80058ac:	20000328 	.word	0x20000328
 80058b0:	20000344 	.word	0x20000344
 80058b4:	20000358 	.word	0x20000358
 80058b8:	20000370 	.word	0x20000370
 80058bc:	2000033c 	.word	0x2000033c
 80058c0:	20000340 	.word	0x20000340

080058c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ca:	e019      	b.n	8005900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058cc:	f000 fb92 	bl	8005ff4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <prvCheckTasksWaitingTermination+0x4c>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3304      	adds	r3, #4
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fea4 	bl	800462a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <prvCheckTasksWaitingTermination+0x50>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <prvCheckTasksWaitingTermination+0x50>)
 80058ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <prvCheckTasksWaitingTermination+0x54>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <prvCheckTasksWaitingTermination+0x54>)
 80058f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f6:	f000 fbab 	bl	8006050 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f80e 	bl	800591c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <prvCheckTasksWaitingTermination+0x54>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e1      	bne.n	80058cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000358 	.word	0x20000358
 8005914:	20000384 	.word	0x20000384
 8005918:	2000036c 	.word	0x2000036c

0800591c <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fce4 	bl	8006300 <vPortFree>
				vPortFree( pxTCB );
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fce1 	bl	8006300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800593e:	e017      	b.n	8005970 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005946:	2b01      	cmp	r3, #1
 8005948:	d103      	bne.n	8005952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fcd8 	bl	8006300 <vPortFree>
	}
 8005950:	e00e      	b.n	8005970 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	2b02      	cmp	r3, #2
 800595a:	d009      	beq.n	8005970 <prvDeleteTCB+0x54>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e7fe      	b.n	800596e <prvDeleteTCB+0x52>
	}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <prvResetNextTaskUnblockTime+0x40>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <prvResetNextTaskUnblockTime+0x14>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <prvResetNextTaskUnblockTime+0x16>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <prvResetNextTaskUnblockTime+0x44>)
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800599a:	e008      	b.n	80059ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <prvResetNextTaskUnblockTime+0x40>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4a04      	ldr	r2, [pc, #16]	; (80059bc <prvResetNextTaskUnblockTime+0x44>)
 80059ac:	6013      	str	r3, [r2, #0]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	2000033c 	.word	0x2000033c
 80059bc:	200003a4 	.word	0x200003a4

080059c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <xTaskGetSchedulerState+0x34>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059ce:	2301      	movs	r3, #1
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	e008      	b.n	80059e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <xTaskGetSchedulerState+0x38>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059dc:	2302      	movs	r3, #2
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	e001      	b.n	80059e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059e6:	687b      	ldr	r3, [r7, #4]
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000390 	.word	0x20000390
 80059f8:	200003ac 	.word	0x200003ac

080059fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d073      	beq.n	8005afa <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <xTaskPriorityInherit+0x108>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d263      	bcs.n	8005ae8 <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	db06      	blt.n	8005a36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <xTaskPriorityInherit+0x108>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f1c3 0207 	rsb	r2, r3, #7
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6959      	ldr	r1, [r3, #20]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <xTaskPriorityInherit+0x10c>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	d101      	bne.n	8005a52 <xTaskPriorityInherit+0x56>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xTaskPriorityInherit+0x58>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d03a      	beq.n	8005ace <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fde4 	bl	800462a <uxListRemove>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4926      	ldr	r1, [pc, #152]	; (8005b08 <xTaskPriorityInherit+0x10c>)
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <xTaskPriorityInherit+0x98>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	2201      	movs	r2, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <xTaskPriorityInherit+0x110>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <xTaskPriorityInherit+0x110>)
 8005a92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <xTaskPriorityInherit+0x108>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <xTaskPriorityInherit+0x110>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <xTaskPriorityInherit+0x110>)
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <xTaskPriorityInherit+0x10c>)
 8005abe:	441a      	add	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fe fd54 	bl	8004574 <vListInsertEnd>
 8005acc:	e004      	b.n	8005ad8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <xTaskPriorityInherit+0x108>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4619      	mov	r1, r3
 8005adc:	2049      	movs	r0, #73	; 0x49
 8005ade:	f001 f979 	bl	8006dd4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e008      	b.n	8005afa <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <xTaskPriorityInherit+0x108>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d201      	bcs.n	8005afa <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005afa:	68fb      	ldr	r3, [r7, #12]
	}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000284 	.word	0x20000284
 8005b08:	20000288 	.word	0x20000288
 8005b0c:	2000038c 	.word	0x2000038c

08005b10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 808f 	beq.w	8005c48 <vTaskPriorityDisinheritAfterTimeout+0x138>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e7fe      	b.n	8005b44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d902      	bls.n	8005b56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e002      	b.n	8005b5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d070      	beq.n	8005c48 <vTaskPriorityDisinheritAfterTimeout+0x138>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d16b      	bne.n	8005c48 <vTaskPriorityDisinheritAfterTimeout+0x138>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b70:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d109      	bne.n	8005b8e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	e7fe      	b.n	8005b8c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4619      	mov	r1, r3
 8005b92:	204a      	movs	r0, #74	; 0x4a
 8005b94:	f001 f91e 	bl	8006dd4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	db04      	blt.n	8005bb6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f1c3 0207 	rsb	r2, r3, #7
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	6959      	ldr	r1, [r3, #20]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a23      	ldr	r2, [pc, #140]	; (8005c54 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005bc6:	4413      	add	r3, r2
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	d101      	bne.n	8005bd0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d038      	beq.n	8005c48 <vTaskPriorityDisinheritAfterTimeout+0x138>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fd25 	bl	800462a <uxListRemove>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d115      	bne.n	8005c12 <vTaskPriorityDisinheritAfterTimeout+0x102>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	491a      	ldr	r1, [pc, #104]	; (8005c54 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <vTaskPriorityDisinheritAfterTimeout+0x102>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	2201      	movs	r2, #1
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43da      	mvns	r2, r3
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005c10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fe37 	bl	8007888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	2201      	movs	r2, #1
 8005c20:	409a      	lsls	r2, r3
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	4a0b      	ldr	r2, [pc, #44]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4a06      	ldr	r2, [pc, #24]	; (8005c54 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005c3a:	441a      	add	r2, r3
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fe fc96 	bl	8004574 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c48:	bf00      	nop
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20000284 	.word	0x20000284
 8005c54:	20000288 	.word	0x20000288
 8005c58:	2000038c 	.word	0x2000038c

08005c5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c6e:	3201      	adds	r2, #1
 8005c70:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c72:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c74:	681b      	ldr	r3, [r3, #0]
	}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000284 	.word	0x20000284

08005c84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c8e:	4b32      	ldr	r3, [pc, #200]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c94:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fcc5 	bl	800462a <uxListRemove>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	2201      	movs	r2, #1
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43da      	mvns	r2, r3
 8005cb4:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005cbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d110      	bne.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x64>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005ccc:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	211b      	movs	r1, #27
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fe1a 	bl	800790c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd8:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4820      	ldr	r0, [pc, #128]	; (8005d64 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005ce2:	f7fe fc47 	bl	8004574 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ce6:	e032      	b.n	8005d4e <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d20f      	bcs.n	8005d20 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2104      	movs	r1, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fe00 	bl	800790c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe fc4e 	bl	80045ba <vListInsert>
}
 8005d1e:	e016      	b.n	8005d4e <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2104      	movs	r1, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 fdf0 	bl	800790c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f7fe fc3e 	bl	80045ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvAddCurrentTaskToDelayedList+0xec>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d202      	bcs.n	8005d4e <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8005d48:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <prvAddCurrentTaskToDelayedList+0xec>)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000388 	.word	0x20000388
 8005d5c:	20000284 	.word	0x20000284
 8005d60:	2000038c 	.word	0x2000038c
 8005d64:	20000370 	.word	0x20000370
 8005d68:	20000340 	.word	0x20000340
 8005d6c:	2000033c 	.word	0x2000033c
 8005d70:	200003a4 	.word	0x200003a4

08005d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b04      	subs	r3, #4
 8005d84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b04      	subs	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 0201 	bic.w	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3b04      	subs	r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <pxPortInitialiseStack+0x54>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3b14      	subs	r3, #20
 8005dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3b20      	subs	r3, #32
 8005dba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	08005dcd 	.word	0x08005dcd

08005dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <prvTaskExitError+0x4c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d009      	beq.n	8005df4 <prvTaskExitError+0x28>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e7fe      	b.n	8005df2 <prvTaskExitError+0x26>
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e06:	bf00      	nop
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0fc      	beq.n	8005e08 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	2000000c 	.word	0x2000000c
 8005e1c:	00000000 	.word	0x00000000

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e3e:	4770      	bx	lr

08005e40 <pxCurrentTCBConst2>:
 8005e40:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e48:	4806      	ldr	r0, [pc, #24]	; (8005e64 <prvPortStartFirstTask+0x1c>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	b662      	cpsie	i
 8005e54:	b661      	cpsie	f
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	df00      	svc	0
 8005e60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e62:	bf00      	nop
 8005e64:	e000ed08 	.word	0xe000ed08

08005e68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e6e:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <xPortStartScheduler+0xcc>)
 8005e70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	22ff      	movs	r2, #255	; 0xff
 8005e7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <xPortStartScheduler+0xd0>)
 8005e94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005e98:	2207      	movs	r2, #7
 8005e9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e9c:	e009      	b.n	8005eb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e9e:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ea6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d0ef      	beq.n	8005e9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1c3 0307 	rsb	r3, r3, #7
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d009      	beq.n	8005ede <xPortStartScheduler+0x76>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	e7fe      	b.n	8005edc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ede:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <xPortStartScheduler+0xd4>)
 8005ef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xPortStartScheduler+0xd8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <xPortStartScheduler+0xd8>)
 8005f02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <xPortStartScheduler+0xd8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <xPortStartScheduler+0xd8>)
 8005f0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f14:	f000 f910 	bl	8006138 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <xPortStartScheduler+0xdc>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f1e:	f7ff ff93 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f22:	f7ff fb03 	bl	800552c <vTaskSwitchContext>
	prvTaskExitError();
 8005f26:	f7ff ff51 	bl	8005dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	e000e400 	.word	0xe000e400
 8005f38:	200003b0 	.word	0x200003b0
 8005f3c:	200003b4 	.word	0x200003b4
 8005f40:	e000ed20 	.word	0xe000ed20
 8005f44:	2000000c 	.word	0x2000000c

08005f48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <vInitPrioGroupValue+0xa0>)
 8005f50:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <vInitPrioGroupValue+0xa4>)
 8005f74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f76:	4b1e      	ldr	r3, [pc, #120]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005f78:	2207      	movs	r2, #7
 8005f7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f7c:	e009      	b.n	8005f92 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005f86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d0ef      	beq.n	8005f7e <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f9e:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1c3 0307 	rsb	r3, r3, #7
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d009      	beq.n	8005fbe <vInitPrioGroupValue+0x76>
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	e7fe      	b.n	8005fbc <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005fc6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fd0:	4a07      	ldr	r2, [pc, #28]	; (8005ff0 <vInitPrioGroupValue+0xa8>)
 8005fd2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	e000e400 	.word	0xe000e400
 8005fec:	200003b0 	.word	0x200003b0
 8005ff0:	200003b4 	.word	0x200003b4

08005ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <vPortEnterCritical+0x54>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <vPortEnterCritical+0x54>)
 8006014:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <vPortEnterCritical+0x54>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10e      	bne.n	800603c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <vPortEnterCritical+0x58>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <vPortEnterCritical+0x48>
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	e7fe      	b.n	800603a <vPortEnterCritical+0x46>
	}
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006056:	4b10      	ldr	r3, [pc, #64]	; (8006098 <vPortExitCritical+0x48>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <vPortExitCritical+0x22>
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	e7fe      	b.n	8006070 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <vPortExitCritical+0x48>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3b01      	subs	r3, #1
 8006078:	4a07      	ldr	r2, [pc, #28]	; (8006098 <vPortExitCritical+0x48>)
 800607a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800607c:	4b06      	ldr	r3, [pc, #24]	; (8006098 <vPortExitCritical+0x48>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <vPortExitCritical+0x3e>
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	2000000c 	.word	0x2000000c
 800609c:	00000000 	.word	0x00000000

080060a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060a0:	f3ef 8009 	mrs	r0, PSP
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <pxCurrentTCBConst>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060b0:	6010      	str	r0, [r2, #0]
 80060b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060ba:	f380 8811 	msr	BASEPRI, r0
 80060be:	f7ff fa35 	bl	800552c <vTaskSwitchContext>
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	6808      	ldr	r0, [r1, #0]
 80060d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060d6:	f380 8809 	msr	PSP, r0
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	4770      	bx	lr

080060e0 <pxCurrentTCBConst>:
 80060e0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006100:	f001 faa8 	bl	8007654 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006104:	f7ff f952 	bl	80053ac <xTaskIncrementTick>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800610e:	f001 faff 	bl	8007710 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <SysTick_Handler+0x4c>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e001      	b.n	8006120 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800611c:	f001 fadc 	bl	80076d8 <SEGGER_SYSVIEW_RecordExitISR>
 8006120:	2300      	movs	r3, #0
 8006122:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <vPortSetupTimerInterrupt+0x30>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <vPortSetupTimerInterrupt+0x34>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006148:	4b09      	ldr	r3, [pc, #36]	; (8006170 <vPortSetupTimerInterrupt+0x38>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a09      	ldr	r2, [pc, #36]	; (8006174 <vPortSetupTimerInterrupt+0x3c>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <vPortSetupTimerInterrupt+0x40>)
 8006156:	3b01      	subs	r3, #1
 8006158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800615a:	4b03      	ldr	r3, [pc, #12]	; (8006168 <vPortSetupTimerInterrupt+0x30>)
 800615c:	2207      	movs	r2, #7
 800615e:	601a      	str	r2, [r3, #0]
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	e000e010 	.word	0xe000e010
 800616c:	e000e018 	.word	0xe000e018
 8006170:	20000000 	.word	0x20000000
 8006174:	10624dd3 	.word	0x10624dd3
 8006178:	e000e014 	.word	0xe000e014

0800617c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006188:	f7ff f854 	bl	8005234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800618c:	4b57      	ldr	r3, [pc, #348]	; (80062ec <pvPortMalloc+0x170>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006194:	f000 f90c 	bl	80063b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006198:	4b55      	ldr	r3, [pc, #340]	; (80062f0 <pvPortMalloc+0x174>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 808c 	bne.w	80062be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01c      	beq.n	80061e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80061ac:	2208      	movs	r2, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d013      	beq.n	80061e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	3308      	adds	r3, #8
 80061c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <pvPortMalloc+0x6a>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e7fe      	b.n	80061e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d068      	beq.n	80062be <pvPortMalloc+0x142>
 80061ec:	4b41      	ldr	r3, [pc, #260]	; (80062f4 <pvPortMalloc+0x178>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d863      	bhi.n	80062be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061f6:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <pvPortMalloc+0x17c>)
 80061f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061fa:	4b3f      	ldr	r3, [pc, #252]	; (80062f8 <pvPortMalloc+0x17c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006200:	e004      	b.n	800620c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <pvPortMalloc+0xa2>
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f1      	bne.n	8006202 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800621e:	4b33      	ldr	r3, [pc, #204]	; (80062ec <pvPortMalloc+0x170>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	d04a      	beq.n	80062be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	4413      	add	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	2308      	movs	r3, #8
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	429a      	cmp	r2, r3
 8006248:	d91e      	bls.n	8006288 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800624a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <pvPortMalloc+0xf4>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	e7fe      	b.n	800626e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006282:	69b8      	ldr	r0, [r7, #24]
 8006284:	f000 f8f6 	bl	8006474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <pvPortMalloc+0x178>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <pvPortMalloc+0x178>)
 8006294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006296:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <pvPortMalloc+0x178>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b18      	ldr	r3, [pc, #96]	; (80062fc <pvPortMalloc+0x180>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d203      	bcs.n	80062aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <pvPortMalloc+0x178>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <pvPortMalloc+0x180>)
 80062a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <pvPortMalloc+0x174>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062be:	f7fe ffc7 	bl	8005250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <pvPortMalloc+0x164>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e7fe      	b.n	80062de <pvPortMalloc+0x162>
	return pvReturn;
 80062e0:	69fb      	ldr	r3, [r7, #28]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3728      	adds	r7, #40	; 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20001bc0 	.word	0x20001bc0
 80062f0:	20001bcc 	.word	0x20001bcc
 80062f4:	20001bc4 	.word	0x20001bc4
 80062f8:	20001bb8 	.word	0x20001bb8
 80062fc:	20001bc8 	.word	0x20001bc8

08006300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d046      	beq.n	80063a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006312:	2308      	movs	r3, #8
 8006314:	425b      	negs	r3, r3
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <vPortFree+0xa8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <vPortFree+0x42>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e7fe      	b.n	8006340 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <vPortFree+0x5e>
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	e7fe      	b.n	800635c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <vPortFree+0xa8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d019      	beq.n	80063a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d115      	bne.n	80063a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <vPortFree+0xa8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	43db      	mvns	r3, r3
 800637e:	401a      	ands	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006384:	f7fe ff56 	bl	8005234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <vPortFree+0xac>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4413      	add	r3, r2
 8006392:	4a06      	ldr	r2, [pc, #24]	; (80063ac <vPortFree+0xac>)
 8006394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006396:	6938      	ldr	r0, [r7, #16]
 8006398:	f000 f86c 	bl	8006474 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800639c:	f7fe ff58 	bl	8005250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063a0:	bf00      	nop
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20001bcc 	.word	0x20001bcc
 80063ac:	20001bc4 	.word	0x20001bc4

080063b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80063ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063bc:	4b27      	ldr	r3, [pc, #156]	; (800645c <prvHeapInit+0xac>)
 80063be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3307      	adds	r3, #7
 80063ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	4a1f      	ldr	r2, [pc, #124]	; (800645c <prvHeapInit+0xac>)
 80063e0:	4413      	add	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063e8:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <prvHeapInit+0xb0>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ee:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <prvHeapInit+0xb0>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	4413      	add	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063fc:	2208      	movs	r2, #8
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a15      	ldr	r2, [pc, #84]	; (8006464 <prvHeapInit+0xb4>)
 8006410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <prvHeapInit+0xb4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <prvHeapInit+0xb4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <prvHeapInit+0xb4>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <prvHeapInit+0xb8>)
 800643e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <prvHeapInit+0xbc>)
 8006446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <prvHeapInit+0xc0>)
 800644a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200003b8 	.word	0x200003b8
 8006460:	20001bb8 	.word	0x20001bb8
 8006464:	20001bc0 	.word	0x20001bc0
 8006468:	20001bc8 	.word	0x20001bc8
 800646c:	20001bc4 	.word	0x20001bc4
 8006470:	20001bcc 	.word	0x20001bcc

08006474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800647c:	4b27      	ldr	r3, [pc, #156]	; (800651c <prvInsertBlockIntoFreeList+0xa8>)
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e002      	b.n	8006488 <prvInsertBlockIntoFreeList+0x14>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d8f7      	bhi.n	8006482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d108      	bne.n	80064b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	441a      	add	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d118      	bne.n	80064fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <prvInsertBlockIntoFreeList+0xac>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d00d      	beq.n	80064f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e008      	b.n	8006504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <prvInsertBlockIntoFreeList+0xac>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e003      	b.n	8006504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d002      	beq.n	8006512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr
 800651c:	20001bb8 	.word	0x20001bb8
 8006520:	20001bc0 	.word	0x20001bc0

08006524 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006532:	2205      	movs	r2, #5
 8006534:	492b      	ldr	r1, [pc, #172]	; (80065e4 <SYSVIEW_AddTask+0xc0>)
 8006536:	68b8      	ldr	r0, [r7, #8]
 8006538:	f001 fbb4 	bl	8007ca4 <memcmp>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04b      	beq.n	80065da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006542:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b07      	cmp	r3, #7
 8006548:	d903      	bls.n	8006552 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800654a:	4828      	ldr	r0, [pc, #160]	; (80065ec <SYSVIEW_AddTask+0xc8>)
 800654c:	f001 fb2a 	bl	8007ba4 <SEGGER_SYSVIEW_Warn>
    return;
 8006550:	e044      	b.n	80065dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006552:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4926      	ldr	r1, [pc, #152]	; (80065f0 <SYSVIEW_AddTask+0xcc>)
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006566:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4921      	ldr	r1, [pc, #132]	; (80065f0 <SYSVIEW_AddTask+0xcc>)
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	3304      	adds	r3, #4
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	491b      	ldr	r1, [pc, #108]	; (80065f0 <SYSVIEW_AddTask+0xcc>)
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3308      	adds	r3, #8
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4916      	ldr	r1, [pc, #88]	; (80065f0 <SYSVIEW_AddTask+0xcc>)
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	330c      	adds	r3, #12
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	4910      	ldr	r1, [pc, #64]	; (80065f0 <SYSVIEW_AddTask+0xcc>)
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3310      	adds	r3, #16
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <SYSVIEW_AddTask+0xc4>)
 80065c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f8ca 	bl	800676c <SYSVIEW_SendTaskInfo>
 80065d8:	e000      	b.n	80065dc <SYSVIEW_AddTask+0xb8>
    return;
 80065da:	bf00      	nop

}
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	08007d64 	.word	0x08007d64
 80065e8:	20001c70 	.word	0x20001c70
 80065ec:	08007d6c 	.word	0x08007d6c
 80065f0:	20001bd0 	.word	0x20001bd0

080065f4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80065fc:	4b59      	ldr	r3, [pc, #356]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80ab 	beq.w	800675c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e00d      	b.n	8006628 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800660c:	4956      	ldr	r1, [pc, #344]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d008      	beq.n	8006634 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	429a      	cmp	r2, r3
 8006630:	d3ec      	bcc.n	800660c <SYSVIEW_DeleteTask+0x18>
 8006632:	e000      	b.n	8006636 <SYSVIEW_DeleteTask+0x42>
      break;
 8006634:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006636:	4b4b      	ldr	r3, [pc, #300]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	429a      	cmp	r2, r3
 8006640:	d111      	bne.n	8006666 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a46      	ldr	r2, [pc, #280]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 800664e:	4413      	add	r3, r2
 8006650:	2214      	movs	r2, #20
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f001 fb3f 	bl	8007cd8 <memset>
    _NumTasks--;
 800665a:	4b42      	ldr	r3, [pc, #264]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3b01      	subs	r3, #1
 8006660:	4a40      	ldr	r2, [pc, #256]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e07b      	b.n	800675e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d276      	bcs.n	800675e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006670:	4b3c      	ldr	r3, [pc, #240]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	1e5a      	subs	r2, r3, #1
 8006676:	493c      	ldr	r1, [pc, #240]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	4838      	ldr	r0, [pc, #224]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4403      	add	r3, r0
 8006692:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006694:	4b33      	ldr	r3, [pc, #204]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	4933      	ldr	r1, [pc, #204]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	3304      	adds	r3, #4
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	482f      	ldr	r0, [pc, #188]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4403      	add	r3, r0
 80066b8:	3304      	adds	r3, #4
 80066ba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80066bc:	4b29      	ldr	r3, [pc, #164]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	4929      	ldr	r1, [pc, #164]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	3308      	adds	r3, #8
 80066d0:	6819      	ldr	r1, [r3, #0]
 80066d2:	4825      	ldr	r0, [pc, #148]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4403      	add	r3, r0
 80066e0:	3308      	adds	r3, #8
 80066e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80066e4:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	491f      	ldr	r1, [pc, #124]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	330c      	adds	r3, #12
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	481b      	ldr	r0, [pc, #108]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4403      	add	r3, r0
 8006708:	330c      	adds	r3, #12
 800670a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800670c:	4b15      	ldr	r3, [pc, #84]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	4915      	ldr	r1, [pc, #84]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	3310      	adds	r3, #16
 8006720:	6819      	ldr	r1, [r3, #0]
 8006722:	4811      	ldr	r0, [pc, #68]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4403      	add	r3, r0
 8006730:	3310      	adds	r3, #16
 8006732:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a09      	ldr	r2, [pc, #36]	; (8006768 <SYSVIEW_DeleteTask+0x174>)
 8006744:	4413      	add	r3, r2
 8006746:	2214      	movs	r2, #20
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f001 fac4 	bl	8007cd8 <memset>
    _NumTasks--;
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3b01      	subs	r3, #1
 8006756:	4a03      	ldr	r2, [pc, #12]	; (8006764 <SYSVIEW_DeleteTask+0x170>)
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e000      	b.n	800675e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800675c:	bf00      	nop
  }
}
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20001c70 	.word	0x20001c70
 8006768:	20001bd0 	.word	0x20001bd0

0800676c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800677a:	f107 0314 	add.w	r3, r7, #20
 800677e:	2214      	movs	r2, #20
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 faa8 	bl	8007cd8 <memset>
  TaskInfo.TaskID     = TaskID;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fe2f 	bl	8007404 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80067a6:	bf00      	nop
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <_DoInit+0x8c>)
 80067b8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2203      	movs	r2, #3
 80067be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2203      	movs	r2, #3
 80067c4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <_DoInit+0x90>)
 80067ca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <_DoInit+0x94>)
 80067d0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a14      	ldr	r2, [pc, #80]	; (8006840 <_DoInit+0x90>)
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <_DoInit+0x98>)
 80067f6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2210      	movs	r2, #16
 80067fc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3307      	adds	r3, #7
 8006814:	4a0d      	ldr	r2, [pc, #52]	; (800684c <_DoInit+0x9c>)
 8006816:	6810      	ldr	r0, [r2, #0]
 8006818:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a0c      	ldr	r2, [pc, #48]	; (8006850 <_DoInit+0xa0>)
 800681e:	6810      	ldr	r0, [r2, #0]
 8006820:	6018      	str	r0, [r3, #0]
 8006822:	8891      	ldrh	r1, [r2, #4]
 8006824:	7992      	ldrb	r2, [r2, #6]
 8006826:	8099      	strh	r1, [r3, #4]
 8006828:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	200022f8 	.word	0x200022f8
 8006840:	08007dbc 	.word	0x08007dbc
 8006844:	20001c74 	.word	0x20001c74
 8006848:	20002074 	.word	0x20002074
 800684c:	08007dc8 	.word	0x08007dc8
 8006850:	08007dcc 	.word	0x08007dcc

08006854 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006860:	4b3e      	ldr	r3, [pc, #248]	; (800695c <SEGGER_RTT_ReadNoLock+0x108>)
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <SEGGER_RTT_ReadNoLock+0x1e>
 800686e:	f7ff ff9f 	bl	80067b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4613      	mov	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	4413      	add	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	3360      	adds	r3, #96	; 0x60
 800687e:	4a37      	ldr	r2, [pc, #220]	; (800695c <SEGGER_RTT_ReadNoLock+0x108>)
 8006880:	4413      	add	r3, r2
 8006882:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006894:	2300      	movs	r3, #0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	429a      	cmp	r2, r3
 800689e:	d92b      	bls.n	80068f8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf28      	it	cs
 80068b2:	4613      	movcs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	4413      	add	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6939      	ldr	r1, [r7, #16]
 80068c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c6:	f001 f9fc 	bl	8007cc2 <memcpy>
    NumBytesRead += NumBytesRem;
 80068ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	4413      	add	r3, r2
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80068e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4413      	add	r3, r2
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d101      	bne.n	80068f8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4293      	cmp	r3, r2
 8006906:	bf28      	it	cs
 8006908:	4613      	movcs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	4413      	add	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	6939      	ldr	r1, [r7, #16]
 8006920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006922:	f001 f9ce 	bl	8007cc2 <memcpy>
    NumBytesRead += NumBytesRem;
 8006926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4413      	add	r3, r2
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4413      	add	r3, r2
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800693e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4413      	add	r3, r2
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006950:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006954:	4618      	mov	r0, r3
 8006956:	3730      	adds	r7, #48	; 0x30
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200022f8 	.word	0x200022f8

08006960 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006970:	e002      	b.n	8006978 <_EncodeStr+0x18>
    Len++;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	3301      	adds	r3, #1
 8006976:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f6      	bne.n	8006972 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d901      	bls.n	8006990 <_EncodeStr+0x30>
    Len = Limit;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2bfe      	cmp	r3, #254	; 0xfe
 8006994:	d806      	bhi.n	80069a4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	60fa      	str	r2, [r7, #12]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	e011      	b.n	80069c8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	60fa      	str	r2, [r7, #12]
 80069aa:	22ff      	movs	r2, #255	; 0xff
 80069ac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	60fa      	str	r2, [r7, #12]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	0a19      	lsrs	r1, r3, #8
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	60fa      	str	r2, [r7, #12]
 80069c4:	b2ca      	uxtb	r2, r1
 80069c6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80069cc:	e00a      	b.n	80069e4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	1c53      	adds	r3, r2, #1
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	60f9      	str	r1, [r7, #12]
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	701a      	strb	r2, [r3, #0]
    n++;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	3301      	adds	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d3f0      	bcc.n	80069ce <_EncodeStr+0x6e>
  }
  return pPayload;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr
	...

08006a10 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <_HandleIncomingPacket+0xd4>)
 8006a18:	7e1b      	ldrb	r3, [r3, #24]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	1cfb      	adds	r3, r7, #3
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4619      	mov	r1, r3
 8006a22:	f7ff ff17 	bl	8006854 <SEGGER_RTT_ReadNoLock>
 8006a26:	4603      	mov	r3, r0
 8006a28:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd4d      	ble.n	8006acc <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d022      	beq.n	8006a7c <_HandleIncomingPacket+0x6c>
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	dc0b      	bgt.n	8006a52 <_HandleIncomingPacket+0x42>
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d015      	beq.n	8006a6a <_HandleIncomingPacket+0x5a>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dc02      	bgt.n	8006a48 <_HandleIncomingPacket+0x38>
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d00e      	beq.n	8006a64 <_HandleIncomingPacket+0x54>
 8006a46:	e034      	b.n	8006ab2 <_HandleIncomingPacket+0xa2>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d011      	beq.n	8006a70 <_HandleIncomingPacket+0x60>
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d012      	beq.n	8006a76 <_HandleIncomingPacket+0x66>
 8006a50:	e02f      	b.n	8006ab2 <_HandleIncomingPacket+0xa2>
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	d018      	beq.n	8006a88 <_HandleIncomingPacket+0x78>
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	db13      	blt.n	8006a82 <_HandleIncomingPacket+0x72>
 8006a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a5c:	d038      	beq.n	8006ad0 <_HandleIncomingPacket+0xc0>
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d015      	beq.n	8006a8e <_HandleIncomingPacket+0x7e>
 8006a62:	e026      	b.n	8006ab2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006a64:	f000 fb54 	bl	8007110 <SEGGER_SYSVIEW_Start>
      break;
 8006a68:	e037      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006a6a:	f000 fc0b 	bl	8007284 <SEGGER_SYSVIEW_Stop>
      break;
 8006a6e:	e034      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006a70:	f000 fdc0 	bl	80075f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006a74:	e031      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006a76:	f000 fda9 	bl	80075cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006a7a:	e02e      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006a7c:	f000 fc28 	bl	80072d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006a80:	e02b      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006a82:	f001 f851 	bl	8007b28 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006a86:	e028      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006a88:	f001 f830 	bl	8007aec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006a8c:	e025      	b.n	8006ada <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006a8e:	4b15      	ldr	r3, [pc, #84]	; (8006ae4 <_HandleIncomingPacket+0xd4>)
 8006a90:	7e1b      	ldrb	r3, [r3, #24]
 8006a92:	4618      	mov	r0, r3
 8006a94:	1cfb      	adds	r3, r7, #3
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7ff fedb 	bl	8006854 <SEGGER_RTT_ReadNoLock>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dd15      	ble.n	8006ad4 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 ff9e 	bl	80079ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006ab0:	e010      	b.n	8006ad4 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da0e      	bge.n	8006ad8 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <_HandleIncomingPacket+0xd4>)
 8006abc:	7e1b      	ldrb	r3, [r3, #24]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	1cfb      	adds	r3, r7, #3
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f7ff fec5 	bl	8006854 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006aca:	e005      	b.n	8006ad8 <_HandleIncomingPacket+0xc8>
    }
  }
 8006acc:	bf00      	nop
 8006ace:	e004      	b.n	8006ada <_HandleIncomingPacket+0xca>
      break;
 8006ad0:	bf00      	nop
 8006ad2:	e002      	b.n	8006ada <_HandleIncomingPacket+0xca>
      break;
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <_HandleIncomingPacket+0xca>
      break;
 8006ad8:	bf00      	nop
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20002084 	.word	0x20002084

08006ae8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	; 0x30
 8006aec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006aee:	2301      	movs	r3, #1
 8006af0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	3301      	adds	r3, #1
 8006af6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afc:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b02:	e00b      	b.n	8006b1c <_TrySendOverflowPacket+0x34>
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b20:	d8f0      	bhi.n	8006b04 <_TrySendOverflowPacket+0x1c>
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b32:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <_TrySendOverflowPacket+0xe0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006b38:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	e00b      	b.n	8006b64 <_TrySendOverflowPacket+0x7c>
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	1c59      	adds	r1, r3, #1
 8006b54:	6279      	str	r1, [r7, #36]	; 0x24
 8006b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	09db      	lsrs	r3, r3, #7
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2b7f      	cmp	r3, #127	; 0x7f
 8006b68:	d8f0      	bhi.n	8006b4c <_TrySendOverflowPacket+0x64>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	1d3b      	adds	r3, r7, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f7f9 fae0 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006b90:	4603      	mov	r3, r0
 8006b92:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006b9a:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e004      	b.n	8006bb8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a03      	ldr	r2, [pc, #12]	; (8006bc4 <_TrySendOverflowPacket+0xdc>)
 8006bb6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006bb8:	693b      	ldr	r3, [r7, #16]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3730      	adds	r7, #48	; 0x30
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20002084 	.word	0x20002084
 8006bc8:	e0001004 	.word	0xe0001004

08006bcc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006bd8:	4b6c      	ldr	r3, [pc, #432]	; (8006d8c <_SendPacket+0x1c0>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d010      	beq.n	8006c02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006be0:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <_SendPacket+0x1c0>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80a3 	beq.w	8006d30 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006bea:	4b68      	ldr	r3, [pc, #416]	; (8006d8c <_SendPacket+0x1c0>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d109      	bne.n	8006c06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006bf2:	f7ff ff79 	bl	8006ae8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006bf6:	4b65      	ldr	r3, [pc, #404]	; (8006d8c <_SendPacket+0x1c0>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	f040 809a 	bne.w	8006d34 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006c00:	e001      	b.n	8006c06 <_SendPacket+0x3a>
    goto Send;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <_SendPacket+0x3c>
Send:
 8006c06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b1f      	cmp	r3, #31
 8006c0c:	d809      	bhi.n	8006c22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006c0e:	4b5f      	ldr	r3, [pc, #380]	; (8006d8c <_SendPacket+0x1c0>)
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 808b 	bne.w	8006d38 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b17      	cmp	r3, #23
 8006c26:	d807      	bhi.n	8006c38 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e03d      	b.n	8006cb4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2b7f      	cmp	r3, #127	; 0x7f
 8006c44:	d912      	bls.n	8006c6c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	09da      	lsrs	r2, r3, #7
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	60fa      	str	r2, [r7, #12]
 8006c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e006      	b.n	8006c7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7e:	d912      	bls.n	8006ca6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	09da      	lsrs	r2, r3, #7
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	3a01      	subs	r2, #1
 8006c98:	60fa      	str	r2, [r7, #12]
 8006c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e006      	b.n	8006cb4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006cb4:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <_SendPacket+0x1c4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006cba:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <_SendPacket+0x1c0>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	e00b      	b.n	8006ce6 <_SendPacket+0x11a>
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	6279      	str	r1, [r7, #36]	; 0x24
 8006cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	09db      	lsrs	r3, r3, #7
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cea:	d8f0      	bhi.n	8006cce <_SendPacket+0x102>
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006cfc:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <_SendPacket+0x1c0>)
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	4618      	mov	r0, r3
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f7f9 fa20 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006d10:	4603      	mov	r3, r0
 8006d12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006d1a:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <_SendPacket+0x1c0>)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	60d3      	str	r3, [r2, #12]
 8006d20:	e00b      	b.n	8006d3a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <_SendPacket+0x1c0>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <_SendPacket+0x1c0>)
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e004      	b.n	8006d3a <_SendPacket+0x16e>
    goto SendDone;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <_SendPacket+0x16e>
      goto SendDone;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <_SendPacket+0x16e>
      goto SendDone;
 8006d38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <_SendPacket+0x1c0>)
 8006d3c:	7e1b      	ldrb	r3, [r3, #24]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <_SendPacket+0x1c8>)
 8006d42:	460b      	mov	r3, r1
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	440b      	add	r3, r1
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	336c      	adds	r3, #108	; 0x6c
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <_SendPacket+0x1c0>)
 8006d52:	7e1b      	ldrb	r3, [r3, #24]
 8006d54:	4618      	mov	r0, r3
 8006d56:	490f      	ldr	r1, [pc, #60]	; (8006d94 <_SendPacket+0x1c8>)
 8006d58:	4603      	mov	r3, r0
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4403      	add	r3, r0
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	3370      	adds	r3, #112	; 0x70
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d00b      	beq.n	8006d82 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <_SendPacket+0x1c0>)
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006d72:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <_SendPacket+0x1c0>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006d78:	f7ff fe4a 	bl	8006a10 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <_SendPacket+0x1c0>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006d82:	bf00      	nop
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20002084 	.word	0x20002084
 8006d90:	e0001004 	.word	0xe0001004
 8006d94:	200022f8 	.word	0x200022f8

08006d98 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006da0:	f3ef 8311 	mrs	r3, BASEPRI
 8006da4:	f04f 0120 	mov.w	r1, #32
 8006da8:	f381 8811 	msr	BASEPRI, r1
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006db0:	f7ff fe22 	bl	80069f8 <_PreparePacket>
 8006db4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	68b8      	ldr	r0, [r7, #8]
 8006dbc:	f7ff ff06 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f383 8811 	msr	BASEPRI, r3
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200020b4 	.word	0x200020b4

08006dd4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dde:	f3ef 8311 	mrs	r3, BASEPRI
 8006de2:	f04f 0120 	mov.w	r1, #32
 8006de6:	f381 8811 	msr	BASEPRI, r1
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	4816      	ldr	r0, [pc, #88]	; (8006e48 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006dee:	f7ff fe03 	bl	80069f8 <_PreparePacket>
 8006df2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	61f9      	str	r1, [r7, #28]
 8006e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	61fa      	str	r2, [r7, #28]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	6938      	ldr	r0, [r7, #16]
 8006e36:	f7ff fec9 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
}
 8006e40:	bf00      	nop
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200020b4 	.word	0x200020b4

08006e4c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e58:	f3ef 8311 	mrs	r3, BASEPRI
 8006e5c:	f04f 0120 	mov.w	r1, #32
 8006e60:	f381 8811 	msr	BASEPRI, r1
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	4825      	ldr	r0, [pc, #148]	; (8006efc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006e68:	f7ff fdc6 	bl	80069f8 <_PreparePacket>
 8006e6c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7a:	e00b      	b.n	8006e94 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	09db      	lsrs	r3, r3, #7
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	2b7f      	cmp	r3, #127	; 0x7f
 8006e98:	d8f0      	bhi.n	8006e7c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	e00b      	b.n	8006ecc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	1c59      	adds	r1, r3, #1
 8006ebc:	6279      	str	r1, [r7, #36]	; 0x24
 8006ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	09db      	lsrs	r3, r3, #7
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed0:	d8f0      	bhi.n	8006eb4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed8:	6a3a      	ldr	r2, [r7, #32]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	6979      	ldr	r1, [r7, #20]
 8006ee6:	69b8      	ldr	r0, [r7, #24]
 8006ee8:	f7ff fe70 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f383 8811 	msr	BASEPRI, r3
}
 8006ef2:	bf00      	nop
 8006ef4:	3730      	adds	r7, #48	; 0x30
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	200020b4 	.word	0x200020b4

08006f00 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	; 0x38
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f12:	f04f 0120 	mov.w	r1, #32
 8006f16:	f381 8811 	msr	BASEPRI, r1
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	4832      	ldr	r0, [pc, #200]	; (8006fe8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006f1e:	f7ff fd6b 	bl	80069f8 <_PreparePacket>
 8006f22:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	6379      	str	r1, [r7, #52]	; 0x34
 8006f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	637a      	str	r2, [r7, #52]	; 0x34
 8006f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f68:	e00b      	b.n	8006f82 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	09db      	lsrs	r3, r3, #7
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b7f      	cmp	r3, #127	; 0x7f
 8006f86:	d8f0      	bhi.n	8006f6a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	e00b      	b.n	8006fba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	6279      	str	r1, [r7, #36]	; 0x24
 8006fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	09db      	lsrs	r3, r3, #7
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbe:	d8f0      	bhi.n	8006fa2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	69b8      	ldr	r0, [r7, #24]
 8006fd6:	f7ff fdf9 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f383 8811 	msr	BASEPRI, r3
}
 8006fe0:	bf00      	nop
 8006fe2:	3738      	adds	r7, #56	; 0x38
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200020b4 	.word	0x200020b4

08006fec <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b090      	sub	sp, #64	; 0x40
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	4840      	ldr	r0, [pc, #256]	; (800710c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800700a:	f7ff fcf5 	bl	80069f8 <_PreparePacket>
 800700e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
 800701c:	e00b      	b.n	8007036 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	b2da      	uxtb	r2, r3
 8007022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	63bb      	str	r3, [r7, #56]	; 0x38
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	2b7f      	cmp	r3, #127	; 0x7f
 800703a:	d8f0      	bhi.n	800701e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	633b      	str	r3, [r7, #48]	; 0x30
 8007054:	e00b      	b.n	800706e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	6379      	str	r1, [r7, #52]	; 0x34
 8007060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	2b7f      	cmp	r3, #127	; 0x7f
 8007072:	d8f0      	bhi.n	8007056 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	637a      	str	r2, [r7, #52]	; 0x34
 800707a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
 800708c:	e00b      	b.n	80070a6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	09db      	lsrs	r3, r3, #7
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	2b7f      	cmp	r3, #127	; 0x7f
 80070aa:	d8f0      	bhi.n	800708e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
 80070c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	e00b      	b.n	80070de <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	6279      	str	r1, [r7, #36]	; 0x24
 80070d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	09db      	lsrs	r3, r3, #7
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2b7f      	cmp	r3, #127	; 0x7f
 80070e2:	d8f0      	bhi.n	80070c6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	627a      	str	r2, [r7, #36]	; 0x24
 80070ea:	6a3a      	ldr	r2, [r7, #32]
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	69b8      	ldr	r0, [r7, #24]
 80070fa:	f7ff fd67 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f383 8811 	msr	BASEPRI, r3
}
 8007104:	bf00      	nop
 8007106:	3740      	adds	r7, #64	; 0x40
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200020b4 	.word	0x200020b4

08007110 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	; 0x30
 8007114:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007116:	4b58      	ldr	r3, [pc, #352]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800711c:	f3ef 8311 	mrs	r3, BASEPRI
 8007120:	f04f 0120 	mov.w	r1, #32
 8007124:	f381 8811 	msr	BASEPRI, r1
 8007128:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800712a:	4b53      	ldr	r3, [pc, #332]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	220a      	movs	r2, #10
 8007130:	4952      	ldr	r1, [pc, #328]	; (800727c <SEGGER_SYSVIEW_Start+0x16c>)
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 f80c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800713e:	200a      	movs	r0, #10
 8007140:	f7ff fe2a 	bl	8006d98 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007144:	f3ef 8311 	mrs	r3, BASEPRI
 8007148:	f04f 0120 	mov.w	r1, #32
 800714c:	f381 8811 	msr	BASEPRI, r1
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	484b      	ldr	r0, [pc, #300]	; (8007280 <SEGGER_SYSVIEW_Start+0x170>)
 8007154:	f7ff fc50 	bl	80069f8 <_PreparePacket>
 8007158:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007162:	4b45      	ldr	r3, [pc, #276]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
 8007168:	e00b      	b.n	8007182 <SEGGER_SYSVIEW_Start+0x72>
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	b2da      	uxtb	r2, r3
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	09db      	lsrs	r3, r3, #7
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	2b7f      	cmp	r3, #127	; 0x7f
 8007186:	d8f0      	bhi.n	800716a <SEGGER_SYSVIEW_Start+0x5a>
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800718e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	623b      	str	r3, [r7, #32]
 80071a2:	e00b      	b.n	80071bc <SEGGER_SYSVIEW_Start+0xac>
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	1c59      	adds	r1, r3, #1
 80071ac:	6279      	str	r1, [r7, #36]	; 0x24
 80071ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	09db      	lsrs	r3, r3, #7
 80071ba:	623b      	str	r3, [r7, #32]
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2b7f      	cmp	r3, #127	; 0x7f
 80071c0:	d8f0      	bhi.n	80071a4 <SEGGER_SYSVIEW_Start+0x94>
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	627a      	str	r2, [r7, #36]	; 0x24
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	4b28      	ldr	r3, [pc, #160]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e00b      	b.n	80071f6 <SEGGER_SYSVIEW_Start+0xe6>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	61f9      	str	r1, [r7, #28]
 80071e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	09db      	lsrs	r3, r3, #7
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b7f      	cmp	r3, #127	; 0x7f
 80071fa:	d8f0      	bhi.n	80071de <SEGGER_SYSVIEW_Start+0xce>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	e00b      	b.n	800722e <SEGGER_SYSVIEW_Start+0x11e>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	b2da      	uxtb	r2, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	1c59      	adds	r1, r3, #1
 800721e:	6179      	str	r1, [r7, #20]
 8007220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	09db      	lsrs	r3, r3, #7
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b7f      	cmp	r3, #127	; 0x7f
 8007232:	d8f0      	bhi.n	8007216 <SEGGER_SYSVIEW_Start+0x106>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	617a      	str	r2, [r7, #20]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007244:	2218      	movs	r2, #24
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff fcbf 	bl	8006bcc <_SendPacket>
      RECORD_END();
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <SEGGER_SYSVIEW_Start+0x168>)
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007262:	f000 f9c7 	bl	80075f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007266:	f000 f9b1 	bl	80075cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800726a:	f000 fc5d 	bl	8007b28 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800726e:	bf00      	nop
 8007270:	3730      	adds	r7, #48	; 0x30
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20002084 	.word	0x20002084
 800727c:	08007dec 	.word	0x08007dec
 8007280:	200020b4 	.word	0x200020b4

08007284 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	480b      	ldr	r0, [pc, #44]	; (80072c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800729a:	f7ff fbad 	bl	80069f8 <_PreparePacket>
 800729e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <SEGGER_SYSVIEW_Stop+0x48>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072a8:	220b      	movs	r2, #11
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6838      	ldr	r0, [r7, #0]
 80072ae:	f7ff fc8d 	bl	8006bcc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072b2:	4b06      	ldr	r3, [pc, #24]	; (80072cc <SEGGER_SYSVIEW_Stop+0x48>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200020b4 	.word	0x200020b4
 80072cc:	20002084 	.word	0x20002084

080072d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08c      	sub	sp, #48	; 0x30
 80072d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072d6:	f3ef 8311 	mrs	r3, BASEPRI
 80072da:	f04f 0120 	mov.w	r1, #32
 80072de:	f381 8811 	msr	BASEPRI, r1
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	4845      	ldr	r0, [pc, #276]	; (80073fc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80072e6:	f7ff fb87 	bl	80069f8 <_PreparePacket>
 80072ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f4:	4b42      	ldr	r3, [pc, #264]	; (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fa:	e00b      	b.n	8007314 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	1c59      	adds	r1, r3, #1
 8007304:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	09db      	lsrs	r3, r3, #7
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2b7f      	cmp	r3, #127	; 0x7f
 8007318:	d8f0      	bhi.n	80072fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
 800732e:	4b34      	ldr	r3, [pc, #208]	; (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	e00b      	b.n	800734e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	1c59      	adds	r1, r3, #1
 800733e:	6279      	str	r1, [r7, #36]	; 0x24
 8007340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	09db      	lsrs	r3, r3, #7
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	2b7f      	cmp	r3, #127	; 0x7f
 8007352:	d8f0      	bhi.n	8007336 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	627a      	str	r2, [r7, #36]	; 0x24
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	4b25      	ldr	r3, [pc, #148]	; (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	e00b      	b.n	8007388 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	61f9      	str	r1, [r7, #28]
 800737a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b7f      	cmp	r3, #127	; 0x7f
 800738c:	d8f0      	bhi.n	8007370 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	61fa      	str	r2, [r7, #28]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	2300      	movs	r3, #0
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e00b      	b.n	80073c0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	6179      	str	r1, [r7, #20]
 80073b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	09db      	lsrs	r3, r3, #7
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b7f      	cmp	r3, #127	; 0x7f
 80073c4:	d8f0      	bhi.n	80073a8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	617a      	str	r2, [r7, #20]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073d6:	2218      	movs	r2, #24
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f7ff fbf6 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	4798      	blx	r3
  }
}
 80073f4:	bf00      	nop
 80073f6:	3730      	adds	r7, #48	; 0x30
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200020b4 	.word	0x200020b4
 8007400:	20002084 	.word	0x20002084

08007404 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b092      	sub	sp, #72	; 0x48
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800740c:	f3ef 8311 	mrs	r3, BASEPRI
 8007410:	f04f 0120 	mov.w	r1, #32
 8007414:	f381 8811 	msr	BASEPRI, r1
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	486a      	ldr	r0, [pc, #424]	; (80075c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800741c:	f7ff faec 	bl	80069f8 <_PreparePacket>
 8007420:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	647b      	str	r3, [r7, #68]	; 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b66      	ldr	r3, [pc, #408]	; (80075c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
 8007436:	e00b      	b.n	8007450 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	6479      	str	r1, [r7, #68]	; 0x44
 8007442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744c:	09db      	lsrs	r3, r3, #7
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
 8007450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007452:	2b7f      	cmp	r3, #127	; 0x7f
 8007454:	d8f0      	bhi.n	8007438 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	647a      	str	r2, [r7, #68]	; 0x44
 800745c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007470:	e00b      	b.n	800748a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	b2da      	uxtb	r2, r3
 8007476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007478:	1c59      	adds	r1, r3, #1
 800747a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800747c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	09db      	lsrs	r3, r3, #7
 8007488:	63bb      	str	r3, [r7, #56]	; 0x38
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b7f      	cmp	r3, #127	; 0x7f
 800748e:	d8f0      	bhi.n	8007472 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	4619      	mov	r1, r3
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff fa59 	bl	8006960 <_EncodeStr>
 80074ae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074b0:	2209      	movs	r2, #9
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	6938      	ldr	r0, [r7, #16]
 80074b6:	f7ff fb89 	bl	8006bcc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
 80074ce:	e00b      	b.n	80074e8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	1c59      	adds	r1, r3, #1
 80074d8:	6379      	str	r1, [r7, #52]	; 0x34
 80074da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	09db      	lsrs	r3, r3, #7
 80074e6:	633b      	str	r3, [r7, #48]	; 0x30
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	2b7f      	cmp	r3, #127	; 0x7f
 80074ec:	d8f0      	bhi.n	80074d0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	637a      	str	r2, [r7, #52]	; 0x34
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
 8007508:	e00b      	b.n	8007522 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	b2da      	uxtb	r2, r3
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	09db      	lsrs	r3, r3, #7
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	2b7f      	cmp	r3, #127	; 0x7f
 8007526:	d8f0      	bhi.n	800750a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	e00b      	b.n	800755c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	6279      	str	r1, [r7, #36]	; 0x24
 800754e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	09db      	lsrs	r3, r3, #7
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b7f      	cmp	r3, #127	; 0x7f
 8007560:	d8f0      	bhi.n	8007544 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	627a      	str	r2, [r7, #36]	; 0x24
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e00b      	b.n	8007594 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	61f9      	str	r1, [r7, #28]
 8007586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b7f      	cmp	r3, #127	; 0x7f
 8007598:	d8f0      	bhi.n	800757c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	61fa      	str	r2, [r7, #28]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075aa:	2215      	movs	r2, #21
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	6938      	ldr	r0, [r7, #16]
 80075b0:	f7ff fb0c 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f383 8811 	msr	BASEPRI, r3
}
 80075ba:	bf00      	nop
 80075bc:	3748      	adds	r7, #72	; 0x48
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200020b4 	.word	0x200020b4
 80075c8:	20002084 	.word	0x20002084

080075cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80075e2:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4798      	blx	r3
  }
}
 80075ea:	bf00      	nop
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20002084 	.word	0x20002084

080075f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80075fa:	4b14      	ldr	r3, [pc, #80]	; (800764c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d019      	beq.n	8007636 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d014      	beq.n	8007636 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800760c:	4b0f      	ldr	r3, [pc, #60]	; (800764c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4798      	blx	r3
 8007614:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007618:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800761a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	f04f 0400 	mov.w	r4, #0
 8007626:	0013      	movs	r3, r2
 8007628:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800762a:	461a      	mov	r2, r3
 800762c:	4601      	mov	r1, r0
 800762e:	200d      	movs	r0, #13
 8007630:	f7ff fc0c 	bl	8006e4c <SEGGER_SYSVIEW_RecordU32x2>
 8007634:	e005      	b.n	8007642 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	200c      	movs	r0, #12
 800763e:	f7ff fbc9 	bl	8006dd4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bd90      	pop	{r4, r7, pc}
 800764a:	bf00      	nop
 800764c:	20002084 	.word	0x20002084
 8007650:	e0001004 	.word	0xe0001004

08007654 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800765a:	f3ef 8311 	mrs	r3, BASEPRI
 800765e:	f04f 0120 	mov.w	r1, #32
 8007662:	f381 8811 	msr	BASEPRI, r1
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	4819      	ldr	r0, [pc, #100]	; (80076d0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800766a:	f7ff f9c5 	bl	80069f8 <_PreparePacket>
 800766e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	e00b      	b.n	80076a0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	1c59      	adds	r1, r3, #1
 8007690:	6179      	str	r1, [r7, #20]
 8007692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	09db      	lsrs	r3, r3, #7
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b7f      	cmp	r3, #127	; 0x7f
 80076a4:	d8f0      	bhi.n	8007688 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	617a      	str	r2, [r7, #20]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80076b6:	2202      	movs	r2, #2
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f7ff fa86 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f383 8811 	msr	BASEPRI, r3
}
 80076c6:	bf00      	nop
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200020b4 	.word	0x200020b4
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80076de:	f3ef 8311 	mrs	r3, BASEPRI
 80076e2:	f04f 0120 	mov.w	r1, #32
 80076e6:	f381 8811 	msr	BASEPRI, r1
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	4807      	ldr	r0, [pc, #28]	; (800770c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80076ee:	f7ff f983 	bl	80069f8 <_PreparePacket>
 80076f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80076f4:	2203      	movs	r2, #3
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6838      	ldr	r0, [r7, #0]
 80076fa:	f7ff fa67 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f383 8811 	msr	BASEPRI, r3
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200020b4 	.word	0x200020b4

08007710 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007716:	f3ef 8311 	mrs	r3, BASEPRI
 800771a:	f04f 0120 	mov.w	r1, #32
 800771e:	f381 8811 	msr	BASEPRI, r1
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	4807      	ldr	r0, [pc, #28]	; (8007744 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007726:	f7ff f967 	bl	80069f8 <_PreparePacket>
 800772a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800772c:	2212      	movs	r2, #18
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	f7ff fa4b 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f383 8811 	msr	BASEPRI, r3
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	200020b4 	.word	0x200020b4

08007748 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800774e:	f3ef 8311 	mrs	r3, BASEPRI
 8007752:	f04f 0120 	mov.w	r1, #32
 8007756:	f381 8811 	msr	BASEPRI, r1
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	4807      	ldr	r0, [pc, #28]	; (800777c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800775e:	f7ff f94b 	bl	80069f8 <_PreparePacket>
 8007762:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007764:	2211      	movs	r2, #17
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f7ff fa2f 	bl	8006bcc <_SendPacket>
  RECORD_END();
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f383 8811 	msr	BASEPRI, r3
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200020b4 	.word	0x200020b4

08007780 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007788:	f3ef 8311 	mrs	r3, BASEPRI
 800778c:	f04f 0120 	mov.w	r1, #32
 8007790:	f381 8811 	msr	BASEPRI, r1
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	4819      	ldr	r0, [pc, #100]	; (80077fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007798:	f7ff f92e 	bl	80069f8 <_PreparePacket>
 800779c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e00b      	b.n	80077ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	1c59      	adds	r1, r3, #1
 80077be:	61f9      	str	r1, [r7, #28]
 80077c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	09db      	lsrs	r3, r3, #7
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b7f      	cmp	r3, #127	; 0x7f
 80077d2:	d8f0      	bhi.n	80077b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80077e4:	2208      	movs	r2, #8
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	6938      	ldr	r0, [r7, #16]
 80077ea:	f7ff f9ef 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f383 8811 	msr	BASEPRI, r3
}
 80077f4:	bf00      	nop
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	200020b4 	.word	0x200020b4
 8007800:	20002084 	.word	0x20002084

08007804 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800780c:	f3ef 8311 	mrs	r3, BASEPRI
 8007810:	f04f 0120 	mov.w	r1, #32
 8007814:	f381 8811 	msr	BASEPRI, r1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	4819      	ldr	r0, [pc, #100]	; (8007880 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800781c:	f7ff f8ec 	bl	80069f8 <_PreparePacket>
 8007820:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007826:	4b17      	ldr	r3, [pc, #92]	; (8007884 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e00b      	b.n	8007852 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	61f9      	str	r1, [r7, #28]
 8007844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	09db      	lsrs	r3, r3, #7
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b7f      	cmp	r3, #127	; 0x7f
 8007856:	d8f0      	bhi.n	800783a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	61fa      	str	r2, [r7, #28]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007868:	2204      	movs	r2, #4
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	6938      	ldr	r0, [r7, #16]
 800786e:	f7ff f9ad 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f383 8811 	msr	BASEPRI, r3
}
 8007878:	bf00      	nop
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200020b4 	.word	0x200020b4
 8007884:	20002084 	.word	0x20002084

08007888 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007890:	f3ef 8311 	mrs	r3, BASEPRI
 8007894:	f04f 0120 	mov.w	r1, #32
 8007898:	f381 8811 	msr	BASEPRI, r1
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	4819      	ldr	r0, [pc, #100]	; (8007904 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80078a0:	f7ff f8aa 	bl	80069f8 <_PreparePacket>
 80078a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80078aa:	4b17      	ldr	r3, [pc, #92]	; (8007908 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e00b      	b.n	80078d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	1c59      	adds	r1, r3, #1
 80078c6:	61f9      	str	r1, [r7, #28]
 80078c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	09db      	lsrs	r3, r3, #7
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b7f      	cmp	r3, #127	; 0x7f
 80078da:	d8f0      	bhi.n	80078be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	61fa      	str	r2, [r7, #28]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80078ec:	2206      	movs	r2, #6
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6938      	ldr	r0, [r7, #16]
 80078f2:	f7ff f96b 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f383 8811 	msr	BASEPRI, r3
}
 80078fc:	bf00      	nop
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200020b4 	.word	0x200020b4
 8007908:	20002084 	.word	0x20002084

0800790c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007916:	f3ef 8311 	mrs	r3, BASEPRI
 800791a:	f04f 0120 	mov.w	r1, #32
 800791e:	f381 8811 	msr	BASEPRI, r1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	4827      	ldr	r0, [pc, #156]	; (80079c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007926:	f7ff f867 	bl	80069f8 <_PreparePacket>
 800792a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e00b      	b.n	800795c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	6279      	str	r1, [r7, #36]	; 0x24
 800794e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b7f      	cmp	r3, #127	; 0x7f
 8007960:	d8f0      	bhi.n	8007944 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	627a      	str	r2, [r7, #36]	; 0x24
 8007968:	6a3a      	ldr	r2, [r7, #32]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	e00b      	b.n	8007994 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	1c59      	adds	r1, r3, #1
 8007984:	61f9      	str	r1, [r7, #28]
 8007986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b7f      	cmp	r3, #127	; 0x7f
 8007998:	d8f0      	bhi.n	800797c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80079aa:	2207      	movs	r2, #7
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	6938      	ldr	r0, [r7, #16]
 80079b0:	f7ff f90c 	bl	8006bcc <_SendPacket>
  RECORD_END();
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f383 8811 	msr	BASEPRI, r3
}
 80079ba:	bf00      	nop
 80079bc:	3728      	adds	r7, #40	; 0x28
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	200020b4 	.word	0x200020b4
 80079c8:	20002084 	.word	0x20002084

080079cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	1ad3      	subs	r3, r2, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20002084 	.word	0x20002084

080079ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80079f6:	4b3b      	ldr	r3, [pc, #236]	; (8007ae4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d06d      	beq.n	8007ada <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80079fe:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a08:	e008      	b.n	8007a1c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	3301      	adds	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d3f2      	bcc.n	8007a0a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007a24:	e000      	b.n	8007a28 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007a26:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d055      	beq.n	8007ada <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007a32:	f04f 0120 	mov.w	r1, #32
 8007a36:	f381 8811 	msr	BASEPRI, r1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	482a      	ldr	r0, [pc, #168]	; (8007ae8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007a3e:	f7fe ffdb 	bl	80069f8 <_PreparePacket>
 8007a42:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	e00b      	b.n	8007a6a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	1c59      	adds	r1, r3, #1
 8007a5a:	6279      	str	r1, [r7, #36]	; 0x24
 8007a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	09db      	lsrs	r3, r3, #7
 8007a68:	623b      	str	r3, [r7, #32]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a6e:	d8f0      	bhi.n	8007a52 <SEGGER_SYSVIEW_SendModule+0x66>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	627a      	str	r2, [r7, #36]	; 0x24
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e00b      	b.n	8007aa4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	61f9      	str	r1, [r7, #28]
 8007a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	09db      	lsrs	r3, r3, #7
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa8:	d8f0      	bhi.n	8007a8c <SEGGER_SYSVIEW_SendModule+0xa0>
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	61fa      	str	r2, [r7, #28]
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2280      	movs	r2, #128	; 0x80
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fe ff4c 	bl	8006960 <_EncodeStr>
 8007ac8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007aca:	2216      	movs	r2, #22
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	6938      	ldr	r0, [r7, #16]
 8007ad0:	f7ff f87c 	bl	8006bcc <_SendPacket>
      RECORD_END();
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007ada:	bf00      	nop
 8007adc:	3730      	adds	r7, #48	; 0x30
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200020ac 	.word	0x200020ac
 8007ae8:	200020b4 	.word	0x200020b4

08007aec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007af2:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f2      	bne.n	8007b00 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200020ac 	.word	0x200020ac

08007b28 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007b32:	f04f 0120 	mov.w	r1, #32
 8007b36:	f381 8811 	msr	BASEPRI, r1
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	4817      	ldr	r0, [pc, #92]	; (8007b9c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007b3e:	f7fe ff5b 	bl	80069f8 <_PreparePacket>
 8007b42:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	e00b      	b.n	8007b6c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	1c59      	adds	r1, r3, #1
 8007b5c:	6179      	str	r1, [r7, #20]
 8007b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	09db      	lsrs	r3, r3, #7
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b70:	d8f0      	bhi.n	8007b54 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	617a      	str	r2, [r7, #20]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007b82:	221b      	movs	r2, #27
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	68b8      	ldr	r0, [r7, #8]
 8007b88:	f7ff f820 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f383 8811 	msr	BASEPRI, r3
}
 8007b92:	bf00      	nop
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200020b4 	.word	0x200020b4
 8007ba0:	200020b0 	.word	0x200020b0

08007ba4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bac:	f3ef 8311 	mrs	r3, BASEPRI
 8007bb0:	f04f 0120 	mov.w	r1, #32
 8007bb4:	f381 8811 	msr	BASEPRI, r1
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	4827      	ldr	r0, [pc, #156]	; (8007c58 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007bbc:	f7fe ff1c 	bl	80069f8 <_PreparePacket>
 8007bc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f7fe feca 	bl	8006960 <_EncodeStr>
 8007bcc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	e00b      	b.n	8007bf0 <SEGGER_SYSVIEW_Warn+0x4c>
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	6279      	str	r1, [r7, #36]	; 0x24
 8007be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	09db      	lsrs	r3, r3, #7
 8007bee:	623b      	str	r3, [r7, #32]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bf4:	d8f0      	bhi.n	8007bd8 <SEGGER_SYSVIEW_Warn+0x34>
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	e00b      	b.n	8007c28 <SEGGER_SYSVIEW_Warn+0x84>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	1c59      	adds	r1, r3, #1
 8007c18:	61f9      	str	r1, [r7, #28]
 8007c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	09db      	lsrs	r3, r3, #7
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c2c:	d8f0      	bhi.n	8007c10 <SEGGER_SYSVIEW_Warn+0x6c>
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	61fa      	str	r2, [r7, #28]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007c3e:	221a      	movs	r2, #26
 8007c40:	68f9      	ldr	r1, [r7, #12]
 8007c42:	6938      	ldr	r0, [r7, #16]
 8007c44:	f7fe ffc2 	bl	8006bcc <_SendPacket>
  RECORD_END();
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200020b4 	.word	0x200020b4

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	2500      	movs	r5, #0
 8007c60:	4e0c      	ldr	r6, [pc, #48]	; (8007c94 <__libc_init_array+0x38>)
 8007c62:	4c0d      	ldr	r4, [pc, #52]	; (8007c98 <__libc_init_array+0x3c>)
 8007c64:	1ba4      	subs	r4, r4, r6
 8007c66:	10a4      	asrs	r4, r4, #2
 8007c68:	42a5      	cmp	r5, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	f000 f83c 	bl	8007ce8 <_init>
 8007c70:	2500      	movs	r5, #0
 8007c72:	4e0a      	ldr	r6, [pc, #40]	; (8007c9c <__libc_init_array+0x40>)
 8007c74:	4c0a      	ldr	r4, [pc, #40]	; (8007ca0 <__libc_init_array+0x44>)
 8007c76:	1ba4      	subs	r4, r4, r6
 8007c78:	10a4      	asrs	r4, r4, #2
 8007c7a:	42a5      	cmp	r5, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c84:	4798      	blx	r3
 8007c86:	3501      	adds	r5, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c8e:	4798      	blx	r3
 8007c90:	3501      	adds	r5, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	08007df8 	.word	0x08007df8
 8007c98:	08007df8 	.word	0x08007df8
 8007c9c:	08007df8 	.word	0x08007df8
 8007ca0:	08007dfc 	.word	0x08007dfc

08007ca4 <memcmp>:
 8007ca4:	b530      	push	{r4, r5, lr}
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	42a2      	cmp	r2, r4
 8007caa:	d101      	bne.n	8007cb0 <memcmp+0xc>
 8007cac:	2000      	movs	r0, #0
 8007cae:	e007      	b.n	8007cc0 <memcmp+0x1c>
 8007cb0:	5d03      	ldrb	r3, [r0, r4]
 8007cb2:	3401      	adds	r4, #1
 8007cb4:	190d      	adds	r5, r1, r4
 8007cb6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007cba:	42ab      	cmp	r3, r5
 8007cbc:	d0f4      	beq.n	8007ca8 <memcmp+0x4>
 8007cbe:	1b58      	subs	r0, r3, r5
 8007cc0:	bd30      	pop	{r4, r5, pc}

08007cc2 <memcpy>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	1e43      	subs	r3, r0, #1
 8007cc6:	440a      	add	r2, r1
 8007cc8:	4291      	cmp	r1, r2
 8007cca:	d100      	bne.n	8007cce <memcpy+0xc>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd6:	e7f7      	b.n	8007cc8 <memcpy+0x6>

08007cd8 <memset>:
 8007cd8:	4603      	mov	r3, r0
 8007cda:	4402      	add	r2, r0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <_init>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr

08007cf4 <_fini>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr
