
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080080d4  080080d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080d4  080080d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080080dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002394  20000010  080080ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  080080ec  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae17  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ec  00000000  00000000  0003ae50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0003e440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  0003fb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049d5  00000000  00000000  000410f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012861  00000000  00000000  00045acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008641e  00000000  00000000  0005832e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de74c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  000de7c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fc4 	.word	0x08007fc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007fc4 	.word	0x08007fc4

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200022fc 	.word	0x200022fc

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__aeabi_d2f>:
 8000978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000980:	bf24      	itt	cs
 8000982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098a:	d90d      	bls.n	80009a8 <__aeabi_d2f+0x30>
 800098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a0:	bf08      	it	eq
 80009a2:	f020 0001 	biceq.w	r0, r0, #1
 80009a6:	4770      	bx	lr
 80009a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009ac:	d121      	bne.n	80009f2 <__aeabi_d2f+0x7a>
 80009ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b2:	bfbc      	itt	lt
 80009b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	4770      	bxlt	lr
 80009ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c2:	f1c2 0218 	rsb	r2, r2, #24
 80009c6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	bf18      	it	ne
 80009d4:	f040 0001 	orrne.w	r0, r0, #1
 80009d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e4:	ea40 000c 	orr.w	r0, r0, ip
 80009e8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f0:	e7cc      	b.n	800098c <__aeabi_d2f+0x14>
 80009f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f6:	d107      	bne.n	8000a08 <__aeabi_d2f+0x90>
 80009f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009fc:	bf1e      	ittt	ne
 80009fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a06:	4770      	bxne	lr
 8000a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_frsub>:
 8000a18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a1c:	e002      	b.n	8000a24 <__addsf3>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_fsub>:
 8000a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a24 <__addsf3>:
 8000a24:	0042      	lsls	r2, r0, #1
 8000a26:	bf1f      	itttt	ne
 8000a28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a2c:	ea92 0f03 	teqne	r2, r3
 8000a30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a38:	d06a      	beq.n	8000b10 <__addsf3+0xec>
 8000a3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a42:	bfc1      	itttt	gt
 8000a44:	18d2      	addgt	r2, r2, r3
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	4048      	eorgt	r0, r1
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	bfb8      	it	lt
 8000a4e:	425b      	neglt	r3, r3
 8000a50:	2b19      	cmp	r3, #25
 8000a52:	bf88      	it	hi
 8000a54:	4770      	bxhi	lr
 8000a56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4249      	negne	r1, r1
 8000a76:	ea92 0f03 	teq	r2, r3
 8000a7a:	d03f      	beq.n	8000afc <__addsf3+0xd8>
 8000a7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a80:	fa41 fc03 	asr.w	ip, r1, r3
 8000a84:	eb10 000c 	adds.w	r0, r0, ip
 8000a88:	f1c3 0320 	rsb	r3, r3, #32
 8000a8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a94:	d502      	bpl.n	8000a9c <__addsf3+0x78>
 8000a96:	4249      	negs	r1, r1
 8000a98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa0:	d313      	bcc.n	8000aca <__addsf3+0xa6>
 8000aa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa6:	d306      	bcc.n	8000ab6 <__addsf3+0x92>
 8000aa8:	0840      	lsrs	r0, r0, #1
 8000aaa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aae:	f102 0201 	add.w	r2, r2, #1
 8000ab2:	2afe      	cmp	r2, #254	; 0xfe
 8000ab4:	d251      	bcs.n	8000b5a <__addsf3+0x136>
 8000ab6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000abe:	bf08      	it	eq
 8000ac0:	f020 0001 	biceq.w	r0, r0, #1
 8000ac4:	ea40 0003 	orr.w	r0, r0, r3
 8000ac8:	4770      	bx	lr
 8000aca:	0049      	lsls	r1, r1, #1
 8000acc:	eb40 0000 	adc.w	r0, r0, r0
 8000ad0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ad4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad8:	d1ed      	bne.n	8000ab6 <__addsf3+0x92>
 8000ada:	fab0 fc80 	clz	ip, r0
 8000ade:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aea:	bfaa      	itet	ge
 8000aec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af0:	4252      	neglt	r2, r2
 8000af2:	4318      	orrge	r0, r3
 8000af4:	bfbc      	itt	lt
 8000af6:	40d0      	lsrlt	r0, r2
 8000af8:	4318      	orrlt	r0, r3
 8000afa:	4770      	bx	lr
 8000afc:	f092 0f00 	teq	r2, #0
 8000b00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b04:	bf06      	itte	eq
 8000b06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0a:	3201      	addeq	r2, #1
 8000b0c:	3b01      	subne	r3, #1
 8000b0e:	e7b5      	b.n	8000a7c <__addsf3+0x58>
 8000b10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b18:	bf18      	it	ne
 8000b1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1e:	d021      	beq.n	8000b64 <__addsf3+0x140>
 8000b20:	ea92 0f03 	teq	r2, r3
 8000b24:	d004      	beq.n	8000b30 <__addsf3+0x10c>
 8000b26:	f092 0f00 	teq	r2, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	4608      	moveq	r0, r1
 8000b2e:	4770      	bx	lr
 8000b30:	ea90 0f01 	teq	r0, r1
 8000b34:	bf1c      	itt	ne
 8000b36:	2000      	movne	r0, #0
 8000b38:	4770      	bxne	lr
 8000b3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3e:	d104      	bne.n	8000b4a <__addsf3+0x126>
 8000b40:	0040      	lsls	r0, r0, #1
 8000b42:	bf28      	it	cs
 8000b44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	4770      	bx	lr
 8000b4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4e:	bf3c      	itt	cc
 8000b50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bxcc	lr
 8000b56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b62:	4770      	bx	lr
 8000b64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b68:	bf16      	itet	ne
 8000b6a:	4608      	movne	r0, r1
 8000b6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b70:	4601      	movne	r1, r0
 8000b72:	0242      	lsls	r2, r0, #9
 8000b74:	bf06      	itte	eq
 8000b76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7a:	ea90 0f01 	teqeq	r0, r1
 8000b7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_ui2f>:
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e004      	b.n	8000b94 <__aeabi_i2f+0x8>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_i2f>:
 8000b8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	bf48      	it	mi
 8000b92:	4240      	negmi	r0, r0
 8000b94:	ea5f 0c00 	movs.w	ip, r0
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	e01c      	b.n	8000be2 <__aeabi_l2f+0x2a>

08000ba8 <__aeabi_ul2f>:
 8000ba8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e00a      	b.n	8000bcc <__aeabi_l2f+0x14>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_l2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__aeabi_l2f+0x14>
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	ea5f 0c01 	movs.w	ip, r1
 8000bd0:	bf02      	ittt	eq
 8000bd2:	4684      	moveq	ip, r0
 8000bd4:	4601      	moveq	r1, r0
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bdc:	bf08      	it	eq
 8000bde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be6:	fabc f28c 	clz	r2, ip
 8000bea:	3a08      	subs	r2, #8
 8000bec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf0:	db10      	blt.n	8000c14 <__aeabi_l2f+0x5c>
 8000bf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfc:	f1c2 0220 	rsb	r2, r2, #32
 8000c00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c04:	fa20 f202 	lsr.w	r2, r0, r2
 8000c08:	eb43 0002 	adc.w	r0, r3, r2
 8000c0c:	bf08      	it	eq
 8000c0e:	f020 0001 	biceq.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	f102 0220 	add.w	r2, r2, #32
 8000c18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1c:	f1c2 0220 	rsb	r2, r2, #32
 8000c20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c24:	fa21 f202 	lsr.w	r2, r1, r2
 8000c28:	eb43 0002 	adc.w	r0, r3, r2
 8000c2c:	bf08      	it	eq
 8000c2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_f2uiz>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	d20e      	bcs.n	8000c56 <__aeabi_f2uiz+0x22>
 8000c38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c3c:	d30b      	bcc.n	8000c56 <__aeabi_f2uiz+0x22>
 8000c3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c46:	d409      	bmi.n	8000c5c <__aeabi_f2uiz+0x28>
 8000c48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c50:	fa23 f002 	lsr.w	r0, r3, r2
 8000c54:	4770      	bx	lr
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	4770      	bx	lr
 8000c5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c60:	d101      	bne.n	8000c66 <__aeabi_f2uiz+0x32>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d102      	bne.n	8000c6c <__aeabi_f2uiz+0x38>
 8000c66:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6a:	4770      	bx	lr
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <vApplicationGetIdleTaskMemory+0x28>)
 8000c84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	2000002c 	.word	0x2000002c
 8000ca0:	20000080 	.word	0x20000080

08000ca4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000caa:	b662      	cpsie	i
	/* MCU Configuration--------------------------------------------------------*/
	__enable_irq();
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cac:	f000 fff4 	bl	8001c98 <HAL_Init>

	HAL_Delay(2000);
 8000cb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cb4:	f001 f822 	bl	8001cfc <HAL_Delay>
	/* Configure the system clock */
	SystemClock_Config();
 8000cb8:	f000 f848 	bl	8000d4c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cbc:	f000 f98e 	bl	8000fdc <MX_GPIO_Init>
	MX_DMA_Init();
 8000cc0:	f000 f96e 	bl	8000fa0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000cc4:	f000 f89e 	bl	8000e04 <MX_ADC1_Init>
	MX_CAN_Init();
 8000cc8:	f000 f906 	bl	8000ed8 <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	MX_I2C2_Init();
 8000ccc:	f000 f93a 	bl	8000f44 <MX_I2C2_Init>

	DWT_CTRL |= (1 << 0);
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <main+0x8c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <main+0x8c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

	//OD = Flash_Read_NUM(0x0801FC00);

	CAN_Filter_Config();
 8000cdc:	f000 fa62 	bl	80011a4 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 8000ce0:	f240 4101 	movw	r1, #1025	; 0x401
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <main+0x90>)
 8000ce6:	f001 fec9 	bl	8002a7c <HAL_CAN_ActivateNotification>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <main+0x50>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 8000cf0:	f000 fd74 	bl	80017dc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 8000cf4:	480f      	ldr	r0, [pc, #60]	; (8000d34 <main+0x90>)
 8000cf6:	f001 fda3 	bl	8002840 <HAL_CAN_Start>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <main+0x60>
		Error_Handler();
 8000d00:	f000 fd6c 	bl	80017dc <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 4);
 8000d04:	2204      	movs	r2, #4
 8000d06:	490c      	ldr	r1, [pc, #48]	; (8000d38 <main+0x94>)
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <main+0x98>)
 8000d0a:	f001 f8f1 	bl	8001ef0 <HAL_ADC_Start_DMA>

	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();

	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <main+0x9c>)
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	2307      	movs	r3, #7
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	490a      	ldr	r1, [pc, #40]	; (8000d44 <main+0xa0>)
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <main+0xa4>)
 8000d1e:	f004 fb92 	bl	8005446 <xTaskCreate>

	vTaskStartScheduler();
 8000d22:	f004 fe2d 	bl	8005980 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 ffe8 	bl	8001cfc <HAL_Delay>
 8000d2c:	e7fb      	b.n	8000d26 <main+0x82>
 8000d2e:	bf00      	nop
 8000d30:	e0001000 	.word	0xe0001000
 8000d34:	20002204 	.word	0x20002204
 8000d38:	20002198 	.word	0x20002198
 8000d3c:	20002234 	.word	0x20002234
 8000d40:	200022b4 	.word	0x200022b4
 8000d44:	08007fdc 	.word	0x08007fdc
 8000d48:	080011f1 	.word	0x080011f1

08000d4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f007 f92a 	bl	8007fb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fa5e 	bl	8004264 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x66>
		Error_Handler();
 8000dae:	f000 fd15 	bl	80017dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fcc8 	bl	8004764 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x92>
		Error_Handler();
 8000dda:	f000 fcff 	bl	80017dc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dde:	2302      	movs	r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fe86 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xae>
		Error_Handler();
 8000df6:	f000 fcf1 	bl	80017dc <Error_Handler>
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	3750      	adds	r7, #80	; 0x50
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e16:	4a2f      	ldr	r2, [pc, #188]	; (8000ed4 <MX_ADC1_Init+0xd0>)
 8000e18:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e30:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e34:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e44:	f000 ff7c 	bl	8001d40 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x4e>
		Error_Handler();
 8000e4e:	f000 fcc5 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e64:	f001 f93e 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000e6e:	f000 fcb5 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e80:	f001 f930 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x8a>
		Error_Handler();
 8000e8a:	f000 fca7 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000e9c:	f001 f922 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000ea6:	f000 fc99 	bl	80017dc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_ADC1_Init+0xcc>)
 8000eb8:	f001 f914 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8000ec2:	f000 fc8b 	bl	80017dc <Error_Handler>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20002234 	.word	0x20002234
 8000ed4:	40012400 	.word	0x40012400

08000ed8 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_CAN_Init+0x64>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <MX_CAN_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_CAN_Init+0x64>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_CAN_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_CAN_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_CAN_Init+0x64>)
 8000ef6:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000efa:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_CAN_Init+0x64>)
 8000efe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f02:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_CAN_Init+0x64>)
 8000f2a:	f001 fac5 	bl	80024b8 <HAL_CAN_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_CAN_Init+0x60>
		Error_Handler();
 8000f34:	f000 fc52 	bl	80017dc <Error_Handler>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20002204 	.word	0x20002204
 8000f40:	40006400 	.word	0x40006400

08000f44 <MX_I2C2_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c2.Instance = I2C2;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_I2C2_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_I2C2_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2C2_Init+0x50>)
 8000f82:	f002 fc37 	bl	80037f4 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000f8c:	f000 fc26 	bl	80017dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200021a4 	.word	0x200021a4
 8000f98:	40005800 	.word	0x40005800
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_DMA_Init+0x38>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <MX_DMA_Init+0x38>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_DMA_Init+0x38>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f002 f85b 	bl	800307e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f002 f874 	bl	80030b6 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	4b67      	ldr	r3, [pc, #412]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a66      	ldr	r2, [pc, #408]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b64      	ldr	r3, [pc, #400]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b61      	ldr	r3, [pc, #388]	; (8001190 <MX_GPIO_Init+0x1b4>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a60      	ldr	r2, [pc, #384]	; (8001190 <MX_GPIO_Init+0x1b4>)
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <MX_GPIO_Init+0x1b4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b55      	ldr	r3, [pc, #340]	; (8001190 <MX_GPIO_Init+0x1b4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a54      	ldr	r2, [pc, #336]	; (8001190 <MX_GPIO_Init+0x1b4>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <MX_GPIO_Init+0x1b4>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001056:	484f      	ldr	r0, [pc, #316]	; (8001194 <MX_GPIO_Init+0x1b8>)
 8001058:	f002 fb9b 	bl	8003792 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001062:	484c      	ldr	r0, [pc, #304]	; (8001194 <MX_GPIO_Init+0x1b8>)
 8001064:	f002 fb95 	bl	8003792 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106e:	484a      	ldr	r0, [pc, #296]	; (8001198 <MX_GPIO_Init+0x1bc>)
 8001070:	f002 fb8f 	bl	8003792 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2108      	movs	r1, #8
 8001078:	4848      	ldr	r0, [pc, #288]	; (800119c <MX_GPIO_Init+0x1c0>)
 800107a:	f002 fb8a 	bl	8003792 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4846      	ldr	r0, [pc, #280]	; (800119c <MX_GPIO_Init+0x1c0>)
 8001084:	f002 fb85 	bl	8003792 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2302      	movs	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	483c      	ldr	r0, [pc, #240]	; (8001194 <MX_GPIO_Init+0x1b8>)
 80010a2:	f002 fa05 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4835      	ldr	r0, [pc, #212]	; (8001194 <MX_GPIO_Init+0x1b8>)
 80010c0:	f002 f9f6 	bl	80034b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	482e      	ldr	r0, [pc, #184]	; (8001198 <MX_GPIO_Init+0x1bc>)
 80010de:	f002 f9e7 	bl	80034b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_GPIO_Init+0x1c4>)
 80010ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4828      	ldr	r0, [pc, #160]	; (8001198 <MX_GPIO_Init+0x1bc>)
 80010f8:	f002 f9da 	bl	80034b0 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	210f      	movs	r1, #15
 8001100:	2028      	movs	r0, #40	; 0x28
 8001102:	f001 ffbc 	bl	800307e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001106:	2028      	movs	r0, #40	; 0x28
 8001108:	f001 ffd5 	bl	80030b6 <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <MX_GPIO_Init+0x1c4>)
 8001114:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_GPIO_Init+0x1bc>)
 8001122:	f002 f9c5 	bl	80034b0 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	210f      	movs	r1, #15
 800112a:	2017      	movs	r0, #23
 800112c:	f001 ffa7 	bl	800307e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001130:	2017      	movs	r0, #23
 8001132:	f001 ffc0 	bl	80030b6 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001136:	2308      	movs	r3, #8
 8001138:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <MX_GPIO_Init+0x1c0>)
 800114e:	f002 f9af 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_GPIO_Init+0x1c0>)
 800116a:	f002 f9a1 	bl	80034b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800116e:	2310      	movs	r3, #16
 8001170:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4619      	mov	r1, r3
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_GPIO_Init+0x1c0>)
 8001182:	f002 f995 	bl	80034b0 <HAL_GPIO_Init>

}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40011000 	.word	0x40011000
 8001198:	40010800 	.word	0x40010800
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	10210000 	.word	0x10210000

080011a4 <CAN_Filter_Config>:
//void EXTI9_5_IRQHandler(void) {
//	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
//	p_rpm += 1;
//}
/*Configure can filters */
void CAN_Filter_Config(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <CAN_Filter_Config+0x48>)
 80011d4:	f001 fa6b 	bl	80026ae <HAL_CAN_ConfigFilter>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <CAN_Filter_Config+0x3e>
		Error_Handler();
 80011de:	f000 fafd 	bl	80017dc <Error_Handler>
	}
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20002204 	.word	0x20002204

080011f0 <Start_taskF>:

void Start_taskF(void *pvParameters) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 80011f8:	2203      	movs	r2, #3
 80011fa:	2100      	movs	r1, #0
 80011fc:	2001      	movs	r0, #1
 80011fe:	f004 f867 	bl	80052d0 <xQueueGenericCreate>
 8001202:	4602      	mov	r2, r0
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <Start_taskF+0xd0>)
 8001206:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f004 fb81 	bl	8005910 <vTaskDelay>
	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Start_taskF+0xd4>)
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2304      	movs	r3, #4
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	492b      	ldr	r1, [pc, #172]	; (80012c8 <Start_taskF+0xd8>)
 800121c:	482b      	ldr	r0, [pc, #172]	; (80012cc <Start_taskF+0xdc>)
 800121e:	f004 f912 	bl	8005446 <xTaskCreate>
	vTaskDelay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f004 fb74 	bl	8005910 <vTaskDelay>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <Start_taskF+0xe0>)
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2304      	movs	r3, #4
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	4927      	ldr	r1, [pc, #156]	; (80012d4 <Start_taskF+0xe4>)
 8001236:	4828      	ldr	r0, [pc, #160]	; (80012d8 <Start_taskF+0xe8>)
 8001238:	f004 f905 	bl	8005446 <xTaskCreate>
	vTaskDelay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f004 fb67 	bl	8005910 <vTaskDelay>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <Start_taskF+0xec>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2304      	movs	r3, #4
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	4924      	ldr	r1, [pc, #144]	; (80012e0 <Start_taskF+0xf0>)
 8001250:	4824      	ldr	r0, [pc, #144]	; (80012e4 <Start_taskF+0xf4>)
 8001252:	f004 f8f8 	bl	8005446 <xTaskCreate>
	vTaskDelay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f004 fb5a 	bl	8005910 <vTaskDelay>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <Start_taskF+0xf8>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2305      	movs	r3, #5
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	4920      	ldr	r1, [pc, #128]	; (80012ec <Start_taskF+0xfc>)
 800126a:	4821      	ldr	r0, [pc, #132]	; (80012f0 <Start_taskF+0x100>)
 800126c:	f004 f8eb 	bl	8005446 <xTaskCreate>
	vTaskDelay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f004 fb4d 	bl	8005910 <vTaskDelay>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <Start_taskF+0x104>)
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2304      	movs	r3, #4
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	491d      	ldr	r1, [pc, #116]	; (80012f8 <Start_taskF+0x108>)
 8001284:	481d      	ldr	r0, [pc, #116]	; (80012fc <Start_taskF+0x10c>)
 8001286:	f004 f8de 	bl	8005446 <xTaskCreate>
	vTaskDelay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f004 fb40 	bl	8005910 <vTaskDelay>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 2, &OD_Task);
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <Start_taskF+0x110>)
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2302      	movs	r3, #2
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2300      	movs	r3, #0
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	4919      	ldr	r1, [pc, #100]	; (8001304 <Start_taskF+0x114>)
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <Start_taskF+0x118>)
 80012a0:	f004 f8d1 	bl	8005446 <xTaskCreate>

	if (Start_Task != NULL) {
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <Start_taskF+0x11c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <Start_taskF+0xc6>
		vTaskDelete(Start_Task);
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <Start_taskF+0x11c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fa13 	bl	80056dc <vTaskDelete>
	}

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20002200 	.word	0x20002200
 80012c4:	2000222c 	.word	0x2000222c
 80012c8:	08007fe8 	.word	0x08007fe8
 80012cc:	08001311 	.word	0x08001311
 80012d0:	200021fc 	.word	0x200021fc
 80012d4:	08007ff0 	.word	0x08007ff0
 80012d8:	08001399 	.word	0x08001399
 80012dc:	20002230 	.word	0x20002230
 80012e0:	08007ffc 	.word	0x08007ffc
 80012e4:	08001485 	.word	0x08001485
 80012e8:	200022b0 	.word	0x200022b0
 80012ec:	08008008 	.word	0x08008008
 80012f0:	080015f1 	.word	0x080015f1
 80012f4:	200021f8 	.word	0x200021f8
 80012f8:	08008014 	.word	0x08008014
 80012fc:	08001545 	.word	0x08001545
 8001300:	200021a0 	.word	0x200021a0
 8001304:	0800801c 	.word	0x0800801c
 8001308:	08001755 	.word	0x08001755
 800130c:	200022b4 	.word	0x200022b4

08001310 <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;  //Ticks to wait since routine starts
 8001318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 800131e:	f004 fc3b 	bl	8005b98 <xTaskGetTickCount>
 8001322:	4603      	mov	r3, r0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		//buffer[0] = (uint8_t) (analog[0] >> 8) & 0xFF;  //bat CALIBRAR
		//buffer[1] = (uint8_t) analog[0] & 0xFF;

		uint8_t batbuff[2];
		uint16_t batval = analog[0];
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <Bat_taskF+0x78>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	867b      	strh	r3, [r7, #50]	; 0x32
		/*if (batval < 2100) {
			batval = batval_old;
		} else {
			batval_old = batval;
		}*/
		batbuff[0] = (uint8_t) (batval >> 8) & 0xFF;
 800132c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		batbuff[1] = (uint8_t) batval & 0xFF;
 8001338:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
		BatHeader.StdId = 0x650;
 8001344:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8001348:	60fb      	str	r3, [r7, #12]
		BatHeader.IDE = CAN_ID_STD;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
		BatHeader.RTR = CAN_RTR_DATA;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800135a:	f107 010c 	add.w	r1, r7, #12
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <Bat_taskF+0x7c>)
 8001360:	f001 fab2 	bl	80028c8 <HAL_CAN_AddTxMessage>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <Bat_taskF+0x5e>
				!= HAL_OK) {

			Error_Handler();
 800136a:	f000 fa37 	bl	80017dc <Error_Handler>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <Bat_taskF+0x80>)
 8001374:	f002 fa25 	bl	80037c2 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*1Hz frequency*/
 8001378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800137e:	4618      	mov	r0, r3
 8001380:	f004 fa48 	bl	8005814 <vTaskDelayUntil>
	while (1) {
 8001384:	e7cf      	b.n	8001326 <Bat_taskF+0x16>
 8001386:	bf00      	nop
 8001388:	20002198 	.word	0x20002198
 800138c:	20002204 	.word	0x20002204
 8001390:	40011000 	.word	0x40011000
 8001394:	00000000 	.word	0x00000000

08001398 <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;  //Ticks to wait since routine starts
 80013a0:	2314      	movs	r3, #20
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 80013a4:	f004 fbf8 	bl	8005b98 <xTaskGetTickCount>
 80013a8:	4603      	mov	r3, r0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (1) {
		uint8_t fuelbuff[2];
		uint16_t fuel_a = analog[1];
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <Fuel_taskF+0xe0>)
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	867b      	strh	r3, [r7, #50]	; 0x32
		fuel_f = 0.9802*fuel_f + (1-0.9802)*(float)fuel_a;
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <Fuel_taskF+0xe4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f874 	bl	80004a4 <__aeabi_f2d>
 80013bc:	a32a      	add	r3, pc, #168	; (adr r3, 8001468 <Fuel_taskF+0xd0>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f8c7 	bl	8000554 <__aeabi_dmul>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4625      	mov	r5, r4
 80013cc:	461c      	mov	r4, r3
 80013ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fbd7 	bl	8000b84 <__aeabi_ui2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f863 	bl	80004a4 <__aeabi_f2d>
 80013de:	a324      	add	r3, pc, #144	; (adr r3, 8001470 <Fuel_taskF+0xd8>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f8b6 	bl	8000554 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7fe fefa 	bl	80001e8 <__adddf3>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4618      	mov	r0, r3
 80013fa:	4621      	mov	r1, r4
 80013fc:	f7ff fabc 	bl	8000978 <__aeabi_d2f>
 8001400:	4602      	mov	r2, r0
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <Fuel_taskF+0xe4>)
 8001404:	601a      	str	r2, [r3, #0]
		uint16_t fuel_c = (uint16_t)fuel_f;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <Fuel_taskF+0xe4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fc12 	bl	8000c34 <__aeabi_f2uiz>
 8001410:	4603      	mov	r3, r0
 8001412:	863b      	strh	r3, [r7, #48]	; 0x30
		fuelbuff[0] = (uint8_t) (fuel_c >> 8) & 0xFF;
 8001414:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b29b      	uxth	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		fuelbuff[1] = (uint8_t) fuel_c & 0xFF;
 8001420:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
		FuelHeader.StdId = 0x652;
 800142c:	f240 6352 	movw	r3, #1618	; 0x652
 8001430:	60fb      	str	r3, [r7, #12]
		FuelHeader.IDE = CAN_ID_STD;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
		FuelHeader.RTR = CAN_RTR_DATA;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001442:	f107 010c 	add.w	r1, r7, #12
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <Fuel_taskF+0xe8>)
 8001448:	f001 fa3e 	bl	80028c8 <HAL_CAN_AddTxMessage>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <Fuel_taskF+0xbe>
				!= HAL_OK) {
			Error_Handler();
 8001452:	f000 f9c3 	bl	80017dc <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*50Hz frequency*/
 8001456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800145c:	4618      	mov	r0, r3
 800145e:	f004 f9d9 	bl	8005814 <vTaskDelayUntil>
	while (1) {
 8001462:	e7a3      	b.n	80013ac <Fuel_taskF+0x14>
 8001464:	f3af 8000 	nop.w
 8001468:	63f14120 	.word	0x63f14120
 800146c:	3fef5dcc 	.word	0x3fef5dcc
 8001470:	81d7dc00 	.word	0x81d7dc00
 8001474:	3f944673 	.word	0x3f944673
 8001478:	20002198 	.word	0x20002198
 800147c:	20000280 	.word	0x20000280
 8001480:	20002204 	.word	0x20002204

08001484 <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b090      	sub	sp, #64	; 0x40
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 800148c:	23c8      	movs	r3, #200	; 0xc8
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 8001490:	f004 fb82 	bl	8005b98 <xTaskGetTickCount>
 8001494:	4603      	mov	r3, r0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
//		speedbuff[0] = 0;
//		speedbuff[1] = p_spd*5;
//		p_spd = 0;
		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &test[0], 1, 100);
 8001498:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	2108      	movs	r1, #8
 80014a4:	4824      	ldr	r0, [pc, #144]	; (8001538 <Speed_taskF+0xb4>)
 80014a6:	f002 facd 	bl	8003a44 <HAL_I2C_Master_Receive>
		if (test[0] != 0xAA) {
 80014aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ae:	2baa      	cmp	r3, #170	; 0xaa
 80014b0:	d008      	beq.n	80014c4 <Speed_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &dump[0], 1, 100);
 80014b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2108      	movs	r1, #8
 80014be:	481e      	ldr	r0, [pc, #120]	; (8001538 <Speed_taskF+0xb4>)
 80014c0:	f002 fac0 	bl	8003a44 <HAL_I2C_Master_Receive>
		}
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[0], 1, 100);
 80014c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80014c8:	2364      	movs	r3, #100	; 0x64
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2108      	movs	r1, #8
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <Speed_taskF+0xb4>)
 80014d2:	f002 fab7 	bl	8003a44 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[1], 1, 100);
 80014d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	2364      	movs	r3, #100	; 0x64
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	2108      	movs	r1, #8
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <Speed_taskF+0xb4>)
 80014e6:	f002 faad 	bl	8003a44 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &odbuff[0], 1, 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <Speed_taskF+0xb8>)
 80014f2:	2108      	movs	r1, #8
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <Speed_taskF+0xb4>)
 80014f6:	f002 faa5 	bl	8003a44 <HAL_I2C_Master_Receive>
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 80014fe:	f240 6353 	movw	r3, #1619	; 0x653
 8001502:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <Speed_taskF+0xbc>)
 800151a:	f001 f9d5 	bl	80028c8 <HAL_CAN_AddTxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <Speed_taskF+0xa4>
				!= HAL_OK) {
			Error_Handler();
 8001524:	f000 f95a 	bl	80017dc <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8001528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800152e:	4618      	mov	r0, r3
 8001530:	f004 f970 	bl	8005814 <vTaskDelayUntil>
	while (1) {
 8001534:	e7b0      	b.n	8001498 <Speed_taskF+0x14>
 8001536:	bf00      	nop
 8001538:	200021a4 	.word	0x200021a4
 800153c:	200022ac 	.word	0x200022ac
 8001540:	20002204 	.word	0x20002204

08001544 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 800154c:	23c8      	movs	r3, #200	; 0xc8
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 8001550:	f004 fb22 	bl	8005b98 <xTaskGetTickCount>
 8001554:	4603      	mov	r3, r0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
		//rpmbuff[0] = (uint8_t) (analog[3] >> 8) & 0xFF;
		//rpmbuff[1] = (uint8_t) analog[3] & 0xFF;

		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &test[0], 1, 10);
 8001558:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800155c:	230a      	movs	r3, #10
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	210a      	movs	r1, #10
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <RPM_taskF+0xa4>)
 8001566:	f002 fa6d 	bl	8003a44 <HAL_I2C_Master_Receive>
		if (test[0] != 0x55){
 800156a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800156e:	2b55      	cmp	r3, #85	; 0x55
 8001570:	d008      	beq.n	8001584 <RPM_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &dump[0], 1, 10);
 8001572:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001576:	230a      	movs	r3, #10
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	210a      	movs	r1, #10
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <RPM_taskF+0xa4>)
 8001580:	f002 fa60 	bl	8003a44 <HAL_I2C_Master_Receive>
		}

		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[0], 1, 10);
 8001584:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001588:	230a      	movs	r3, #10
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	210a      	movs	r1, #10
 8001590:	4815      	ldr	r0, [pc, #84]	; (80015e8 <RPM_taskF+0xa4>)
 8001592:	f002 fa57 	bl	8003a44 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[1], 1, 10);
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	230a      	movs	r3, #10
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	210a      	movs	r1, #10
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <RPM_taskF+0xa4>)
 80015a6:	f002 fa4d 	bl	8003a44 <HAL_I2C_Master_Receive>
//		rpmbuff[1]=123;


		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
		RPMHeader.StdId = 0x654;
 80015ae:	f240 6354 	movw	r3, #1620	; 0x654
 80015b2:	60bb      	str	r3, [r7, #8]
		RPMHeader.IDE = CAN_ID_STD;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
		RPMHeader.RTR = CAN_RTR_DATA;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80015c4:	f107 0108 	add.w	r1, r7, #8
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <RPM_taskF+0xa8>)
 80015ca:	f001 f97d 	bl	80028c8 <HAL_CAN_AddTxMessage>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <RPM_taskF+0x94>
				!= HAL_OK) {
			Error_Handler();
 80015d4:	f000 f902 	bl	80017dc <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 80015d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 f918 	bl	8005814 <vTaskDelayUntil>
	while (1) {
 80015e4:	e7b8      	b.n	8001558 <RPM_taskF+0x14>
 80015e6:	bf00      	nop
 80015e8:	200021a4 	.word	0x200021a4
 80015ec:	20002204 	.word	0x20002204

080015f0 <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b092      	sub	sp, #72	; 0x48
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 80015f8:	23c8      	movs	r3, #200	; 0xc8
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 80015fc:	f004 facc 	bl	8005b98 <xTaskGetTickCount>
 8001600:	4603      	mov	r3, r0
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (1) {
		uint8_t tempdata[16];

		CSen
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160a:	484e      	ldr	r0, [pc, #312]	; (8001744 <Temp_taskF+0x154>)
 800160c:	f002 f8c1 	bl	8003792 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
 8001614:	e018      	b.n	8001648 <Temp_taskF+0x58>
			SCK_H
 8001616:	2200      	movs	r2, #0
 8001618:	2108      	movs	r1, #8
 800161a:	484b      	ldr	r0, [pc, #300]	; (8001748 <Temp_taskF+0x158>)
 800161c:	f002 f8b9 	bl	8003792 <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001620:	2110      	movs	r1, #16
 8001622:	4849      	ldr	r0, [pc, #292]	; (8001748 <Temp_taskF+0x158>)
 8001624:	f002 f89e 	bl	8003764 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	4619      	mov	r1, r3
 800162c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
			SCK_L
 8001638:	2201      	movs	r2, #1
 800163a:	2108      	movs	r1, #8
 800163c:	4842      	ldr	r0, [pc, #264]	; (8001748 <Temp_taskF+0x158>)
 800163e:	f002 f8a8 	bl	8003792 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001644:	3301      	adds	r3, #1
 8001646:	647b      	str	r3, [r7, #68]	; 0x44
 8001648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800164a:	2b0f      	cmp	r3, #15
 800164c:	dde3      	ble.n	8001616 <Temp_taskF+0x26>
		}
		CSdis
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001654:	483b      	ldr	r0, [pc, #236]	; (8001744 <Temp_taskF+0x154>)
 8001656:	f002 f89c 	bl	8003792 <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 800165a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800165e:	2b00      	cmp	r3, #0
 8001660:	d146      	bne.n	80016f0 <Temp_taskF+0x100>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8001662:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001674:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800168c:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 800168e:	b29b      	uxth	r3, r3
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <Temp_taskF+0x15c>)
 8001696:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8001698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800169c:	b29b      	uxth	r3, r3
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <Temp_taskF+0x15c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b29a      	uxth	r2, r3
					+ tempdata[12];
 80016e2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <Temp_taskF+0x15c>)
 80016ee:	801a      	strh	r2, [r3, #0]
			//	temp16 += tempdata[n] * (2048 / (1 << (n - 1)));
			//}
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <Temp_taskF+0x15c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <Temp_taskF+0x15c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 800170c:	f240 6351 	movw	r3, #1617	; 0x651
 8001710:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001722:	f107 010c 	add.w	r1, r7, #12
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <Temp_taskF+0x160>)
 8001728:	f001 f8ce 	bl	80028c8 <HAL_CAN_AddTxMessage>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <Temp_taskF+0x146>
				!= HAL_OK) {
			Error_Handler();
 8001732:	f000 f853 	bl	80017dc <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8001736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800173a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800173c:	4618      	mov	r0, r3
 800173e:	f004 f869 	bl	8005814 <vTaskDelayUntil>
	while (1) {
 8001742:	e75f      	b.n	8001604 <Temp_taskF+0x14>
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	20002264 	.word	0x20002264
 8001750:	20002204 	.word	0x20002204

08001754 <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
		const TickType_t xFrequency = 100;  //Ticks to wait since routine starts
 800175c:	2364      	movs	r3, #100	; 0x64
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
		xLastWakeTime = xTaskGetTickCount();
 8001760:	f004 fa1a 	bl	8005b98 <xTaskGetTickCount>
 8001764:	4603      	mov	r3, r0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
		while (1) {

			uint32_t TxMailbox;
			CAN_TxHeaderTypeDef odHeader;

			odHeader.DLC = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
			odHeader.StdId = 0x666;
 800176c:	f240 6366 	movw	r3, #1638	; 0x666
 8001770:	60fb      	str	r3, [r7, #12]
			odHeader.IDE = CAN_ID_STD;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
			odHeader.RTR = CAN_RTR_DATA;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]

			if (HAL_CAN_AddTxMessage(&hcan, &odHeader, odbuff, &TxMailbox)
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	f107 010c 	add.w	r1, r7, #12
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <OD_taskF+0x58>)
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <OD_taskF+0x5c>)
 8001786:	f001 f89f 	bl	80028c8 <HAL_CAN_AddTxMessage>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <OD_taskF+0x40>
					!= HAL_OK) {
				Error_Handler();
 8001790:	f000 f824 	bl	80017dc <Error_Handler>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <OD_taskF+0x60>)
 8001798:	f002 f813 	bl	80037c2 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&xLastWakeTime, xFrequency); /*10Hz frequency*/
 800179c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f836 	bl	8005814 <vTaskDelayUntil>
		while (1) {
 80017a8:	e7de      	b.n	8001768 <OD_taskF+0x14>
 80017aa:	bf00      	nop
 80017ac:	200022ac 	.word	0x200022ac
 80017b0:	20002204 	.word	0x20002204
 80017b4:	40010c00 	.word	0x40010c00

080017b8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80017ca:	f000 fa7b 	bl	8001cc4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40012c00 	.word	0x40012c00

080017dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_MspInit+0x6c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_MspInit+0x6c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_MspInit+0x6c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_MspInit+0x6c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_MspInit+0x6c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_MspInit+0x6c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f001 fc2a 	bl	800307e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_MspInit+0x70>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_MspInit+0x70>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001846:	f004 fd7f 	bl	8006348 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_I2C_MspInit+0x74>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d124      	bne.n	80018c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 8001882:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001886:	61d3      	str	r3, [r2, #28]
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_I2C_MspInit+0x78>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b2:	2312      	movs	r3, #18
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <HAL_I2C_MspInit+0x7c>)
 80018c2:	f001 fdf5 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005800 	.word	0x40005800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010c00 	.word	0x40010c00

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d15f      	bne.n	80019bc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001944:	2303      	movs	r3, #3
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2303      	movs	r3, #3
 800194a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4619      	mov	r1, r3
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <HAL_ADC_MspInit+0xf0>)
 8001954:	f001 fdac 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001958:	2303      	movs	r3, #3
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195c:	2303      	movs	r3, #3
 800195e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4619      	mov	r1, r3
 8001966:	481a      	ldr	r0, [pc, #104]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001968:	f001 fda2 	bl	80034b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 800196e:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_ADC_MspInit+0xfc>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 8001986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 800198e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001992:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 8001996:	2220      	movs	r2, #32
 8001998:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 800199c:	2200      	movs	r2, #0
 800199e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 80019a2:	f001 fb97 	bl	80030d4 <HAL_DMA_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80019ac:	f7ff ff16 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 80019b4:	621a      	str	r2, [r3, #32]
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40012400 	.word	0x40012400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	20002268 	.word	0x20002268
 80019d8:	40020008 	.word	0x40020008

080019dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a35      	ldr	r2, [pc, #212]	; (8001acc <HAL_CAN_MspInit+0xf0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d163      	bne.n	8001ac4 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	61d3      	str	r3, [r2, #28]
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_CAN_MspInit+0xf4>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <HAL_CAN_MspInit+0xf8>)
 8001a42:	f001 fd35 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <HAL_CAN_MspInit+0xf8>)
 8001a5c:	f001 fd28 	bl	80034b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_CAN_MspInit+0xfc>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_CAN_MspInit+0xfc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2105      	movs	r1, #5
 8001a88:	2013      	movs	r0, #19
 8001a8a:	f001 faf8 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001a8e:	2013      	movs	r0, #19
 8001a90:	f001 fb11 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2105      	movs	r1, #5
 8001a98:	2014      	movs	r0, #20
 8001a9a:	f001 faf0 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001a9e:	2014      	movs	r0, #20
 8001aa0:	f001 fb09 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	2015      	movs	r0, #21
 8001aaa:	f001 fae8 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aae:	2015      	movs	r0, #21
 8001ab0:	f001 fb01 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2105      	movs	r1, #5
 8001ab8:	2016      	movs	r0, #22
 8001aba:	f001 fae0 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001abe:	2016      	movs	r0, #22
 8001ac0:	f001 faf9 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40006400 	.word	0x40006400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40010000 	.word	0x40010000

08001adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2019      	movs	r0, #25
 8001af2:	f001 fac4 	bl	800307e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001af6:	2019      	movs	r0, #25
 8001af8:	f001 fadd 	bl	80030b6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_InitTick+0x9c>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_InitTick+0x9c>)
 8001b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_InitTick+0x9c>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b14:	f107 0210 	add.w	r2, r7, #16
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 ff9e 	bl	8004a60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b24:	f002 ff88 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8001b28:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_InitTick+0xa0>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	3b01      	subs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_InitTick+0xa8>)
 8001b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b5a:	f003 f885 	bl	8004c68 <HAL_TIM_Base_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b64:	4806      	ldr	r0, [pc, #24]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b66:	f003 f8b3 	bl	8004cd0 <HAL_TIM_Base_Start_IT>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3730      	adds	r7, #48	; 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	200022b8 	.word	0x200022b8
 8001b84:	40012c00 	.word	0x40012c00

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <MemManage_Handler+0x4>

08001ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <BusFault_Handler+0x4>

08001ba6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <UsageFault_Handler+0x4>

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8001bbe:	f001 fb43 	bl	8003248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20002268 	.word	0x20002268

08001bcc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001bd2:	f000 ff78 	bl	8002ac6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20002204 	.word	0x20002204

08001be0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001be6:	f000 ff6e 	bl	8002ac6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20002204 	.word	0x20002204

08001bf4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <CAN1_RX1_IRQHandler+0x10>)
 8001bfa:	f000 ff64 	bl	8002ac6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20002204 	.word	0x20002204

08001c08 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <CAN1_SCE_IRQHandler+0x10>)
 8001c0e:	f000 ff5a 	bl	8002ac6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20002204 	.word	0x20002204

08001c1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_UP_IRQHandler+0x10>)
 8001c22:	f003 f878 	bl	8004d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200022b8 	.word	0x200022b8

08001c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <SystemInit+0x5c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <SystemInit+0x5c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <SystemInit+0x5c>)
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4911      	ldr	r1, [pc, #68]	; (8001c8c <SystemInit+0x5c>)
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <SystemInit+0x60>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <SystemInit+0x5c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <SystemInit+0x5c>)
 8001c52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <SystemInit+0x5c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SystemInit+0x5c>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <SystemInit+0x5c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <SystemInit+0x5c>)
 8001c6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SystemInit+0x5c>)
 8001c76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SystemInit+0x64>)
 8001c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c82:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	f8ff0000 	.word	0xf8ff0000
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x28>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x28>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f001 f9dd 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff14 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fd98 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_IncTick+0x1c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200022f8 	.word	0x200022f8

08001ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_GetTick+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	200022f8 	.word	0x200022f8

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_Delay+0x40>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffe0 	bl	8001ce8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000008 	.word	0x20000008

08001d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0be      	b.n	8001ee0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fdac 	bl	80018dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 faf7 	bl	8002378 <ADC_ConversionStop_Disable>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 8099 	bne.w	8001ece <HAL_ADC_Init+0x18e>
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8095 	bne.w	8001ece <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dac:	f023 0302 	bic.w	r3, r3, #2
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7b1b      	ldrb	r3, [r3, #12]
 8001dc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d003      	beq.n	8001de2 <HAL_ADC_Init+0xa2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_ADC_Init+0xa8>
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de6:	e000      	b.n	8001dea <HAL_ADC_Init+0xaa>
 8001de8:	2300      	movs	r3, #0
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7d1b      	ldrb	r3, [r3, #20]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d119      	bne.n	8001e2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7b1b      	ldrb	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	035a      	lsls	r2, r3, #13
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e00b      	b.n	8001e2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f043 0220 	orr.w	r2, r3, #32
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_ADC_Init+0x1a8>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5c:	d003      	beq.n	8001e66 <HAL_ADC_Init+0x126>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_ADC_Init+0x1ac>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eaa:	e018      	b.n	8001ede <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f023 0312 	bic.w	r3, r3, #18
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ecc:	e007      	b.n	8001ede <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	ffe1f7fd 	.word	0xffe1f7fd
 8001eec:	ff1f0efe 	.word	0xff1f0efe

08001ef0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_ADC_Start_DMA+0x1a8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_ADC_Start_DMA+0x24>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a63      	ldr	r2, [pc, #396]	; (800209c <HAL_ADC_Start_DMA+0x1ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_Start_DMA+0x32>
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <HAL_ADC_Start_DMA+0x1a8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 80b3 	bne.w	8002088 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_Start_DMA+0x40>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e0ae      	b.n	800208e <HAL_ADC_Start_DMA+0x19e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f9cb 	bl	80022d4 <ADC_Enable>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 809a 	bne.w	800207e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_ADC_Start_DMA+0x1ac>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_Start_DMA+0x84>
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_ADC_Start_DMA+0x1a8>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d115      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d026      	beq.n	8001fdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9e:	e01d      	b.n	8001fdc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a39      	ldr	r2, [pc, #228]	; (8002098 <HAL_ADC_Start_DMA+0x1a8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_ADC_Start_DMA+0xd0>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a38      	ldr	r2, [pc, #224]	; (800209c <HAL_ADC_Start_DMA+0x1ac>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <HAL_ADC_Start_DMA+0xec>
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_ADC_Start_DMA+0x1a8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f023 0206 	bic.w	r2, r3, #6
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <HAL_ADC_Start_DMA+0x1b0>)
 800200a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_ADC_Start_DMA+0x1b4>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_ADC_Start_DMA+0x1b8>)
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0202 	mvn.w	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002034:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a18      	ldr	r0, [r3, #32]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	334c      	adds	r3, #76	; 0x4c
 8002040:	4619      	mov	r1, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f001 f89f 	bl	8003188 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002054:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002058:	d108      	bne.n	800206c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002068:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800206a:	e00f      	b.n	800208c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800207a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800207c:	e006      	b.n	800208c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002086:	e001      	b.n	800208c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40012400 	.word	0x40012400
 800209c:	40012800 	.word	0x40012800
 80020a0:	080023ed 	.word	0x080023ed
 80020a4:	08002469 	.word	0x08002469
 80020a8:	08002485 	.word	0x08002485

080020ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x20>
 8002100:	2302      	movs	r3, #2
 8002102:	e0dc      	b.n	80022be <HAL_ADC_ConfigChannel+0x1da>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d81c      	bhi.n	800214e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b05      	subs	r3, #5
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b05      	subs	r3, #5
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
 800214c:	e03c      	b.n	80021c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d81c      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b23      	subs	r3, #35	; 0x23
 8002168:	221f      	movs	r2, #31
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	4019      	ands	r1, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b23      	subs	r3, #35	; 0x23
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
 800218e:	e01b      	b.n	80021c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b41      	subs	r3, #65	; 0x41
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b41      	subs	r3, #65	; 0x41
 80021bc:	fa00 f203 	lsl.w	r2, r0, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d91c      	bls.n	800220a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	3b1e      	subs	r3, #30
 80021e2:	2207      	movs	r2, #7
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4019      	ands	r1, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6898      	ldr	r0, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	3b1e      	subs	r3, #30
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	e019      	b.n	800223e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6919      	ldr	r1, [r3, #16]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	4019      	ands	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6898      	ldr	r0, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d003      	beq.n	800224e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800224a:	2b11      	cmp	r3, #17
 800224c:	d132      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d125      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d126      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002274:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d11a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9a      	lsrs	r2, r3, #18
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x1b2>
 80022a2:	e007      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012400 	.word	0x40012400
 80022cc:	20000000 	.word	0x20000000
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d039      	beq.n	8002366 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <ADC_Enable+0x9c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <ADC_Enable+0xa0>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	0c9b      	lsrs	r3, r3, #18
 800230e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002310:	e002      	b.n	8002318 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3b01      	subs	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f9      	bne.n	8002312 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800231e:	f7ff fce3 	bl	8001ce8 <HAL_GetTick>
 8002322:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002324:	e018      	b.n	8002358 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002326:	f7ff fcdf 	bl	8001ce8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d911      	bls.n	8002358 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d1df      	bne.n	8002326 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000
 8002374:	431bde83 	.word	0x431bde83

08002378 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d127      	bne.n	80023e2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023a2:	f7ff fca1 	bl	8001ce8 <HAL_GetTick>
 80023a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a8:	e014      	b.n	80023d4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023aa:	f7ff fc9d 	bl	8001ce8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d90d      	bls.n	80023d4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e007      	b.n	80023e4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d0e3      	beq.n	80023aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002402:	2b00      	cmp	r3, #0
 8002404:	d127      	bne.n	8002456 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800241c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002420:	d115      	bne.n	800244e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002426:	2b00      	cmp	r3, #0
 8002428:	d111      	bne.n	800244e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff fe2c 	bl	80020ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002454:	e004      	b.n	8002460 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff fe21 	bl	80020be <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe10 	bl	80020d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0ed      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fa80 	bl	80019dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0202 	bic.w	r2, r2, #2
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff fbfc 	bl	8001ce8 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f2:	e012      	b.n	800251a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f4:	f7ff fbf8 	bl	8001ce8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d90b      	bls.n	800251a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0c5      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002538:	f7ff fbd6 	bl	8001ce8 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800253e:	e012      	b.n	8002566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002540:	f7ff fbd2 	bl	8001ce8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b0a      	cmp	r3, #10
 800254c:	d90b      	bls.n	8002566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e09f      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0e5      	beq.n	8002540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7e9b      	ldrb	r3, [r3, #26]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0220 	bic.w	r2, r2, #32
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7edb      	ldrb	r3, [r3, #27]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0210 	bic.w	r2, r2, #16
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e007      	b.n	800261c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0210 	orr.w	r2, r2, #16
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e007      	b.n	8002646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7f5b      	ldrb	r3, [r3, #29]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d003      	beq.n	80026d4 <HAL_CAN_ConfigFilter+0x26>
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	f040 80aa 	bne.w	8002828 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2201      	movs	r2, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d123      	bne.n	8002756 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3248      	adds	r2, #72	; 0x48
 8002736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d122      	bne.n	80027a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	431a      	orrs	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800277e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3248      	adds	r2, #72	; 0x48
 8002784:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002798:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800279a:	6979      	ldr	r1, [r7, #20]
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027be:	e007      	b.n	80027d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027ea:	e007      	b.n	80027fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e006      	b.n	8002836 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d12e      	bne.n	80028b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800286c:	f7ff fa3c 	bl	8001ce8 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002872:	e012      	b.n	800289a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002874:	f7ff fa38 	bl	8001ce8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b0a      	cmp	r3, #10
 8002880:	d90b      	bls.n	800289a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2205      	movs	r2, #5
 8002892:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e012      	b.n	80028c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e5      	bne.n	8002874 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e006      	b.n	80028c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d003      	beq.n	80028f4 <HAL_CAN_AddTxMessage+0x2c>
 80028ec:	7ffb      	ldrb	r3, [r7, #31]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	f040 80b8 	bne.w	8002a64 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80a0 	beq.w	8002a54 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	0e1b      	lsrs	r3, r3, #24
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d907      	bls.n	8002934 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e09e      	b.n	8002a72 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002934:	2201      	movs	r2, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	409a      	lsls	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	431a      	orrs	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3318      	adds	r3, #24
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e00f      	b.n	8002982 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002976:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3318      	adds	r3, #24
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	440b      	add	r3, r1
 8002980:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3318      	adds	r3, #24
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	3304      	adds	r3, #4
 8002994:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	7d1b      	ldrb	r3, [r3, #20]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d111      	bne.n	80029c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3318      	adds	r3, #24
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6811      	ldr	r1, [r2, #0]
 80029b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3318      	adds	r3, #24
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	440b      	add	r3, r1
 80029be:	3304      	adds	r3, #4
 80029c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3307      	adds	r3, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3306      	adds	r3, #6
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3305      	adds	r3, #5
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	4313      	orrs	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	3204      	adds	r2, #4
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	4610      	mov	r0, r2
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	6811      	ldr	r1, [r2, #0]
 80029ea:	ea43 0200 	orr.w	r2, r3, r0
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3303      	adds	r3, #3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	061a      	lsls	r2, r3, #24
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3302      	adds	r3, #2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	6811      	ldr	r1, [r2, #0]
 8002a20:	ea43 0200 	orr.w	r2, r3, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3318      	adds	r3, #24
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6811      	ldr	r1, [r2, #0]
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3318      	adds	r3, #24
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	440b      	add	r3, r1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e00e      	b.n	8002a72 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e006      	b.n	8002a72 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <HAL_CAN_ActivateNotification+0x1e>
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d109      	bne.n	8002aae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6959      	ldr	r1, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e006      	b.n	8002abc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08a      	sub	sp, #40	; 0x28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d07c      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d023      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f97d 	bl	8002e28 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b2e:	e016      	b.n	8002b5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	e00c      	b.n	8002b5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	e002      	b.n	8002b5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f980 	bl	8002e5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d024      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f95c 	bl	8002e3a <HAL_CAN_TxMailbox1CompleteCallback>
 8002b82:	e016      	b.n	8002bb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	e00c      	b.n	8002bb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	e002      	b.n	8002bb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f95f 	bl	8002e70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d024      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f93b 	bl	8002e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8002bd6:	e016      	b.n	8002c06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e00c      	b.n	8002c06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	e002      	b.n	8002c06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f93e 	bl	8002e82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2210      	movs	r2, #16
 8002c28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f92d 	bl	8002ea6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f915 	bl	8002e94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f90d 	bl	8002eca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8f5 	bl	8002eb8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8f6 	bl	8002edc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8ee 	bl	8002eee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d075      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03d      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d038      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d017      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x302>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	d804      	bhi.n	8002da6 <HAL_CAN_IRQHandler+0x2e0>
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d009      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x2ee>
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d00c      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002da4:	e024      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002da6:	2b50      	cmp	r3, #80	; 0x50
 8002da8:	d018      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x316>
 8002daa:	2b60      	cmp	r3, #96	; 0x60
 8002dac:	d01b      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x320>
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d00f      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002db2:	e01d      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dbc:	e018      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc6:	e013      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd0:	e00e      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dda:	e009      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002de4:	e004      	b.n	8002df0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dfe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2204      	movs	r2, #4
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f870 	bl	8002f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e20:	bf00      	nop
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <__NVIC_EnableIRQ+0x34>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff4f 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff64 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ffb2 	bl	8003004 <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff81 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff57 	bl	8002f78 <__NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e043      	b.n	8003172 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_DMA_Init+0xa8>)
 80030f2:	4413      	add	r3, r2
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_DMA_Init+0xac>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	009a      	lsls	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <HAL_DMA_Init+0xb0>)
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800311e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003122:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800312c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	bffdfff8 	.word	0xbffdfff8
 8003180:	cccccccd 	.word	0xcccccccd
 8003184:	40020000 	.word	0x40020000

08003188 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_DMA_Start_IT+0x20>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e04a      	b.n	800323e <HAL_DMA_Start_IT+0xb6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d13a      	bne.n	8003230 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f938 	bl	8003454 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 020e 	orr.w	r2, r2, #14
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e00f      	b.n	800321e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0204 	bic.w	r2, r2, #4
 800320c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 020a 	orr.w	r2, r2, #10
 800321c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e005      	b.n	800323c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2204      	movs	r2, #4
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d04f      	beq.n	8003310 <HAL_DMA_IRQHandler+0xc8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a66      	ldr	r2, [pc, #408]	; (8003438 <HAL_DMA_IRQHandler+0x1f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d029      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xae>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a65      	ldr	r2, [pc, #404]	; (800343c <HAL_DMA_IRQHandler+0x1f4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <HAL_DMA_IRQHandler+0x1f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01a      	beq.n	80032ec <HAL_DMA_IRQHandler+0xa4>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a62      	ldr	r2, [pc, #392]	; (8003444 <HAL_DMA_IRQHandler+0x1fc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d012      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x9e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a60      	ldr	r2, [pc, #384]	; (8003448 <HAL_DMA_IRQHandler+0x200>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00a      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x98>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5f      	ldr	r2, [pc, #380]	; (800344c <HAL_DMA_IRQHandler+0x204>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d102      	bne.n	80032da <HAL_DMA_IRQHandler+0x92>
 80032d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032d8:	e00e      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032de:	e00b      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032e4:	e008      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ea:	e005      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	e002      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032f2:	2340      	movs	r3, #64	; 0x40
 80032f4:	e000      	b.n	80032f8 <HAL_DMA_IRQHandler+0xb0>
 80032f6:	2304      	movs	r3, #4
 80032f8:	4a55      	ldr	r2, [pc, #340]	; (8003450 <HAL_DMA_IRQHandler+0x208>)
 80032fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8094 	beq.w	800342e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800330e:	e08e      	b.n	800342e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2202      	movs	r2, #2
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d056      	beq.n	80033ce <HAL_DMA_IRQHandler+0x186>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d051      	beq.n	80033ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 020a 	bic.w	r2, r2, #10
 8003346:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_DMA_IRQHandler+0x1f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d029      	beq.n	80033ae <HAL_DMA_IRQHandler+0x166>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_DMA_IRQHandler+0x1f4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_IRQHandler+0x162>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_DMA_IRQHandler+0x1f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x15c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_DMA_IRQHandler+0x1fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d012      	beq.n	800339e <HAL_DMA_IRQHandler+0x156>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a32      	ldr	r2, [pc, #200]	; (8003448 <HAL_DMA_IRQHandler+0x200>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x150>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a31      	ldr	r2, [pc, #196]	; (800344c <HAL_DMA_IRQHandler+0x204>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <HAL_DMA_IRQHandler+0x14a>
 800338c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003390:	e00e      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 8003392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003396:	e00b      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 8003398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339c:	e008      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 800339e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a2:	e005      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 80033a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a8:	e002      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 80033aa:	2320      	movs	r3, #32
 80033ac:	e000      	b.n	80033b0 <HAL_DMA_IRQHandler+0x168>
 80033ae:	2302      	movs	r3, #2
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_DMA_IRQHandler+0x208>)
 80033b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d034      	beq.n	800342e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033cc:	e02f      	b.n	800342e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2208      	movs	r2, #8
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_DMA_IRQHandler+0x1e8>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020e 	bic.w	r2, r2, #14
 80033f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f202 	lsl.w	r2, r1, r2
 8003406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
    }
  }
  return;
 800342e:	bf00      	nop
 8003430:	bf00      	nop
}
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40020008 	.word	0x40020008
 800343c:	4002001c 	.word	0x4002001c
 8003440:	40020030 	.word	0x40020030
 8003444:	40020044 	.word	0x40020044
 8003448:	40020058 	.word	0x40020058
 800344c:	4002006c 	.word	0x4002006c
 8003450:	40020000 	.word	0x40020000

08003454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b10      	cmp	r3, #16
 8003480:	d108      	bne.n	8003494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003492:	e007      	b.n	80034a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b08b      	sub	sp, #44	; 0x2c
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c2:	e127      	b.n	8003714 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034c4:	2201      	movs	r2, #1
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	429a      	cmp	r2, r3
 80034de:	f040 8116 	bne.w	800370e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	d034      	beq.n	8003554 <HAL_GPIO_Init+0xa4>
 80034ea:	2b12      	cmp	r3, #18
 80034ec:	d80d      	bhi.n	800350a <HAL_GPIO_Init+0x5a>
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d02b      	beq.n	800354a <HAL_GPIO_Init+0x9a>
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d804      	bhi.n	8003500 <HAL_GPIO_Init+0x50>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d031      	beq.n	800355e <HAL_GPIO_Init+0xae>
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d01c      	beq.n	8003538 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034fe:	e048      	b.n	8003592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003500:	2b03      	cmp	r3, #3
 8003502:	d043      	beq.n	800358c <HAL_GPIO_Init+0xdc>
 8003504:	2b11      	cmp	r3, #17
 8003506:	d01b      	beq.n	8003540 <HAL_GPIO_Init+0x90>
          break;
 8003508:	e043      	b.n	8003592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800350a:	4a89      	ldr	r2, [pc, #548]	; (8003730 <HAL_GPIO_Init+0x280>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d026      	beq.n	800355e <HAL_GPIO_Init+0xae>
 8003510:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_GPIO_Init+0x280>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d806      	bhi.n	8003524 <HAL_GPIO_Init+0x74>
 8003516:	4a87      	ldr	r2, [pc, #540]	; (8003734 <HAL_GPIO_Init+0x284>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d020      	beq.n	800355e <HAL_GPIO_Init+0xae>
 800351c:	4a86      	ldr	r2, [pc, #536]	; (8003738 <HAL_GPIO_Init+0x288>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <HAL_GPIO_Init+0xae>
          break;
 8003522:	e036      	b.n	8003592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003524:	4a85      	ldr	r2, [pc, #532]	; (800373c <HAL_GPIO_Init+0x28c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0xae>
 800352a:	4a85      	ldr	r2, [pc, #532]	; (8003740 <HAL_GPIO_Init+0x290>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d016      	beq.n	800355e <HAL_GPIO_Init+0xae>
 8003530:	4a84      	ldr	r2, [pc, #528]	; (8003744 <HAL_GPIO_Init+0x294>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_GPIO_Init+0xae>
          break;
 8003536:	e02c      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	623b      	str	r3, [r7, #32]
          break;
 800353e:	e028      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	3304      	adds	r3, #4
 8003546:	623b      	str	r3, [r7, #32]
          break;
 8003548:	e023      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	3308      	adds	r3, #8
 8003550:	623b      	str	r3, [r7, #32]
          break;
 8003552:	e01e      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	330c      	adds	r3, #12
 800355a:	623b      	str	r3, [r7, #32]
          break;
 800355c:	e019      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003566:	2304      	movs	r3, #4
 8003568:	623b      	str	r3, [r7, #32]
          break;
 800356a:	e012      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003574:	2308      	movs	r3, #8
 8003576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	611a      	str	r2, [r3, #16]
          break;
 800357e:	e008      	b.n	8003592 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003580:	2308      	movs	r3, #8
 8003582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	615a      	str	r2, [r3, #20]
          break;
 800358a:	e002      	b.n	8003592 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
          break;
 8003590:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2bff      	cmp	r3, #255	; 0xff
 8003596:	d801      	bhi.n	800359c <HAL_GPIO_Init+0xec>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	e001      	b.n	80035a0 <HAL_GPIO_Init+0xf0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2bff      	cmp	r3, #255	; 0xff
 80035a6:	d802      	bhi.n	80035ae <HAL_GPIO_Init+0xfe>
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x104>
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3b08      	subs	r3, #8
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	210f      	movs	r1, #15
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	6a39      	ldr	r1, [r7, #32]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8096 	beq.w	800370e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035e2:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_GPIO_Init+0x298>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_GPIO_Init+0x298>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6193      	str	r3, [r2, #24]
 80035ee:	4b56      	ldr	r3, [pc, #344]	; (8003748 <HAL_GPIO_Init+0x298>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035fa:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_GPIO_Init+0x29c>)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_GPIO_Init+0x2a0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0x19e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4a      	ldr	r2, [pc, #296]	; (8003754 <HAL_GPIO_Init+0x2a4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00d      	beq.n	800364a <HAL_GPIO_Init+0x19a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a49      	ldr	r2, [pc, #292]	; (8003758 <HAL_GPIO_Init+0x2a8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x196>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a48      	ldr	r2, [pc, #288]	; (800375c <HAL_GPIO_Init+0x2ac>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_GPIO_Init+0x192>
 800363e:	2303      	movs	r3, #3
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x1a0>
 8003642:	2304      	movs	r3, #4
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x1a0>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x1a0>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x1a0>
 800364e:	2300      	movs	r3, #0
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003660:	493a      	ldr	r1, [pc, #232]	; (800374c <HAL_GPIO_Init+0x29c>)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4938      	ldr	r1, [pc, #224]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	43db      	mvns	r3, r3
 8003690:	4933      	ldr	r1, [pc, #204]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 8003692:	4013      	ands	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	492e      	ldr	r1, [pc, #184]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e006      	b.n	80036be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	4929      	ldr	r1, [pc, #164]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4924      	ldr	r1, [pc, #144]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	43db      	mvns	r3, r3
 80036e0:	491f      	ldr	r1, [pc, #124]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	491a      	ldr	r1, [pc, #104]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
 80036fe:	e006      	b.n	800370e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	43db      	mvns	r3, r3
 8003708:	4915      	ldr	r1, [pc, #84]	; (8003760 <HAL_GPIO_Init+0x2b0>)
 800370a:	4013      	ands	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f aed0 	bne.w	80034c4 <HAL_GPIO_Init+0x14>
  }
}
 8003724:	bf00      	nop
 8003726:	372c      	adds	r7, #44	; 0x2c
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	10210000 	.word	0x10210000
 8003734:	10110000 	.word	0x10110000
 8003738:	10120000 	.word	0x10120000
 800373c:	10310000 	.word	0x10310000
 8003740:	10320000 	.word	0x10320000
 8003744:	10220000 	.word	0x10220000
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	40010800 	.word	0x40010800
 8003754:	40010c00 	.word	0x40010c00
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e001      	b.n	8003786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]
 800379e:	4613      	mov	r3, r2
 80037a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a2:	787b      	ldrb	r3, [r7, #1]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a8:	887a      	ldrh	r2, [r7, #2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037ae:	e003      	b.n	80037b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	041a      	lsls	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	611a      	str	r2, [r3, #16]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80037e0:	e002      	b.n	80037e8 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e10f      	b.n	8003a26 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe f81e 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003838:	f001 f8ea 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a7b      	ldr	r2, [pc, #492]	; (8003a30 <HAL_I2C_Init+0x23c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d807      	bhi.n	8003858 <HAL_I2C_Init+0x64>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a7a      	ldr	r2, [pc, #488]	; (8003a34 <HAL_I2C_Init+0x240>)
 800384c:	4293      	cmp	r3, r2
 800384e:	bf94      	ite	ls
 8003850:	2301      	movls	r3, #1
 8003852:	2300      	movhi	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e006      	b.n	8003866 <HAL_I2C_Init+0x72>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a77      	ldr	r2, [pc, #476]	; (8003a38 <HAL_I2C_Init+0x244>)
 800385c:	4293      	cmp	r3, r2
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0db      	b.n	8003a26 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a72      	ldr	r2, [pc, #456]	; (8003a3c <HAL_I2C_Init+0x248>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_I2C_Init+0x23c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d802      	bhi.n	80038a8 <HAL_I2C_Init+0xb4>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3301      	adds	r3, #1
 80038a6:	e009      	b.n	80038bc <HAL_I2C_Init+0xc8>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_I2C_Init+0x24c>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	3301      	adds	r3, #1
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4956      	ldr	r1, [pc, #344]	; (8003a30 <HAL_I2C_Init+0x23c>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d80d      	bhi.n	80038f8 <HAL_I2C_Init+0x104>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e59      	subs	r1, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	bf38      	it	cc
 80038f4:	2304      	movcc	r3, #4
 80038f6:	e04f      	b.n	8003998 <HAL_I2C_Init+0x1a4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_I2C_Init+0x130>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e012      	b.n	800394a <HAL_I2C_Init+0x156>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x15e>
 800394e:	2301      	movs	r3, #1
 8003950:	e022      	b.n	8003998 <HAL_I2C_Init+0x1a4>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_I2C_Init+0x184>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e58      	subs	r0, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	fbb0 f3f3 	udiv	r3, r0, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Init+0x1a4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	4313      	orrs	r3, r2
 800399e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6911      	ldr	r1, [r2, #16]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	000186a0 	.word	0x000186a0
 8003a34:	001e847f 	.word	0x001e847f
 8003a38:	003d08ff 	.word	0x003d08ff
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
 8003a54:	4613      	mov	r3, r2
 8003a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7fe f946 	bl	8001ce8 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	f040 8213 	bne.w	8003e92 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2319      	movs	r3, #25
 8003a72:	2201      	movs	r2, #1
 8003a74:	497e      	ldr	r1, [pc, #504]	; (8003c70 <HAL_I2C_Master_Receive+0x22c>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fac8 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	e206      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2C_Master_Receive+0x50>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e1ff      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d007      	beq.n	8003aba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2222      	movs	r2, #34	; 0x22
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	893a      	ldrh	r2, [r7, #8]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a5e      	ldr	r2, [pc, #376]	; (8003c74 <HAL_I2C_Master_Receive+0x230>)
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003afc:	8979      	ldrh	r1, [r7, #10]
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f9cc 	bl	8003ea0 <I2C_MasterRequestRead>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1c0      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e194      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d11d      	bne.n	8003b86 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b5a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b82:	b662      	cpsie	i
 8003b84:	e172      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d11d      	bne.n	8003bca <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc6:	b662      	cpsie	i
 8003bc8:	e150      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf0:	e13c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	f200 80f5 	bhi.w	8003de6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d123      	bne.n	8003c4c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fad5 	bl	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e13d      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c4a:	e10f      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d150      	bne.n	8003cf6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4906      	ldr	r1, [pc, #24]	; (8003c78 <HAL_I2C_Master_Receive+0x234>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f9d4 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e112      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
 8003c6e:	bf00      	nop
 8003c70:	00100002 	.word	0x00100002
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf4:	e0ba      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4967      	ldr	r1, [pc, #412]	; (8003e9c <HAL_I2C_Master_Receive+0x458>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f983 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0c1      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	494f      	ldr	r1, [pc, #316]	; (8003e9c <HAL_I2C_Master_Receive+0x458>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f954 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e092      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003db0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de4:	e042      	b.n	8003e6c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f9e4 	bl	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e04c      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d118      	bne.n	8003e6c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f aebe 	bne.w	8003bf2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	; 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	00010004 	.word	0x00010004

08003ea0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d006      	beq.n	8003eda <I2C_MasterRequestRead+0x3a>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <I2C_MasterRequestRead+0x3a>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00b      	b.n	8003f04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b11      	cmp	r3, #17
 8003ef2:	d107      	bne.n	8003f04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f87b 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e06d      	b.n	8003ffc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f28:	d108      	bne.n	8003f3c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f2a:	897b      	ldrh	r3, [r7, #10]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
 8003f3a:	e053      	b.n	8003fe4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f3c:	897b      	ldrh	r3, [r7, #10]
 8003f3e:	11db      	asrs	r3, r3, #7
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f003 0306 	and.w	r3, r3, #6
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f063 030f 	orn	r3, r3, #15
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	492a      	ldr	r1, [pc, #168]	; (8004004 <I2C_MasterRequestRead+0x164>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f8ad 	bl	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e048      	b.n	8003ffc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4923      	ldr	r1, [pc, #140]	; (8004008 <I2C_MasterRequestRead+0x168>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f89d 	bl	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e038      	b.n	8003ffc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f825 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e017      	b.n	8003ffc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fcc:	897b      	ldrh	r3, [r7, #10]
 8003fce:	11db      	asrs	r3, r3, #7
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 0306 	and.w	r3, r3, #6
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f063 030e 	orn	r3, r3, #14
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4907      	ldr	r1, [pc, #28]	; (8004008 <I2C_MasterRequestRead+0x168>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f865 	bl	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00010008 	.word	0x00010008
 8004008:	00010002 	.word	0x00010002

0800400c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800401c:	e025      	b.n	800406a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d021      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fd fe5f 	bl	8001ce8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d116      	bne.n	800406a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e023      	b.n	80040b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10d      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	e00c      	b.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d0b6      	beq.n	800401e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c8:	e051      	b.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d8:	d123      	bne.n	8004122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e046      	b.n	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d021      	beq.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fd fddd 	bl	8001ce8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d116      	bne.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e020      	b.n	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10c      	bne.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e00b      	b.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	43da      	mvns	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d18d      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c4:	e042      	b.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d119      	bne.n	8004208 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0210 	mvn.w	r2, #16
 80041dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e029      	b.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004208:	f7fd fd6e 	bl	8001ce8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d116      	bne.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d1b5      	bne.n	80041c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e26c      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8087 	beq.w	8004392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004284:	4b92      	ldr	r3, [pc, #584]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00c      	beq.n	80042aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004290:	4b8f      	ldr	r3, [pc, #572]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
 800429c:	4b8c      	ldr	r3, [pc, #560]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06c      	beq.n	8004390 <HAL_RCC_OscConfig+0x12c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d168      	bne.n	8004390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e246      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x76>
 80042cc:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7f      	ldr	r2, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e02e      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b7b      	ldr	r3, [pc, #492]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b78      	ldr	r3, [pc, #480]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a77      	ldr	r2, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xbc>
 8004306:	4b72      	ldr	r3, [pc, #456]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a71      	ldr	r2, [pc, #452]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 8004320:	4b6b      	ldr	r3, [pc, #428]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6a      	ldr	r2, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a67      	ldr	r2, [pc, #412]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fcd2 	bl	8001ce8 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fd fcce 	bl	8001ce8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1fa      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xe4>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fcbe 	bl	8001ce8 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd fcba 	bl	8001ce8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1e6      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x10c>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439e:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043aa:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1ba      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4939      	ldr	r1, [pc, #228]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd fc73 	bl	8001ce8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fd fc6f 	bl	8001ce8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e19b      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4927      	ldr	r1, [pc, #156]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd fc52 	bl	8001ce8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd fc4e 	bl	8001ce8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e17a      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03a      	beq.n	80044e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fd fc32 	bl	8001ce8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd fc2e 	bl	8001ce8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e15a      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 fb0a 	bl	8004ac0 <RCC_Delay>
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fd fc18 	bl	8001ce8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ba:	e00f      	b.n	80044dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd fc14 	bl	8001ce8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d908      	bls.n	80044dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e140      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	42420000 	.word	0x42420000
 80044d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e9      	bne.n	80044bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a6 	beq.w	8004642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b97      	ldr	r3, [pc, #604]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a93      	ldr	r2, [pc, #588]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
 8004512:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b8e      	ldr	r3, [pc, #568]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a8a      	ldr	r2, [pc, #552]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fd fbd5 	bl	8001ce8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fd fbd1 	bl	8001ce8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	; 0x64
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0fd      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b81      	ldr	r3, [pc, #516]	; (800475c <HAL_RCC_OscConfig+0x4f8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x312>
 8004568:	4b7b      	ldr	r3, [pc, #492]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a7a      	ldr	r2, [pc, #488]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e02d      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x334>
 800457e:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a75      	ldr	r2, [pc, #468]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a72      	ldr	r2, [pc, #456]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x356>
 80045a0:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a6c      	ldr	r2, [pc, #432]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a69      	ldr	r2, [pc, #420]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a66      	ldr	r2, [pc, #408]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a63      	ldr	r2, [pc, #396]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fd fb85 	bl	8001ce8 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fd fb81 	bl	8001ce8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0ab      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b57      	ldr	r3, [pc, #348]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x37e>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fd fb6f 	bl	8001ce8 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fd fb6b 	bl	8001ce8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e095      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b48      	ldr	r3, [pc, #288]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4a47      	ldr	r2, [pc, #284]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8081 	beq.w	800474e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464c:	4b42      	ldr	r3, [pc, #264]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d061      	beq.n	800471c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d146      	bne.n	80046ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_OscConfig+0x4fc>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fd fb3f 	bl	8001ce8 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7fd fb3b 	bl	8001ce8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e067      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d108      	bne.n	80046a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004696:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	492d      	ldr	r1, [pc, #180]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a19      	ldr	r1, [r3, #32]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	430b      	orrs	r3, r1
 80046ba:	4927      	ldr	r1, [pc, #156]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_OscConfig+0x4fc>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fd fb0f 	bl	8001ce8 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fd fb0b 	bl	8001ce8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e037      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e0:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x46a>
 80046ec:	e02f      	b.n	800474e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b1c      	ldr	r3, [pc, #112]	; (8004760 <HAL_RCC_OscConfig+0x4fc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd faf8 	bl	8001ce8 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fd faf4 	bl	8001ce8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e020      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x498>
 800471a:	e018      	b.n	800474e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e013      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x4f4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	429a      	cmp	r2, r3
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	42420060 	.word	0x42420060

08004764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0d0      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d910      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 0207 	bic.w	r2, r3, #7
 800478e:	4965      	ldr	r1, [pc, #404]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d040      	beq.n	8004884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d115      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e073      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004832:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06b      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b39      	ldr	r3, [pc, #228]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4936      	ldr	r1, [pc, #216]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004854:	f7fd fa48 	bl	8001ce8 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fd fa44 	bl	8001ce8 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e053      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	4b2d      	ldr	r3, [pc, #180]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 020c 	and.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d1eb      	bne.n	800485c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d210      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 0207 	bic.w	r2, r3, #7
 800489a:	4922      	ldr	r1, [pc, #136]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4601      	mov	r1, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	fa21 f303 	lsr.w	r3, r1, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1cc>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1d0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd f8e2 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40022000 	.word	0x40022000
 8004928:	40021000 	.word	0x40021000
 800492c:	080080b0 	.word	0x080080b0
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b490      	push	{r4, r7}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004940:	1d3c      	adds	r4, r7, #4
 8004942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b04      	cmp	r3, #4
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 8004972:	2b08      	cmp	r3, #8
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x46>
 8004976:	e02d      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800497a:	623b      	str	r3, [r7, #32]
      break;
 800497c:	e02d      	b.n	80049da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800498a:	4413      	add	r3, r2
 800498c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004990:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	0c5b      	lsrs	r3, r3, #17
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049aa:	4413      	add	r3, r2
 80049ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049b6:	fb02 f203 	mul.w	r2, r2, r3
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e004      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	623b      	str	r3, [r7, #32]
      break;
 80049d2:	e002      	b.n	80049da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d6:	623b      	str	r3, [r7, #32]
      break;
 80049d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049da:	6a3b      	ldr	r3, [r7, #32]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3728      	adds	r7, #40	; 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc90      	pop	{r4, r7}
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	08008024 	.word	0x08008024
 80049ec:	08008034 	.word	0x08008034
 80049f0:	40021000 	.word	0x40021000
 80049f4:	007a1200 	.word	0x007a1200
 80049f8:	003d0900 	.word	0x003d0900

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000000 	.word	0x20000000

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a14:	f7ff fff2 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4a03      	ldr	r2, [pc, #12]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	080080c0 	.word	0x080080c0

08004a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a3c:	f7ff ffde 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a40:	4601      	mov	r1, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0adb      	lsrs	r3, r3, #11
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	080080c0 	.word	0x080080c0

08004a60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_RCC_GetClockConfig+0x58>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0203 	and.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_RCC_GetClockConfig+0x58>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetClockConfig+0x58>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCC_GetClockConfig+0x58>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCC_GetClockConfig+0x5c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0207 	and.w	r2, r3, #7
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40022000 	.word	0x40022000

08004ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <RCC_Delay+0x34>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <RCC_Delay+0x38>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0a5b      	lsrs	r3, r3, #9
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004adc:	bf00      	nop
  }
  while (Delay --);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1e5a      	subs	r2, r3, #1
 8004ae2:	60fa      	str	r2, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f9      	bne.n	8004adc <RCC_Delay+0x1c>
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000000 	.word	0x20000000
 8004af8:	10624dd3 	.word	0x10624dd3

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d07d      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1c:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	4b4c      	ldr	r3, [pc, #304]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4a4b      	ldr	r2, [pc, #300]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b32:	61d3      	str	r3, [r2, #28]
 8004b34:	4b49      	ldr	r3, [pc, #292]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d118      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a42      	ldr	r2, [pc, #264]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5c:	f7fd f8c4 	bl	8001ce8 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fd f8c0 	bl	8001ce8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e06d      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d027      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004baa:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bb6:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d014      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fd f88f 	bl	8001ce8 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fd f88b 	bl	8001ce8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e036      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4917      	ldr	r1, [pc, #92]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	490b      	ldr	r1, [pc, #44]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4904      	ldr	r1, [pc, #16]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40007000 	.word	0x40007000
 8004c64:	42420440 	.word	0x42420440

08004c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e01d      	b.n	8004cb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f815 	bl	8004cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 f962 	bl	8004f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d007      	beq.n	8004d0a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d122      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d11b      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0202 	mvn.w	r2, #2
 8004d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8ed 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004d5e:	e005      	b.n	8004d6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8e0 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8ef 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d122      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d11b      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0204 	mvn.w	r2, #4
 8004d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8c3 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004db2:	e005      	b.n	8004dc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8b6 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8c5 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d122      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d11b      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0208 	mvn.w	r2, #8
 8004dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2204      	movs	r2, #4
 8004df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f899 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004e06:	e005      	b.n	8004e14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f88c 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f89b 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d122      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d11b      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0210 	mvn.w	r2, #16
 8004e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2208      	movs	r2, #8
 8004e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f86f 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004e5a:	e005      	b.n	8004e68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f862 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f871 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d10e      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f06f 0201 	mvn.w	r2, #1
 8004e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fc fc8f 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d107      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8c0 	bl	8005046 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f835 	bl	8004f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0220 	mvn.w	r2, #32
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f88b 	bl	8005034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
	...

08004f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a29      	ldr	r2, [pc, #164]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_Base_SetConfig+0xbc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a25      	ldr	r2, [pc, #148]	; (8005030 <TIM_Base_SetConfig+0xc0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d007      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	; (800502c <TIM_Base_SetConfig+0xbc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	; (8005030 <TIM_Base_SetConfig+0xc0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800

08005034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005058:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800505a:	e003      	b.n	8005064 <LoopCopyDataInit>

0800505c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800505e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005060:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005062:	3104      	adds	r1, #4

08005064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005064:	480a      	ldr	r0, [pc, #40]	; (8005090 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005068:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800506a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800506c:	d3f6      	bcc.n	800505c <CopyDataInit>
  ldr r2, =_sbss
 800506e:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005070:	e002      	b.n	8005078 <LoopFillZerobss>

08005072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005072:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005074:	f842 3b04 	str.w	r3, [r2], #4

08005078 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800507a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800507c:	d3f9      	bcc.n	8005072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800507e:	f7fc fdd7 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005082:	f002 ff59 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005086:	f7fb fe0d 	bl	8000ca4 <main>
  bx lr
 800508a:	4770      	bx	lr
  ldr r3, =_sidata
 800508c:	080080dc 	.word	0x080080dc
  ldr r0, =_sdata
 8005090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005094:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8005098:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800509c:	200023a4 	.word	0x200023a4

080050a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050a0:	e7fe      	b.n	80050a0 <ADC1_2_IRQHandler>

080050a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f103 0208 	add.w	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 0208 	add.w	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e00c      	b.n	8005178 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3308      	adds	r3, #8
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e002      	b.n	800516c <vListInsert+0x2e>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	d2f6      	bcs.n	8005166 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6892      	ldr	r2, [r2, #8]
 80051c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d103      	bne.n	80051e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	e7fe      	b.n	8005226 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005228:	f001 f8e4 	bl	80063f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	441a      	add	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	3b01      	subs	r3, #1
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	441a      	add	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	22ff      	movs	r2, #255	; 0xff
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	; 0xff
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d114      	bne.n	80052a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01a      	beq.n	80052bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3310      	adds	r3, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fdba 	bl	8005e04 <xTaskRemoveFromEventList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d012      	beq.n	80052bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <xQueueGenericReset+0xcc>)
 8005298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	e009      	b.n	80052bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3310      	adds	r3, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fef8 	bl	80050a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3324      	adds	r3, #36	; 0x24
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fef3 	bl	80050a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052bc:	f001 f8c8 	bl	8006450 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052c0:	2301      	movs	r3, #1
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <xQueueGenericCreate+0x28>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e7fe      	b.n	80052f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e004      	b.n	800530e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3348      	adds	r3, #72	; 0x48
 8005312:	4618      	mov	r0, r3
 8005314:	f001 f932 	bl	800657c <pvPortMalloc>
 8005318:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00f      	beq.n	8005340 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	3348      	adds	r3, #72	; 0x48
 8005324:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800532e:	79fa      	ldrb	r2, [r7, #7]
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f805 	bl	800534a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005340:	69bb      	ldr	r3, [r7, #24]
	}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e002      	b.n	800536c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005378:	2101      	movs	r1, #1
 800537a:	69b8      	ldr	r0, [r7, #24]
 800537c:	f7ff ff40 	bl	8005200 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	2073      	movs	r0, #115	; 0x73
 8005388:	f001 ffba 	bl	8007300 <SEGGER_SYSVIEW_RecordU32x3>
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	; 0x38
 8005398:	af04      	add	r7, sp, #16
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <xTaskCreateStatic+0x28>
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
 80053ba:	e7fe      	b.n	80053ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <xTaskCreateStatic+0x42>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e7fe      	b.n	80053d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d6:	2354      	movs	r3, #84	; 0x54
 80053d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b54      	cmp	r3, #84	; 0x54
 80053de:	d009      	beq.n	80053f4 <xTaskCreateStatic+0x60>
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e7fe      	b.n	80053f2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01e      	beq.n	8005438 <xTaskCreateStatic+0xa4>
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005412:	2300      	movs	r3, #0
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f850 	bl	80054d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005432:	f000 f8cb 	bl	80055cc <prvAddNewTaskToReadyList>
 8005436:	e001      	b.n	800543c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
	}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005446:	b580      	push	{r7, lr}
 8005448:	b08c      	sub	sp, #48	; 0x30
 800544a:	af04      	add	r7, sp, #16
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f001 f88e 	bl	800657c <pvPortMalloc>
 8005460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005468:	2054      	movs	r0, #84	; 0x54
 800546a:	f001 f887 	bl	800657c <pvPortMalloc>
 800546e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
 800547c:	e005      	b.n	800548a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f001 f93e 	bl	8006700 <vPortFree>
 8005484:	e001      	b.n	800548a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d017      	beq.n	80054c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	2300      	movs	r3, #0
 800549c:	9303      	str	r3, [sp, #12]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f80e 	bl	80054d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b4:	69f8      	ldr	r0, [r7, #28]
 80054b6:	f000 f889 	bl	80055cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e002      	b.n	80054c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054c6:	69bb      	ldr	r3, [r7, #24]
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054e8:	3b01      	subs	r3, #1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <prvInitialiseNewTask+0x46>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e7fe      	b.n	8005514 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e012      	b.n	8005542 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	7819      	ldrb	r1, [r3, #0]
 8005524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	3334      	adds	r3, #52	; 0x34
 800552c:	460a      	mov	r2, r1
 800552e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d9e9      	bls.n	800551c <prvInitialiseNewTask+0x4c>
 8005548:	e000      	b.n	800554c <prvInitialiseNewTask+0x7c>
		{
			break;
 800554a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2b06      	cmp	r3, #6
 8005558:	d901      	bls.n	800555e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555a:	2306      	movs	r3, #6
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fdb3 	bl	80050e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fdae 	bl	80050e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f1c3 0207 	rsb	r2, r3, #7
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	69b8      	ldr	r0, [r7, #24]
 80055ae:	f000 fddd 	bl	800616c <pxPortInitialiseStack>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c4:	bf00      	nop
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055cc:	b5b0      	push	{r4, r5, r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d4:	f000 ff0e 	bl	80063f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d8:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <prvAddNewTaskToReadyList+0xf4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <prvAddNewTaskToReadyList+0xf4>)
 80055e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <prvAddNewTaskToReadyList+0xf8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ea:	4a36      	ldr	r2, [pc, #216]	; (80056c4 <prvAddNewTaskToReadyList+0xf8>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b33      	ldr	r3, [pc, #204]	; (80056c0 <prvAddNewTaskToReadyList+0xf4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f8:	f000 fc82 	bl	8005f00 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fe:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <prvAddNewTaskToReadyList+0xfc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <prvAddNewTaskToReadyList+0xf8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005614:	4a2b      	ldr	r2, [pc, #172]	; (80056c4 <prvAddNewTaskToReadyList+0xf8>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561a:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <prvAddNewTaskToReadyList+0x100>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <prvAddNewTaskToReadyList+0x100>)
 8005622:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <prvAddNewTaskToReadyList+0x8c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	f002 fa15 	bl	8007a5c <SEGGER_SYSVIEW_OnTaskCreate>
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	461d      	mov	r5, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461c      	mov	r4, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1ae3      	subs	r3, r4, r3
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	462b      	mov	r3, r5
 8005654:	f001 f966 	bl	8006924 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f002 fa82 	bl	8007b64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	2201      	movs	r2, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <prvAddNewTaskToReadyList+0x104>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4313      	orrs	r3, r2
 800566e:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <prvAddNewTaskToReadyList+0x104>)
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <prvAddNewTaskToReadyList+0x108>)
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7ff fd35 	bl	80050f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800568e:	f000 fedf 	bl	8006450 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <prvAddNewTaskToReadyList+0xfc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <prvAddNewTaskToReadyList+0xf8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <prvAddNewTaskToReadyList+0x10c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bdb0      	pop	{r4, r5, r7, pc}
 80056c0:	20000384 	.word	0x20000384
 80056c4:	20000284 	.word	0x20000284
 80056c8:	20000390 	.word	0x20000390
 80056cc:	200003a0 	.word	0x200003a0
 80056d0:	2000038c 	.word	0x2000038c
 80056d4:	20000288 	.word	0x20000288
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80056e4:	f000 fe86 	bl	80063f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <vTaskDelete+0x18>
 80056ee:	4b3f      	ldr	r3, [pc, #252]	; (80057ec <vTaskDelete+0x110>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	e000      	b.n	80056f6 <vTaskDelete+0x1a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fd56 	bl	80051ae <uxListRemove>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d115      	bne.n	8005734 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4938      	ldr	r1, [pc, #224]	; (80057f0 <vTaskDelete+0x114>)
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <vTaskDelete+0x58>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	2201      	movs	r2, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43da      	mvns	r2, r3
 800572a:	4b32      	ldr	r3, [pc, #200]	; (80057f4 <vTaskDelete+0x118>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4013      	ands	r3, r2
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <vTaskDelete+0x118>)
 8005732:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3318      	adds	r3, #24
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fd34 	bl	80051ae <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005746:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <vTaskDelete+0x11c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <vTaskDelete+0x11c>)
 800574e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005750:	4b26      	ldr	r3, [pc, #152]	; (80057ec <vTaskDelete+0x110>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	429a      	cmp	r2, r3
 8005758:	d10b      	bne.n	8005772 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4826      	ldr	r0, [pc, #152]	; (80057fc <vTaskDelete+0x120>)
 8005762:	f7ff fcc9 	bl	80050f8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005766:	4b26      	ldr	r3, [pc, #152]	; (8005800 <vTaskDelete+0x124>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a24      	ldr	r2, [pc, #144]	; (8005800 <vTaskDelete+0x124>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e009      	b.n	8005786 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005772:	4b24      	ldr	r3, [pc, #144]	; (8005804 <vTaskDelete+0x128>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3b01      	subs	r3, #1
 8005778:	4a22      	ldr	r2, [pc, #136]	; (8005804 <vTaskDelete+0x128>)
 800577a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fc2b 	bl	8005fd8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005782:	f000 fc57 	bl	8006034 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	f002 fa8d 	bl	8007ca8 <SEGGER_SYSVIEW_ShrinkId>
 800578e:	4603      	mov	r3, r0
 8005790:	4619      	mov	r1, r3
 8005792:	2022      	movs	r0, #34	; 0x22
 8005794:	f001 fd1e 	bl	80071d4 <SEGGER_SYSVIEW_RecordU32>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f92a 	bl	80069f4 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 80057a0:	f000 fe56 	bl	8006450 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80057a4:	4b18      	ldr	r3, [pc, #96]	; (8005808 <vTaskDelete+0x12c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01a      	beq.n	80057e2 <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <vTaskDelete+0x110>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d115      	bne.n	80057e2 <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <vTaskDelete+0x130>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <vTaskDelete+0xf6>
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	e7fe      	b.n	80057d0 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <vTaskDelete+0x134>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000284 	.word	0x20000284
 80057f0:	20000288 	.word	0x20000288
 80057f4:	2000038c 	.word	0x2000038c
 80057f8:	200003a0 	.word	0x200003a0
 80057fc:	20000358 	.word	0x20000358
 8005800:	2000036c 	.word	0x2000036c
 8005804:	20000384 	.word	0x20000384
 8005808:	20000390 	.word	0x20000390
 800580c:	200003ac 	.word	0x200003ac
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <vTaskDelayUntil+0x28>
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e7fe      	b.n	800583a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <vTaskDelayUntil+0x42>
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	e7fe      	b.n	8005854 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005856:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <vTaskDelayUntil+0xf0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <vTaskDelayUntil+0x5e>
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e7fe      	b.n	8005870 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005872:	f000 f8e3 	bl	8005a3c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <vTaskDelayUntil+0xf4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	4413      	add	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	429a      	cmp	r2, r3
 800588e:	d20b      	bcs.n	80058a8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	429a      	cmp	r2, r3
 8005898:	d211      	bcs.n	80058be <vTaskDelayUntil+0xaa>
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90d      	bls.n	80058be <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	e00a      	b.n	80058be <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d303      	bcc.n	80058ba <vTaskDelayUntil+0xa6>
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d901      	bls.n	80058be <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80058ca:	2024      	movs	r0, #36	; 0x24
 80058cc:	f001 fc64 	bl	8007198 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fbcf 	bl	800607c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80058de:	f000 f8bb 	bl	8005a58 <xTaskResumeAll>
 80058e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d107      	bne.n	80058fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <vTaskDelayUntil+0xf8>)
 80058ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058fa:	bf00      	nop
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200003ac 	.word	0x200003ac
 8005908:	20000388 	.word	0x20000388
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01a      	beq.n	8005958 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <vTaskDelay+0x68>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <vTaskDelay+0x2e>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	e7fe      	b.n	800593c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800593e:	f000 f87d 	bl	8005a3c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	2023      	movs	r0, #35	; 0x23
 8005946:	f001 fc45 	bl	80071d4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800594a:	2100      	movs	r1, #0
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb95 	bl	800607c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005952:	f000 f881 	bl	8005a58 <xTaskResumeAll>
 8005956:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <vTaskDelay+0x6c>)
 8005960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200003ac 	.word	0x200003ac
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800598e:	463a      	mov	r2, r7
 8005990:	1d39      	adds	r1, r7, #4
 8005992:	f107 0308 	add.w	r3, r7, #8
 8005996:	4618      	mov	r0, r3
 8005998:	f7fb f96c 	bl	8000c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	9202      	str	r2, [sp, #8]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	460a      	mov	r2, r1
 80059ae:	491d      	ldr	r1, [pc, #116]	; (8005a24 <vTaskStartScheduler+0xa4>)
 80059b0:	481d      	ldr	r0, [pc, #116]	; (8005a28 <vTaskStartScheduler+0xa8>)
 80059b2:	f7ff fcef 	bl	8005394 <xTaskCreateStatic>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <vTaskStartScheduler+0xac>)
 80059ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <vTaskStartScheduler+0xac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e001      	b.n	80059ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d115      	bne.n	8005a00 <vTaskStartScheduler+0x80>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <vTaskStartScheduler+0xb0>)
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <vTaskStartScheduler+0xb4>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <vTaskStartScheduler+0xb8>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059fa:	f000 fc35 	bl	8006268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059fe:	e00d      	b.n	8005a1c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d109      	bne.n	8005a1c <vTaskStartScheduler+0x9c>
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e7fe      	b.n	8005a1a <vTaskStartScheduler+0x9a>
}
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	08008038 	.word	0x08008038
 8005a28:	08005ed1 	.word	0x08005ed1
 8005a2c:	200003a8 	.word	0x200003a8
 8005a30:	200003a4 	.word	0x200003a4
 8005a34:	20000390 	.word	0x20000390
 8005a38:	20000388 	.word	0x20000388

08005a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <vTaskSuspendAll+0x18>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <vTaskSuspendAll+0x18>)
 8005a48:	6013      	str	r3, [r2, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	200003ac 	.word	0x200003ac

08005a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a66:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <xTaskResumeAll+0x11c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <xTaskResumeAll+0x2a>
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	e7fe      	b.n	8005a80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a82:	f000 fcb7 	bl	80063f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a86:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <xTaskResumeAll+0x11c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <xTaskResumeAll+0x11c>)
 8005a8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <xTaskResumeAll+0x11c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d165      	bne.n	8005b64 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a98:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <xTaskResumeAll+0x120>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d061      	beq.n	8005b64 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aa0:	e032      	b.n	8005b08 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005aa2:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <xTaskResumeAll+0x124>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3318      	adds	r3, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fb7d 	bl	80051ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fb78 	bl	80051ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f002 f84f 	bl	8007b64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	2201      	movs	r2, #1
 8005acc:	409a      	lsls	r2, r3
 8005ace:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <xTaskResumeAll+0x128>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <xTaskResumeAll+0x128>)
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4a27      	ldr	r2, [pc, #156]	; (8005b84 <xTaskResumeAll+0x12c>)
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f7ff fb02 	bl	80050f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <xTaskResumeAll+0x130>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <xTaskResumeAll+0x134>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b08:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTaskResumeAll+0x124>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1c8      	bne.n	8005aa2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b16:	f000 fa8d 	bl	8006034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <xTaskResumeAll+0x138>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b26:	f000 f845 	bl	8005bb4 <xTaskIncrementTick>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005b30:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <xTaskResumeAll+0x134>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f1      	bne.n	8005b26 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <xTaskResumeAll+0x138>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <xTaskResumeAll+0x134>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <xTaskResumeAll+0x13c>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b64:	f000 fc74 	bl	8006450 <vPortExitCritical>

	return xAlreadyYielded;
 8005b68:	68bb      	ldr	r3, [r7, #8]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200003ac 	.word	0x200003ac
 8005b78:	20000384 	.word	0x20000384
 8005b7c:	20000344 	.word	0x20000344
 8005b80:	2000038c 	.word	0x2000038c
 8005b84:	20000288 	.word	0x20000288
 8005b88:	20000284 	.word	0x20000284
 8005b8c:	20000398 	.word	0x20000398
 8005b90:	20000394 	.word	0x20000394
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <xTaskGetTickCount+0x18>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ba4:	687b      	ldr	r3, [r7, #4]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	20000388 	.word	0x20000388

08005bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bbe:	4b52      	ldr	r3, [pc, #328]	; (8005d08 <xTaskIncrementTick+0x154>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 8090 	bne.w	8005ce8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bc8:	4b50      	ldr	r3, [pc, #320]	; (8005d0c <xTaskIncrementTick+0x158>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bd0:	4a4e      	ldr	r2, [pc, #312]	; (8005d0c <xTaskIncrementTick+0x158>)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11f      	bne.n	8005c1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bdc:	4b4c      	ldr	r3, [pc, #304]	; (8005d10 <xTaskIncrementTick+0x15c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <xTaskIncrementTick+0x46>
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	e7fe      	b.n	8005bf8 <xTaskIncrementTick+0x44>
 8005bfa:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <xTaskIncrementTick+0x15c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	4b44      	ldr	r3, [pc, #272]	; (8005d14 <xTaskIncrementTick+0x160>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a42      	ldr	r2, [pc, #264]	; (8005d10 <xTaskIncrementTick+0x15c>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4a42      	ldr	r2, [pc, #264]	; (8005d14 <xTaskIncrementTick+0x160>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <xTaskIncrementTick+0x164>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <xTaskIncrementTick+0x164>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	f000 fa0c 	bl	8006034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <xTaskIncrementTick+0x168>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d351      	bcc.n	8005cca <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c26:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <xTaskIncrementTick+0x15c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <xTaskIncrementTick+0x80>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <xTaskIncrementTick+0x82>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c3a:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <xTaskIncrementTick+0x168>)
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	601a      	str	r2, [r3, #0]
					break;
 8005c42:	e042      	b.n	8005cca <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <xTaskIncrementTick+0x15c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d203      	bcs.n	8005c64 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c5c:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <xTaskIncrementTick+0x168>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
						break;
 8005c62:	e032      	b.n	8005cca <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff faa0 	bl	80051ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3318      	adds	r3, #24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fa97 	bl	80051ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 ff6e 	bl	8007b64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <xTaskIncrementTick+0x16c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <xTaskIncrementTick+0x16c>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <xTaskIncrementTick+0x170>)
 8005ca8:	441a      	add	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7ff fa21 	bl	80050f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <xTaskIncrementTick+0x174>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d3b0      	bcc.n	8005c26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc8:	e7ad      	b.n	8005c26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cca:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <xTaskIncrementTick+0x174>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4914      	ldr	r1, [pc, #80]	; (8005d24 <xTaskIncrementTick+0x170>)
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d907      	bls.n	8005cf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e004      	b.n	8005cf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <xTaskIncrementTick+0x178>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <xTaskIncrementTick+0x178>)
 8005cf0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <xTaskIncrementTick+0x17c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cfe:	697b      	ldr	r3, [r7, #20]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200003ac 	.word	0x200003ac
 8005d0c:	20000388 	.word	0x20000388
 8005d10:	2000033c 	.word	0x2000033c
 8005d14:	20000340 	.word	0x20000340
 8005d18:	2000039c 	.word	0x2000039c
 8005d1c:	200003a4 	.word	0x200003a4
 8005d20:	2000038c 	.word	0x2000038c
 8005d24:	20000288 	.word	0x20000288
 8005d28:	20000284 	.word	0x20000284
 8005d2c:	20000394 	.word	0x20000394
 8005d30:	20000398 	.word	0x20000398

08005d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d3a:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <vTaskSwitchContext+0xb8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d42:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <vTaskSwitchContext+0xbc>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d48:	e04c      	b.n	8005de4 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8005d4a:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <vTaskSwitchContext+0xbc>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <vTaskSwitchContext+0xc0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	fab3 f383 	clz	r3, r3
 8005d5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	f1c3 031f 	rsb	r3, r3, #31
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	4924      	ldr	r1, [pc, #144]	; (8005df8 <vTaskSwitchContext+0xc4>)
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <vTaskSwitchContext+0x5a>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e7fe      	b.n	8005d8c <vTaskSwitchContext+0x58>
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <vTaskSwitchContext+0xc4>)
 8005d9a:	4413      	add	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3308      	adds	r3, #8
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d104      	bne.n	8005dbe <vTaskSwitchContext+0x8a>
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <vTaskSwitchContext+0xc8>)
 8005dc6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <vTaskSwitchContext+0xc8>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <vTaskSwitchContext+0xcc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d102      	bne.n	8005dda <vTaskSwitchContext+0xa6>
 8005dd4:	f001 fe26 	bl	8007a24 <SEGGER_SYSVIEW_OnIdle>
}
 8005dd8:	e004      	b.n	8005de4 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <vTaskSwitchContext+0xc8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fe7e 	bl	8007ae0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200003ac 	.word	0x200003ac
 8005df0:	20000398 	.word	0x20000398
 8005df4:	2000038c 	.word	0x2000038c
 8005df8:	20000288 	.word	0x20000288
 8005dfc:	20000284 	.word	0x20000284
 8005e00:	200003a8 	.word	0x200003a8

08005e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <xTaskRemoveFromEventList+0x2a>
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e7fe      	b.n	8005e2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3318      	adds	r3, #24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff f9bb 	bl	80051ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <xTaskRemoveFromEventList+0xb4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d120      	bne.n	8005e82 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff f9b2 	bl	80051ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 fe89 	bl	8007b64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	2201      	movs	r2, #1
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <xTaskRemoveFromEventList+0xb8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <xTaskRemoveFromEventList+0xb8>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <xTaskRemoveFromEventList+0xbc>)
 8005e72:	441a      	add	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7ff f93c 	bl	80050f8 <vListInsertEnd>
 8005e80:	e005      	b.n	8005e8e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3318      	adds	r3, #24
 8005e86:	4619      	mov	r1, r3
 8005e88:	480e      	ldr	r0, [pc, #56]	; (8005ec4 <xTaskRemoveFromEventList+0xc0>)
 8005e8a:	f7ff f935 	bl	80050f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <xTaskRemoveFromEventList+0xc4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d905      	bls.n	8005ea8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <xTaskRemoveFromEventList+0xc8>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e001      	b.n	8005eac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200003ac 	.word	0x200003ac
 8005ebc:	2000038c 	.word	0x2000038c
 8005ec0:	20000288 	.word	0x20000288
 8005ec4:	20000344 	.word	0x20000344
 8005ec8:	20000284 	.word	0x20000284
 8005ecc:	20000398 	.word	0x20000398

08005ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ed8:	f000 f852 	bl	8005f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <prvIdleTask+0x28>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d9f9      	bls.n	8005ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <prvIdleTask+0x2c>)
 8005ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ef4:	e7f0      	b.n	8005ed8 <prvIdleTask+0x8>
 8005ef6:	bf00      	nop
 8005ef8:	20000288 	.word	0x20000288
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e00c      	b.n	8005f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <prvInitialiseTaskLists+0x60>)
 8005f18:	4413      	add	r3, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f8c1 	bl	80050a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3301      	adds	r3, #1
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d9ef      	bls.n	8005f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f2c:	480d      	ldr	r0, [pc, #52]	; (8005f64 <prvInitialiseTaskLists+0x64>)
 8005f2e:	f7ff f8b8 	bl	80050a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f32:	480d      	ldr	r0, [pc, #52]	; (8005f68 <prvInitialiseTaskLists+0x68>)
 8005f34:	f7ff f8b5 	bl	80050a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f38:	480c      	ldr	r0, [pc, #48]	; (8005f6c <prvInitialiseTaskLists+0x6c>)
 8005f3a:	f7ff f8b2 	bl	80050a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f3e:	480c      	ldr	r0, [pc, #48]	; (8005f70 <prvInitialiseTaskLists+0x70>)
 8005f40:	f7ff f8af 	bl	80050a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f44:	480b      	ldr	r0, [pc, #44]	; (8005f74 <prvInitialiseTaskLists+0x74>)
 8005f46:	f7ff f8ac 	bl	80050a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <prvInitialiseTaskLists+0x78>)
 8005f4c:	4a05      	ldr	r2, [pc, #20]	; (8005f64 <prvInitialiseTaskLists+0x64>)
 8005f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <prvInitialiseTaskLists+0x7c>)
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <prvInitialiseTaskLists+0x68>)
 8005f54:	601a      	str	r2, [r3, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000288 	.word	0x20000288
 8005f64:	20000314 	.word	0x20000314
 8005f68:	20000328 	.word	0x20000328
 8005f6c:	20000344 	.word	0x20000344
 8005f70:	20000358 	.word	0x20000358
 8005f74:	20000370 	.word	0x20000370
 8005f78:	2000033c 	.word	0x2000033c
 8005f7c:	20000340 	.word	0x20000340

08005f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f86:	e019      	b.n	8005fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f88:	f000 fa34 	bl	80063f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <prvCheckTasksWaitingTermination+0x4c>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff f908 	bl	80051ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <prvCheckTasksWaitingTermination+0x50>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <prvCheckTasksWaitingTermination+0x50>)
 8005fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvCheckTasksWaitingTermination+0x54>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <prvCheckTasksWaitingTermination+0x54>)
 8005fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fb2:	f000 fa4d 	bl	8006450 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f80e 	bl	8005fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <prvCheckTasksWaitingTermination+0x54>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e1      	bne.n	8005f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000358 	.word	0x20000358
 8005fd0:	20000384 	.word	0x20000384
 8005fd4:	2000036c 	.word	0x2000036c

08005fd8 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d108      	bne.n	8005ffc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fb86 	bl	8006700 <vPortFree>
				vPortFree( pxTCB );
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fb83 	bl	8006700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ffa:	e017      	b.n	800602c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006002:	2b01      	cmp	r3, #1
 8006004:	d103      	bne.n	800600e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fb7a 	bl	8006700 <vPortFree>
	}
 800600c:	e00e      	b.n	800602c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006014:	2b02      	cmp	r3, #2
 8006016:	d009      	beq.n	800602c <prvDeleteTCB+0x54>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e7fe      	b.n	800602a <prvDeleteTCB+0x52>
	}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <prvResetNextTaskUnblockTime+0x40>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <prvResetNextTaskUnblockTime+0x14>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <prvResetNextTaskUnblockTime+0x16>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvResetNextTaskUnblockTime+0x44>)
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006056:	e008      	b.n	800606a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <prvResetNextTaskUnblockTime+0x40>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <prvResetNextTaskUnblockTime+0x44>)
 8006068:	6013      	str	r3, [r2, #0]
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr
 8006074:	2000033c 	.word	0x2000033c
 8006078:	200003a4 	.word	0x200003a4

0800607c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006086:	4b32      	ldr	r3, [pc, #200]	; (8006150 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608c:	4b31      	ldr	r3, [pc, #196]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f88b 	bl	80051ae <uxListRemove>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	2201      	movs	r2, #1
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43da      	mvns	r2, r3
 80060ac:	4b2a      	ldr	r3, [pc, #168]	; (8006158 <prvAddCurrentTaskToDelayedList+0xdc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4013      	ands	r3, r2
 80060b2:	4a29      	ldr	r2, [pc, #164]	; (8006158 <prvAddCurrentTaskToDelayedList+0xdc>)
 80060b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d110      	bne.n	80060e0 <prvAddCurrentTaskToDelayedList+0x64>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80060c4:	4b23      	ldr	r3, [pc, #140]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	211b      	movs	r1, #27
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fd8c 	bl	8007be8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d0:	4b20      	ldr	r3, [pc, #128]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4820      	ldr	r0, [pc, #128]	; (800615c <prvAddCurrentTaskToDelayedList+0xe0>)
 80060da:	f7ff f80d 	bl	80050f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060de:	e032      	b.n	8006146 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d20f      	bcs.n	8006118 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80060f8:	4b16      	ldr	r3, [pc, #88]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2104      	movs	r1, #4
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fd72 	bl	8007be8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7ff f814 	bl	800513e <vListInsert>
}
 8006116:	e016      	b.n	8006146 <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2104      	movs	r1, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fd62 	bl	8007be8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvAddCurrentTaskToDelayedList+0xd8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7ff f804 	bl	800513e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <prvAddCurrentTaskToDelayedList+0xec>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d202      	bcs.n	8006146 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8006140:	4a09      	ldr	r2, [pc, #36]	; (8006168 <prvAddCurrentTaskToDelayedList+0xec>)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6013      	str	r3, [r2, #0]
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000388 	.word	0x20000388
 8006154:	20000284 	.word	0x20000284
 8006158:	2000038c 	.word	0x2000038c
 800615c:	20000370 	.word	0x20000370
 8006160:	20000340 	.word	0x20000340
 8006164:	2000033c 	.word	0x2000033c
 8006168:	200003a4 	.word	0x200003a4

0800616c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3b04      	subs	r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b04      	subs	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f023 0201 	bic.w	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3b04      	subs	r3, #4
 800619a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800619c:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <pxPortInitialiseStack+0x54>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b14      	subs	r3, #20
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3b20      	subs	r3, #32
 80061b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	080061c5 	.word	0x080061c5

080061c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <prvTaskExitError+0x4c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d009      	beq.n	80061ec <prvTaskExitError+0x28>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e7fe      	b.n	80061ea <prvTaskExitError+0x26>
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061fe:	bf00      	nop
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0fc      	beq.n	8006200 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	2000000c 	.word	0x2000000c
	...

08006220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <pxCurrentTCBConst2>)
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	6808      	ldr	r0, [r1, #0]
 8006226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800622a:	f380 8809 	msr	PSP, r0
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8811 	msr	BASEPRI, r0
 800623a:	f04e 0e0d 	orr.w	lr, lr, #13
 800623e:	4770      	bx	lr

08006240 <pxCurrentTCBConst2>:
 8006240:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006248:	4806      	ldr	r0, [pc, #24]	; (8006264 <prvPortStartFirstTask+0x1c>)
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	f380 8808 	msr	MSP, r0
 8006252:	b662      	cpsie	i
 8006254:	b661      	cpsie	f
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	df00      	svc	0
 8006260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006262:	bf00      	nop
 8006264:	e000ed08 	.word	0xe000ed08

08006268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <xPortStartScheduler+0xcc>)
 8006270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22ff      	movs	r2, #255	; 0xff
 800627e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006290:	b2da      	uxtb	r2, r3
 8006292:	4b29      	ldr	r3, [pc, #164]	; (8006338 <xPortStartScheduler+0xd0>)
 8006294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <xPortStartScheduler+0xd4>)
 8006298:	2207      	movs	r2, #7
 800629a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629c:	e009      	b.n	80062b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800629e:	4b27      	ldr	r3, [pc, #156]	; (800633c <xPortStartScheduler+0xd4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	4a25      	ldr	r2, [pc, #148]	; (800633c <xPortStartScheduler+0xd4>)
 80062a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d0ef      	beq.n	800629e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062be:	4b1f      	ldr	r3, [pc, #124]	; (800633c <xPortStartScheduler+0xd4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1c3 0307 	rsb	r3, r3, #7
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d009      	beq.n	80062de <xPortStartScheduler+0x76>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	e7fe      	b.n	80062dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062de:	4b17      	ldr	r3, [pc, #92]	; (800633c <xPortStartScheduler+0xd4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	4a15      	ldr	r2, [pc, #84]	; (800633c <xPortStartScheduler+0xd4>)
 80062e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062e8:	4b14      	ldr	r3, [pc, #80]	; (800633c <xPortStartScheduler+0xd4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f0:	4a12      	ldr	r2, [pc, #72]	; (800633c <xPortStartScheduler+0xd4>)
 80062f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <xPortStartScheduler+0xd8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <xPortStartScheduler+0xd8>)
 8006302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <xPortStartScheduler+0xd8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <xPortStartScheduler+0xd8>)
 800630e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006314:	f000 f910 	bl	8006538 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <xPortStartScheduler+0xdc>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800631e:	f7ff ff93 	bl	8006248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006322:	f7ff fd07 	bl	8005d34 <vTaskSwitchContext>
	prvTaskExitError();
 8006326:	f7ff ff4d 	bl	80061c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000e400 	.word	0xe000e400
 8006338:	200003b0 	.word	0x200003b0
 800633c:	200003b4 	.word	0x200003b4
 8006340:	e000ed20 	.word	0xe000ed20
 8006344:	2000000c 	.word	0x2000000c

08006348 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800634e:	4b26      	ldr	r3, [pc, #152]	; (80063e8 <vInitPrioGroupValue+0xa0>)
 8006350:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <vInitPrioGroupValue+0xa4>)
 8006374:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006376:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 8006378:	2207      	movs	r2, #7
 800637a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800637c:	e009      	b.n	8006392 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3b01      	subs	r3, #1
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 8006386:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d0ef      	beq.n	800637e <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800639e:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1c3 0307 	rsb	r3, r3, #7
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d009      	beq.n	80063be <vInitPrioGroupValue+0x76>
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	e7fe      	b.n	80063bc <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 80063c6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d0:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <vInitPrioGroupValue+0xa8>)
 80063d2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	e000e400 	.word	0xe000e400
 80063ec:	200003b0 	.word	0x200003b0
 80063f0:	200003b4 	.word	0x200003b4

080063f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <vPortEnterCritical+0x54>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	4a0d      	ldr	r2, [pc, #52]	; (8006448 <vPortEnterCritical+0x54>)
 8006414:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <vPortEnterCritical+0x54>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d10e      	bne.n	800643c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <vPortEnterCritical+0x58>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <vPortEnterCritical+0x48>
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	e7fe      	b.n	800643a <vPortEnterCritical+0x46>
	}
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	2000000c 	.word	0x2000000c
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <vPortExitCritical+0x48>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <vPortExitCritical+0x22>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	e7fe      	b.n	8006470 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <vPortExitCritical+0x48>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a07      	ldr	r2, [pc, #28]	; (8006498 <vPortExitCritical+0x48>)
 800647a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <vPortExitCritical+0x48>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <vPortExitCritical+0x3e>
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	2000000c 	.word	0x2000000c
 800649c:	00000000 	.word	0x00000000

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064b0:	6010      	str	r0, [r2, #0]
 80064b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064ba:	f380 8811 	msr	BASEPRI, r0
 80064be:	f7ff fc39 	bl	8005d34 <vTaskSwitchContext>
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064d6:	f380 8809 	msr	PSP, r0
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	4770      	bx	lr

080064e0 <pxCurrentTCBConst>:
 80064e0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop

080064e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006500:	f001 fa16 	bl	8007930 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006504:	f7ff fb56 	bl	8005bb4 <xTaskIncrementTick>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800650e:	f001 fa6d 	bl	80079ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <SysTick_Handler+0x4c>)
 8006514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e001      	b.n	8006520 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800651c:	f001 fa4a 	bl	80079b4 <SEGGER_SYSVIEW_RecordExitISR>
 8006520:	2300      	movs	r3, #0
 8006522:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <vPortSetupTimerInterrupt+0x30>)
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <vPortSetupTimerInterrupt+0x34>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <vPortSetupTimerInterrupt+0x38>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <vPortSetupTimerInterrupt+0x3c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <vPortSetupTimerInterrupt+0x40>)
 8006556:	3b01      	subs	r3, #1
 8006558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800655a:	4b03      	ldr	r3, [pc, #12]	; (8006568 <vPortSetupTimerInterrupt+0x30>)
 800655c:	2207      	movs	r2, #7
 800655e:	601a      	str	r2, [r3, #0]
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	e000e010 	.word	0xe000e010
 800656c:	e000e018 	.word	0xe000e018
 8006570:	20000000 	.word	0x20000000
 8006574:	10624dd3 	.word	0x10624dd3
 8006578:	e000e014 	.word	0xe000e014

0800657c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006588:	f7ff fa58 	bl	8005a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800658c:	4b57      	ldr	r3, [pc, #348]	; (80066ec <pvPortMalloc+0x170>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006594:	f000 f90c 	bl	80067b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006598:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <pvPortMalloc+0x174>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 808c 	bne.w	80066be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01c      	beq.n	80065e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80065ac:	2208      	movs	r2, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d013      	beq.n	80065e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	3308      	adds	r3, #8
 80065c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <pvPortMalloc+0x6a>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e7fe      	b.n	80065e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d068      	beq.n	80066be <pvPortMalloc+0x142>
 80065ec:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <pvPortMalloc+0x178>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d863      	bhi.n	80066be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065f6:	4b40      	ldr	r3, [pc, #256]	; (80066f8 <pvPortMalloc+0x17c>)
 80065f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065fa:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <pvPortMalloc+0x17c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006600:	e004      	b.n	800660c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d903      	bls.n	800661e <pvPortMalloc+0xa2>
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f1      	bne.n	8006602 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800661e:	4b33      	ldr	r3, [pc, #204]	; (80066ec <pvPortMalloc+0x170>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006624:	429a      	cmp	r2, r3
 8006626:	d04a      	beq.n	80066be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	4413      	add	r3, r2
 8006630:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	1ad2      	subs	r2, r2, r3
 8006642:	2308      	movs	r3, #8
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	429a      	cmp	r2, r3
 8006648:	d91e      	bls.n	8006688 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <pvPortMalloc+0xf4>
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e7fe      	b.n	800666e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	1ad2      	subs	r2, r2, r3
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006682:	69b8      	ldr	r0, [r7, #24]
 8006684:	f000 f8f6 	bl	8006874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <pvPortMalloc+0x178>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <pvPortMalloc+0x178>)
 8006694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006696:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <pvPortMalloc+0x178>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <pvPortMalloc+0x180>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d203      	bcs.n	80066aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066a2:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <pvPortMalloc+0x178>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a15      	ldr	r2, [pc, #84]	; (80066fc <pvPortMalloc+0x180>)
 80066a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <pvPortMalloc+0x174>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066be:	f7ff f9cb 	bl	8005a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <pvPortMalloc+0x164>
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e7fe      	b.n	80066de <pvPortMalloc+0x162>
	return pvReturn;
 80066e0:	69fb      	ldr	r3, [r7, #28]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3728      	adds	r7, #40	; 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20001bc0 	.word	0x20001bc0
 80066f0:	20001bcc 	.word	0x20001bcc
 80066f4:	20001bc4 	.word	0x20001bc4
 80066f8:	20001bb8 	.word	0x20001bb8
 80066fc:	20001bc8 	.word	0x20001bc8

08006700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d046      	beq.n	80067a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006712:	2308      	movs	r3, #8
 8006714:	425b      	negs	r3, r3
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <vPortFree+0xa8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <vPortFree+0x42>
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e7fe      	b.n	8006740 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <vPortFree+0x5e>
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	e7fe      	b.n	800675c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <vPortFree+0xa8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d019      	beq.n	80067a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d115      	bne.n	80067a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <vPortFree+0xa8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006784:	f7ff f95a 	bl	8005a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <vPortFree+0xac>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4413      	add	r3, r2
 8006792:	4a06      	ldr	r2, [pc, #24]	; (80067ac <vPortFree+0xac>)
 8006794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f000 f86c 	bl	8006874 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800679c:	f7ff f95c 	bl	8005a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20001bcc 	.word	0x20001bcc
 80067ac:	20001bc4 	.word	0x20001bc4

080067b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80067ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067bc:	4b27      	ldr	r3, [pc, #156]	; (800685c <prvHeapInit+0xac>)
 80067be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3307      	adds	r3, #7
 80067ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0307 	bic.w	r3, r3, #7
 80067d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <prvHeapInit+0xac>)
 80067e0:	4413      	add	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <prvHeapInit+0xb0>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <prvHeapInit+0xb0>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4413      	add	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067fc:	2208      	movs	r2, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0307 	bic.w	r3, r3, #7
 800680a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <prvHeapInit+0xb4>)
 8006810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <prvHeapInit+0xb4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <prvHeapInit+0xb4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <prvHeapInit+0xb4>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <prvHeapInit+0xb8>)
 800683e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a09      	ldr	r2, [pc, #36]	; (800686c <prvHeapInit+0xbc>)
 8006846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006848:	4b09      	ldr	r3, [pc, #36]	; (8006870 <prvHeapInit+0xc0>)
 800684a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800684e:	601a      	str	r2, [r3, #0]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200003b8 	.word	0x200003b8
 8006860:	20001bb8 	.word	0x20001bb8
 8006864:	20001bc0 	.word	0x20001bc0
 8006868:	20001bc8 	.word	0x20001bc8
 800686c:	20001bc4 	.word	0x20001bc4
 8006870:	20001bcc 	.word	0x20001bcc

08006874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800687c:	4b27      	ldr	r3, [pc, #156]	; (800691c <prvInsertBlockIntoFreeList+0xa8>)
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e002      	b.n	8006888 <prvInsertBlockIntoFreeList+0x14>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	429a      	cmp	r2, r3
 8006890:	d8f7      	bhi.n	8006882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4413      	add	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d108      	bne.n	80068b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	441a      	add	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d118      	bne.n	80068fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <prvInsertBlockIntoFreeList+0xac>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d00d      	beq.n	80068f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e008      	b.n	8006904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <prvInsertBlockIntoFreeList+0xac>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e003      	b.n	8006904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d002      	beq.n	8006912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr
 800691c:	20001bb8 	.word	0x20001bb8
 8006920:	20001bc0 	.word	0x20001bc0

08006924 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006932:	2205      	movs	r2, #5
 8006934:	492b      	ldr	r1, [pc, #172]	; (80069e4 <SYSVIEW_AddTask+0xc0>)
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f001 fb22 	bl	8007f80 <memcmp>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d04b      	beq.n	80069da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006942:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b07      	cmp	r3, #7
 8006948:	d903      	bls.n	8006952 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800694a:	4828      	ldr	r0, [pc, #160]	; (80069ec <SYSVIEW_AddTask+0xc8>)
 800694c:	f001 fa98 	bl	8007e80 <SEGGER_SYSVIEW_Warn>
    return;
 8006950:	e044      	b.n	80069dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006952:	4b25      	ldr	r3, [pc, #148]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4926      	ldr	r1, [pc, #152]	; (80069f0 <SYSVIEW_AddTask+0xcc>)
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006966:	4b20      	ldr	r3, [pc, #128]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4921      	ldr	r1, [pc, #132]	; (80069f0 <SYSVIEW_AddTask+0xcc>)
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	3304      	adds	r3, #4
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800697c:	4b1a      	ldr	r3, [pc, #104]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	491b      	ldr	r1, [pc, #108]	; (80069f0 <SYSVIEW_AddTask+0xcc>)
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	3308      	adds	r3, #8
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4916      	ldr	r1, [pc, #88]	; (80069f0 <SYSVIEW_AddTask+0xcc>)
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	330c      	adds	r3, #12
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4910      	ldr	r1, [pc, #64]	; (80069f0 <SYSVIEW_AddTask+0xcc>)
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	3310      	adds	r3, #16
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80069be:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <SYSVIEW_AddTask+0xc4>)
 80069c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f8ca 	bl	8006b6c <SYSVIEW_SendTaskInfo>
 80069d8:	e000      	b.n	80069dc <SYSVIEW_AddTask+0xb8>
    return;
 80069da:	bf00      	nop

}
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08008040 	.word	0x08008040
 80069e8:	20001c70 	.word	0x20001c70
 80069ec:	08008048 	.word	0x08008048
 80069f0:	20001bd0 	.word	0x20001bd0

080069f4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80069fc:	4b59      	ldr	r3, [pc, #356]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80ab 	beq.w	8006b5c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e00d      	b.n	8006a28 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006a0c:	4956      	ldr	r1, [pc, #344]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d008      	beq.n	8006a34 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3301      	adds	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	4b4e      	ldr	r3, [pc, #312]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3ec      	bcc.n	8006a0c <SYSVIEW_DeleteTask+0x18>
 8006a32:	e000      	b.n	8006a36 <SYSVIEW_DeleteTask+0x42>
      break;
 8006a34:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006a36:	4b4b      	ldr	r3, [pc, #300]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d111      	bne.n	8006a66 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a46      	ldr	r2, [pc, #280]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	2214      	movs	r2, #20
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 faad 	bl	8007fb4 <memset>
    _NumTasks--;
 8006a5a:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4a40      	ldr	r2, [pc, #256]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	e07b      	b.n	8006b5e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006a66:	4b3f      	ldr	r3, [pc, #252]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d276      	bcs.n	8006b5e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006a70:	4b3c      	ldr	r3, [pc, #240]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	493c      	ldr	r1, [pc, #240]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	4838      	ldr	r0, [pc, #224]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4403      	add	r3, r0
 8006a92:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006a94:	4b33      	ldr	r3, [pc, #204]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	4933      	ldr	r1, [pc, #204]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	482f      	ldr	r0, [pc, #188]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4403      	add	r3, r0
 8006ab8:	3304      	adds	r3, #4
 8006aba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006abc:	4b29      	ldr	r3, [pc, #164]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1e5a      	subs	r2, r3, #1
 8006ac2:	4929      	ldr	r1, [pc, #164]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	3308      	adds	r3, #8
 8006ad0:	6819      	ldr	r1, [r3, #0]
 8006ad2:	4825      	ldr	r0, [pc, #148]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4403      	add	r3, r0
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	491f      	ldr	r1, [pc, #124]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	330c      	adds	r3, #12
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	481b      	ldr	r0, [pc, #108]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4403      	add	r3, r0
 8006b08:	330c      	adds	r3, #12
 8006b0a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006b0c:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	4915      	ldr	r1, [pc, #84]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	3310      	adds	r3, #16
 8006b20:	6819      	ldr	r1, [r3, #0]
 8006b22:	4811      	ldr	r0, [pc, #68]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4403      	add	r3, r0
 8006b30:	3310      	adds	r3, #16
 8006b32:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	1e5a      	subs	r2, r3, #1
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <SYSVIEW_DeleteTask+0x174>)
 8006b44:	4413      	add	r3, r2
 8006b46:	2214      	movs	r2, #20
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 fa32 	bl	8007fb4 <memset>
    _NumTasks--;
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4a03      	ldr	r2, [pc, #12]	; (8006b64 <SYSVIEW_DeleteTask+0x170>)
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e000      	b.n	8006b5e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006b5c:	bf00      	nop
  }
}
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20001c70 	.word	0x20001c70
 8006b68:	20001bd0 	.word	0x20001bd0

08006b6c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006b7a:	f107 0314 	add.w	r3, r7, #20
 8006b7e:	2214      	movs	r2, #20
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 fa16 	bl	8007fb4 <memset>
  TaskInfo.TaskID     = TaskID;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fd9d 	bl	80076e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006ba6:	bf00      	nop
 8006ba8:	3728      	adds	r7, #40	; 0x28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <_DoInit+0x8c>)
 8006bb8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <_DoInit+0x90>)
 8006bca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <_DoInit+0x94>)
 8006bd0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bd8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <_DoInit+0x90>)
 8006bf0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <_DoInit+0x98>)
 8006bf6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3307      	adds	r3, #7
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <_DoInit+0x9c>)
 8006c16:	6810      	ldr	r0, [r2, #0]
 8006c18:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a0c      	ldr	r2, [pc, #48]	; (8006c50 <_DoInit+0xa0>)
 8006c1e:	6810      	ldr	r0, [r2, #0]
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	8891      	ldrh	r1, [r2, #4]
 8006c24:	7992      	ldrb	r2, [r2, #6]
 8006c26:	8099      	strh	r1, [r3, #4]
 8006c28:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	200022fc 	.word	0x200022fc
 8006c40:	08008098 	.word	0x08008098
 8006c44:	20001c74 	.word	0x20001c74
 8006c48:	20002074 	.word	0x20002074
 8006c4c:	080080a4 	.word	0x080080a4
 8006c50:	080080a8 	.word	0x080080a8

08006c54 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	; 0x30
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006c60:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <SEGGER_RTT_ReadNoLock+0x108>)
 8006c62:	623b      	str	r3, [r7, #32]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <SEGGER_RTT_ReadNoLock+0x1e>
 8006c6e:	f7ff ff9f 	bl	8006bb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4613      	mov	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	3360      	adds	r3, #96	; 0x60
 8006c7e:	4a37      	ldr	r2, [pc, #220]	; (8006d5c <SEGGER_RTT_ReadNoLock+0x108>)
 8006c80:	4413      	add	r3, r2
 8006c82:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d92b      	bls.n	8006cf8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bf28      	it	cs
 8006cb2:	4613      	movcs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	4413      	add	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	6939      	ldr	r1, [r7, #16]
 8006cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc6:	f001 f96a 	bl	8007f9e <memcpy>
    NumBytesRead += NumBytesRem;
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4413      	add	r3, r2
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d101      	bne.n	8006cf8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	bf28      	it	cs
 8006d08:	4613      	movcs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d019      	beq.n	8006d46 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	4413      	add	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	6939      	ldr	r1, [r7, #16]
 8006d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d22:	f001 f93c 	bl	8007f9e <memcpy>
    NumBytesRead += NumBytesRem;
 8006d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d50:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3730      	adds	r7, #48	; 0x30
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	200022fc 	.word	0x200022fc

08006d60 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d70:	e002      	b.n	8006d78 <_EncodeStr+0x18>
    Len++;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f6      	bne.n	8006d72 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d901      	bls.n	8006d90 <_EncodeStr+0x30>
    Len = Limit;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2bfe      	cmp	r3, #254	; 0xfe
 8006d94:	d806      	bhi.n	8006da4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	60fa      	str	r2, [r7, #12]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	e011      	b.n	8006dc8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	60fa      	str	r2, [r7, #12]
 8006daa:	22ff      	movs	r2, #255	; 0xff
 8006dac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	60fa      	str	r2, [r7, #12]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	0a19      	lsrs	r1, r3, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	60fa      	str	r2, [r7, #12]
 8006dc4:	b2ca      	uxtb	r2, r1
 8006dc6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006dcc:	e00a      	b.n	8006de4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	1c53      	adds	r3, r2, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	60f9      	str	r1, [r7, #12]
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]
    n++;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d3f0      	bcc.n	8006dce <_EncodeStr+0x6e>
  }
  return pPayload;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
	...

08006e10 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e16:	4b33      	ldr	r3, [pc, #204]	; (8006ee4 <_HandleIncomingPacket+0xd4>)
 8006e18:	7e1b      	ldrb	r3, [r3, #24]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	1cfb      	adds	r3, r7, #3
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4619      	mov	r1, r3
 8006e22:	f7ff ff17 	bl	8006c54 <SEGGER_RTT_ReadNoLock>
 8006e26:	4603      	mov	r3, r0
 8006e28:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dd4d      	ble.n	8006ecc <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d022      	beq.n	8006e7c <_HandleIncomingPacket+0x6c>
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	dc0b      	bgt.n	8006e52 <_HandleIncomingPacket+0x42>
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d015      	beq.n	8006e6a <_HandleIncomingPacket+0x5a>
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dc02      	bgt.n	8006e48 <_HandleIncomingPacket+0x38>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d00e      	beq.n	8006e64 <_HandleIncomingPacket+0x54>
 8006e46:	e034      	b.n	8006eb2 <_HandleIncomingPacket+0xa2>
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d011      	beq.n	8006e70 <_HandleIncomingPacket+0x60>
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d012      	beq.n	8006e76 <_HandleIncomingPacket+0x66>
 8006e50:	e02f      	b.n	8006eb2 <_HandleIncomingPacket+0xa2>
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	d018      	beq.n	8006e88 <_HandleIncomingPacket+0x78>
 8006e56:	2b07      	cmp	r3, #7
 8006e58:	db13      	blt.n	8006e82 <_HandleIncomingPacket+0x72>
 8006e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e5c:	d038      	beq.n	8006ed0 <_HandleIncomingPacket+0xc0>
 8006e5e:	2b80      	cmp	r3, #128	; 0x80
 8006e60:	d015      	beq.n	8006e8e <_HandleIncomingPacket+0x7e>
 8006e62:	e026      	b.n	8006eb2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006e64:	f000 fac2 	bl	80073ec <SEGGER_SYSVIEW_Start>
      break;
 8006e68:	e037      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006e6a:	f000 fb79 	bl	8007560 <SEGGER_SYSVIEW_Stop>
      break;
 8006e6e:	e034      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006e70:	f000 fd2e 	bl	80078d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006e74:	e031      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006e76:	f000 fd17 	bl	80078a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006e7a:	e02e      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006e7c:	f000 fb96 	bl	80075ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006e80:	e02b      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006e82:	f000 ffbf 	bl	8007e04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006e86:	e028      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006e88:	f000 ff9e 	bl	8007dc8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006e8c:	e025      	b.n	8006eda <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <_HandleIncomingPacket+0xd4>)
 8006e90:	7e1b      	ldrb	r3, [r3, #24]
 8006e92:	4618      	mov	r0, r3
 8006e94:	1cfb      	adds	r3, r7, #3
 8006e96:	2201      	movs	r2, #1
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7ff fedb 	bl	8006c54 <SEGGER_RTT_ReadNoLock>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd15      	ble.n	8006ed4 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 ff0c 	bl	8007cc8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006eb0:	e010      	b.n	8006ed4 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da0e      	bge.n	8006ed8 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <_HandleIncomingPacket+0xd4>)
 8006ebc:	7e1b      	ldrb	r3, [r3, #24]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	1cfb      	adds	r3, r7, #3
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f7ff fec5 	bl	8006c54 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006eca:	e005      	b.n	8006ed8 <_HandleIncomingPacket+0xc8>
    }
  }
 8006ecc:	bf00      	nop
 8006ece:	e004      	b.n	8006eda <_HandleIncomingPacket+0xca>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <_HandleIncomingPacket+0xca>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <_HandleIncomingPacket+0xca>
      break;
 8006ed8:	bf00      	nop
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20002084 	.word	0x20002084

08006ee8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006eee:	2301      	movs	r3, #1
 8006ef0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efc:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f02:	e00b      	b.n	8006f1c <_TrySendOverflowPacket+0x34>
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	09db      	lsrs	r3, r3, #7
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f20:	d8f0      	bhi.n	8006f04 <_TrySendOverflowPacket+0x1c>
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f32:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <_TrySendOverflowPacket+0xe0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006f38:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	e00b      	b.n	8006f64 <_TrySendOverflowPacket+0x7c>
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	6279      	str	r1, [r7, #36]	; 0x24
 8006f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	09db      	lsrs	r3, r3, #7
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	2b7f      	cmp	r3, #127	; 0x7f
 8006f68:	d8f0      	bhi.n	8006f4c <_TrySendOverflowPacket+0x64>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7f9 f8e0 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006f90:	4603      	mov	r3, r0
 8006f92:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006fa0:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e004      	b.n	8006fb8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	4a03      	ldr	r2, [pc, #12]	; (8006fc4 <_TrySendOverflowPacket+0xdc>)
 8006fb6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006fb8:	693b      	ldr	r3, [r7, #16]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3730      	adds	r7, #48	; 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20002084 	.word	0x20002084
 8006fc8:	e0001004 	.word	0xe0001004

08006fcc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006fd8:	4b6c      	ldr	r3, [pc, #432]	; (800718c <_SendPacket+0x1c0>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d010      	beq.n	8007002 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006fe0:	4b6a      	ldr	r3, [pc, #424]	; (800718c <_SendPacket+0x1c0>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80a3 	beq.w	8007130 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006fea:	4b68      	ldr	r3, [pc, #416]	; (800718c <_SendPacket+0x1c0>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d109      	bne.n	8007006 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006ff2:	f7ff ff79 	bl	8006ee8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006ff6:	4b65      	ldr	r3, [pc, #404]	; (800718c <_SendPacket+0x1c0>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	f040 809a 	bne.w	8007134 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007000:	e001      	b.n	8007006 <_SendPacket+0x3a>
    goto Send;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <_SendPacket+0x3c>
Send:
 8007006:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b1f      	cmp	r3, #31
 800700c:	d809      	bhi.n	8007022 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800700e:	4b5f      	ldr	r3, [pc, #380]	; (800718c <_SendPacket+0x1c0>)
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	f040 808b 	bne.w	8007138 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b17      	cmp	r3, #23
 8007026:	d807      	bhi.n	8007038 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3b01      	subs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e03d      	b.n	80070b4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2b7f      	cmp	r3, #127	; 0x7f
 8007044:	d912      	bls.n	800706c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	09da      	lsrs	r2, r3, #7
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3b01      	subs	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	3a01      	subs	r2, #1
 800705e:	60fa      	str	r2, [r7, #12]
 8007060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e006      	b.n	800707a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3b01      	subs	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b7f      	cmp	r3, #127	; 0x7f
 800707e:	d912      	bls.n	80070a6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	09da      	lsrs	r2, r3, #7
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b01      	subs	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	3a01      	subs	r2, #1
 8007098:	60fa      	str	r2, [r7, #12]
 800709a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e006      	b.n	80070b4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80070b4:	4b36      	ldr	r3, [pc, #216]	; (8007190 <_SendPacket+0x1c4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80070ba:	4b34      	ldr	r3, [pc, #208]	; (800718c <_SendPacket+0x1c0>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	623b      	str	r3, [r7, #32]
 80070cc:	e00b      	b.n	80070e6 <_SendPacket+0x11a>
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	1c59      	adds	r1, r3, #1
 80070d6:	6279      	str	r1, [r7, #36]	; 0x24
 80070d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	09db      	lsrs	r3, r3, #7
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ea:	d8f0      	bhi.n	80070ce <_SendPacket+0x102>
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	627a      	str	r2, [r7, #36]	; 0x24
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80070fc:	4b23      	ldr	r3, [pc, #140]	; (800718c <_SendPacket+0x1c0>)
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	4618      	mov	r0, r3
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	461a      	mov	r2, r3
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f7f9 f820 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007110:	4603      	mov	r3, r0
 8007112:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <_SendPacket+0x1c0>)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	60d3      	str	r3, [r2, #12]
 8007120:	e00b      	b.n	800713a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <_SendPacket+0x1c0>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b18      	ldr	r3, [pc, #96]	; (800718c <_SendPacket+0x1c0>)
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e004      	b.n	800713a <_SendPacket+0x16e>
    goto SendDone;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <_SendPacket+0x16e>
      goto SendDone;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <_SendPacket+0x16e>
      goto SendDone;
 8007138:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <_SendPacket+0x1c0>)
 800713c:	7e1b      	ldrb	r3, [r3, #24]
 800713e:	4619      	mov	r1, r3
 8007140:	4a14      	ldr	r2, [pc, #80]	; (8007194 <_SendPacket+0x1c8>)
 8007142:	460b      	mov	r3, r1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	440b      	add	r3, r1
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	4413      	add	r3, r2
 800714c:	336c      	adds	r3, #108	; 0x6c
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <_SendPacket+0x1c0>)
 8007152:	7e1b      	ldrb	r3, [r3, #24]
 8007154:	4618      	mov	r0, r3
 8007156:	490f      	ldr	r1, [pc, #60]	; (8007194 <_SendPacket+0x1c8>)
 8007158:	4603      	mov	r3, r0
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	4403      	add	r3, r0
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	440b      	add	r3, r1
 8007162:	3370      	adds	r3, #112	; 0x70
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d00b      	beq.n	8007182 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <_SendPacket+0x1c0>)
 800716c:	789b      	ldrb	r3, [r3, #2]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <_SendPacket+0x1c0>)
 8007174:	2201      	movs	r2, #1
 8007176:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007178:	f7ff fe4a 	bl	8006e10 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <_SendPacket+0x1c0>)
 800717e:	2200      	movs	r2, #0
 8007180:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007182:	bf00      	nop
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20002084 	.word	0x20002084
 8007190:	e0001004 	.word	0xe0001004
 8007194:	200022fc 	.word	0x200022fc

08007198 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071a0:	f3ef 8311 	mrs	r3, BASEPRI
 80071a4:	f04f 0120 	mov.w	r1, #32
 80071a8:	f381 8811 	msr	BASEPRI, r1
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4808      	ldr	r0, [pc, #32]	; (80071d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80071b0:	f7ff fe22 	bl	8006df8 <_PreparePacket>
 80071b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	68b8      	ldr	r0, [r7, #8]
 80071bc:	f7ff ff06 	bl	8006fcc <_SendPacket>
  RECORD_END();
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f383 8811 	msr	BASEPRI, r3
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200020b4 	.word	0x200020b4

080071d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071de:	f3ef 8311 	mrs	r3, BASEPRI
 80071e2:	f04f 0120 	mov.w	r1, #32
 80071e6:	f381 8811 	msr	BASEPRI, r1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	4816      	ldr	r0, [pc, #88]	; (8007248 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80071ee:	f7ff fe03 	bl	8006df8 <_PreparePacket>
 80071f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e00b      	b.n	800721a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	1c59      	adds	r1, r3, #1
 800720a:	61f9      	str	r1, [r7, #28]
 800720c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	09db      	lsrs	r3, r3, #7
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b7f      	cmp	r3, #127	; 0x7f
 800721e:	d8f0      	bhi.n	8007202 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	61fa      	str	r2, [r7, #28]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	6938      	ldr	r0, [r7, #16]
 8007236:	f7ff fec9 	bl	8006fcc <_SendPacket>
  RECORD_END();
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f383 8811 	msr	BASEPRI, r3
}
 8007240:	bf00      	nop
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	200020b4 	.word	0x200020b4

0800724c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	; 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007258:	f3ef 8311 	mrs	r3, BASEPRI
 800725c:	f04f 0120 	mov.w	r1, #32
 8007260:	f381 8811 	msr	BASEPRI, r1
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	4825      	ldr	r0, [pc, #148]	; (80072fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007268:	f7ff fdc6 	bl	8006df8 <_PreparePacket>
 800726c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
 800727a:	e00b      	b.n	8007294 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	b2da      	uxtb	r2, r3
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	09db      	lsrs	r3, r3, #7
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	2b7f      	cmp	r3, #127	; 0x7f
 8007298:	d8f0      	bhi.n	800727c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	e00b      	b.n	80072cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	6279      	str	r1, [r7, #36]	; 0x24
 80072be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	09db      	lsrs	r3, r3, #7
 80072ca:	623b      	str	r3, [r7, #32]
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	2b7f      	cmp	r3, #127	; 0x7f
 80072d0:	d8f0      	bhi.n	80072b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	627a      	str	r2, [r7, #36]	; 0x24
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6979      	ldr	r1, [r7, #20]
 80072e6:	69b8      	ldr	r0, [r7, #24]
 80072e8:	f7ff fe70 	bl	8006fcc <_SendPacket>
  RECORD_END();
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f383 8811 	msr	BASEPRI, r3
}
 80072f2:	bf00      	nop
 80072f4:	3730      	adds	r7, #48	; 0x30
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	200020b4 	.word	0x200020b4

08007300 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b08e      	sub	sp, #56	; 0x38
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800730e:	f3ef 8311 	mrs	r3, BASEPRI
 8007312:	f04f 0120 	mov.w	r1, #32
 8007316:	f381 8811 	msr	BASEPRI, r1
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	4832      	ldr	r0, [pc, #200]	; (80073e8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800731e:	f7ff fd6b 	bl	8006df8 <_PreparePacket>
 8007322:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
 8007330:	e00b      	b.n	800734a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	b2da      	uxtb	r2, r3
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	1c59      	adds	r1, r3, #1
 800733a:	6379      	str	r1, [r7, #52]	; 0x34
 800733c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	09db      	lsrs	r3, r3, #7
 8007348:	633b      	str	r3, [r7, #48]	; 0x30
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2b7f      	cmp	r3, #127	; 0x7f
 800734e:	d8f0      	bhi.n	8007332 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	637a      	str	r2, [r7, #52]	; 0x34
 8007356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	62bb      	str	r3, [r7, #40]	; 0x28
 8007368:	e00b      	b.n	8007382 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	b2da      	uxtb	r2, r3
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	1c59      	adds	r1, r3, #1
 8007372:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	09db      	lsrs	r3, r3, #7
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2b7f      	cmp	r3, #127	; 0x7f
 8007386:	d8f0      	bhi.n	800736a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800738e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	623b      	str	r3, [r7, #32]
 80073a0:	e00b      	b.n	80073ba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	1c59      	adds	r1, r3, #1
 80073aa:	6279      	str	r1, [r7, #36]	; 0x24
 80073ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	09db      	lsrs	r3, r3, #7
 80073b8:	623b      	str	r3, [r7, #32]
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	2b7f      	cmp	r3, #127	; 0x7f
 80073be:	d8f0      	bhi.n	80073a2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	627a      	str	r2, [r7, #36]	; 0x24
 80073c6:	6a3a      	ldr	r2, [r7, #32]
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	6979      	ldr	r1, [r7, #20]
 80073d4:	69b8      	ldr	r0, [r7, #24]
 80073d6:	f7ff fdf9 	bl	8006fcc <_SendPacket>
  RECORD_END();
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f383 8811 	msr	BASEPRI, r3
}
 80073e0:	bf00      	nop
 80073e2:	3738      	adds	r7, #56	; 0x38
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200020b4 	.word	0x200020b4

080073ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80073f2:	4b58      	ldr	r3, [pc, #352]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80073f8:	f3ef 8311 	mrs	r3, BASEPRI
 80073fc:	f04f 0120 	mov.w	r1, #32
 8007400:	f381 8811 	msr	BASEPRI, r1
 8007404:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	220a      	movs	r2, #10
 800740c:	4952      	ldr	r1, [pc, #328]	; (8007558 <SEGGER_SYSVIEW_Start+0x16c>)
 800740e:	4618      	mov	r0, r3
 8007410:	f7f8 fe9e 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800741a:	200a      	movs	r0, #10
 800741c:	f7ff febc 	bl	8007198 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007420:	f3ef 8311 	mrs	r3, BASEPRI
 8007424:	f04f 0120 	mov.w	r1, #32
 8007428:	f381 8811 	msr	BASEPRI, r1
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	484b      	ldr	r0, [pc, #300]	; (800755c <SEGGER_SYSVIEW_Start+0x170>)
 8007430:	f7ff fce2 	bl	8006df8 <_PreparePacket>
 8007434:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800743e:	4b45      	ldr	r3, [pc, #276]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
 8007444:	e00b      	b.n	800745e <SEGGER_SYSVIEW_Start+0x72>
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	b2da      	uxtb	r2, r3
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	1c59      	adds	r1, r3, #1
 800744e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	09db      	lsrs	r3, r3, #7
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	2b7f      	cmp	r3, #127	; 0x7f
 8007462:	d8f0      	bhi.n	8007446 <SEGGER_SYSVIEW_Start+0x5a>
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800746a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
 8007478:	4b36      	ldr	r3, [pc, #216]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	623b      	str	r3, [r7, #32]
 800747e:	e00b      	b.n	8007498 <SEGGER_SYSVIEW_Start+0xac>
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	6279      	str	r1, [r7, #36]	; 0x24
 800748a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	09db      	lsrs	r3, r3, #7
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	2b7f      	cmp	r3, #127	; 0x7f
 800749c:	d8f0      	bhi.n	8007480 <SEGGER_SYSVIEW_Start+0x94>
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	627a      	str	r2, [r7, #36]	; 0x24
 80074a4:	6a3a      	ldr	r2, [r7, #32]
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	4b28      	ldr	r3, [pc, #160]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	61bb      	str	r3, [r7, #24]
 80074b8:	e00b      	b.n	80074d2 <SEGGER_SYSVIEW_Start+0xe6>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	1c59      	adds	r1, r3, #1
 80074c2:	61f9      	str	r1, [r7, #28]
 80074c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	09db      	lsrs	r3, r3, #7
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b7f      	cmp	r3, #127	; 0x7f
 80074d6:	d8f0      	bhi.n	80074ba <SEGGER_SYSVIEW_Start+0xce>
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	61fa      	str	r2, [r7, #28]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	e00b      	b.n	800750a <SEGGER_SYSVIEW_Start+0x11e>
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	1c59      	adds	r1, r3, #1
 80074fa:	6179      	str	r1, [r7, #20]
 80074fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	09db      	lsrs	r3, r3, #7
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b7f      	cmp	r3, #127	; 0x7f
 800750e:	d8f0      	bhi.n	80074f2 <SEGGER_SYSVIEW_Start+0x106>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	617a      	str	r2, [r7, #20]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007520:	2218      	movs	r2, #24
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fd51 	bl	8006fcc <_SendPacket>
      RECORD_END();
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <SEGGER_SYSVIEW_Start+0x168>)
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800753e:	f000 f9c7 	bl	80078d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007542:	f000 f9b1 	bl	80078a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007546:	f000 fc5d 	bl	8007e04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800754a:	bf00      	nop
 800754c:	3730      	adds	r7, #48	; 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20002084 	.word	0x20002084
 8007558:	080080c8 	.word	0x080080c8
 800755c:	200020b4 	.word	0x200020b4

08007560 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007566:	f3ef 8311 	mrs	r3, BASEPRI
 800756a:	f04f 0120 	mov.w	r1, #32
 800756e:	f381 8811 	msr	BASEPRI, r1
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	480b      	ldr	r0, [pc, #44]	; (80075a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8007576:	f7ff fc3f 	bl	8006df8 <_PreparePacket>
 800757a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007584:	220b      	movs	r2, #11
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6838      	ldr	r0, [r7, #0]
 800758a:	f7ff fd1f 	bl	8006fcc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800758e:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f383 8811 	msr	BASEPRI, r3
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	200020b4 	.word	0x200020b4
 80075a8:	20002084 	.word	0x20002084

080075ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08c      	sub	sp, #48	; 0x30
 80075b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80075b2:	f3ef 8311 	mrs	r3, BASEPRI
 80075b6:	f04f 0120 	mov.w	r1, #32
 80075ba:	f381 8811 	msr	BASEPRI, r1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	4845      	ldr	r0, [pc, #276]	; (80076d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80075c2:	f7ff fc19 	bl	8006df8 <_PreparePacket>
 80075c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d0:	4b42      	ldr	r3, [pc, #264]	; (80076dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d6:	e00b      	b.n	80075f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80075e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	09db      	lsrs	r3, r3, #7
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	2b7f      	cmp	r3, #127	; 0x7f
 80075f4:	d8f0      	bhi.n	80075d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
 800760a:	4b34      	ldr	r3, [pc, #208]	; (80076dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	e00b      	b.n	800762a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	b2da      	uxtb	r2, r3
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	6279      	str	r1, [r7, #36]	; 0x24
 800761c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	09db      	lsrs	r3, r3, #7
 8007628:	623b      	str	r3, [r7, #32]
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	2b7f      	cmp	r3, #127	; 0x7f
 800762e:	d8f0      	bhi.n	8007612 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	627a      	str	r2, [r7, #36]	; 0x24
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	4b25      	ldr	r3, [pc, #148]	; (80076dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e00b      	b.n	8007664 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	b2da      	uxtb	r2, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	1c59      	adds	r1, r3, #1
 8007654:	61f9      	str	r1, [r7, #28]
 8007656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	09db      	lsrs	r3, r3, #7
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b7f      	cmp	r3, #127	; 0x7f
 8007668:	d8f0      	bhi.n	800764c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	61fa      	str	r2, [r7, #28]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	2300      	movs	r3, #0
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	e00b      	b.n	800769c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	6179      	str	r1, [r7, #20]
 800768e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	09db      	lsrs	r3, r3, #7
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b7f      	cmp	r3, #127	; 0x7f
 80076a0:	d8f0      	bhi.n	8007684 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	617a      	str	r2, [r7, #20]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80076b2:	2218      	movs	r2, #24
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	68b8      	ldr	r0, [r7, #8]
 80076b8:	f7ff fc88 	bl	8006fcc <_SendPacket>
  RECORD_END();
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80076ca:	4b04      	ldr	r3, [pc, #16]	; (80076dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	4798      	blx	r3
  }
}
 80076d0:	bf00      	nop
 80076d2:	3730      	adds	r7, #48	; 0x30
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200020b4 	.word	0x200020b4
 80076dc:	20002084 	.word	0x20002084

080076e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b092      	sub	sp, #72	; 0x48
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80076e8:	f3ef 8311 	mrs	r3, BASEPRI
 80076ec:	f04f 0120 	mov.w	r1, #32
 80076f0:	f381 8811 	msr	BASEPRI, r1
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	486a      	ldr	r0, [pc, #424]	; (80078a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80076f8:	f7ff fb7e 	bl	8006df8 <_PreparePacket>
 80076fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	647b      	str	r3, [r7, #68]	; 0x44
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b66      	ldr	r3, [pc, #408]	; (80078a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	643b      	str	r3, [r7, #64]	; 0x40
 8007712:	e00b      	b.n	800772c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771a:	1c59      	adds	r1, r3, #1
 800771c:	6479      	str	r1, [r7, #68]	; 0x44
 800771e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007728:	09db      	lsrs	r3, r3, #7
 800772a:	643b      	str	r3, [r7, #64]	; 0x40
 800772c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772e:	2b7f      	cmp	r3, #127	; 0x7f
 8007730:	d8f0      	bhi.n	8007714 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	647a      	str	r2, [r7, #68]	; 0x44
 8007738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	63bb      	str	r3, [r7, #56]	; 0x38
 800774c:	e00b      	b.n	8007766 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	b2da      	uxtb	r2, r3
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	09db      	lsrs	r3, r3, #7
 8007764:	63bb      	str	r3, [r7, #56]	; 0x38
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b7f      	cmp	r3, #127	; 0x7f
 800776a:	d8f0      	bhi.n	800774e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	4619      	mov	r1, r3
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff faeb 	bl	8006d60 <_EncodeStr>
 800778a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800778c:	2209      	movs	r2, #9
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	6938      	ldr	r0, [r7, #16]
 8007792:	f7ff fc1b 	bl	8006fcc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b40      	ldr	r3, [pc, #256]	; (80078a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	633b      	str	r3, [r7, #48]	; 0x30
 80077aa:	e00b      	b.n	80077c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	1c59      	adds	r1, r3, #1
 80077b4:	6379      	str	r1, [r7, #52]	; 0x34
 80077b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	09db      	lsrs	r3, r3, #7
 80077c2:	633b      	str	r3, [r7, #48]	; 0x30
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2b7f      	cmp	r3, #127	; 0x7f
 80077c8:	d8f0      	bhi.n	80077ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	637a      	str	r2, [r7, #52]	; 0x34
 80077d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e4:	e00b      	b.n	80077fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	1c59      	adds	r1, r3, #1
 80077ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	09db      	lsrs	r3, r3, #7
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	2b7f      	cmp	r3, #127	; 0x7f
 8007802:	d8f0      	bhi.n	80077e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800780a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	e00b      	b.n	8007838 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	1c59      	adds	r1, r3, #1
 8007828:	6279      	str	r1, [r7, #36]	; 0x24
 800782a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	09db      	lsrs	r3, r3, #7
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b7f      	cmp	r3, #127	; 0x7f
 800783c:	d8f0      	bhi.n	8007820 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	627a      	str	r2, [r7, #36]	; 0x24
 8007844:	6a3a      	ldr	r2, [r7, #32]
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	2300      	movs	r3, #0
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	e00b      	b.n	8007870 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	b2da      	uxtb	r2, r3
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	61f9      	str	r1, [r7, #28]
 8007862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	09db      	lsrs	r3, r3, #7
 800786e:	61bb      	str	r3, [r7, #24]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b7f      	cmp	r3, #127	; 0x7f
 8007874:	d8f0      	bhi.n	8007858 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	61fa      	str	r2, [r7, #28]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007886:	2215      	movs	r2, #21
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	6938      	ldr	r0, [r7, #16]
 800788c:	f7ff fb9e 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f383 8811 	msr	BASEPRI, r3
}
 8007896:	bf00      	nop
 8007898:	3748      	adds	r7, #72	; 0x48
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200020b4 	.word	0x200020b4
 80078a4:	20002084 	.word	0x20002084

080078a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4798      	blx	r3
  }
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20002084 	.word	0x20002084

080078d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d019      	beq.n	8007912 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d014      	beq.n	8007912 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4798      	blx	r3
 80078f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80078f4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80078f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	f04f 0400 	mov.w	r4, #0
 8007902:	0013      	movs	r3, r2
 8007904:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007906:	461a      	mov	r2, r3
 8007908:	4601      	mov	r1, r0
 800790a:	200d      	movs	r0, #13
 800790c:	f7ff fc9e 	bl	800724c <SEGGER_SYSVIEW_RecordU32x2>
 8007910:	e005      	b.n	800791e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4619      	mov	r1, r3
 8007918:	200c      	movs	r0, #12
 800791a:	f7ff fc5b 	bl	80071d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}
 8007926:	bf00      	nop
 8007928:	20002084 	.word	0x20002084
 800792c:	e0001004 	.word	0xe0001004

08007930 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007936:	f3ef 8311 	mrs	r3, BASEPRI
 800793a:	f04f 0120 	mov.w	r1, #32
 800793e:	f381 8811 	msr	BASEPRI, r1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	4819      	ldr	r0, [pc, #100]	; (80079ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007946:	f7ff fa57 	bl	8006df8 <_PreparePacket>
 800794a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007958:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e00b      	b.n	800797c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	1c59      	adds	r1, r3, #1
 800796c:	6179      	str	r1, [r7, #20]
 800796e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	09db      	lsrs	r3, r3, #7
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b7f      	cmp	r3, #127	; 0x7f
 8007980:	d8f0      	bhi.n	8007964 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	617a      	str	r2, [r7, #20]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007992:	2202      	movs	r2, #2
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	68b8      	ldr	r0, [r7, #8]
 8007998:	f7ff fb18 	bl	8006fcc <_SendPacket>
  RECORD_END();
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f383 8811 	msr	BASEPRI, r3
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200020b4 	.word	0x200020b4
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80079ba:	f3ef 8311 	mrs	r3, BASEPRI
 80079be:	f04f 0120 	mov.w	r1, #32
 80079c2:	f381 8811 	msr	BASEPRI, r1
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	4807      	ldr	r0, [pc, #28]	; (80079e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80079ca:	f7ff fa15 	bl	8006df8 <_PreparePacket>
 80079ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80079d0:	2203      	movs	r2, #3
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f7ff faf9 	bl	8006fcc <_SendPacket>
  RECORD_END();
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f383 8811 	msr	BASEPRI, r3
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200020b4 	.word	0x200020b4

080079ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80079f2:	f3ef 8311 	mrs	r3, BASEPRI
 80079f6:	f04f 0120 	mov.w	r1, #32
 80079fa:	f381 8811 	msr	BASEPRI, r1
 80079fe:	607b      	str	r3, [r7, #4]
 8007a00:	4807      	ldr	r0, [pc, #28]	; (8007a20 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007a02:	f7ff f9f9 	bl	8006df8 <_PreparePacket>
 8007a06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007a08:	2212      	movs	r2, #18
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6838      	ldr	r0, [r7, #0]
 8007a0e:	f7ff fadd 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f383 8811 	msr	BASEPRI, r3
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	200020b4 	.word	0x200020b4

08007a24 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a2e:	f04f 0120 	mov.w	r1, #32
 8007a32:	f381 8811 	msr	BASEPRI, r1
 8007a36:	607b      	str	r3, [r7, #4]
 8007a38:	4807      	ldr	r0, [pc, #28]	; (8007a58 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007a3a:	f7ff f9dd 	bl	8006df8 <_PreparePacket>
 8007a3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007a40:	2211      	movs	r2, #17
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6838      	ldr	r0, [r7, #0]
 8007a46:	f7ff fac1 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f383 8811 	msr	BASEPRI, r3
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200020b4 	.word	0x200020b4

08007a5c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a64:	f3ef 8311 	mrs	r3, BASEPRI
 8007a68:	f04f 0120 	mov.w	r1, #32
 8007a6c:	f381 8811 	msr	BASEPRI, r1
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	4819      	ldr	r0, [pc, #100]	; (8007ad8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007a74:	f7ff f9c0 	bl	8006df8 <_PreparePacket>
 8007a78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a7e:	4b17      	ldr	r3, [pc, #92]	; (8007adc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	61bb      	str	r3, [r7, #24]
 8007a90:	e00b      	b.n	8007aaa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	1c59      	adds	r1, r3, #1
 8007a9a:	61f9      	str	r1, [r7, #28]
 8007a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	09db      	lsrs	r3, r3, #7
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b7f      	cmp	r3, #127	; 0x7f
 8007aae:	d8f0      	bhi.n	8007a92 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	61fa      	str	r2, [r7, #28]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	6938      	ldr	r0, [r7, #16]
 8007ac6:	f7ff fa81 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f383 8811 	msr	BASEPRI, r3
}
 8007ad0:	bf00      	nop
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	200020b4 	.word	0x200020b4
 8007adc:	20002084 	.word	0x20002084

08007ae0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8007aec:	f04f 0120 	mov.w	r1, #32
 8007af0:	f381 8811 	msr	BASEPRI, r1
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	4819      	ldr	r0, [pc, #100]	; (8007b5c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007af8:	f7ff f97e 	bl	8006df8 <_PreparePacket>
 8007afc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	e00b      	b.n	8007b2e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	1c59      	adds	r1, r3, #1
 8007b1e:	61f9      	str	r1, [r7, #28]
 8007b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	09db      	lsrs	r3, r3, #7
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b7f      	cmp	r3, #127	; 0x7f
 8007b32:	d8f0      	bhi.n	8007b16 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	61fa      	str	r2, [r7, #28]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007b44:	2204      	movs	r2, #4
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	6938      	ldr	r0, [r7, #16]
 8007b4a:	f7ff fa3f 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f383 8811 	msr	BASEPRI, r3
}
 8007b54:	bf00      	nop
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	200020b4 	.word	0x200020b4
 8007b60:	20002084 	.word	0x20002084

08007b64 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b70:	f04f 0120 	mov.w	r1, #32
 8007b74:	f381 8811 	msr	BASEPRI, r1
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	4819      	ldr	r0, [pc, #100]	; (8007be0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007b7c:	f7ff f93c 	bl	8006df8 <_PreparePacket>
 8007b80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b86:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	e00b      	b.n	8007bb2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	1c59      	adds	r1, r3, #1
 8007ba2:	61f9      	str	r1, [r7, #28]
 8007ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	09db      	lsrs	r3, r3, #7
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb6:	d8f0      	bhi.n	8007b9a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	61fa      	str	r2, [r7, #28]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007bc8:	2206      	movs	r2, #6
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	6938      	ldr	r0, [r7, #16]
 8007bce:	f7ff f9fd 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f383 8811 	msr	BASEPRI, r3
}
 8007bd8:	bf00      	nop
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200020b4 	.word	0x200020b4
 8007be4:	20002084 	.word	0x20002084

08007be8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bf6:	f04f 0120 	mov.w	r1, #32
 8007bfa:	f381 8811 	msr	BASEPRI, r1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	4827      	ldr	r0, [pc, #156]	; (8007ca0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007c02:	f7ff f8f9 	bl	8006df8 <_PreparePacket>
 8007c06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	e00b      	b.n	8007c38 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	1c59      	adds	r1, r3, #1
 8007c28:	6279      	str	r1, [r7, #36]	; 0x24
 8007c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	09db      	lsrs	r3, r3, #7
 8007c36:	623b      	str	r3, [r7, #32]
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c3c:	d8f0      	bhi.n	8007c20 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	627a      	str	r2, [r7, #36]	; 0x24
 8007c44:	6a3a      	ldr	r2, [r7, #32]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e00b      	b.n	8007c70 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	1c59      	adds	r1, r3, #1
 8007c60:	61f9      	str	r1, [r7, #28]
 8007c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	09db      	lsrs	r3, r3, #7
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	2b7f      	cmp	r3, #127	; 0x7f
 8007c74:	d8f0      	bhi.n	8007c58 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	61fa      	str	r2, [r7, #28]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007c86:	2207      	movs	r2, #7
 8007c88:	68f9      	ldr	r1, [r7, #12]
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f7ff f99e 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f383 8811 	msr	BASEPRI, r3
}
 8007c96:	bf00      	nop
 8007c98:	3728      	adds	r7, #40	; 0x28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200020b4 	.word	0x200020b4
 8007ca4:	20002084 	.word	0x20002084

08007ca8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	1ad3      	subs	r3, r2, r3
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20002084 	.word	0x20002084

08007cc8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08c      	sub	sp, #48	; 0x30
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007cd2:	4b3b      	ldr	r3, [pc, #236]	; (8007dc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d06d      	beq.n	8007db6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007cda:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce4:	e008      	b.n	8007cf8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3f2      	bcc.n	8007ce6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007d00:	e000      	b.n	8007d04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007d02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d055      	beq.n	8007db6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d0e:	f04f 0120 	mov.w	r1, #32
 8007d12:	f381 8811 	msr	BASEPRI, r1
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	482a      	ldr	r0, [pc, #168]	; (8007dc4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007d1a:	f7ff f86d 	bl	8006df8 <_PreparePacket>
 8007d1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	e00b      	b.n	8007d46 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	1c59      	adds	r1, r3, #1
 8007d36:	6279      	str	r1, [r7, #36]	; 0x24
 8007d38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	09db      	lsrs	r3, r3, #7
 8007d44:	623b      	str	r3, [r7, #32]
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	2b7f      	cmp	r3, #127	; 0x7f
 8007d4a:	d8f0      	bhi.n	8007d2e <SEGGER_SYSVIEW_SendModule+0x66>
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	627a      	str	r2, [r7, #36]	; 0x24
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	e00b      	b.n	8007d80 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	1c59      	adds	r1, r3, #1
 8007d70:	61f9      	str	r1, [r7, #28]
 8007d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	09db      	lsrs	r3, r3, #7
 8007d7e:	61bb      	str	r3, [r7, #24]
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	2b7f      	cmp	r3, #127	; 0x7f
 8007d84:	d8f0      	bhi.n	8007d68 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	61fa      	str	r2, [r7, #28]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2280      	movs	r2, #128	; 0x80
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7fe ffde 	bl	8006d60 <_EncodeStr>
 8007da4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007da6:	2216      	movs	r2, #22
 8007da8:	68f9      	ldr	r1, [r7, #12]
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f7ff f90e 	bl	8006fcc <_SendPacket>
      RECORD_END();
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007db6:	bf00      	nop
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200020ac 	.word	0x200020ac
 8007dc4:	200020b4 	.word	0x200020b4

08007dc8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007dce:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00f      	beq.n	8007df6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f2      	bne.n	8007ddc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200020ac 	.word	0x200020ac

08007e04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e0e:	f04f 0120 	mov.w	r1, #32
 8007e12:	f381 8811 	msr	BASEPRI, r1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	4817      	ldr	r0, [pc, #92]	; (8007e78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007e1a:	f7fe ffed 	bl	8006df8 <_PreparePacket>
 8007e1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	e00b      	b.n	8007e48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	6179      	str	r1, [r7, #20]
 8007e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	09db      	lsrs	r3, r3, #7
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e4c:	d8f0      	bhi.n	8007e30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	617a      	str	r2, [r7, #20]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007e5e:	221b      	movs	r2, #27
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	68b8      	ldr	r0, [r7, #8]
 8007e64:	f7ff f8b2 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f383 8811 	msr	BASEPRI, r3
}
 8007e6e:	bf00      	nop
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200020b4 	.word	0x200020b4
 8007e7c:	200020b0 	.word	0x200020b0

08007e80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	; 0x28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e88:	f3ef 8311 	mrs	r3, BASEPRI
 8007e8c:	f04f 0120 	mov.w	r1, #32
 8007e90:	f381 8811 	msr	BASEPRI, r1
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	4827      	ldr	r0, [pc, #156]	; (8007f34 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007e98:	f7fe ffae 	bl	8006df8 <_PreparePacket>
 8007e9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e9e:	2280      	movs	r2, #128	; 0x80
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	6938      	ldr	r0, [r7, #16]
 8007ea4:	f7fe ff5c 	bl	8006d60 <_EncodeStr>
 8007ea8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
 8007eae:	2301      	movs	r3, #1
 8007eb0:	623b      	str	r3, [r7, #32]
 8007eb2:	e00b      	b.n	8007ecc <SEGGER_SYSVIEW_Warn+0x4c>
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	6279      	str	r1, [r7, #36]	; 0x24
 8007ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	09db      	lsrs	r3, r3, #7
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed0:	d8f0      	bhi.n	8007eb4 <SEGGER_SYSVIEW_Warn+0x34>
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	e00b      	b.n	8007f04 <SEGGER_SYSVIEW_Warn+0x84>
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	61f9      	str	r1, [r7, #28]
 8007ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	09db      	lsrs	r3, r3, #7
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b7f      	cmp	r3, #127	; 0x7f
 8007f08:	d8f0      	bhi.n	8007eec <SEGGER_SYSVIEW_Warn+0x6c>
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	61fa      	str	r2, [r7, #28]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007f1a:	221a      	movs	r2, #26
 8007f1c:	68f9      	ldr	r1, [r7, #12]
 8007f1e:	6938      	ldr	r0, [r7, #16]
 8007f20:	f7ff f854 	bl	8006fcc <_SendPacket>
  RECORD_END();
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f383 8811 	msr	BASEPRI, r3
}
 8007f2a:	bf00      	nop
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	200020b4 	.word	0x200020b4

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	4e0c      	ldr	r6, [pc, #48]	; (8007f70 <__libc_init_array+0x38>)
 8007f3e:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f40:	1ba4      	subs	r4, r4, r6
 8007f42:	10a4      	asrs	r4, r4, #2
 8007f44:	42a5      	cmp	r5, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	f000 f83c 	bl	8007fc4 <_init>
 8007f4c:	2500      	movs	r5, #0
 8007f4e:	4e0a      	ldr	r6, [pc, #40]	; (8007f78 <__libc_init_array+0x40>)
 8007f50:	4c0a      	ldr	r4, [pc, #40]	; (8007f7c <__libc_init_array+0x44>)
 8007f52:	1ba4      	subs	r4, r4, r6
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	42a5      	cmp	r5, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f60:	4798      	blx	r3
 8007f62:	3501      	adds	r5, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f6a:	4798      	blx	r3
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	080080d4 	.word	0x080080d4
 8007f74:	080080d4 	.word	0x080080d4
 8007f78:	080080d4 	.word	0x080080d4
 8007f7c:	080080d8 	.word	0x080080d8

08007f80 <memcmp>:
 8007f80:	b530      	push	{r4, r5, lr}
 8007f82:	2400      	movs	r4, #0
 8007f84:	42a2      	cmp	r2, r4
 8007f86:	d101      	bne.n	8007f8c <memcmp+0xc>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e007      	b.n	8007f9c <memcmp+0x1c>
 8007f8c:	5d03      	ldrb	r3, [r0, r4]
 8007f8e:	3401      	adds	r4, #1
 8007f90:	190d      	adds	r5, r1, r4
 8007f92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007f96:	42ab      	cmp	r3, r5
 8007f98:	d0f4      	beq.n	8007f84 <memcmp+0x4>
 8007f9a:	1b58      	subs	r0, r3, r5
 8007f9c:	bd30      	pop	{r4, r5, pc}

08007f9e <memcpy>:
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	1e43      	subs	r3, r0, #1
 8007fa2:	440a      	add	r2, r1
 8007fa4:	4291      	cmp	r1, r2
 8007fa6:	d100      	bne.n	8007faa <memcpy+0xc>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb2:	e7f7      	b.n	8007fa4 <memcpy+0x6>

08007fb4 <memset>:
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	4402      	add	r2, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
