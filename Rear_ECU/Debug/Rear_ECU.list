
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000833c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008544  08008544  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008544  08008544  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008544  08008544  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800854c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a0  20000010  0800855c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b0  0800855c  000223b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aef6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ec  00000000  00000000  0003af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0003e520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  0003fc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049d5  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001287b  00000000  00000000  00045bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086498  00000000  00000000  00058428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006394  00000000  00000000  000de93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08008434 	.word	0x08008434

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08008434 	.word	0x08008434

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20002308 	.word	0x20002308

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__aeabi_d2f>:
 8000978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000980:	bf24      	itt	cs
 8000982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098a:	d90d      	bls.n	80009a8 <__aeabi_d2f+0x30>
 800098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a0:	bf08      	it	eq
 80009a2:	f020 0001 	biceq.w	r0, r0, #1
 80009a6:	4770      	bx	lr
 80009a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009ac:	d121      	bne.n	80009f2 <__aeabi_d2f+0x7a>
 80009ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b2:	bfbc      	itt	lt
 80009b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	4770      	bxlt	lr
 80009ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c2:	f1c2 0218 	rsb	r2, r2, #24
 80009c6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	bf18      	it	ne
 80009d4:	f040 0001 	orrne.w	r0, r0, #1
 80009d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e4:	ea40 000c 	orr.w	r0, r0, ip
 80009e8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f0:	e7cc      	b.n	800098c <__aeabi_d2f+0x14>
 80009f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f6:	d107      	bne.n	8000a08 <__aeabi_d2f+0x90>
 80009f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009fc:	bf1e      	ittt	ne
 80009fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a06:	4770      	bxne	lr
 8000a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_frsub>:
 8000a18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a1c:	e002      	b.n	8000a24 <__addsf3>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_fsub>:
 8000a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a24 <__addsf3>:
 8000a24:	0042      	lsls	r2, r0, #1
 8000a26:	bf1f      	itttt	ne
 8000a28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a2c:	ea92 0f03 	teqne	r2, r3
 8000a30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a38:	d06a      	beq.n	8000b10 <__addsf3+0xec>
 8000a3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a42:	bfc1      	itttt	gt
 8000a44:	18d2      	addgt	r2, r2, r3
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	4048      	eorgt	r0, r1
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	bfb8      	it	lt
 8000a4e:	425b      	neglt	r3, r3
 8000a50:	2b19      	cmp	r3, #25
 8000a52:	bf88      	it	hi
 8000a54:	4770      	bxhi	lr
 8000a56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4249      	negne	r1, r1
 8000a76:	ea92 0f03 	teq	r2, r3
 8000a7a:	d03f      	beq.n	8000afc <__addsf3+0xd8>
 8000a7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a80:	fa41 fc03 	asr.w	ip, r1, r3
 8000a84:	eb10 000c 	adds.w	r0, r0, ip
 8000a88:	f1c3 0320 	rsb	r3, r3, #32
 8000a8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a94:	d502      	bpl.n	8000a9c <__addsf3+0x78>
 8000a96:	4249      	negs	r1, r1
 8000a98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa0:	d313      	bcc.n	8000aca <__addsf3+0xa6>
 8000aa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa6:	d306      	bcc.n	8000ab6 <__addsf3+0x92>
 8000aa8:	0840      	lsrs	r0, r0, #1
 8000aaa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aae:	f102 0201 	add.w	r2, r2, #1
 8000ab2:	2afe      	cmp	r2, #254	; 0xfe
 8000ab4:	d251      	bcs.n	8000b5a <__addsf3+0x136>
 8000ab6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000abe:	bf08      	it	eq
 8000ac0:	f020 0001 	biceq.w	r0, r0, #1
 8000ac4:	ea40 0003 	orr.w	r0, r0, r3
 8000ac8:	4770      	bx	lr
 8000aca:	0049      	lsls	r1, r1, #1
 8000acc:	eb40 0000 	adc.w	r0, r0, r0
 8000ad0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ad4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad8:	d1ed      	bne.n	8000ab6 <__addsf3+0x92>
 8000ada:	fab0 fc80 	clz	ip, r0
 8000ade:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aea:	bfaa      	itet	ge
 8000aec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af0:	4252      	neglt	r2, r2
 8000af2:	4318      	orrge	r0, r3
 8000af4:	bfbc      	itt	lt
 8000af6:	40d0      	lsrlt	r0, r2
 8000af8:	4318      	orrlt	r0, r3
 8000afa:	4770      	bx	lr
 8000afc:	f092 0f00 	teq	r2, #0
 8000b00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b04:	bf06      	itte	eq
 8000b06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0a:	3201      	addeq	r2, #1
 8000b0c:	3b01      	subne	r3, #1
 8000b0e:	e7b5      	b.n	8000a7c <__addsf3+0x58>
 8000b10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b18:	bf18      	it	ne
 8000b1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1e:	d021      	beq.n	8000b64 <__addsf3+0x140>
 8000b20:	ea92 0f03 	teq	r2, r3
 8000b24:	d004      	beq.n	8000b30 <__addsf3+0x10c>
 8000b26:	f092 0f00 	teq	r2, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	4608      	moveq	r0, r1
 8000b2e:	4770      	bx	lr
 8000b30:	ea90 0f01 	teq	r0, r1
 8000b34:	bf1c      	itt	ne
 8000b36:	2000      	movne	r0, #0
 8000b38:	4770      	bxne	lr
 8000b3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3e:	d104      	bne.n	8000b4a <__addsf3+0x126>
 8000b40:	0040      	lsls	r0, r0, #1
 8000b42:	bf28      	it	cs
 8000b44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	4770      	bx	lr
 8000b4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4e:	bf3c      	itt	cc
 8000b50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bxcc	lr
 8000b56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b62:	4770      	bx	lr
 8000b64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b68:	bf16      	itet	ne
 8000b6a:	4608      	movne	r0, r1
 8000b6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b70:	4601      	movne	r1, r0
 8000b72:	0242      	lsls	r2, r0, #9
 8000b74:	bf06      	itte	eq
 8000b76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7a:	ea90 0f01 	teqeq	r0, r1
 8000b7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_ui2f>:
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e004      	b.n	8000b94 <__aeabi_i2f+0x8>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_i2f>:
 8000b8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	bf48      	it	mi
 8000b92:	4240      	negmi	r0, r0
 8000b94:	ea5f 0c00 	movs.w	ip, r0
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	e01c      	b.n	8000be2 <__aeabi_l2f+0x2a>

08000ba8 <__aeabi_ul2f>:
 8000ba8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e00a      	b.n	8000bcc <__aeabi_l2f+0x14>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_l2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__aeabi_l2f+0x14>
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	ea5f 0c01 	movs.w	ip, r1
 8000bd0:	bf02      	ittt	eq
 8000bd2:	4684      	moveq	ip, r0
 8000bd4:	4601      	moveq	r1, r0
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bdc:	bf08      	it	eq
 8000bde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be6:	fabc f28c 	clz	r2, ip
 8000bea:	3a08      	subs	r2, #8
 8000bec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf0:	db10      	blt.n	8000c14 <__aeabi_l2f+0x5c>
 8000bf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfc:	f1c2 0220 	rsb	r2, r2, #32
 8000c00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c04:	fa20 f202 	lsr.w	r2, r0, r2
 8000c08:	eb43 0002 	adc.w	r0, r3, r2
 8000c0c:	bf08      	it	eq
 8000c0e:	f020 0001 	biceq.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	f102 0220 	add.w	r2, r2, #32
 8000c18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1c:	f1c2 0220 	rsb	r2, r2, #32
 8000c20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c24:	fa21 f202 	lsr.w	r2, r1, r2
 8000c28:	eb43 0002 	adc.w	r0, r3, r2
 8000c2c:	bf08      	it	eq
 8000c2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_fmul>:
 8000c34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c42:	ea92 0f0c 	teqne	r2, ip
 8000c46:	ea93 0f0c 	teqne	r3, ip
 8000c4a:	d06f      	beq.n	8000d2c <__aeabi_fmul+0xf8>
 8000c4c:	441a      	add	r2, r3
 8000c4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c52:	0240      	lsls	r0, r0, #9
 8000c54:	bf18      	it	ne
 8000c56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5a:	d01e      	beq.n	8000c9a <__aeabi_fmul+0x66>
 8000c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c68:	fba0 3101 	umull	r3, r1, r0, r1
 8000c6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c74:	bf3e      	ittt	cc
 8000c76:	0049      	lslcc	r1, r1, #1
 8000c78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c7c:	005b      	lslcc	r3, r3, #1
 8000c7e:	ea40 0001 	orr.w	r0, r0, r1
 8000c82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c86:	2afd      	cmp	r2, #253	; 0xfd
 8000c88:	d81d      	bhi.n	8000cc6 <__aeabi_fmul+0x92>
 8000c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c92:	bf08      	it	eq
 8000c94:	f020 0001 	biceq.w	r0, r0, #1
 8000c98:	4770      	bx	lr
 8000c9a:	f090 0f00 	teq	r0, #0
 8000c9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca2:	bf08      	it	eq
 8000ca4:	0249      	lsleq	r1, r1, #9
 8000ca6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000caa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cae:	3a7f      	subs	r2, #127	; 0x7f
 8000cb0:	bfc2      	ittt	gt
 8000cb2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cb6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cba:	4770      	bxgt	lr
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	3a01      	subs	r2, #1
 8000cc6:	dc5d      	bgt.n	8000d84 <__aeabi_fmul+0x150>
 8000cc8:	f112 0f19 	cmn.w	r2, #25
 8000ccc:	bfdc      	itt	le
 8000cce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd2:	4770      	bxle	lr
 8000cd4:	f1c2 0200 	rsb	r2, r2, #0
 8000cd8:	0041      	lsls	r1, r0, #1
 8000cda:	fa21 f102 	lsr.w	r1, r1, r2
 8000cde:	f1c2 0220 	rsb	r2, r2, #32
 8000ce2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cea:	f140 0000 	adc.w	r0, r0, #0
 8000cee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf2:	bf08      	it	eq
 8000cf4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf8:	4770      	bx	lr
 8000cfa:	f092 0f00 	teq	r2, #0
 8000cfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d02:	bf02      	ittt	eq
 8000d04:	0040      	lsleq	r0, r0, #1
 8000d06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0a:	3a01      	subeq	r2, #1
 8000d0c:	d0f9      	beq.n	8000d02 <__aeabi_fmul+0xce>
 8000d0e:	ea40 000c 	orr.w	r0, r0, ip
 8000d12:	f093 0f00 	teq	r3, #0
 8000d16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	bf02      	ittt	eq
 8000d1c:	0049      	lsleq	r1, r1, #1
 8000d1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d22:	3b01      	subeq	r3, #1
 8000d24:	d0f9      	beq.n	8000d1a <__aeabi_fmul+0xe6>
 8000d26:	ea41 010c 	orr.w	r1, r1, ip
 8000d2a:	e78f      	b.n	8000c4c <__aeabi_fmul+0x18>
 8000d2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d30:	ea92 0f0c 	teq	r2, ip
 8000d34:	bf18      	it	ne
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d00a      	beq.n	8000d52 <__aeabi_fmul+0x11e>
 8000d3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d40:	bf18      	it	ne
 8000d42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d46:	d1d8      	bne.n	8000cfa <__aeabi_fmul+0xc6>
 8000d48:	ea80 0001 	eor.w	r0, r0, r1
 8000d4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d50:	4770      	bx	lr
 8000d52:	f090 0f00 	teq	r0, #0
 8000d56:	bf17      	itett	ne
 8000d58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	f091 0f00 	teqne	r1, #0
 8000d62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d66:	d014      	beq.n	8000d92 <__aeabi_fmul+0x15e>
 8000d68:	ea92 0f0c 	teq	r2, ip
 8000d6c:	d101      	bne.n	8000d72 <__aeabi_fmul+0x13e>
 8000d6e:	0242      	lsls	r2, r0, #9
 8000d70:	d10f      	bne.n	8000d92 <__aeabi_fmul+0x15e>
 8000d72:	ea93 0f0c 	teq	r3, ip
 8000d76:	d103      	bne.n	8000d80 <__aeabi_fmul+0x14c>
 8000d78:	024b      	lsls	r3, r1, #9
 8000d7a:	bf18      	it	ne
 8000d7c:	4608      	movne	r0, r1
 8000d7e:	d108      	bne.n	8000d92 <__aeabi_fmul+0x15e>
 8000d80:	ea80 0001 	eor.w	r0, r0, r1
 8000d84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bx	lr
 8000d92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_fdiv>:
 8000d9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da4:	bf1e      	ittt	ne
 8000da6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000daa:	ea92 0f0c 	teqne	r2, ip
 8000dae:	ea93 0f0c 	teqne	r3, ip
 8000db2:	d069      	beq.n	8000e88 <__aeabi_fdiv+0xec>
 8000db4:	eba2 0203 	sub.w	r2, r2, r3
 8000db8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dbc:	0249      	lsls	r1, r1, #9
 8000dbe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc2:	d037      	beq.n	8000e34 <__aeabi_fdiv+0x98>
 8000dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dcc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	bf38      	it	cc
 8000dd8:	005b      	lslcc	r3, r3, #1
 8000dda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dde:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de2:	428b      	cmp	r3, r1
 8000de4:	bf24      	itt	cs
 8000de6:	1a5b      	subcs	r3, r3, r1
 8000de8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000df6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dfe:	bf24      	itt	cs
 8000e00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	bf18      	it	ne
 8000e1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e1e:	d1e0      	bne.n	8000de2 <__aeabi_fdiv+0x46>
 8000e20:	2afd      	cmp	r2, #253	; 0xfd
 8000e22:	f63f af50 	bhi.w	8000cc6 <__aeabi_fmul+0x92>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3c:	327f      	adds	r2, #127	; 0x7f
 8000e3e:	bfc2      	ittt	gt
 8000e40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e48:	4770      	bxgt	lr
 8000e4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	3a01      	subs	r2, #1
 8000e54:	e737      	b.n	8000cc6 <__aeabi_fmul+0x92>
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5e:	bf02      	ittt	eq
 8000e60:	0040      	lsleq	r0, r0, #1
 8000e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e66:	3a01      	subeq	r2, #1
 8000e68:	d0f9      	beq.n	8000e5e <__aeabi_fdiv+0xc2>
 8000e6a:	ea40 000c 	orr.w	r0, r0, ip
 8000e6e:	f093 0f00 	teq	r3, #0
 8000e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0049      	lsleq	r1, r1, #1
 8000e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7e:	3b01      	subeq	r3, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fdiv+0xda>
 8000e82:	ea41 010c 	orr.w	r1, r1, ip
 8000e86:	e795      	b.n	8000db4 <__aeabi_fdiv+0x18>
 8000e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d108      	bne.n	8000ea4 <__aeabi_fdiv+0x108>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	f47f af7d 	bne.w	8000d92 <__aeabi_fmul+0x15e>
 8000e98:	ea93 0f0c 	teq	r3, ip
 8000e9c:	f47f af70 	bne.w	8000d80 <__aeabi_fmul+0x14c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e776      	b.n	8000d92 <__aeabi_fmul+0x15e>
 8000ea4:	ea93 0f0c 	teq	r3, ip
 8000ea8:	d104      	bne.n	8000eb4 <__aeabi_fdiv+0x118>
 8000eaa:	024b      	lsls	r3, r1, #9
 8000eac:	f43f af4c 	beq.w	8000d48 <__aeabi_fmul+0x114>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e76e      	b.n	8000d92 <__aeabi_fmul+0x15e>
 8000eb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb8:	bf18      	it	ne
 8000eba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ebe:	d1ca      	bne.n	8000e56 <__aeabi_fdiv+0xba>
 8000ec0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec4:	f47f af5c 	bne.w	8000d80 <__aeabi_fmul+0x14c>
 8000ec8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ecc:	f47f af3c 	bne.w	8000d48 <__aeabi_fmul+0x114>
 8000ed0:	e75f      	b.n	8000d92 <__aeabi_fmul+0x15e>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_f2uiz>:
 8000ed4:	0042      	lsls	r2, r0, #1
 8000ed6:	d20e      	bcs.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ed8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000edc:	d30b      	bcc.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ede:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ee2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee6:	d409      	bmi.n	8000efc <__aeabi_f2uiz+0x28>
 8000ee8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr
 8000efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f00:	d101      	bne.n	8000f06 <__aeabi_f2uiz+0x32>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d102      	bne.n	8000f0c <__aeabi_f2uiz+0x38>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	4770      	bx	lr
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <vApplicationGetIdleTaskMemory+0x28>)
 8000f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	2000002c 	.word	0x2000002c
 8000f40:	20000080 	.word	0x20000080

08000f44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f4a:	b662      	cpsie	i
	/* MCU Configuration--------------------------------------------------------*/
	__enable_irq();
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4c:	f001 f8dc 	bl	8002108 <HAL_Init>

	HAL_Delay(2000);
 8000f50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f54:	f001 f90a 	bl	800216c <HAL_Delay>
	/* Configure the system clock */
	SystemClock_Config();
 8000f58:	f000 f848 	bl	8000fec <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5c:	f000 f98e 	bl	800127c <MX_GPIO_Init>
	MX_DMA_Init();
 8000f60:	f000 f96e 	bl	8001240 <MX_DMA_Init>
	MX_ADC1_Init();
 8000f64:	f000 f89e 	bl	80010a4 <MX_ADC1_Init>
	MX_CAN_Init();
 8000f68:	f000 f906 	bl	8001178 <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	MX_I2C2_Init();
 8000f6c:	f000 f93a 	bl	80011e4 <MX_I2C2_Init>

	DWT_CTRL |= (1 << 0);
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <main+0x8c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <main+0x8c>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

	//OD = Flash_Read_NUM(0x0801FC00);

	CAN_Filter_Config();
 8000f7c:	f000 fa62 	bl	8001444 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 8000f80:	f240 4101 	movw	r1, #1025	; 0x401
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <main+0x90>)
 8000f86:	f001 ffb1 	bl	8002eec <HAL_CAN_ActivateNotification>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <main+0x50>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 8000f90:	f000 fe5c 	bl	8001c4c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <main+0x90>)
 8000f96:	f001 fe8b 	bl	8002cb0 <HAL_CAN_Start>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x60>
		Error_Handler();
 8000fa0:	f000 fe54 	bl	8001c4c <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 4);
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <main+0x94>)
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <main+0x98>)
 8000faa:	f001 f9d9 	bl	8002360 <HAL_ADC_Start_DMA>

	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();

	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x9c>)
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <main+0xa0>)
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <main+0xa4>)
 8000fbe:	f004 fc7a 	bl	80058b6 <xTaskCreate>

	vTaskStartScheduler();
 8000fc2:	f004 ff15 	bl	8005df0 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f001 f8d0 	bl	800216c <HAL_Delay>
 8000fcc:	e7fb      	b.n	8000fc6 <main+0x82>
 8000fce:	bf00      	nop
 8000fd0:	e0001000 	.word	0xe0001000
 8000fd4:	20002210 	.word	0x20002210
 8000fd8:	200021a4 	.word	0x200021a4
 8000fdc:	20002240 	.word	0x20002240
 8000fe0:	200022c0 	.word	0x200022c0
 8000fe4:	0800844c 	.word	0x0800844c
 8000fe8:	08001491 	.word	0x08001491

08000fec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fa12 	bl	8008424 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2301      	movs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001038:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb46 	bl	80046d4 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x66>
		Error_Handler();
 800104e:	f000 fdfd 	bl	8001c4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fdb0 	bl	8004bd4 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x92>
		Error_Handler();
 800107a:	f000 fde7 	bl	8001c4c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107e:	2302      	movs	r3, #2
 8001080:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001086:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f003 ff6e 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xae>
		Error_Handler();
 8001096:	f000 fdd9 	bl	8001c4c <Error_Handler>
	}
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <MX_ADC1_Init+0xd0>)
 80010b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010d4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010de:	2204      	movs	r2, #4
 80010e0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <MX_ADC1_Init+0xcc>)
 80010e4:	f001 f864 	bl	80021b0 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x4e>
		Error_Handler();
 80010ee:	f000 fdad 	bl	8001c4c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010fa:	2306      	movs	r3, #6
 80010fc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <MX_ADC1_Init+0xcc>)
 8001104:	f001 fa26 	bl	8002554 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800110e:	f000 fd9d 	bl	8001c4c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_ADC1_Init+0xcc>)
 8001120:	f001 fa18 	bl	8002554 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x8a>
		Error_Handler();
 800112a:	f000 fd8f 	bl	8001c4c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800112e:	2308      	movs	r3, #8
 8001130:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001132:	2303      	movs	r3, #3
 8001134:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC1_Init+0xcc>)
 800113c:	f001 fa0a 	bl	8002554 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001146:	f000 fd81 	bl	8001c4c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800114a:	2309      	movs	r3, #9
 800114c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800114e:	2304      	movs	r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_ADC1_Init+0xcc>)
 8001158:	f001 f9fc 	bl	8002554 <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0xc2>
		Error_Handler();
 8001162:	f000 fd73 	bl	8001c4c <Error_Handler>
	}
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20002240 	.word	0x20002240
 8001174:	40012400 	.word	0x40012400

08001178 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_CAN_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_CAN_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_CAN_Init+0x64>)
 8001184:	2209      	movs	r2, #9
 8001186:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_CAN_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_CAN_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_CAN_Init+0x64>)
 8001196:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800119a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_CAN_Init+0x64>)
 800119e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011a2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MX_CAN_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_CAN_Init+0x64>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_CAN_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_CAN_Init+0x64>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_CAN_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_CAN_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_CAN_Init+0x64>)
 80011ca:	f001 fbad 	bl	8002928 <HAL_CAN_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_CAN_Init+0x60>
		Error_Handler();
 80011d4:	f000 fd3a 	bl	8001c4c <Error_Handler>
	}
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20002210 	.word	0x20002210
 80011e0:	40006400 	.word	0x40006400

080011e4 <MX_I2C2_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c2.Instance = I2C2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C2_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C2_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C2_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C2_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C2_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C2_Init+0x50>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C2_Init+0x50>)
 8001222:	f002 fd1f 	bl	8003c64 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800122c:	f000 fd0e 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200021b0 	.word	0x200021b0
 8001238:	40005800 	.word	0x40005800
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_DMA_Init+0x38>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <MX_DMA_Init+0x38>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_DMA_Init+0x38>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2105      	movs	r1, #5
 8001262:	200b      	movs	r0, #11
 8001264:	f002 f943 	bl	80034ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001268:	200b      	movs	r0, #11
 800126a:	f002 f95c 	bl	8003526 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <MX_GPIO_Init+0x1b4>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <MX_GPIO_Init+0x1b4>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b64      	ldr	r3, [pc, #400]	; (8001430 <MX_GPIO_Init+0x1b4>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b61      	ldr	r3, [pc, #388]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a60      	ldr	r2, [pc, #384]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <MX_GPIO_Init+0x1b4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	484f      	ldr	r0, [pc, #316]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012f8:	f002 fc83 	bl	8003c02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001302:	484c      	ldr	r0, [pc, #304]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001304:	f002 fc7d 	bl	8003c02 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130e:	484a      	ldr	r0, [pc, #296]	; (8001438 <MX_GPIO_Init+0x1bc>)
 8001310:	f002 fc77 	bl	8003c02 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2108      	movs	r1, #8
 8001318:	4848      	ldr	r0, [pc, #288]	; (800143c <MX_GPIO_Init+0x1c0>)
 800131a:	f002 fc72 	bl	8003c02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4846      	ldr	r0, [pc, #280]	; (800143c <MX_GPIO_Init+0x1c0>)
 8001324:	f002 fc6d 	bl	8003c02 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2302      	movs	r3, #2
 8001338:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	483c      	ldr	r0, [pc, #240]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001342:	f002 faed 	bl	8003920 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001360:	f002 fade 	bl	8003920 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001368:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	482e      	ldr	r0, [pc, #184]	; (8001438 <MX_GPIO_Init+0x1bc>)
 800137e:	f002 facf 	bl	8003920 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <MX_GPIO_Init+0x1c4>)
 800138a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <MX_GPIO_Init+0x1bc>)
 8001398:	f002 fac2 	bl	8003920 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	210f      	movs	r1, #15
 80013a0:	2028      	movs	r0, #40	; 0x28
 80013a2:	f002 f8a4 	bl	80034ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013a6:	2028      	movs	r0, #40	; 0x28
 80013a8:	f002 f8bd 	bl	8003526 <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_GPIO_Init+0x1c4>)
 80013b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <MX_GPIO_Init+0x1bc>)
 80013c2:	f002 faad 	bl	8003920 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210f      	movs	r1, #15
 80013ca:	2017      	movs	r0, #23
 80013cc:	f002 f88f 	bl	80034ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013d0:	2017      	movs	r0, #23
 80013d2:	f002 f8a8 	bl	8003526 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d6:	2308      	movs	r3, #8
 80013d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_GPIO_Init+0x1c0>)
 80013ee:	f002 fa97 	bl	8003920 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2302      	movs	r3, #2
 8001400:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_GPIO_Init+0x1c0>)
 800140a:	f002 fa89 	bl	8003920 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140e:	2310      	movs	r3, #16
 8001410:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_GPIO_Init+0x1c0>)
 8001422:	f002 fa7d 	bl	8003920 <HAL_GPIO_Init>

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40011000 	.word	0x40011000
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00
 8001440:	10210000 	.word	0x10210000

08001444 <CAN_Filter_Config>:
//	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
//	p_rpm += 1;
//}

/*Configure can filters */
void CAN_Filter_Config(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <CAN_Filter_Config+0x48>)
 8001474:	f001 fb53 	bl	8002b1e <HAL_CAN_ConfigFilter>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <CAN_Filter_Config+0x3e>
		Error_Handler();
 800147e:	f000 fbe5 	bl	8001c4c <Error_Handler>
	}
}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20002210 	.word	0x20002210

08001490 <Start_taskF>:

void Start_taskF(void *pvParameters) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 8001498:	2203      	movs	r2, #3
 800149a:	2100      	movs	r1, #0
 800149c:	2001      	movs	r0, #1
 800149e:	f004 f94f 	bl	8005740 <xQueueGenericCreate>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <Start_taskF+0xd0>)
 80014a6:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f004 fc69 	bl	8005d80 <vTaskDelay>
	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <Start_taskF+0xd4>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2304      	movs	r3, #4
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	492b      	ldr	r1, [pc, #172]	; (8001568 <Start_taskF+0xd8>)
 80014bc:	482b      	ldr	r0, [pc, #172]	; (800156c <Start_taskF+0xdc>)
 80014be:	f004 f9fa 	bl	80058b6 <xTaskCreate>
	vTaskDelay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f004 fc5c 	bl	8005d80 <vTaskDelay>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <Start_taskF+0xe0>)
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	2304      	movs	r3, #4
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	4927      	ldr	r1, [pc, #156]	; (8001574 <Start_taskF+0xe4>)
 80014d6:	4828      	ldr	r0, [pc, #160]	; (8001578 <Start_taskF+0xe8>)
 80014d8:	f004 f9ed 	bl	80058b6 <xTaskCreate>
	vTaskDelay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f004 fc4f 	bl	8005d80 <vTaskDelay>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <Start_taskF+0xec>)
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2304      	movs	r3, #4
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	4924      	ldr	r1, [pc, #144]	; (8001580 <Start_taskF+0xf0>)
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <Start_taskF+0xf4>)
 80014f2:	f004 f9e0 	bl	80058b6 <xTaskCreate>
	vTaskDelay(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f004 fc42 	bl	8005d80 <vTaskDelay>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <Start_taskF+0xf8>)
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2305      	movs	r3, #5
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	4920      	ldr	r1, [pc, #128]	; (800158c <Start_taskF+0xfc>)
 800150a:	4821      	ldr	r0, [pc, #132]	; (8001590 <Start_taskF+0x100>)
 800150c:	f004 f9d3 	bl	80058b6 <xTaskCreate>
	vTaskDelay(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f004 fc35 	bl	8005d80 <vTaskDelay>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <Start_taskF+0x104>)
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2304      	movs	r3, #4
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	491d      	ldr	r1, [pc, #116]	; (8001598 <Start_taskF+0x108>)
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <Start_taskF+0x10c>)
 8001526:	f004 f9c6 	bl	80058b6 <xTaskCreate>
	vTaskDelay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f004 fc28 	bl	8005d80 <vTaskDelay>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 2, &OD_Task);
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <Start_taskF+0x110>)
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2302      	movs	r3, #2
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	4919      	ldr	r1, [pc, #100]	; (80015a4 <Start_taskF+0x114>)
 800153e:	481a      	ldr	r0, [pc, #104]	; (80015a8 <Start_taskF+0x118>)
 8001540:	f004 f9b9 	bl	80058b6 <xTaskCreate>

	if (Start_Task != NULL) {
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <Start_taskF+0x11c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <Start_taskF+0xc6>
		vTaskDelete(Start_Task);
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <Start_taskF+0x11c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fafb 	bl	8005b4c <vTaskDelete>
	}

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000220c 	.word	0x2000220c
 8001564:	20002238 	.word	0x20002238
 8001568:	08008458 	.word	0x08008458
 800156c:	080015b1 	.word	0x080015b1
 8001570:	20002208 	.word	0x20002208
 8001574:	08008460 	.word	0x08008460
 8001578:	08001681 	.word	0x08001681
 800157c:	2000223c 	.word	0x2000223c
 8001580:	0800846c 	.word	0x0800846c
 8001584:	080018f5 	.word	0x080018f5
 8001588:	200022bc 	.word	0x200022bc
 800158c:	08008478 	.word	0x08008478
 8001590:	08001a61 	.word	0x08001a61
 8001594:	20002204 	.word	0x20002204
 8001598:	08008484 	.word	0x08008484
 800159c:	080019b5 	.word	0x080019b5
 80015a0:	200021ac 	.word	0x200021ac
 80015a4:	0800848c 	.word	0x0800848c
 80015a8:	08001bc5 	.word	0x08001bc5
 80015ac:	200022c0 	.word	0x200022c0

080015b0 <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b092      	sub	sp, #72	; 0x48
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;  //Ticks to wait since routine starts
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
	xLastWakeTime = xTaskGetTickCount();
 80015be:	f004 fd23 	bl	8006008 <xTaskGetTickCount>
 80015c2:	4603      	mov	r3, r0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		uint8_t batbuff[2];
		uint16_t batAD = analog[0];
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <Bat_taskF+0xb8>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		float bat_a = 0.0004502626;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <Bat_taskF+0xbc>)
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		float bat_b = 2.4948762146;
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <Bat_taskF+0xc0>)
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
		float bat_v =  30*(((float)batAD * bat_a) + bat_b);
 80015d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fad2 	bl	8000b84 <__aeabi_ui2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fb25 	bl	8000c34 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fa18 	bl	8000a24 <__addsf3>
 80015f4:	4603      	mov	r3, r0
 80015f6:	491f      	ldr	r1, [pc, #124]	; (8001674 <Bat_taskF+0xc4>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb1b 	bl	8000c34 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
		uint16_t batCAN = (uint16_t) bat_v;
 8001602:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001604:	f7ff fc66 	bl	8000ed4 <__aeabi_f2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	867b      	strh	r3, [r7, #50]	; 0x32

		batbuff[0] = (uint8_t) (batCAN >> 8) & 0xFF;
 800160c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b29b      	uxth	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		batbuff[1] = (uint8_t) batCAN & 0xFF;
 8001618:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;
		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
		BatHeader.StdId = 0x650;
 8001624:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8001628:	60fb      	str	r3, [r7, #12]
		BatHeader.IDE = CAN_ID_STD;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
		BatHeader.RTR = CAN_RTR_DATA;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	f107 010c 	add.w	r1, r7, #12
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <Bat_taskF+0xc8>)
 8001640:	f001 fb7a 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <Bat_taskF+0x9e>
				!= HAL_OK) {
			Error_Handler();
 800164a:	f000 faff 	bl	8001c4c <Error_Handler>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <Bat_taskF+0xcc>)
 8001654:	f002 faed 	bl	8003c32 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*1Hz frequency*/
 8001658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb10 	bl	8005c84 <vTaskDelayUntil>
	while (1) {
 8001664:	e7af      	b.n	80015c6 <Bat_taskF+0x16>
 8001666:	bf00      	nop
 8001668:	200021a4 	.word	0x200021a4
 800166c:	39ec1139 	.word	0x39ec1139
 8001670:	401fac0d 	.word	0x401fac0d
 8001674:	41f00000 	.word	0x41f00000
 8001678:	20002210 	.word	0x20002210
 800167c:	40011000 	.word	0x40011000

08001680 <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b09e      	sub	sp, #120	; 0x78
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;  //Ticks to wait since routine starts
 8001688:	2314      	movs	r3, #20
 800168a:	677b      	str	r3, [r7, #116]	; 0x74
	xLastWakeTime = xTaskGetTickCount();
 800168c:	f004 fcbc 	bl	8006008 <xTaskGetTickCount>
 8001690:	4603      	mov	r3, r0
 8001692:	66bb      	str	r3, [r7, #104]	; 0x68
	while (1) {
		uint8_t fuelbuff[2];
		uint8_t fuelbuff1[2];
		uint8_t fuelbuff2[2];

		uint16_t fuel_a = analog[1];
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <Fuel_taskF+0x260>)
 8001696:	885b      	ldrh	r3, [r3, #2]
 8001698:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		fuel_f =  0.998744152176286*fuel_f  + (1-0.998744152176286) * (float)fuel_a;
 800169c:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <Fuel_taskF+0x264>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe feff 	bl	80004a4 <__aeabi_f2d>
 80016a6:	a382      	add	r3, pc, #520	; (adr r3, 80018b0 <Fuel_taskF+0x230>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ff52 	bl	8000554 <__aeabi_dmul>
 80016b0:	4603      	mov	r3, r0
 80016b2:	460c      	mov	r4, r1
 80016b4:	4625      	mov	r5, r4
 80016b6:	461c      	mov	r4, r3
 80016b8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fa61 	bl	8000b84 <__aeabi_ui2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feed 	bl	80004a4 <__aeabi_f2d>
 80016ca:	a37b      	add	r3, pc, #492	; (adr r3, 80018b8 <Fuel_taskF+0x238>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff40 	bl	8000554 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fd84 	bl	80001e8 <__adddf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	4618      	mov	r0, r3
 80016e6:	4621      	mov	r1, r4
 80016e8:	f7ff f946 	bl	8000978 <__aeabi_d2f>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <Fuel_taskF+0x264>)
 80016f0:	601a      	str	r2, [r3, #0]
		fuel_f1 = 0.999874344189209*fuel_f1 + (1-0.999874344189209) * (float)fuel_a;
 80016f2:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <Fuel_taskF+0x268>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fed4 	bl	80004a4 <__aeabi_f2d>
 80016fc:	a370      	add	r3, pc, #448	; (adr r3, 80018c0 <Fuel_taskF+0x240>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff27 	bl	8000554 <__aeabi_dmul>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4625      	mov	r5, r4
 800170c:	461c      	mov	r4, r3
 800170e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa36 	bl	8000b84 <__aeabi_ui2f>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fec2 	bl	80004a4 <__aeabi_f2d>
 8001720:	a369      	add	r3, pc, #420	; (adr r3, 80018c8 <Fuel_taskF+0x248>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff15 	bl	8000554 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fd59 	bl	80001e8 <__adddf3>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	4618      	mov	r0, r3
 800173c:	4621      	mov	r1, r4
 800173e:	f7ff f91b 	bl	8000978 <__aeabi_d2f>
 8001742:	4602      	mov	r2, r0
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <Fuel_taskF+0x268>)
 8001746:	601a      	str	r2, [r3, #0]
		fuel_f2 = 0.999987433708342*fuel_f2 + (1-0.999987433708342) * (float)fuel_a;
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <Fuel_taskF+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fea9 	bl	80004a4 <__aeabi_f2d>
 8001752:	a35f      	add	r3, pc, #380	; (adr r3, 80018d0 <Fuel_taskF+0x250>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe fefc 	bl	8000554 <__aeabi_dmul>
 800175c:	4603      	mov	r3, r0
 800175e:	460c      	mov	r4, r1
 8001760:	4625      	mov	r5, r4
 8001762:	461c      	mov	r4, r3
 8001764:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fa0b 	bl	8000b84 <__aeabi_ui2f>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe97 	bl	80004a4 <__aeabi_f2d>
 8001776:	a358      	add	r3, pc, #352	; (adr r3, 80018d8 <Fuel_taskF+0x258>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe feea 	bl	8000554 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fd2e 	bl	80001e8 <__adddf3>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	f7ff f8f0 	bl	8000978 <__aeabi_d2f>
 8001798:	4602      	mov	r2, r0
 800179a:	4b54      	ldr	r3, [pc, #336]	; (80018ec <Fuel_taskF+0x26c>)
 800179c:	601a      	str	r2, [r3, #0]

		uint16_t fuel_c = (uint16_t)fuel_f;
 800179e:	4b51      	ldr	r3, [pc, #324]	; (80018e4 <Fuel_taskF+0x264>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fb96 	bl	8000ed4 <__aeabi_f2uiz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		uint16_t fuel_c1 = (uint16_t)fuel_f1;
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <Fuel_taskF+0x268>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb8e 	bl	8000ed4 <__aeabi_f2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		uint16_t fuel_c2 = (uint16_t)fuel_f2;
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <Fuel_taskF+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fb86 	bl	8000ed4 <__aeabi_f2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

		fuelbuff[0] = (uint8_t) (fuel_c >> 8) & 0xFF;
 80017ce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		fuelbuff[1] = (uint8_t) fuel_c & 0xFF;
 80017dc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

		fuelbuff1[0] = (uint8_t) (fuel_c1 >> 8) & 0xFF;
 80017e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		fuelbuff1[1] = (uint8_t) fuel_c1 & 0xFF;
 80017f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

		fuelbuff2[0] = (uint8_t) (fuel_c2 >> 8) & 0xFF;
 80017fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		fuelbuff2[1] = (uint8_t) fuel_c2 & 0xFF;
 800180c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 8001816:	2302      	movs	r3, #2
 8001818:	653b      	str	r3, [r7, #80]	; 0x50
		FuelHeader.StdId = 0x652;
 800181a:	f240 6352 	movw	r3, #1618	; 0x652
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
		FuelHeader.IDE = CAN_ID_STD;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
		FuelHeader.RTR = CAN_RTR_DATA;
 8001824:	2300      	movs	r3, #0
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 8001828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800182c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001834:	482e      	ldr	r0, [pc, #184]	; (80018f0 <Fuel_taskF+0x270>)
 8001836:	f001 fa7f 	bl	8002d38 <HAL_CAN_AddTxMessage>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <Fuel_taskF+0x1c4>
				!= HAL_OK) {
			Error_Handler();
 8001840:	f000 fa04 	bl	8001c4c <Error_Handler>

		uint32_t TxMailbox1;

		CAN_TxHeaderTypeDef FuelHeader1;

		FuelHeader.DLC = 2;
 8001844:	2302      	movs	r3, #2
 8001846:	653b      	str	r3, [r7, #80]	; 0x50
		FuelHeader.StdId = 0x668;
 8001848:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 800184c:	643b      	str	r3, [r7, #64]	; 0x40
		FuelHeader.IDE = CAN_ID_STD;
 800184e:	2300      	movs	r3, #0
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
		FuelHeader.RTR = CAN_RTR_DATA;
 8001852:	2300      	movs	r3, #0
 8001854:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader1, fuelbuff1, &TxMailbox1)
 8001856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800185a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800185e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001862:	4823      	ldr	r0, [pc, #140]	; (80018f0 <Fuel_taskF+0x270>)
 8001864:	f001 fa68 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <Fuel_taskF+0x1f2>
				!= HAL_OK) {
			Error_Handler();
 800186e:	f000 f9ed 	bl	8001c4c <Error_Handler>

		uint32_t TxMailbox2;

		CAN_TxHeaderTypeDef FuelHeader2;

		FuelHeader.DLC = 2;
 8001872:	2302      	movs	r3, #2
 8001874:	653b      	str	r3, [r7, #80]	; 0x50
		FuelHeader.StdId = 0x669;
 8001876:	f240 6369 	movw	r3, #1641	; 0x669
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
		FuelHeader.IDE = CAN_ID_STD;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
		FuelHeader.RTR = CAN_RTR_DATA;
 8001880:	2300      	movs	r3, #0
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader2, fuelbuff2, &TxMailbox2)
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800188c:	f107 0108 	add.w	r1, r7, #8
 8001890:	4817      	ldr	r0, [pc, #92]	; (80018f0 <Fuel_taskF+0x270>)
 8001892:	f001 fa51 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <Fuel_taskF+0x220>
				!= HAL_OK) {
			Error_Handler();
 800189c:	f000 f9d6 	bl	8001c4c <Error_Handler>
		}
		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*50Hz frequency*/
 80018a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 f9ec 	bl	8005c84 <vTaskDelayUntil>
	while (1) {
 80018ac:	e6f2      	b.n	8001694 <Fuel_taskF+0x14>
 80018ae:	bf00      	nop
 80018b0:	4bd5637f 	.word	0x4bd5637f
 80018b4:	3feff5b6 	.word	0x3feff5b6
 80018b8:	55390200 	.word	0x55390200
 80018bc:	3f549368 	.word	0x3f549368
 80018c0:	7b0cde01 	.word	0x7b0cde01
 80018c4:	3feffef8 	.word	0x3feffef8
 80018c8:	321ff000 	.word	0x321ff000
 80018cc:	3f20784f 	.word	0x3f20784f
 80018d0:	a5860687 	.word	0xa5860687
 80018d4:	3fefffe5 	.word	0x3fefffe5
 80018d8:	f9790000 	.word	0xf9790000
 80018dc:	3eea5a79 	.word	0x3eea5a79
 80018e0:	200021a4 	.word	0x200021a4
 80018e4:	20000280 	.word	0x20000280
 80018e8:	20000284 	.word	0x20000284
 80018ec:	20000288 	.word	0x20000288
 80018f0:	20002210 	.word	0x20002210

080018f4 <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b090      	sub	sp, #64	; 0x40
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 80018fc:	23c8      	movs	r3, #200	; 0xc8
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 8001900:	f004 fb82 	bl	8006008 <xTaskGetTickCount>
 8001904:	4603      	mov	r3, r0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
	while (1) {
		uint8_t speedbuff[2];
		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &test[0], 1, 100);
 8001908:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2108      	movs	r1, #8
 8001914:	4824      	ldr	r0, [pc, #144]	; (80019a8 <Speed_taskF+0xb4>)
 8001916:	f002 facd 	bl	8003eb4 <HAL_I2C_Master_Receive>
		if (test[0] != 0xAA) {
 800191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191e:	2baa      	cmp	r3, #170	; 0xaa
 8001920:	d008      	beq.n	8001934 <Speed_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &dump[0], 1, 100);
 8001922:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2108      	movs	r1, #8
 800192e:	481e      	ldr	r0, [pc, #120]	; (80019a8 <Speed_taskF+0xb4>)
 8001930:	f002 fac0 	bl	8003eb4 <HAL_I2C_Master_Receive>
		}
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[0], 1, 100);
 8001934:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <Speed_taskF+0xb4>)
 8001942:	f002 fab7 	bl	8003eb4 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &speedbuff[1], 1, 100);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	2108      	movs	r1, #8
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <Speed_taskF+0xb4>)
 8001956:	f002 faad 	bl	8003eb4 <HAL_I2C_Master_Receive>
		//HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &rpmbuff[0], 1, 100);
		//HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &rpmbuff[1], 1, 100);
		HAL_I2C_Master_Receive(&hi2c2, (0x4 << 1), &odbuff[0], 1, 100);
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <Speed_taskF+0xb8>)
 8001962:	2108      	movs	r1, #8
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <Speed_taskF+0xb4>)
 8001966:	f002 faa5 	bl	8003eb4 <HAL_I2C_Master_Receive>
		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 800196e:	f240 6353 	movw	r3, #1619	; 0x653
 8001972:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001984:	f107 0108 	add.w	r1, r7, #8
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <Speed_taskF+0xbc>)
 800198a:	f001 f9d5 	bl	8002d38 <HAL_CAN_AddTxMessage>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <Speed_taskF+0xa4>
				!= HAL_OK) {
			Error_Handler();
 8001994:	f000 f95a 	bl	8001c4c <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8001998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 f970 	bl	8005c84 <vTaskDelayUntil>
	while (1) {
 80019a4:	e7b0      	b.n	8001908 <Speed_taskF+0x14>
 80019a6:	bf00      	nop
 80019a8:	200021b0 	.word	0x200021b0
 80019ac:	200022b8 	.word	0x200022b8
 80019b0:	20002210 	.word	0x20002210

080019b4 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	; 0x40
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 80019bc:	23c8      	movs	r3, #200	; 0xc8
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
	xLastWakeTime = xTaskGetTickCount();
 80019c0:	f004 fb22 	bl	8006008 <xTaskGetTickCount>
 80019c4:	4603      	mov	r3, r0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
	while (1) {

		uint8_t test[1];
		uint8_t dump[1];
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &test[0], 1, 10);
 80019c8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80019cc:	230a      	movs	r3, #10
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	210a      	movs	r1, #10
 80019d4:	481e      	ldr	r0, [pc, #120]	; (8001a50 <RPM_taskF+0x9c>)
 80019d6:	f002 fa6d 	bl	8003eb4 <HAL_I2C_Master_Receive>
		if (test[0] != 0x55){
 80019da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019de:	2b55      	cmp	r3, #85	; 0x55
 80019e0:	d008      	beq.n	80019f4 <RPM_taskF+0x40>
			HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &dump[0], 1, 10);
 80019e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019e6:	230a      	movs	r3, #10
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	210a      	movs	r1, #10
 80019ee:	4818      	ldr	r0, [pc, #96]	; (8001a50 <RPM_taskF+0x9c>)
 80019f0:	f002 fa60 	bl	8003eb4 <HAL_I2C_Master_Receive>
		}

		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[0], 1, 10);
 80019f4:	230a      	movs	r3, #10
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <RPM_taskF+0xa0>)
 80019fc:	210a      	movs	r1, #10
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <RPM_taskF+0x9c>)
 8001a00:	f002 fa58 	bl	8003eb4 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c2, (0x5 << 1), &rpmbuff[1], 1, 10);
 8001a04:	230a      	movs	r3, #10
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <RPM_taskF+0xa4>)
 8001a0c:	210a      	movs	r1, #10
 8001a0e:	4810      	ldr	r0, [pc, #64]	; (8001a50 <RPM_taskF+0x9c>)
 8001a10:	f002 fa50 	bl	8003eb4 <HAL_I2C_Master_Receive>
		uint32_t TxMailbox;


		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
		RPMHeader.StdId = 0x654;
 8001a18:	f240 6354 	movw	r3, #1620	; 0x654
 8001a1c:	60fb      	str	r3, [r7, #12]
		RPMHeader.IDE = CAN_ID_STD;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
		RPMHeader.RTR = CAN_RTR_DATA;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	f107 010c 	add.w	r1, r7, #12
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <RPM_taskF+0xa0>)
 8001a30:	480a      	ldr	r0, [pc, #40]	; (8001a5c <RPM_taskF+0xa8>)
 8001a32:	f001 f981 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <RPM_taskF+0x8c>
				!= HAL_OK) {
			Error_Handler();
 8001a3c:	f000 f906 	bl	8001c4c <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8001a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 f91c 	bl	8005c84 <vTaskDelayUntil>
	while (1) {
 8001a4c:	e7bc      	b.n	80019c8 <RPM_taskF+0x14>
 8001a4e:	bf00      	nop
 8001a50:	200021b0 	.word	0x200021b0
 8001a54:	200021a0 	.word	0x200021a0
 8001a58:	200021a1 	.word	0x200021a1
 8001a5c:	20002210 	.word	0x20002210

08001a60 <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b092      	sub	sp, #72	; 0x48
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 8001a68:	23c8      	movs	r3, #200	; 0xc8
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 8001a6c:	f004 facc 	bl	8006008 <xTaskGetTickCount>
 8001a70:	4603      	mov	r3, r0
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (1) {
		uint8_t tempdata[16];

		CSen
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7a:	484e      	ldr	r0, [pc, #312]	; (8001bb4 <Temp_taskF+0x154>)
 8001a7c:	f002 f8c1 	bl	8003c02 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
 8001a84:	e018      	b.n	8001ab8 <Temp_taskF+0x58>
			SCK_H
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	484b      	ldr	r0, [pc, #300]	; (8001bb8 <Temp_taskF+0x158>)
 8001a8c:	f002 f8b9 	bl	8003c02 <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001a90:	2110      	movs	r1, #16
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <Temp_taskF+0x158>)
 8001a94:	f002 f89e 	bl	8003bd4 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	4413      	add	r3, r2
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
			SCK_L
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4842      	ldr	r0, [pc, #264]	; (8001bb8 <Temp_taskF+0x158>)
 8001aae:	f002 f8a8 	bl	8003c02 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	dde3      	ble.n	8001a86 <Temp_taskF+0x26>
		}
		CSdis
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac4:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <Temp_taskF+0x154>)
 8001ac6:	f002 f89c 	bl	8003c02 <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 8001aca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d146      	bne.n	8001b60 <Temp_taskF+0x100>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8001ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ae4:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001afc:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <Temp_taskF+0x15c>)
 8001b06:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8001b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <Temp_taskF+0x15c>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29a      	uxth	r2, r3
					+ tempdata[12];
 8001b52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <Temp_taskF+0x15c>)
 8001b5e:	801a      	strh	r2, [r3, #0]
			//	temp16 += tempdata[n] * (2048 / (1 << (n - 1)));
			//}
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <Temp_taskF+0x15c>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <Temp_taskF+0x15c>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 8001b7c:	f240 6351 	movw	r3, #1617	; 0x651
 8001b80:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b92:	f107 010c 	add.w	r1, r7, #12
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <Temp_taskF+0x160>)
 8001b98:	f001 f8ce 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <Temp_taskF+0x146>
				!= HAL_OK) {
			Error_Handler();
 8001ba2:	f000 f853 	bl	8001c4c <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8001ba6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 f869 	bl	8005c84 <vTaskDelayUntil>
	while (1) {
 8001bb2:	e75f      	b.n	8001a74 <Temp_taskF+0x14>
 8001bb4:	40010800 	.word	0x40010800
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	20002270 	.word	0x20002270
 8001bc0:	20002210 	.word	0x20002210

08001bc4 <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
		const TickType_t xFrequency = 100;  //Ticks to wait since routine starts
 8001bcc:	2364      	movs	r3, #100	; 0x64
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
		xLastWakeTime = xTaskGetTickCount();
 8001bd0:	f004 fa1a 	bl	8006008 <xTaskGetTickCount>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
		while (1) {

			uint32_t TxMailbox;
			CAN_TxHeaderTypeDef odHeader;

			odHeader.DLC = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
			odHeader.StdId = 0x666;
 8001bdc:	f240 6366 	movw	r3, #1638	; 0x666
 8001be0:	60fb      	str	r3, [r7, #12]
			odHeader.IDE = CAN_ID_STD;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
			odHeader.RTR = CAN_RTR_DATA;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]

			if (HAL_CAN_AddTxMessage(&hcan, &odHeader, odbuff, &TxMailbox)
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	f107 010c 	add.w	r1, r7, #12
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <OD_taskF+0x58>)
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <OD_taskF+0x5c>)
 8001bf6:	f001 f89f 	bl	8002d38 <HAL_CAN_AddTxMessage>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <OD_taskF+0x40>
					!= HAL_OK) {
				Error_Handler();
 8001c00:	f000 f824 	bl	8001c4c <Error_Handler>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <OD_taskF+0x60>)
 8001c08:	f002 f813 	bl	8003c32 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&xLastWakeTime, xFrequency); /*10Hz frequency*/
 8001c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f836 	bl	8005c84 <vTaskDelayUntil>
		while (1) {
 8001c18:	e7de      	b.n	8001bd8 <OD_taskF+0x14>
 8001c1a:	bf00      	nop
 8001c1c:	200022b8 	.word	0x200022b8
 8001c20:	20002210 	.word	0x20002210
 8001c24:	40010c00 	.word	0x40010c00

08001c28 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001c3a:	f000 fa7b 	bl	8002134 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00

08001c4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_MspInit+0x6c>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	210f      	movs	r1, #15
 8001c92:	f06f 0001 	mvn.w	r0, #1
 8001c96:	f001 fc2a 	bl	80034ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_MspInit+0x70>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <HAL_MspInit+0x70>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001cb6:	f004 fd7f 	bl	80067b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000

08001ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_I2C_MspInit+0x74>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d124      	bne.n	8001d36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001cf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf6:	61d3      	str	r3, [r2, #28]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_I2C_MspInit+0x78>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_I2C_MspInit+0x7c>)
 8001d32:	f001 fdf5 	bl	8003920 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40005800 	.word	0x40005800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010c00 	.word	0x40010c00

08001d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <HAL_ADC_MspInit+0xe8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d15f      	bne.n	8001e2c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_ADC_MspInit+0xec>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db8:	2303      	movs	r3, #3
 8001dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481e      	ldr	r0, [pc, #120]	; (8001e3c <HAL_ADC_MspInit+0xf0>)
 8001dc4:	f001 fdac 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481a      	ldr	r0, [pc, #104]	; (8001e40 <HAL_ADC_MspInit+0xf4>)
 8001dd8:	f001 fda2 	bl	8003920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dde:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_ADC_MspInit+0xfc>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e06:	2220      	movs	r2, #32
 8001e08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e12:	f001 fb97 	bl	8003544 <HAL_DMA_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001e1c:	f7ff ff16 	bl	8001c4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e24:	621a      	str	r2, [r3, #32]
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_ADC_MspInit+0xf8>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40012400 	.word	0x40012400
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00
 8001e44:	20002274 	.word	0x20002274
 8001e48:	40020008 	.word	0x40020008

08001e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <HAL_CAN_MspInit+0xf0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d163      	bne.n	8001f34 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	4a33      	ldr	r2, [pc, #204]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e76:	61d3      	str	r3, [r2, #28]
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_CAN_MspInit+0xf4>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4824      	ldr	r0, [pc, #144]	; (8001f44 <HAL_CAN_MspInit+0xf8>)
 8001eb2:	f001 fd35 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <HAL_CAN_MspInit+0xf8>)
 8001ecc:	f001 fd28 	bl	8003920 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_CAN_MspInit+0xfc>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_CAN_MspInit+0xfc>)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2105      	movs	r1, #5
 8001ef8:	2013      	movs	r0, #19
 8001efa:	f001 faf8 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001efe:	2013      	movs	r0, #19
 8001f00:	f001 fb11 	bl	8003526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2105      	movs	r1, #5
 8001f08:	2014      	movs	r0, #20
 8001f0a:	f001 faf0 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001f0e:	2014      	movs	r0, #20
 8001f10:	f001 fb09 	bl	8003526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2105      	movs	r1, #5
 8001f18:	2015      	movs	r0, #21
 8001f1a:	f001 fae8 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f1e:	2015      	movs	r0, #21
 8001f20:	f001 fb01 	bl	8003526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2105      	movs	r1, #5
 8001f28:	2016      	movs	r0, #22
 8001f2a:	f001 fae0 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f2e:	2016      	movs	r0, #22
 8001f30:	f001 faf9 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40006400 	.word	0x40006400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	40010000 	.word	0x40010000

08001f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	2019      	movs	r0, #25
 8001f62:	f001 fac4 	bl	80034ee <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f66:	2019      	movs	r0, #25
 8001f68:	f001 fadd 	bl	8003526 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_InitTick+0x9c>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_InitTick+0x9c>)
 8001f72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_InitTick+0x9c>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f84:	f107 0210 	add.w	r2, r7, #16
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 ff9e 	bl	8004ed0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f94:	f002 ff88 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8001f98:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_InitTick+0xa0>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_InitTick+0xa8>)
 8001fac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fca:	f003 f885 	bl	80050d8 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <HAL_InitTick+0xa4>)
 8001fd6:	f003 f8b3 	bl	8005140 <HAL_TIM_Base_Start_IT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3730      	adds	r7, #48	; 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	200022c4 	.word	0x200022c4
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <HardFault_Handler+0x4>

0800200a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <BusFault_Handler+0x4>

08002016 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <UsageFault_Handler+0x4>

0800201c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Channel1_IRQHandler+0x10>)
 800202e:	f001 fb43 	bl	80036b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20002274 	.word	0x20002274

0800203c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002042:	f000 ff78 	bl	8002f36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20002210 	.word	0x20002210

08002050 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002056:	f000 ff6e 	bl	8002f36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20002210 	.word	0x20002210

08002064 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <CAN1_RX1_IRQHandler+0x10>)
 800206a:	f000 ff64 	bl	8002f36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20002210 	.word	0x20002210

08002078 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <CAN1_SCE_IRQHandler+0x10>)
 800207e:	f000 ff5a 	bl	8002f36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20002210 	.word	0x20002210

0800208c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <TIM1_UP_IRQHandler+0x10>)
 8002092:	f003 f878 	bl	8005186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200022c4 	.word	0x200022c4

080020a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <SystemInit+0x5c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <SystemInit+0x5c>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <SystemInit+0x5c>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4911      	ldr	r1, [pc, #68]	; (80020fc <SystemInit+0x5c>)
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <SystemInit+0x60>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <SystemInit+0x5c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <SystemInit+0x5c>)
 80020c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <SystemInit+0x5c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SystemInit+0x5c>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <SystemInit+0x5c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <SystemInit+0x5c>)
 80020de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SystemInit+0x5c>)
 80020e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SystemInit+0x64>)
 80020ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40021000 	.word	0x40021000
 8002100:	f8ff0000 	.word	0xf8ff0000
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_Init+0x28>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_Init+0x28>)
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f001 f9dd 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff ff14 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff fd98 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_IncTick+0x20>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000008 	.word	0x20000008
 8002154:	20002304 	.word	0x20002304

08002158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_GetTick+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20002304 	.word	0x20002304

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fff0 	bl	8002158 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_Delay+0x40>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffe0 	bl	8002158 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000008 	.word	0x20000008

080021b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0be      	b.n	8002350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fdac 	bl	8001d4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 faf7 	bl	80027e8 <ADC_ConversionStop_Disable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8099 	bne.w	800233e <HAL_ADC_Init+0x18e>
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 8095 	bne.w	800233e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800221c:	f023 0302 	bic.w	r3, r3, #2
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7b1b      	ldrb	r3, [r3, #12]
 8002236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4313      	orrs	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002248:	d003      	beq.n	8002252 <HAL_ADC_Init+0xa2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_ADC_Init+0xa8>
 8002252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002256:	e000      	b.n	800225a <HAL_ADC_Init+0xaa>
 8002258:	2300      	movs	r3, #0
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7d1b      	ldrb	r3, [r3, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d119      	bne.n	800229c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7b1b      	ldrb	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	3b01      	subs	r3, #1
 8002276:	035a      	lsls	r2, r3, #13
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e00b      	b.n	800229c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_ADC_Init+0x1a8>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_Init+0x126>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	3b01      	subs	r3, #1
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_ADC_Init+0x1ac>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d10b      	bne.n	800231c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800231a:	e018      	b.n	800234e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f023 0312 	bic.w	r3, r3, #18
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800233c:	e007      	b.n	800234e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	ffe1f7fd 	.word	0xffe1f7fd
 800235c:	ff1f0efe 	.word	0xff1f0efe

08002360 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a64      	ldr	r2, [pc, #400]	; (8002508 <HAL_ADC_Start_DMA+0x1a8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d004      	beq.n	8002384 <HAL_ADC_Start_DMA+0x24>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_ADC_Start_DMA+0x1ac>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d106      	bne.n	8002392 <HAL_ADC_Start_DMA+0x32>
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <HAL_ADC_Start_DMA+0x1a8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 80b3 	bne.w	80024f8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x40>
 800239c:	2302      	movs	r3, #2
 800239e:	e0ae      	b.n	80024fe <HAL_ADC_Start_DMA+0x19e>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f9cb 	bl	8002744 <ADC_Enable>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 809a 	bne.w	80024ee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_ADC_Start_DMA+0x1ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_Start_DMA+0x84>
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_ADC_Start_DMA+0x1a8>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d115      	bne.n	8002410 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d026      	beq.n	800244c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800240e:	e01d      	b.n	800244c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a39      	ldr	r2, [pc, #228]	; (8002508 <HAL_ADC_Start_DMA+0x1a8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_ADC_Start_DMA+0xd0>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_ADC_Start_DMA+0x1ac>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d10d      	bne.n	800244c <HAL_ADC_Start_DMA+0xec>
 8002430:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_ADC_Start_DMA+0x1a8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f023 0206 	bic.w	r2, r3, #6
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
 8002464:	e002      	b.n	800246c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <HAL_ADC_Start_DMA+0x1b0>)
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a24      	ldr	r2, [pc, #144]	; (8002514 <HAL_ADC_Start_DMA+0x1b4>)
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_ADC_Start_DMA+0x1b8>)
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0202 	mvn.w	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a18      	ldr	r0, [r3, #32]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	334c      	adds	r3, #76	; 0x4c
 80024b0:	4619      	mov	r1, r3
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f001 f89f 	bl	80035f8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024c8:	d108      	bne.n	80024dc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024d8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024da:	e00f      	b.n	80024fc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024ec:	e006      	b.n	80024fc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024f6:	e001      	b.n	80024fc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40012400 	.word	0x40012400
 800250c:	40012800 	.word	0x40012800
 8002510:	0800285d 	.word	0x0800285d
 8002514:	080028d9 	.word	0x080028d9
 8002518:	080028f5 	.word	0x080028f5

0800251c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x20>
 8002570:	2302      	movs	r3, #2
 8002572:	e0dc      	b.n	800272e <HAL_ADC_ConfigChannel+0x1da>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b06      	cmp	r3, #6
 8002582:	d81c      	bhi.n	80025be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b05      	subs	r3, #5
 8002596:	221f      	movs	r2, #31
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	4019      	ands	r1, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b05      	subs	r3, #5
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
 80025bc:	e03c      	b.n	8002638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d81c      	bhi.n	8002600 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b23      	subs	r3, #35	; 0x23
 80025d8:	221f      	movs	r2, #31
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	4019      	ands	r1, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	3b23      	subs	r3, #35	; 0x23
 80025f2:	fa00 f203 	lsl.w	r2, r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
 80025fe:	e01b      	b.n	8002638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b41      	subs	r3, #65	; 0x41
 8002612:	221f      	movs	r2, #31
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	4019      	ands	r1, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b41      	subs	r3, #65	; 0x41
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b09      	cmp	r3, #9
 800263e:	d91c      	bls.n	800267a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	3b1e      	subs	r3, #30
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6898      	ldr	r0, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	3b1e      	subs	r3, #30
 800266c:	fa00 f203 	lsl.w	r2, r0, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	e019      	b.n	80026ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	2207      	movs	r2, #7
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	4019      	ands	r1, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6898      	ldr	r0, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d003      	beq.n	80026be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026ba:	2b11      	cmp	r3, #17
 80026bc:	d132      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_ADC_ConfigChannel+0x1e4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d125      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d126      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d11a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_ADC_ConfigChannel+0x1e8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_ADC_ConfigChannel+0x1ec>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002704:	e002      	b.n	800270c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x1b2>
 8002712:	e007      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012400 	.word	0x40012400
 800273c:	20000000 	.word	0x20000000
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d039      	beq.n	80027d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <ADC_Enable+0x9c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <ADC_Enable+0xa0>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002780:	e002      	b.n	8002788 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3b01      	subs	r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800278e:	f7ff fce3 	bl	8002158 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002794:	e018      	b.n	80027c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002796:	f7ff fcdf 	bl	8002158 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d911      	bls.n	80027c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f043 0210 	orr.w	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d1df      	bne.n	8002796 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000000 	.word	0x20000000
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d127      	bne.n	8002852 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002812:	f7ff fca1 	bl	8002158 <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002818:	e014      	b.n	8002844 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800281a:	f7ff fc9d 	bl	8002158 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d90d      	bls.n	8002844 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f043 0210 	orr.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e007      	b.n	8002854 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d0e3      	beq.n	800281a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d127      	bne.n	80028c6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800288c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002890:	d115      	bne.n	80028be <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002896:	2b00      	cmp	r3, #0
 8002898:	d111      	bne.n	80028be <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff fe2c 	bl	800251c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028c4:	e004      	b.n	80028d0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fe21 	bl	800252e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f043 0204 	orr.w	r2, r3, #4
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff fe10 	bl	8002540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0ed      	b.n	8002b16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fa80 	bl	8001e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0202 	bic.w	r2, r2, #2
 800295a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295c:	f7ff fbfc 	bl	8002158 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002962:	e012      	b.n	800298a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002964:	f7ff fbf8 	bl	8002158 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b0a      	cmp	r3, #10
 8002970:	d90b      	bls.n	800298a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2205      	movs	r2, #5
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0c5      	b.n	8002b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e5      	bne.n	8002964 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a8:	f7ff fbd6 	bl	8002158 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029ae:	e012      	b.n	80029d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029b0:	f7ff fbd2 	bl	8002158 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b0a      	cmp	r3, #10
 80029bc:	d90b      	bls.n	80029d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2205      	movs	r2, #5
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e09f      	b.n	8002b16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0e5      	beq.n	80029b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7e1b      	ldrb	r3, [r3, #24]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d108      	bne.n	80029fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e007      	b.n	8002a0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7e5b      	ldrb	r3, [r3, #25]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d108      	bne.n	8002a28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e007      	b.n	8002a38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e9b      	ldrb	r3, [r3, #26]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d108      	bne.n	8002a52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e007      	b.n	8002a62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0220 	bic.w	r2, r2, #32
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7edb      	ldrb	r3, [r3, #27]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0210 	bic.w	r2, r2, #16
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e007      	b.n	8002a8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0210 	orr.w	r2, r2, #16
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7f1b      	ldrb	r3, [r3, #28]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0208 	orr.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e007      	b.n	8002ab6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0208 	bic.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7f5b      	ldrb	r3, [r3, #29]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0204 	orr.w	r2, r2, #4
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e007      	b.n	8002ae0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	ea42 0103 	orr.w	r1, r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d003      	beq.n	8002b44 <HAL_CAN_ConfigFilter+0x26>
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f040 80aa 	bne.w	8002c98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d123      	bne.n	8002bc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	401a      	ands	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ba0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3248      	adds	r2, #72	; 0x48
 8002ba6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bbc:	6979      	ldr	r1, [r7, #20]
 8002bbe:	3348      	adds	r3, #72	; 0x48
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d122      	bne.n	8002c14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3248      	adds	r2, #72	; 0x48
 8002bf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c0a:	6979      	ldr	r1, [r7, #20]
 8002c0c:	3348      	adds	r3, #72	; 0x48
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c2e:	e007      	b.n	8002c40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c5a:	e007      	b.n	8002c6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e006      	b.n	8002ca6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d12e      	bne.n	8002d22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7ff fa3c 	bl	8002158 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ce2:	e012      	b.n	8002d0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ce4:	f7ff fa38 	bl	8002158 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b0a      	cmp	r3, #10
 8002cf0:	d90b      	bls.n	8002d0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2205      	movs	r2, #5
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e012      	b.n	8002d30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e006      	b.n	8002d30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d003      	beq.n	8002d64 <HAL_CAN_AddTxMessage+0x2c>
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	f040 80b8 	bne.w	8002ed4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a0 	beq.w	8002ec4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	0e1b      	lsrs	r3, r3, #24
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d907      	bls.n	8002da4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e09e      	b.n	8002ee2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002da4:	2201      	movs	r2, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	409a      	lsls	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	440b      	add	r3, r1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e00f      	b.n	8002df2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ddc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002de6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3318      	adds	r3, #24
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	440b      	add	r3, r1
 8002df0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	440b      	add	r3, r1
 8002e02:	3304      	adds	r3, #4
 8002e04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	7d1b      	ldrb	r3, [r3, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d111      	bne.n	8002e32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3318      	adds	r3, #24
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3304      	adds	r3, #4
 8002e30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3307      	adds	r3, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	061a      	lsls	r2, r3, #24
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3306      	adds	r3, #6
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3305      	adds	r3, #5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	3204      	adds	r2, #4
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	4610      	mov	r0, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	ea43 0200 	orr.w	r2, r3, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	440b      	add	r3, r1
 8002e64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	061a      	lsls	r2, r3, #24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3302      	adds	r3, #2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	4313      	orrs	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6811      	ldr	r1, [r2, #0]
 8002e90:	ea43 0200 	orr.w	r2, r3, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6811      	ldr	r1, [r2, #0]
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3318      	adds	r3, #24
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	440b      	add	r3, r1
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e00e      	b.n	8002ee2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e006      	b.n	8002ee2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <HAL_CAN_ActivateNotification+0x1e>
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d109      	bne.n	8002f1e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e006      	b.n	8002f2c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	; 0x28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d07c      	beq.n	8003076 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d023      	beq.n	8002fce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f97d 	bl	8003298 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f9e:	e016      	b.n	8002fce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e00c      	b.n	8002fce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	e002      	b.n	8002fce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f980 	bl	80032ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d024      	beq.n	8003022 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f95c 	bl	80032aa <HAL_CAN_TxMailbox1CompleteCallback>
 8002ff2:	e016      	b.n	8003022 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e00c      	b.n	8003022 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	e002      	b.n	8003022 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f95f 	bl	80032e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d024      	beq.n	8003076 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f93b 	bl	80032bc <HAL_CAN_TxMailbox2CompleteCallback>
 8003046:	e016      	b.n	8003076 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e00c      	b.n	8003076 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e002      	b.n	8003076 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f93e 	bl	80032f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2210      	movs	r2, #16
 8003098:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2208      	movs	r2, #8
 80030b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f92d 	bl	8003316 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f915 	bl	8003304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2208      	movs	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f90d 	bl	800333a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8f5 	bl	8003328 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8f6 	bl	800334c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8ee 	bl	800335e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d075      	beq.n	8003278 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06c      	beq.n	8003270 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03d      	beq.n	8003270 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d038      	beq.n	8003270 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d017      	beq.n	8003238 <HAL_CAN_IRQHandler+0x302>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d804      	bhi.n	8003216 <HAL_CAN_IRQHandler+0x2e0>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d009      	beq.n	8003224 <HAL_CAN_IRQHandler+0x2ee>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d00c      	beq.n	800322e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003214:	e024      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003216:	2b50      	cmp	r3, #80	; 0x50
 8003218:	d018      	beq.n	800324c <HAL_CAN_IRQHandler+0x316>
 800321a:	2b60      	cmp	r3, #96	; 0x60
 800321c:	d01b      	beq.n	8003256 <HAL_CAN_IRQHandler+0x320>
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d00f      	beq.n	8003242 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003222:	e01d      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800322c:	e018      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003236:	e013      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f043 0320 	orr.w	r3, r3, #32
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003240:	e00e      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800324a:	e009      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003254:	e004      	b.n	8003260 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800325e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800326e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2204      	movs	r2, #4
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f870 	bl	8003370 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
	...

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4906      	ldr	r1, [pc, #24]	; (800341c <__NVIC_EnableIRQ+0x34>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	; (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff4f 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff64 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ffb2 	bl	8003474 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff81 	bl	8003420 <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff57 	bl	80033e8 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e043      	b.n	80035e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_DMA_Init+0xa8>)
 8003562:	4413      	add	r3, r2
 8003564:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <HAL_DMA_Init+0xac>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_DMA_Init+0xb0>)
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800358e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	bffdfff8 	.word	0xbffdfff8
 80035f0:	cccccccd 	.word	0xcccccccd
 80035f4:	40020000 	.word	0x40020000

080035f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Start_IT+0x20>
 8003614:	2302      	movs	r3, #2
 8003616:	e04a      	b.n	80036ae <HAL_DMA_Start_IT+0xb6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003626:	2b01      	cmp	r3, #1
 8003628:	d13a      	bne.n	80036a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f938 	bl	80038c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 020e 	orr.w	r2, r2, #14
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e00f      	b.n	800368e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0204 	bic.w	r2, r2, #4
 800367c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 020a 	orr.w	r2, r2, #10
 800368c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e005      	b.n	80036ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d04f      	beq.n	8003780 <HAL_DMA_IRQHandler+0xc8>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d04a      	beq.n	8003780 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0204 	bic.w	r2, r2, #4
 8003706:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a66      	ldr	r2, [pc, #408]	; (80038a8 <HAL_DMA_IRQHandler+0x1f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d029      	beq.n	8003766 <HAL_DMA_IRQHandler+0xae>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a65      	ldr	r2, [pc, #404]	; (80038ac <HAL_DMA_IRQHandler+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0xaa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a63      	ldr	r2, [pc, #396]	; (80038b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01a      	beq.n	800375c <HAL_DMA_IRQHandler+0xa4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a62      	ldr	r2, [pc, #392]	; (80038b4 <HAL_DMA_IRQHandler+0x1fc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d012      	beq.n	8003756 <HAL_DMA_IRQHandler+0x9e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a60      	ldr	r2, [pc, #384]	; (80038b8 <HAL_DMA_IRQHandler+0x200>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00a      	beq.n	8003750 <HAL_DMA_IRQHandler+0x98>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5f      	ldr	r2, [pc, #380]	; (80038bc <HAL_DMA_IRQHandler+0x204>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d102      	bne.n	800374a <HAL_DMA_IRQHandler+0x92>
 8003744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003748:	e00e      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 800374a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800374e:	e00b      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 8003750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003754:	e008      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 8003756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800375a:	e005      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 800375c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003760:	e002      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 8003762:	2340      	movs	r3, #64	; 0x40
 8003764:	e000      	b.n	8003768 <HAL_DMA_IRQHandler+0xb0>
 8003766:	2304      	movs	r3, #4
 8003768:	4a55      	ldr	r2, [pc, #340]	; (80038c0 <HAL_DMA_IRQHandler+0x208>)
 800376a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8094 	beq.w	800389e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800377e:	e08e      	b.n	800389e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	2202      	movs	r2, #2
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d056      	beq.n	800383e <HAL_DMA_IRQHandler+0x186>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d051      	beq.n	800383e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 020a 	bic.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <HAL_DMA_IRQHandler+0x1f0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d029      	beq.n	800381e <HAL_DMA_IRQHandler+0x166>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a37      	ldr	r2, [pc, #220]	; (80038ac <HAL_DMA_IRQHandler+0x1f4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0x162>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a35      	ldr	r2, [pc, #212]	; (80038b0 <HAL_DMA_IRQHandler+0x1f8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x15c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <HAL_DMA_IRQHandler+0x1fc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d012      	beq.n	800380e <HAL_DMA_IRQHandler+0x156>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <HAL_DMA_IRQHandler+0x200>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00a      	beq.n	8003808 <HAL_DMA_IRQHandler+0x150>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a31      	ldr	r2, [pc, #196]	; (80038bc <HAL_DMA_IRQHandler+0x204>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d102      	bne.n	8003802 <HAL_DMA_IRQHandler+0x14a>
 80037fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003800:	e00e      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 8003802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003806:	e00b      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 8003808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380c:	e008      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 800380e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003812:	e005      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 8003814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003818:	e002      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 800381a:	2320      	movs	r3, #32
 800381c:	e000      	b.n	8003820 <HAL_DMA_IRQHandler+0x168>
 800381e:	2302      	movs	r3, #2
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_DMA_IRQHandler+0x208>)
 8003822:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d034      	beq.n	800389e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800383c:	e02f      	b.n	800389e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2208      	movs	r2, #8
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x1e8>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d023      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 020e 	bic.w	r2, r2, #14
 8003866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
    }
  }
  return;
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
}
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40020008 	.word	0x40020008
 80038ac:	4002001c 	.word	0x4002001c
 80038b0:	40020030 	.word	0x40020030
 80038b4:	40020044 	.word	0x40020044
 80038b8:	40020058 	.word	0x40020058
 80038bc:	4002006c 	.word	0x4002006c
 80038c0:	40020000 	.word	0x40020000

080038c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d108      	bne.n	8003904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003902:	e007      	b.n	8003914 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003920:	b480      	push	{r7}
 8003922:	b08b      	sub	sp, #44	; 0x2c
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003932:	e127      	b.n	8003b84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003934:	2201      	movs	r2, #1
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	429a      	cmp	r2, r3
 800394e:	f040 8116 	bne.w	8003b7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b12      	cmp	r3, #18
 8003958:	d034      	beq.n	80039c4 <HAL_GPIO_Init+0xa4>
 800395a:	2b12      	cmp	r3, #18
 800395c:	d80d      	bhi.n	800397a <HAL_GPIO_Init+0x5a>
 800395e:	2b02      	cmp	r3, #2
 8003960:	d02b      	beq.n	80039ba <HAL_GPIO_Init+0x9a>
 8003962:	2b02      	cmp	r3, #2
 8003964:	d804      	bhi.n	8003970 <HAL_GPIO_Init+0x50>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d031      	beq.n	80039ce <HAL_GPIO_Init+0xae>
 800396a:	2b01      	cmp	r3, #1
 800396c:	d01c      	beq.n	80039a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800396e:	e048      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003970:	2b03      	cmp	r3, #3
 8003972:	d043      	beq.n	80039fc <HAL_GPIO_Init+0xdc>
 8003974:	2b11      	cmp	r3, #17
 8003976:	d01b      	beq.n	80039b0 <HAL_GPIO_Init+0x90>
          break;
 8003978:	e043      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800397a:	4a89      	ldr	r2, [pc, #548]	; (8003ba0 <HAL_GPIO_Init+0x280>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d026      	beq.n	80039ce <HAL_GPIO_Init+0xae>
 8003980:	4a87      	ldr	r2, [pc, #540]	; (8003ba0 <HAL_GPIO_Init+0x280>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d806      	bhi.n	8003994 <HAL_GPIO_Init+0x74>
 8003986:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_GPIO_Init+0x284>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d020      	beq.n	80039ce <HAL_GPIO_Init+0xae>
 800398c:	4a86      	ldr	r2, [pc, #536]	; (8003ba8 <HAL_GPIO_Init+0x288>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01d      	beq.n	80039ce <HAL_GPIO_Init+0xae>
          break;
 8003992:	e036      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003994:	4a85      	ldr	r2, [pc, #532]	; (8003bac <HAL_GPIO_Init+0x28c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0xae>
 800399a:	4a85      	ldr	r2, [pc, #532]	; (8003bb0 <HAL_GPIO_Init+0x290>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d016      	beq.n	80039ce <HAL_GPIO_Init+0xae>
 80039a0:	4a84      	ldr	r2, [pc, #528]	; (8003bb4 <HAL_GPIO_Init+0x294>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0xae>
          break;
 80039a6:	e02c      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	623b      	str	r3, [r7, #32]
          break;
 80039ae:	e028      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	3304      	adds	r3, #4
 80039b6:	623b      	str	r3, [r7, #32]
          break;
 80039b8:	e023      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	3308      	adds	r3, #8
 80039c0:	623b      	str	r3, [r7, #32]
          break;
 80039c2:	e01e      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	330c      	adds	r3, #12
 80039ca:	623b      	str	r3, [r7, #32]
          break;
 80039cc:	e019      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039d6:	2304      	movs	r3, #4
 80039d8:	623b      	str	r3, [r7, #32]
          break;
 80039da:	e012      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e4:	2308      	movs	r3, #8
 80039e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	611a      	str	r2, [r3, #16]
          break;
 80039ee:	e008      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039f0:	2308      	movs	r3, #8
 80039f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	615a      	str	r2, [r3, #20]
          break;
 80039fa:	e002      	b.n	8003a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
          break;
 8003a00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2bff      	cmp	r3, #255	; 0xff
 8003a06:	d801      	bhi.n	8003a0c <HAL_GPIO_Init+0xec>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	e001      	b.n	8003a10 <HAL_GPIO_Init+0xf0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	d802      	bhi.n	8003a1e <HAL_GPIO_Init+0xfe>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x104>
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	3b08      	subs	r3, #8
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	401a      	ands	r2, r3
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8096 	beq.w	8003b7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a52:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_GPIO_Init+0x298>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_GPIO_Init+0x298>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6193      	str	r3, [r2, #24]
 8003a5e:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_GPIO_Init+0x298>)
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a6a:	4a54      	ldr	r2, [pc, #336]	; (8003bbc <HAL_GPIO_Init+0x29c>)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <HAL_GPIO_Init+0x2a0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_GPIO_Init+0x19e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_GPIO_Init+0x2a4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00d      	beq.n	8003aba <HAL_GPIO_Init+0x19a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_GPIO_Init+0x2a8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x196>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_GPIO_Init+0x2ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_GPIO_Init+0x192>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x1a0>
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	e004      	b.n	8003ac0 <HAL_GPIO_Init+0x1a0>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_Init+0x1a0>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_GPIO_Init+0x1a0>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	f002 0203 	and.w	r2, r2, #3
 8003ac6:	0092      	lsls	r2, r2, #2
 8003ac8:	4093      	lsls	r3, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ad0:	493a      	ldr	r1, [pc, #232]	; (8003bbc <HAL_GPIO_Init+0x29c>)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4938      	ldr	r1, [pc, #224]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
 8003af6:	e006      	b.n	8003b06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003af8:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	4933      	ldr	r1, [pc, #204]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	492e      	ldr	r1, [pc, #184]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
 8003b1e:	e006      	b.n	8003b2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4924      	ldr	r1, [pc, #144]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
 8003b46:	e006      	b.n	8003b56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	491f      	ldr	r1, [pc, #124]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	491a      	ldr	r1, [pc, #104]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
 8003b6e:	e006      	b.n	8003b7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	4915      	ldr	r1, [pc, #84]	; (8003bd0 <HAL_GPIO_Init+0x2b0>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	3301      	adds	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f aed0 	bne.w	8003934 <HAL_GPIO_Init+0x14>
  }
}
 8003b94:	bf00      	nop
 8003b96:	372c      	adds	r7, #44	; 0x2c
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	10210000 	.word	0x10210000
 8003ba4:	10110000 	.word	0x10110000
 8003ba8:	10120000 	.word	0x10120000
 8003bac:	10310000 	.word	0x10310000
 8003bb0:	10320000 	.word	0x10320000
 8003bb4:	10220000 	.word	0x10220000
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40010800 	.word	0x40010800
 8003bc4:	40010c00 	.word	0x40010c00
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e001      	b.n	8003bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	807b      	strh	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c12:	787b      	ldrb	r3, [r7, #1]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c18:	887a      	ldrh	r2, [r7, #2]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c1e:	e003      	b.n	8003c28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	611a      	str	r2, [r3, #16]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	611a      	str	r2, [r3, #16]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e10f      	b.n	8003e96 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe f81e 	bl	8001ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f001 f8ea 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4a7b      	ldr	r2, [pc, #492]	; (8003ea0 <HAL_I2C_Init+0x23c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d807      	bhi.n	8003cc8 <HAL_I2C_Init+0x64>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a7a      	ldr	r2, [pc, #488]	; (8003ea4 <HAL_I2C_Init+0x240>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf94      	ite	ls
 8003cc0:	2301      	movls	r3, #1
 8003cc2:	2300      	movhi	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e006      	b.n	8003cd6 <HAL_I2C_Init+0x72>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a77      	ldr	r2, [pc, #476]	; (8003ea8 <HAL_I2C_Init+0x244>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bf94      	ite	ls
 8003cd0:	2301      	movls	r3, #1
 8003cd2:	2300      	movhi	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0db      	b.n	8003e96 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a72      	ldr	r2, [pc, #456]	; (8003eac <HAL_I2C_Init+0x248>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9b      	lsrs	r3, r3, #18
 8003ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a64      	ldr	r2, [pc, #400]	; (8003ea0 <HAL_I2C_Init+0x23c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d802      	bhi.n	8003d18 <HAL_I2C_Init+0xb4>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3301      	adds	r3, #1
 8003d16:	e009      	b.n	8003d2c <HAL_I2C_Init+0xc8>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	4a63      	ldr	r2, [pc, #396]	; (8003eb0 <HAL_I2C_Init+0x24c>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4956      	ldr	r1, [pc, #344]	; (8003ea0 <HAL_I2C_Init+0x23c>)
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	d80d      	bhi.n	8003d68 <HAL_I2C_Init+0x104>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e59      	subs	r1, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	bf38      	it	cc
 8003d64:	2304      	movcc	r3, #4
 8003d66:	e04f      	b.n	8003e08 <HAL_I2C_Init+0x1a4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <HAL_I2C_Init+0x130>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	440b      	add	r3, r1
 8003d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e012      	b.n	8003dba <HAL_I2C_Init+0x156>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1e58      	subs	r0, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	0099      	lsls	r1, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Init+0x15e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e022      	b.n	8003e08 <HAL_I2C_Init+0x1a4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10e      	bne.n	8003de8 <HAL_I2C_Init+0x184>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1e58      	subs	r0, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	440b      	add	r3, r1
 8003dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	e00f      	b.n	8003e08 <HAL_I2C_Init+0x1a4>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e58      	subs	r0, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	0099      	lsls	r1, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	6809      	ldr	r1, [r1, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6911      	ldr	r1, [r2, #16]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	4311      	orrs	r1, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	000186a0 	.word	0x000186a0
 8003ea4:	001e847f 	.word	0x001e847f
 8003ea8:	003d08ff 	.word	0x003d08ff
 8003eac:	431bde83 	.word	0x431bde83
 8003eb0:	10624dd3 	.word	0x10624dd3

08003eb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	817b      	strh	r3, [r7, #10]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7fe f946 	bl	8002158 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	f040 8213 	bne.w	8004302 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2319      	movs	r3, #25
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	497e      	ldr	r1, [pc, #504]	; (80040e0 <HAL_I2C_Master_Receive+0x22c>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fac8 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e206      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_I2C_Master_Receive+0x50>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e1ff      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d007      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2222      	movs	r2, #34	; 0x22
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2210      	movs	r2, #16
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a5e      	ldr	r2, [pc, #376]	; (80040e4 <HAL_I2C_Master_Receive+0x230>)
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f6c:	8979      	ldrh	r1, [r7, #10]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f9cc 	bl	8004310 <I2C_MasterRequestRead>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c0      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e194      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d11d      	bne.n	8003ff6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ff2:	b662      	cpsie	i
 8003ff4:	e172      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d11d      	bne.n	800403a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800400e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004036:	b662      	cpsie	i
 8004038:	e150      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004060:	e13c      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b03      	cmp	r3, #3
 8004068:	f200 80f5 	bhi.w	8004256 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	2b01      	cmp	r3, #1
 8004072:	d123      	bne.n	80040bc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fad5 	bl	8004628 <I2C_WaitOnRXNEFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e13d      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ba:	e10f      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d150      	bne.n	8004166 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2200      	movs	r2, #0
 80040cc:	4906      	ldr	r1, [pc, #24]	; (80040e8 <HAL_I2C_Master_Receive+0x234>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f9d4 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e112      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
 80040de:	bf00      	nop
 80040e0:	00100002 	.word	0x00100002
 80040e4:	ffff0000 	.word	0xffff0000
 80040e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040ec:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004130:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004164:	e0ba      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2200      	movs	r2, #0
 800416e:	4967      	ldr	r1, [pc, #412]	; (800430c <HAL_I2C_Master_Receive+0x458>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f983 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0c1      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004190:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	494f      	ldr	r1, [pc, #316]	; (800430c <HAL_I2C_Master_Receive+0x458>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f954 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e092      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004220:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004254:	e042      	b.n	80042dc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f9e4 	bl	8004628 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e04c      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d118      	bne.n	80042dc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f aebe 	bne.w	8004062 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	00010004 	.word	0x00010004

08004310 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	460b      	mov	r3, r1
 800431e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004334:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d006      	beq.n	800434a <I2C_MasterRequestRead+0x3a>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d003      	beq.n	800434a <I2C_MasterRequestRead+0x3a>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e00b      	b.n	8004374 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b11      	cmp	r3, #17
 8004362:	d107      	bne.n	8004374 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004372:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f87b 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e06d      	b.n	800446c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004398:	d108      	bne.n	80043ac <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	611a      	str	r2, [r3, #16]
 80043aa:	e053      	b.n	8004454 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	11db      	asrs	r3, r3, #7
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0306 	and.w	r3, r3, #6
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f063 030f 	orn	r3, r3, #15
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	492a      	ldr	r1, [pc, #168]	; (8004474 <I2C_MasterRequestRead+0x164>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f8ad 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e048      	b.n	800446c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4923      	ldr	r1, [pc, #140]	; (8004478 <I2C_MasterRequestRead+0x168>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f89d 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e038      	b.n	800446c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f825 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e017      	b.n	800446c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800443c:	897b      	ldrh	r3, [r7, #10]
 800443e:	11db      	asrs	r3, r3, #7
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0306 	and.w	r3, r3, #6
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 030e 	orn	r3, r3, #14
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4907      	ldr	r1, [pc, #28]	; (8004478 <I2C_MasterRequestRead+0x168>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f865 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	00010008 	.word	0x00010008
 8004478:	00010002 	.word	0x00010002

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e025      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d021      	beq.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fd fe5f 	bl	8002158 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e023      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10d      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	e00c      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0b6      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004538:	e051      	b.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d123      	bne.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004562:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e046      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d021      	beq.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd fddd 	bl	8002158 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e020      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10c      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e00b      	b.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d18d      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004634:	e042      	b.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d119      	bne.n	8004678 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e029      	b.n	80046cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004678:	f7fd fd6e 	bl	8002158 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d302      	bcc.n	800468e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e007      	b.n	80046cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d1b5      	bne.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e26c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b92      	ldr	r3, [pc, #584]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004700:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d112      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
 800470c:	4b8c      	ldr	r3, [pc, #560]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b89      	ldr	r3, [pc, #548]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x12c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e246      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x76>
 800473c:	4b80      	ldr	r3, [pc, #512]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7f      	ldr	r2, [pc, #508]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7a      	ldr	r2, [pc, #488]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b78      	ldr	r3, [pc, #480]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a77      	ldr	r2, [pc, #476]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xbc>
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a71      	ldr	r2, [pc, #452]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 8004790:	4b6b      	ldr	r3, [pc, #428]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6a      	ldr	r2, [pc, #424]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a67      	ldr	r2, [pc, #412]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd fcd2 	bl	8002158 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fcce 	bl	8002158 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e1fa      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe4>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd fcbe 	bl	8002158 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fcba 	bl	8002158 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1e6      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x10c>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
 8004826:	4b46      	ldr	r3, [pc, #280]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1ba      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4939      	ldr	r1, [pc, #228]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e03a      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_RCC_OscConfig+0x270>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd fc73 	bl	8002158 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fd fc6f 	bl	8002158 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e19b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4927      	ldr	r1, [pc, #156]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <HAL_RCC_OscConfig+0x270>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd fc52 	bl	8002158 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fd fc4e 	bl	8002158 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e17a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03a      	beq.n	8004958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_RCC_OscConfig+0x274>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd fc32 	bl	8002158 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd fc2e 	bl	8002158 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e15a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004916:	2001      	movs	r0, #1
 8004918:	f000 fb0a 	bl	8004f30 <RCC_Delay>
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_RCC_OscConfig+0x274>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004924:	f7fd fc18 	bl	8002158 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492a:	e00f      	b.n	800494c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fd fc14 	bl	8002158 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d908      	bls.n	800494c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e140      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	42420000 	.word	0x42420000
 8004948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e9      	bne.n	800492c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a6 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b97      	ldr	r3, [pc, #604]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b94      	ldr	r3, [pc, #592]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a93      	ldr	r2, [pc, #588]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499e:	4b8b      	ldr	r3, [pc, #556]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a8a      	ldr	r2, [pc, #552]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fbd5 	bl	8002158 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd fbd1 	bl	8002158 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b64      	cmp	r3, #100	; 0x64
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0fd      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x312>
 80049d8:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4a7a      	ldr	r2, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6213      	str	r3, [r2, #32]
 80049e4:	e02d      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x334>
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4a75      	ldr	r2, [pc, #468]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6213      	str	r3, [r2, #32]
 80049fa:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a72      	ldr	r2, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6213      	str	r3, [r2, #32]
 8004a06:	e01c      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCC_OscConfig+0x356>
 8004a10:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a6c      	ldr	r2, [pc, #432]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6213      	str	r3, [r2, #32]
 8004a28:	e00b      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a66      	ldr	r2, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	4b64      	ldr	r3, [pc, #400]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d015      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fb85 	bl	8002158 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd fb81 	bl	8002158 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0ab      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ee      	beq.n	8004a52 <HAL_RCC_OscConfig+0x37e>
 8004a74:	e014      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7fd fb6f 	bl	8002158 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fd fb6b 	bl	8002158 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e095      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4a47      	ldr	r2, [pc, #284]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8081 	beq.w	8004bbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abc:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d061      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d146      	bne.n	8004b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fb3f 	bl	8002158 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fd fb3b 	bl	8002158 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e067      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d108      	bne.n	8004b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	492d      	ldr	r1, [pc, #180]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a19      	ldr	r1, [r3, #32]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	4927      	ldr	r1, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fd fb0f 	bl	8002158 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd fb0b 	bl	8002158 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e037      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x46a>
 8004b5c:	e02f      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fd faf8 	bl	8002158 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd faf4 	bl	8002158 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e020      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x498>
 8004b8a:	e018      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e013      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42420060 	.word	0x42420060

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d0      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d910      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4965      	ldr	r1, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d040      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e073      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4936      	ldr	r1, [pc, #216]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fa48 	bl	8002158 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fd fa44 	bl	8002158 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e053      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d210      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4922      	ldr	r1, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	fa21 f303 	lsr.w	r3, r1, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd f8e2 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	08008520 	.word	0x08008520
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000004 	.word	0x20000004

08004da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b490      	push	{r4, r7}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004db0:	1d3c      	adds	r4, r7, #4
 8004db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d002      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x46>
 8004de6:	e02d      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dea:	623b      	str	r3, [r7, #32]
      break;
 8004dec:	e02d      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	0c9b      	lsrs	r3, r3, #18
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c5b      	lsrs	r3, r3, #17
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4a0f      	ldr	r2, [pc, #60]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e26:	fb02 f203 	mul.w	r2, r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
 8004e32:	e004      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	623b      	str	r3, [r7, #32]
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e46:	623b      	str	r3, [r7, #32]
      break;
 8004e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc90      	pop	{r4, r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	08008494 	.word	0x08008494
 8004e5c:	080084a4 	.word	0x080084a4
 8004e60:	40021000 	.word	0x40021000
 8004e64:	007a1200 	.word	0x007a1200
 8004e68:	003d0900 	.word	0x003d0900

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	20000000 	.word	0x20000000

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e84:	f7ff fff2 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	08008530 	.word	0x08008530

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eac:	f7ff ffde 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0adb      	lsrs	r3, r3, #11
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	08008530 	.word	0x08008530

08004ed0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	220f      	movs	r2, #15
 8004ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_GetClockConfig+0x58>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 0203 	and.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_RCC_GetClockConfig+0x58>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_GetClockConfig+0x58>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCC_GetClockConfig+0x58>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_GetClockConfig+0x5c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0207 	and.w	r2, r3, #7
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40022000 	.word	0x40022000

08004f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <RCC_Delay+0x34>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <RCC_Delay+0x38>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	0a5b      	lsrs	r3, r3, #9
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f4c:	bf00      	nop
  }
  while (Delay --);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	60fa      	str	r2, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f9      	bne.n	8004f4c <RCC_Delay+0x1c>
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d07d      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8c:	4b4f      	ldr	r3, [pc, #316]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4a4b      	ldr	r2, [pc, #300]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	61d3      	str	r3, [r2, #28]
 8004fa4:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb4:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d118      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc0:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a42      	ldr	r2, [pc, #264]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fcc:	f7fd f8c4 	bl	8002158 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd4:	f7fd f8c0 	bl	8002158 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e06d      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d02e      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	429a      	cmp	r2, r3
 800500e:	d027      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005010:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fd f88f 	bl	8002158 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd f88b 	bl	8002158 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e036      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ee      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005060:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4917      	ldr	r1, [pc, #92]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	4313      	orrs	r3, r2
 8005070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005072:	7dfb      	ldrb	r3, [r7, #23]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005082:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	490b      	ldr	r1, [pc, #44]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4904      	ldr	r1, [pc, #16]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42420440 	.word	0x42420440

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e01d      	b.n	8005126 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f815 	bl	800512e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 f962 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b06      	cmp	r3, #6
 8005168:	d007      	beq.n	800517a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d122      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11b      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0202 	mvn.w	r2, #2
 80051b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8ed 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 80051ce:	e005      	b.n	80051dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8e0 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8ef 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d122      	bne.n	8005236 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d11b      	bne.n	8005236 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0204 	mvn.w	r2, #4
 8005206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8c3 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 8005222:	e005      	b.n	8005230 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8b6 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8c5 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d122      	bne.n	800528a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d11b      	bne.n	800528a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0208 	mvn.w	r2, #8
 800525a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f899 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 8005276:	e005      	b.n	8005284 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f88c 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f89b 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d122      	bne.n	80052de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d11b      	bne.n	80052de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f06f 0210 	mvn.w	r2, #16
 80052ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2208      	movs	r2, #8
 80052b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f86f 	bl	80053a8 <HAL_TIM_IC_CaptureCallback>
 80052ca:	e005      	b.n	80052d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f862 	bl	8005396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f871 	bl	80053ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0201 	mvn.w	r2, #1
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fc fc8f 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8c0 	bl	80054b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f835 	bl	80053cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b20      	cmp	r3, #32
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0220 	mvn.w	r2, #32
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f88b 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
	...

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a29      	ldr	r2, [pc, #164]	; (8005498 <TIM_Base_SetConfig+0xb8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x30>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x30>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a26      	ldr	r2, [pc, #152]	; (800549c <TIM_Base_SetConfig+0xbc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x30>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <TIM_Base_SetConfig+0xc0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <TIM_Base_SetConfig+0xb8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_Base_SetConfig+0x62>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d007      	beq.n	8005442 <TIM_Base_SetConfig+0x62>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <TIM_Base_SetConfig+0xbc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_Base_SetConfig+0x62>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <TIM_Base_SetConfig+0xc0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d108      	bne.n	8005454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <TIM_Base_SetConfig+0xb8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	615a      	str	r2, [r3, #20]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80054c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80054ca:	e003      	b.n	80054d4 <LoopCopyDataInit>

080054cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80054ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80054d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80054d2:	3104      	adds	r1, #4

080054d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80054d4:	480a      	ldr	r0, [pc, #40]	; (8005500 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80054d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80054da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80054dc:	d3f6      	bcc.n	80054cc <CopyDataInit>
  ldr r2, =_sbss
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80054e0:	e002      	b.n	80054e8 <LoopFillZerobss>

080054e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80054e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80054e4:	f842 3b04 	str.w	r3, [r2], #4

080054e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80054e8:	4b08      	ldr	r3, [pc, #32]	; (800550c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80054ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80054ec:	d3f9      	bcc.n	80054e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054ee:	f7fc fdd7 	bl	80020a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054f2:	f002 ff59 	bl	80083a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054f6:	f7fb fd25 	bl	8000f44 <main>
  bx lr
 80054fa:	4770      	bx	lr
  ldr r3, =_sidata
 80054fc:	0800854c 	.word	0x0800854c
  ldr r0, =_sdata
 8005500:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005504:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8005508:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800550c:	200023b0 	.word	0x200023b0

08005510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005510:	e7fe      	b.n	8005510 <ADC1_2_IRQHandler>

08005512 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f103 0208 	add.w	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f04f 32ff 	mov.w	r2, #4294967295
 800552a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f103 0208 	add.w	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f103 0208 	add.w	r2, r3, #8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d103      	bne.n	80055ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e00c      	b.n	80055e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3308      	adds	r3, #8
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <vListInsert+0x2e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d2f6      	bcs.n	80055d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6852      	ldr	r2, [r2, #4]
 800563e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d103      	bne.n	8005652 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1e5a      	subs	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	e7fe      	b.n	8005696 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005698:	f001 f8e4 	bl	8006864 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	3b01      	subs	r3, #1
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	441a      	add	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	22ff      	movs	r2, #255	; 0xff
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d114      	bne.n	8005718 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01a      	beq.n	800572c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3310      	adds	r3, #16
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fdba 	bl	8006274 <xTaskRemoveFromEventList>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d012      	beq.n	800572c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <xQueueGenericReset+0xcc>)
 8005708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	e009      	b.n	800572c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3310      	adds	r3, #16
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fef8 	bl	8005512 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3324      	adds	r3, #36	; 0x24
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fef3 	bl	8005512 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800572c:	f001 f8c8 	bl	80068c0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005730:	2301      	movs	r3, #1
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <xQueueGenericCreate+0x28>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e7fe      	b.n	8005766 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e004      	b.n	800577e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3348      	adds	r3, #72	; 0x48
 8005782:	4618      	mov	r0, r3
 8005784:	f001 f932 	bl	80069ec <pvPortMalloc>
 8005788:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00f      	beq.n	80057b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	3348      	adds	r3, #72	; 0x48
 8005794:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800579e:	79fa      	ldrb	r2, [r7, #7]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f805 	bl	80057ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80057b0:	69bb      	ldr	r3, [r7, #24]
	}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e002      	b.n	80057dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057e8:	2101      	movs	r1, #1
 80057ea:	69b8      	ldr	r0, [r7, #24]
 80057ec:	f7ff ff40 	bl	8005670 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	2073      	movs	r0, #115	; 0x73
 80057f8:	f001 ffba 	bl	8007770 <SEGGER_SYSVIEW_RecordU32x3>
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	; 0x38
 8005808:	af04      	add	r7, sp, #16
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <xTaskCreateStatic+0x28>
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	e7fe      	b.n	800582a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <xTaskCreateStatic+0x42>
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e7fe      	b.n	8005844 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005846:	2354      	movs	r3, #84	; 0x54
 8005848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b54      	cmp	r3, #84	; 0x54
 800584e:	d009      	beq.n	8005864 <xTaskCreateStatic+0x60>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e7fe      	b.n	8005862 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01e      	beq.n	80058a8 <xTaskCreateStatic+0xa4>
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005878:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	2202      	movs	r2, #2
 800587e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005882:	2300      	movs	r3, #0
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	f107 0314 	add.w	r3, r7, #20
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f850 	bl	8005940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058a2:	f000 f8cb 	bl	8005a3c <prvAddNewTaskToReadyList>
 80058a6:	e001      	b.n	80058ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058ac:	697b      	ldr	r3, [r7, #20]
	}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3728      	adds	r7, #40	; 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b08c      	sub	sp, #48	; 0x30
 80058ba:	af04      	add	r7, sp, #16
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 f88e 	bl	80069ec <pvPortMalloc>
 80058d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058d8:	2054      	movs	r0, #84	; 0x54
 80058da:	f001 f887 	bl	80069ec <pvPortMalloc>
 80058de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
 80058ec:	e005      	b.n	80058fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058ee:	6978      	ldr	r0, [r7, #20]
 80058f0:	f001 f93e 	bl	8006b70 <vPortFree>
 80058f4:	e001      	b.n	80058fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	2300      	movs	r3, #0
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f80e 	bl	8005940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005924:	69f8      	ldr	r0, [r7, #28]
 8005926:	f000 f889 	bl	8005a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800592a:	2301      	movs	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e002      	b.n	8005936 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005930:	f04f 33ff 	mov.w	r3, #4294967295
 8005934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005936:	69bb      	ldr	r3, [r7, #24]
	}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005958:	3b01      	subs	r3, #1
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <prvInitialiseNewTask+0x46>
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e7fe      	b.n	8005984 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e012      	b.n	80059b2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	7819      	ldrb	r1, [r3, #0]
 8005994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	3334      	adds	r3, #52	; 0x34
 800599c:	460a      	mov	r2, r1
 800599e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d006      	beq.n	80059ba <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b0f      	cmp	r3, #15
 80059b6:	d9e9      	bls.n	800598c <prvInitialiseNewTask+0x4c>
 80059b8:	e000      	b.n	80059bc <prvInitialiseNewTask+0x7c>
		{
			break;
 80059ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d901      	bls.n	80059ce <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ca:	2306      	movs	r3, #6
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2200      	movs	r2, #0
 80059de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fdb3 	bl	8005550 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fdae 	bl	8005550 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	f1c3 0207 	rsb	r2, r3, #7
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	69b8      	ldr	r0, [r7, #24]
 8005a1e:	f000 fddd 	bl	80065dc <pxPortInitialiseStack>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a34:	bf00      	nop
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a3c:	b5b0      	push	{r4, r5, r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a44:	f000 ff0e 	bl	8006864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <prvAddNewTaskToReadyList+0xf4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	4a38      	ldr	r2, [pc, #224]	; (8005b30 <prvAddNewTaskToReadyList+0xf4>)
 8005a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a52:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <prvAddNewTaskToReadyList+0xf8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a5a:	4a36      	ldr	r2, [pc, #216]	; (8005b34 <prvAddNewTaskToReadyList+0xf8>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a60:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <prvAddNewTaskToReadyList+0xf4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d110      	bne.n	8005a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a68:	f000 fc82 	bl	8006370 <prvInitialiseTaskLists>
 8005a6c:	e00d      	b.n	8005a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a6e:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <prvAddNewTaskToReadyList+0xfc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a76:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <prvAddNewTaskToReadyList+0xf8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d802      	bhi.n	8005a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a84:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <prvAddNewTaskToReadyList+0xf8>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a8a:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <prvAddNewTaskToReadyList+0x100>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <prvAddNewTaskToReadyList+0x100>)
 8005a92:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <prvAddNewTaskToReadyList+0x8c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f002 fa15 	bl	8007ecc <SEGGER_SYSVIEW_OnTaskCreate>
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461c      	mov	r4, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	1ae3      	subs	r3, r4, r3
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	f001 f966 	bl	8006d94 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 fa82 	bl	8007fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <prvAddNewTaskToReadyList+0x104>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <prvAddNewTaskToReadyList+0x104>)
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <prvAddNewTaskToReadyList+0x108>)
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7ff fd35 	bl	8005568 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005afe:	f000 fedf 	bl	80068c0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <prvAddNewTaskToReadyList+0xfc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00e      	beq.n	8005b28 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <prvAddNewTaskToReadyList+0xf8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d207      	bcs.n	8005b28 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvAddNewTaskToReadyList+0x10c>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b30:	2000038c 	.word	0x2000038c
 8005b34:	2000028c 	.word	0x2000028c
 8005b38:	20000398 	.word	0x20000398
 8005b3c:	200003a8 	.word	0x200003a8
 8005b40:	20000394 	.word	0x20000394
 8005b44:	20000290 	.word	0x20000290
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005b54:	f000 fe86 	bl	8006864 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <vTaskDelete+0x18>
 8005b5e:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <vTaskDelete+0x110>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	e000      	b.n	8005b66 <vTaskDelete+0x1a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff fd56 	bl	800561e <uxListRemove>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d115      	bne.n	8005ba4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4938      	ldr	r1, [pc, #224]	; (8005c60 <vTaskDelete+0x114>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskDelete+0x58>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	2201      	movs	r2, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	43da      	mvns	r2, r3
 8005b9a:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <vTaskDelete+0x118>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <vTaskDelete+0x118>)
 8005ba2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fd34 	bl	800561e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <vTaskDelete+0x11c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <vTaskDelete+0x11c>)
 8005bbe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005bc0:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <vTaskDelete+0x110>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10b      	bne.n	8005be2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4826      	ldr	r0, [pc, #152]	; (8005c6c <vTaskDelete+0x120>)
 8005bd2:	f7ff fcc9 	bl	8005568 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <vTaskDelete+0x124>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <vTaskDelete+0x124>)
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e009      	b.n	8005bf6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005be2:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <vTaskDelete+0x128>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <vTaskDelete+0x128>)
 8005bea:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fc2b 	bl	8006448 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005bf2:	f000 fc57 	bl	80064a4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 fa8d 	bl	8008118 <SEGGER_SYSVIEW_ShrinkId>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4619      	mov	r1, r3
 8005c02:	2022      	movs	r0, #34	; 0x22
 8005c04:	f001 fd1e 	bl	8007644 <SEGGER_SYSVIEW_RecordU32>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f92a 	bl	8006e64 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 8005c10:	f000 fe56 	bl	80068c0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <vTaskDelete+0x12c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01a      	beq.n	8005c52 <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <vTaskDelete+0x110>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d115      	bne.n	8005c52 <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <vTaskDelete+0x130>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <vTaskDelete+0xf6>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	e7fe      	b.n	8005c40 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <vTaskDelete+0x134>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000028c 	.word	0x2000028c
 8005c60:	20000290 	.word	0x20000290
 8005c64:	20000394 	.word	0x20000394
 8005c68:	200003a8 	.word	0x200003a8
 8005c6c:	20000360 	.word	0x20000360
 8005c70:	20000374 	.word	0x20000374
 8005c74:	2000038c 	.word	0x2000038c
 8005c78:	20000398 	.word	0x20000398
 8005c7c:	200003b4 	.word	0x200003b4
 8005c80:	e000ed04 	.word	0xe000ed04

08005c84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <vTaskDelayUntil+0x28>
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e7fe      	b.n	8005caa <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <vTaskDelayUntil+0x42>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	e7fe      	b.n	8005cc4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005cc6:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <vTaskDelayUntil+0xf0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <vTaskDelayUntil+0x5e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e7fe      	b.n	8005ce0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005ce2:	f000 f8e3 	bl	8005eac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vTaskDelayUntil+0xf4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a3a      	ldr	r2, [r7, #32]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d20b      	bcs.n	8005d18 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d211      	bcs.n	8005d2e <vTaskDelayUntil+0xaa>
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d90d      	bls.n	8005d2e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
 8005d16:	e00a      	b.n	8005d2e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d303      	bcc.n	8005d2a <vTaskDelayUntil+0xa6>
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d901      	bls.n	8005d2e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8005d3a:	2024      	movs	r0, #36	; 0x24
 8005d3c:	f001 fc64 	bl	8007608 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fbcf 	bl	80064ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005d4e:	f000 f8bb 	bl	8005ec8 <xTaskResumeAll>
 8005d52:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <vTaskDelayUntil+0xf8>)
 8005d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d6a:	bf00      	nop
 8005d6c:	3728      	adds	r7, #40	; 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200003b4 	.word	0x200003b4
 8005d78:	20000390 	.word	0x20000390
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <vTaskDelay+0x68>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <vTaskDelay+0x2e>
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	e7fe      	b.n	8005dac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005dae:	f000 f87d 	bl	8005eac <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	2023      	movs	r0, #35	; 0x23
 8005db6:	f001 fc45 	bl	8007644 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb95 	bl	80064ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dc2:	f000 f881 	bl	8005ec8 <xTaskResumeAll>
 8005dc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <vTaskDelay+0x6c>)
 8005dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200003b4 	.word	0x200003b4
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dfe:	463a      	mov	r2, r7
 8005e00:	1d39      	adds	r1, r7, #4
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fb f884 	bl	8000f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	9202      	str	r2, [sp, #8]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	491d      	ldr	r1, [pc, #116]	; (8005e94 <vTaskStartScheduler+0xa4>)
 8005e20:	481d      	ldr	r0, [pc, #116]	; (8005e98 <vTaskStartScheduler+0xa8>)
 8005e22:	f7ff fcef 	bl	8005804 <xTaskCreateStatic>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <vTaskStartScheduler+0xac>)
 8005e2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <vTaskStartScheduler+0xac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e001      	b.n	8005e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d115      	bne.n	8005e70 <vTaskStartScheduler+0x80>
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <vTaskStartScheduler+0xb0>)
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <vTaskStartScheduler+0xb4>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <vTaskStartScheduler+0xb8>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e6a:	f000 fc35 	bl	80066d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e6e:	e00d      	b.n	8005e8c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d109      	bne.n	8005e8c <vTaskStartScheduler+0x9c>
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e7fe      	b.n	8005e8a <vTaskStartScheduler+0x9a>
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	080084a8 	.word	0x080084a8
 8005e98:	08006341 	.word	0x08006341
 8005e9c:	200003b0 	.word	0x200003b0
 8005ea0:	200003ac 	.word	0x200003ac
 8005ea4:	20000398 	.word	0x20000398
 8005ea8:	20000390 	.word	0x20000390

08005eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	200003b4 	.word	0x200003b4

08005ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ed6:	4b43      	ldr	r3, [pc, #268]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <xTaskResumeAll+0x2a>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	e7fe      	b.n	8005ef0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ef2:	f000 fcb7 	bl	8006864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a39      	ldr	r2, [pc, #228]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f00:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d165      	bne.n	8005fd4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f08:	4b37      	ldr	r3, [pc, #220]	; (8005fe8 <xTaskResumeAll+0x120>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d061      	beq.n	8005fd4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f10:	e032      	b.n	8005f78 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <xTaskResumeAll+0x124>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3318      	adds	r3, #24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fb7d 	bl	800561e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fb78 	bl	800561e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 f84f 	bl	8007fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <xTaskResumeAll+0x128>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	4a2a      	ldr	r2, [pc, #168]	; (8005ff0 <xTaskResumeAll+0x128>)
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <xTaskResumeAll+0x12c>)
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7ff fb02 	bl	8005568 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005f72:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <xTaskResumeAll+0x134>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <xTaskResumeAll+0x124>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1c8      	bne.n	8005f12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f86:	f000 fa8d 	bl	80064a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <xTaskResumeAll+0x138>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d010      	beq.n	8005fb8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f96:	f000 f845 	bl	8006024 <xTaskIncrementTick>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005fa0:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <xTaskResumeAll+0x134>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f1      	bne.n	8005f96 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <xTaskResumeAll+0x138>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fb8:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <xTaskResumeAll+0x134>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <xTaskResumeAll+0x13c>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fd4:	f000 fc74 	bl	80068c0 <vPortExitCritical>

	return xAlreadyYielded;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200003b4 	.word	0x200003b4
 8005fe8:	2000038c 	.word	0x2000038c
 8005fec:	2000034c 	.word	0x2000034c
 8005ff0:	20000394 	.word	0x20000394
 8005ff4:	20000290 	.word	0x20000290
 8005ff8:	2000028c 	.word	0x2000028c
 8005ffc:	200003a0 	.word	0x200003a0
 8006000:	2000039c 	.word	0x2000039c
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800600e:	4b04      	ldr	r3, [pc, #16]	; (8006020 <xTaskGetTickCount+0x18>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006014:	687b      	ldr	r3, [r7, #4]
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000390 	.word	0x20000390

08006024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602e:	4b52      	ldr	r3, [pc, #328]	; (8006178 <xTaskIncrementTick+0x154>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 8090 	bne.w	8006158 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006038:	4b50      	ldr	r3, [pc, #320]	; (800617c <xTaskIncrementTick+0x158>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006040:	4a4e      	ldr	r2, [pc, #312]	; (800617c <xTaskIncrementTick+0x158>)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11f      	bne.n	800608c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800604c:	4b4c      	ldr	r3, [pc, #304]	; (8006180 <xTaskIncrementTick+0x15c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <xTaskIncrementTick+0x46>
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	e7fe      	b.n	8006068 <xTaskIncrementTick+0x44>
 800606a:	4b45      	ldr	r3, [pc, #276]	; (8006180 <xTaskIncrementTick+0x15c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	4b44      	ldr	r3, [pc, #272]	; (8006184 <xTaskIncrementTick+0x160>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a42      	ldr	r2, [pc, #264]	; (8006180 <xTaskIncrementTick+0x15c>)
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4a42      	ldr	r2, [pc, #264]	; (8006184 <xTaskIncrementTick+0x160>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b42      	ldr	r3, [pc, #264]	; (8006188 <xTaskIncrementTick+0x164>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	4a40      	ldr	r2, [pc, #256]	; (8006188 <xTaskIncrementTick+0x164>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	f000 fa0c 	bl	80064a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <xTaskIncrementTick+0x168>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d351      	bcc.n	800613a <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006096:	4b3a      	ldr	r3, [pc, #232]	; (8006180 <xTaskIncrementTick+0x15c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <xTaskIncrementTick+0x80>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <xTaskIncrementTick+0x82>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060aa:	4b38      	ldr	r3, [pc, #224]	; (800618c <xTaskIncrementTick+0x168>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	601a      	str	r2, [r3, #0]
					break;
 80060b2:	e042      	b.n	800613a <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060b4:	4b32      	ldr	r3, [pc, #200]	; (8006180 <xTaskIncrementTick+0x15c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d203      	bcs.n	80060d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <xTaskIncrementTick+0x168>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
						break;
 80060d2:	e032      	b.n	800613a <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff faa0 	bl	800561e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	3318      	adds	r3, #24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fa97 	bl	800561e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 ff6e 	bl	8007fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	409a      	lsls	r2, r3
 8006100:	4b23      	ldr	r3, [pc, #140]	; (8006190 <xTaskIncrementTick+0x16c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4313      	orrs	r3, r2
 8006106:	4a22      	ldr	r2, [pc, #136]	; (8006190 <xTaskIncrementTick+0x16c>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <xTaskIncrementTick+0x170>)
 8006118:	441a      	add	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7ff fa21 	bl	8005568 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <xTaskIncrementTick+0x174>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d3b0      	bcc.n	8006096 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006138:	e7ad      	b.n	8006096 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800613a:	4b17      	ldr	r3, [pc, #92]	; (8006198 <xTaskIncrementTick+0x174>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	4914      	ldr	r1, [pc, #80]	; (8006194 <xTaskIncrementTick+0x170>)
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d907      	bls.n	8006162 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e004      	b.n	8006162 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006158:	4b10      	ldr	r3, [pc, #64]	; (800619c <xTaskIncrementTick+0x178>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	4a0f      	ldr	r2, [pc, #60]	; (800619c <xTaskIncrementTick+0x178>)
 8006160:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <xTaskIncrementTick+0x17c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800616e:	697b      	ldr	r3, [r7, #20]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	200003b4 	.word	0x200003b4
 800617c:	20000390 	.word	0x20000390
 8006180:	20000344 	.word	0x20000344
 8006184:	20000348 	.word	0x20000348
 8006188:	200003a4 	.word	0x200003a4
 800618c:	200003ac 	.word	0x200003ac
 8006190:	20000394 	.word	0x20000394
 8006194:	20000290 	.word	0x20000290
 8006198:	2000028c 	.word	0x2000028c
 800619c:	2000039c 	.word	0x2000039c
 80061a0:	200003a0 	.word	0x200003a0

080061a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061aa:	4b2c      	ldr	r3, [pc, #176]	; (800625c <vTaskSwitchContext+0xb8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061b2:	4b2b      	ldr	r3, [pc, #172]	; (8006260 <vTaskSwitchContext+0xbc>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061b8:	e04c      	b.n	8006254 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80061ba:	4b29      	ldr	r3, [pc, #164]	; (8006260 <vTaskSwitchContext+0xbc>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <vTaskSwitchContext+0xc0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	fab3 f383 	clz	r3, r3
 80061cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	f1c3 031f 	rsb	r3, r3, #31
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	4924      	ldr	r1, [pc, #144]	; (8006268 <vTaskSwitchContext+0xc4>)
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	e7fe      	b.n	80061fc <vTaskSwitchContext+0x58>
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <vTaskSwitchContext+0xc4>)
 800620a:	4413      	add	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3308      	adds	r3, #8
 8006220:	429a      	cmp	r2, r3
 8006222:	d104      	bne.n	800622e <vTaskSwitchContext+0x8a>
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <vTaskSwitchContext+0xc8>)
 8006236:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <vTaskSwitchContext+0xc8>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <vTaskSwitchContext+0xcc>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d102      	bne.n	800624a <vTaskSwitchContext+0xa6>
 8006244:	f001 fe26 	bl	8007e94 <SEGGER_SYSVIEW_OnIdle>
}
 8006248:	e004      	b.n	8006254 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800624a:	4b08      	ldr	r3, [pc, #32]	; (800626c <vTaskSwitchContext+0xc8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fe7e 	bl	8007f50 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200003b4 	.word	0x200003b4
 8006260:	200003a0 	.word	0x200003a0
 8006264:	20000394 	.word	0x20000394
 8006268:	20000290 	.word	0x20000290
 800626c:	2000028c 	.word	0x2000028c
 8006270:	200003b0 	.word	0x200003b0

08006274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <xTaskRemoveFromEventList+0x2a>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e7fe      	b.n	800629c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3318      	adds	r3, #24
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff f9bb 	bl	800561e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a8:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <xTaskRemoveFromEventList+0xb4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d120      	bne.n	80062f2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f9b2 	bl	800561e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fe89 	bl	8007fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	2201      	movs	r2, #1
 80062c8:	409a      	lsls	r2, r3
 80062ca:	4b18      	ldr	r3, [pc, #96]	; (800632c <xTaskRemoveFromEventList+0xb8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	4a16      	ldr	r2, [pc, #88]	; (800632c <xTaskRemoveFromEventList+0xb8>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <xTaskRemoveFromEventList+0xbc>)
 80062e2:	441a      	add	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7ff f93c 	bl	8005568 <vListInsertEnd>
 80062f0:	e005      	b.n	80062fe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	3318      	adds	r3, #24
 80062f6:	4619      	mov	r1, r3
 80062f8:	480e      	ldr	r0, [pc, #56]	; (8006334 <xTaskRemoveFromEventList+0xc0>)
 80062fa:	f7ff f935 	bl	8005568 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <xTaskRemoveFromEventList+0xc4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d905      	bls.n	8006318 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <xTaskRemoveFromEventList+0xc8>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e001      	b.n	800631c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800631c:	697b      	ldr	r3, [r7, #20]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	200003b4 	.word	0x200003b4
 800632c:	20000394 	.word	0x20000394
 8006330:	20000290 	.word	0x20000290
 8006334:	2000034c 	.word	0x2000034c
 8006338:	2000028c 	.word	0x2000028c
 800633c:	200003a0 	.word	0x200003a0

08006340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006348:	f000 f852 	bl	80063f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <prvIdleTask+0x28>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d9f9      	bls.n	8006348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <prvIdleTask+0x2c>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006364:	e7f0      	b.n	8006348 <prvIdleTask+0x8>
 8006366:	bf00      	nop
 8006368:	20000290 	.word	0x20000290
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006376:	2300      	movs	r3, #0
 8006378:	607b      	str	r3, [r7, #4]
 800637a:	e00c      	b.n	8006396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <prvInitialiseTaskLists+0x60>)
 8006388:	4413      	add	r3, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f8c1 	bl	8005512 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3301      	adds	r3, #1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b06      	cmp	r3, #6
 800639a:	d9ef      	bls.n	800637c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800639c:	480d      	ldr	r0, [pc, #52]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 800639e:	f7ff f8b8 	bl	8005512 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063a2:	480d      	ldr	r0, [pc, #52]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063a4:	f7ff f8b5 	bl	8005512 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a8:	480c      	ldr	r0, [pc, #48]	; (80063dc <prvInitialiseTaskLists+0x6c>)
 80063aa:	f7ff f8b2 	bl	8005512 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063ae:	480c      	ldr	r0, [pc, #48]	; (80063e0 <prvInitialiseTaskLists+0x70>)
 80063b0:	f7ff f8af 	bl	8005512 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063b4:	480b      	ldr	r0, [pc, #44]	; (80063e4 <prvInitialiseTaskLists+0x74>)
 80063b6:	f7ff f8ac 	bl	8005512 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <prvInitialiseTaskLists+0x78>)
 80063bc:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 80063be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <prvInitialiseTaskLists+0x7c>)
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000290 	.word	0x20000290
 80063d4:	2000031c 	.word	0x2000031c
 80063d8:	20000330 	.word	0x20000330
 80063dc:	2000034c 	.word	0x2000034c
 80063e0:	20000360 	.word	0x20000360
 80063e4:	20000378 	.word	0x20000378
 80063e8:	20000344 	.word	0x20000344
 80063ec:	20000348 	.word	0x20000348

080063f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f6:	e019      	b.n	800642c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f8:	f000 fa34 	bl	8006864 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <prvCheckTasksWaitingTermination+0x4c>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff f908 	bl	800561e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <prvCheckTasksWaitingTermination+0x50>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <prvCheckTasksWaitingTermination+0x50>)
 8006416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 8006420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006422:	f000 fa4d 	bl	80068c0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f80e 	bl	8006448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e1      	bne.n	80063f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000360 	.word	0x20000360
 8006440:	2000038c 	.word	0x2000038c
 8006444:	20000374 	.word	0x20000374

08006448 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006456:	2b00      	cmp	r3, #0
 8006458:	d108      	bne.n	800646c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fb86 	bl	8006b70 <vPortFree>
				vPortFree( pxTCB );
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb83 	bl	8006b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800646a:	e017      	b.n	800649c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006472:	2b01      	cmp	r3, #1
 8006474:	d103      	bne.n	800647e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fb7a 	bl	8006b70 <vPortFree>
	}
 800647c:	e00e      	b.n	800649c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006484:	2b02      	cmp	r3, #2
 8006486:	d009      	beq.n	800649c <prvDeleteTCB+0x54>
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e7fe      	b.n	800649a <prvDeleteTCB+0x52>
	}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <prvResetNextTaskUnblockTime+0x40>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <prvResetNextTaskUnblockTime+0x14>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <prvResetNextTaskUnblockTime+0x16>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064be:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c6:	e008      	b.n	80064da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <prvResetNextTaskUnblockTime+0x40>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064d8:	6013      	str	r3, [r2, #0]
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	20000344 	.word	0x20000344
 80064e8:	200003ac 	.word	0x200003ac

080064ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064f6:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064fc:	4b31      	ldr	r3, [pc, #196]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3304      	adds	r3, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff f88b 	bl	800561e <uxListRemove>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800650e:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2201      	movs	r2, #1
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43da      	mvns	r2, r3
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4013      	ands	r3, r2
 8006522:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006524:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d110      	bne.n	8006550 <prvAddCurrentTaskToDelayedList+0x64>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00d      	beq.n	8006550 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006534:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	211b      	movs	r1, #27
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fd8c 	bl	8008058 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006540:	4b20      	ldr	r3, [pc, #128]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4820      	ldr	r0, [pc, #128]	; (80065cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800654a:	f7ff f80d 	bl	8005568 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800654e:	e032      	b.n	80065b6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d20f      	bcs.n	8006588 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006568:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2104      	movs	r1, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f001 fd72 	bl	8008058 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006574:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7ff f814 	bl	80055ae <vListInsert>
}
 8006586:	e016      	b.n	80065b6 <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2104      	movs	r1, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fd62 	bl	8008058 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7ff f804 	bl	80055ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d202      	bcs.n	80065b6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80065b0:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6013      	str	r3, [r2, #0]
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000390 	.word	0x20000390
 80065c4:	2000028c 	.word	0x2000028c
 80065c8:	20000394 	.word	0x20000394
 80065cc:	20000378 	.word	0x20000378
 80065d0:	20000348 	.word	0x20000348
 80065d4:	20000344 	.word	0x20000344
 80065d8:	200003ac 	.word	0x200003ac

080065dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3b04      	subs	r3, #4
 80065ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f023 0201 	bic.w	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b04      	subs	r3, #4
 800660a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <pxPortInitialiseStack+0x54>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b14      	subs	r3, #20
 8006616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b20      	subs	r3, #32
 8006622:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	08006635 	.word	0x08006635

08006634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800663e:	4b10      	ldr	r3, [pc, #64]	; (8006680 <prvTaskExitError+0x4c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d009      	beq.n	800665c <prvTaskExitError+0x28>
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e7fe      	b.n	800665a <prvTaskExitError+0x26>
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800666e:	bf00      	nop
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0fc      	beq.n	8006670 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr
 8006680:	2000000c 	.word	0x2000000c
	...

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80066ae:	4770      	bx	lr

080066b0 <pxCurrentTCBConst2>:
 80066b0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80066b8:	4806      	ldr	r0, [pc, #24]	; (80066d4 <prvPortStartFirstTask+0x1c>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	b662      	cpsie	i
 80066c4:	b661      	cpsie	f
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	df00      	svc	0
 80066d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066d2:	bf00      	nop
 80066d4:	e000ed08 	.word	0xe000ed08

080066d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066de:	4b31      	ldr	r3, [pc, #196]	; (80067a4 <xPortStartScheduler+0xcc>)
 80066e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22ff      	movs	r2, #255	; 0xff
 80066ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <xPortStartScheduler+0xd0>)
 8006704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <xPortStartScheduler+0xd4>)
 8006708:	2207      	movs	r2, #7
 800670a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800670c:	e009      	b.n	8006722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800670e:	4b27      	ldr	r3, [pc, #156]	; (80067ac <xPortStartScheduler+0xd4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	4a25      	ldr	r2, [pc, #148]	; (80067ac <xPortStartScheduler+0xd4>)
 8006716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d0ef      	beq.n	800670e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800672e:	4b1f      	ldr	r3, [pc, #124]	; (80067ac <xPortStartScheduler+0xd4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f1c3 0307 	rsb	r3, r3, #7
 8006736:	2b04      	cmp	r3, #4
 8006738:	d009      	beq.n	800674e <xPortStartScheduler+0x76>
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	e7fe      	b.n	800674c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800674e:	4b17      	ldr	r3, [pc, #92]	; (80067ac <xPortStartScheduler+0xd4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <xPortStartScheduler+0xd4>)
 8006756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <xPortStartScheduler+0xd4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006760:	4a12      	ldr	r2, [pc, #72]	; (80067ac <xPortStartScheduler+0xd4>)
 8006762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800676c:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <xPortStartScheduler+0xd8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0f      	ldr	r2, [pc, #60]	; (80067b0 <xPortStartScheduler+0xd8>)
 8006772:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006778:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <xPortStartScheduler+0xd8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <xPortStartScheduler+0xd8>)
 800677e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006784:	f000 f910 	bl	80069a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <xPortStartScheduler+0xdc>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800678e:	f7ff ff93 	bl	80066b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006792:	f7ff fd07 	bl	80061a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006796:	f7ff ff4d 	bl	8006634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	e000e400 	.word	0xe000e400
 80067a8:	200003b8 	.word	0x200003b8
 80067ac:	200003bc 	.word	0x200003bc
 80067b0:	e000ed20 	.word	0xe000ed20
 80067b4:	2000000c 	.word	0x2000000c

080067b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <vInitPrioGroupValue+0xa0>)
 80067c0:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	4b1e      	ldr	r3, [pc, #120]	; (800685c <vInitPrioGroupValue+0xa4>)
 80067e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067e6:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <vInitPrioGroupValue+0xa8>)
 80067e8:	2207      	movs	r2, #7
 80067ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ec:	e009      	b.n	8006802 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <vInitPrioGroupValue+0xa8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	4a1a      	ldr	r2, [pc, #104]	; (8006860 <vInitPrioGroupValue+0xa8>)
 80067f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b80      	cmp	r3, #128	; 0x80
 800680c:	d0ef      	beq.n	80067ee <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800680e:	4b14      	ldr	r3, [pc, #80]	; (8006860 <vInitPrioGroupValue+0xa8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1c3 0307 	rsb	r3, r3, #7
 8006816:	2b04      	cmp	r3, #4
 8006818:	d009      	beq.n	800682e <vInitPrioGroupValue+0x76>
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	e7fe      	b.n	800682c <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <vInitPrioGroupValue+0xa8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <vInitPrioGroupValue+0xa8>)
 8006836:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <vInitPrioGroupValue+0xa8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006840:	4a07      	ldr	r2, [pc, #28]	; (8006860 <vInitPrioGroupValue+0xa8>)
 8006842:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000e400 	.word	0xe000e400
 800685c:	200003b8 	.word	0x200003b8
 8006860:	200003bc 	.word	0x200003bc

08006864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800687c:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <vPortEnterCritical+0x54>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	4a0d      	ldr	r2, [pc, #52]	; (80068b8 <vPortEnterCritical+0x54>)
 8006884:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <vPortEnterCritical+0x54>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10e      	bne.n	80068ac <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <vPortEnterCritical+0x58>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <vPortEnterCritical+0x48>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	e7fe      	b.n	80068aa <vPortEnterCritical+0x46>
	}
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <vPortExitCritical+0x48>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <vPortExitCritical+0x22>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e7fe      	b.n	80068e0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <vPortExitCritical+0x48>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4a07      	ldr	r2, [pc, #28]	; (8006908 <vPortExitCritical+0x48>)
 80068ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <vPortExitCritical+0x48>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <vPortExitCritical+0x3e>
 80068f4:	2300      	movs	r3, #0
 80068f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	2000000c 	.word	0x2000000c
 800690c:	00000000 	.word	0x00000000

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006920:	6010      	str	r0, [r2, #0]
 8006922:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006926:	f04f 0050 	mov.w	r0, #80	; 0x50
 800692a:	f380 8811 	msr	BASEPRI, r0
 800692e:	f7ff fc39 	bl	80061a4 <vTaskSwitchContext>
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006946:	f380 8809 	msr	PSP, r0
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	4770      	bx	lr

08006950 <pxCurrentTCBConst>:
 8006950:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006970:	f001 fa16 	bl	8007da0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006974:	f7ff fb56 	bl	8006024 <xTaskIncrementTick>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800697e:	f001 fa6d 	bl	8007e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <SysTick_Handler+0x4c>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e001      	b.n	8006990 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800698c:	f001 fa4a 	bl	8007e24 <SEGGER_SYSVIEW_RecordExitISR>
 8006990:	2300      	movs	r3, #0
 8006992:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <vPortSetupTimerInterrupt+0x30>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <vPortSetupTimerInterrupt+0x34>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <vPortSetupTimerInterrupt+0x38>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <vPortSetupTimerInterrupt+0x3c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	099b      	lsrs	r3, r3, #6
 80069c4:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <vPortSetupTimerInterrupt+0x40>)
 80069c6:	3b01      	subs	r3, #1
 80069c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ca:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <vPortSetupTimerInterrupt+0x30>)
 80069cc:	2207      	movs	r2, #7
 80069ce:	601a      	str	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	e000e010 	.word	0xe000e010
 80069dc:	e000e018 	.word	0xe000e018
 80069e0:	20000000 	.word	0x20000000
 80069e4:	10624dd3 	.word	0x10624dd3
 80069e8:	e000e014 	.word	0xe000e014

080069ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069f8:	f7ff fa58 	bl	8005eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069fc:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <pvPortMalloc+0x170>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a04:	f000 f90c 	bl	8006c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a08:	4b55      	ldr	r3, [pc, #340]	; (8006b60 <pvPortMalloc+0x174>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 808c 	bne.w	8006b2e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01c      	beq.n	8006a56 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d013      	beq.n	8006a56 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f023 0307 	bic.w	r3, r3, #7
 8006a34:	3308      	adds	r3, #8
 8006a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <pvPortMalloc+0x6a>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e7fe      	b.n	8006a54 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d068      	beq.n	8006b2e <pvPortMalloc+0x142>
 8006a5c:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <pvPortMalloc+0x178>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d863      	bhi.n	8006b2e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a66:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <pvPortMalloc+0x17c>)
 8006a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a6a:	4b3f      	ldr	r3, [pc, #252]	; (8006b68 <pvPortMalloc+0x17c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a70:	e004      	b.n	8006a7c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d903      	bls.n	8006a8e <pvPortMalloc+0xa2>
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f1      	bne.n	8006a72 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a8e:	4b33      	ldr	r3, [pc, #204]	; (8006b5c <pvPortMalloc+0x170>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d04a      	beq.n	8006b2e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4413      	add	r3, r2
 8006aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	1ad2      	subs	r2, r2, r3
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d91e      	bls.n	8006af8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <pvPortMalloc+0xf4>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e7fe      	b.n	8006ade <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006af2:	69b8      	ldr	r0, [r7, #24]
 8006af4:	f000 f8f6 	bl	8006ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006af8:	4b1a      	ldr	r3, [pc, #104]	; (8006b64 <pvPortMalloc+0x178>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	4a18      	ldr	r2, [pc, #96]	; (8006b64 <pvPortMalloc+0x178>)
 8006b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b06:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <pvPortMalloc+0x178>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b18      	ldr	r3, [pc, #96]	; (8006b6c <pvPortMalloc+0x180>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d203      	bcs.n	8006b1a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b12:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <pvPortMalloc+0x178>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <pvPortMalloc+0x180>)
 8006b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <pvPortMalloc+0x174>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b2e:	f7ff f9cb 	bl	8005ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <pvPortMalloc+0x164>
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	e7fe      	b.n	8006b4e <pvPortMalloc+0x162>
	return pvReturn;
 8006b50:	69fb      	ldr	r3, [r7, #28]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001bc8 	.word	0x20001bc8
 8006b60:	20001bd4 	.word	0x20001bd4
 8006b64:	20001bcc 	.word	0x20001bcc
 8006b68:	20001bc0 	.word	0x20001bc0
 8006b6c:	20001bd0 	.word	0x20001bd0

08006b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d046      	beq.n	8006c10 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b82:	2308      	movs	r3, #8
 8006b84:	425b      	negs	r3, r3
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <vPortFree+0xa8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <vPortFree+0x42>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e7fe      	b.n	8006bb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <vPortFree+0x5e>
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	e7fe      	b.n	8006bcc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <vPortFree+0xa8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d019      	beq.n	8006c10 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d115      	bne.n	8006c10 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <vPortFree+0xa8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	401a      	ands	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf4:	f7ff f95a 	bl	8005eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <vPortFree+0xac>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4413      	add	r3, r2
 8006c02:	4a06      	ldr	r2, [pc, #24]	; (8006c1c <vPortFree+0xac>)
 8006c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f000 f86c 	bl	8006ce4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c0c:	f7ff f95c 	bl	8005ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20001bd4 	.word	0x20001bd4
 8006c1c:	20001bcc 	.word	0x20001bcc

08006c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c2c:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <prvHeapInit+0xac>)
 8006c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <prvHeapInit+0xac>)
 8006c50:	4413      	add	r3, r2
 8006c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c58:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <prvHeapInit+0xb0>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <prvHeapInit+0xb0>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <prvHeapInit+0xb4>)
 8006c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <prvHeapInit+0xb4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <prvHeapInit+0xb4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <prvHeapInit+0xb4>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <prvHeapInit+0xb8>)
 8006cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <prvHeapInit+0xbc>)
 8006cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb8:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <prvHeapInit+0xc0>)
 8006cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	200003c0 	.word	0x200003c0
 8006cd0:	20001bc0 	.word	0x20001bc0
 8006cd4:	20001bc8 	.word	0x20001bc8
 8006cd8:	20001bd0 	.word	0x20001bd0
 8006cdc:	20001bcc 	.word	0x20001bcc
 8006ce0:	20001bd4 	.word	0x20001bd4

08006ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cec:	4b27      	ldr	r3, [pc, #156]	; (8006d8c <prvInsertBlockIntoFreeList+0xa8>)
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e002      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x14>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d8f7      	bhi.n	8006cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d108      	bne.n	8006d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	441a      	add	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d118      	bne.n	8006d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <prvInsertBlockIntoFreeList+0xac>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d00d      	beq.n	8006d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	441a      	add	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e008      	b.n	8006d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <prvInsertBlockIntoFreeList+0xac>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e003      	b.n	8006d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d002      	beq.n	8006d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	20001bc0 	.word	0x20001bc0
 8006d90:	20001bc8 	.word	0x20001bc8

08006d94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006da2:	2205      	movs	r2, #5
 8006da4:	492b      	ldr	r1, [pc, #172]	; (8006e54 <SYSVIEW_AddTask+0xc0>)
 8006da6:	68b8      	ldr	r0, [r7, #8]
 8006da8:	f001 fb22 	bl	80083f0 <memcmp>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04b      	beq.n	8006e4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d903      	bls.n	8006dc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006dba:	4828      	ldr	r0, [pc, #160]	; (8006e5c <SYSVIEW_AddTask+0xc8>)
 8006dbc:	f001 fa98 	bl	80082f0 <SEGGER_SYSVIEW_Warn>
    return;
 8006dc0:	e044      	b.n	8006e4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4926      	ldr	r1, [pc, #152]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4921      	ldr	r1, [pc, #132]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	3304      	adds	r3, #4
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	491b      	ldr	r1, [pc, #108]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4916      	ldr	r1, [pc, #88]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	330c      	adds	r3, #12
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4910      	ldr	r1, [pc, #64]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3310      	adds	r3, #16
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f8ca 	bl	8006fdc <SYSVIEW_SendTaskInfo>
 8006e48:	e000      	b.n	8006e4c <SYSVIEW_AddTask+0xb8>
    return;
 8006e4a:	bf00      	nop

}
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	080084b0 	.word	0x080084b0
 8006e58:	20001c78 	.word	0x20001c78
 8006e5c:	080084b8 	.word	0x080084b8
 8006e60:	20001bd8 	.word	0x20001bd8

08006e64 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8006e6c:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80ab 	beq.w	8006fcc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e00d      	b.n	8006e98 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006e7c:	4956      	ldr	r1, [pc, #344]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d008      	beq.n	8006ea4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	4b4e      	ldr	r3, [pc, #312]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3ec      	bcc.n	8006e7c <SYSVIEW_DeleteTask+0x18>
 8006ea2:	e000      	b.n	8006ea6 <SYSVIEW_DeleteTask+0x42>
      break;
 8006ea4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8006ea6:	4b4b      	ldr	r3, [pc, #300]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d111      	bne.n	8006ed6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4a46      	ldr	r2, [pc, #280]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2214      	movs	r2, #20
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 faad 	bl	8008424 <memset>
    _NumTasks--;
 8006eca:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a40      	ldr	r2, [pc, #256]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e07b      	b.n	8006fce <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d276      	bcs.n	8006fce <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8006ee0:	4b3c      	ldr	r3, [pc, #240]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	493c      	ldr	r1, [pc, #240]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	4838      	ldr	r0, [pc, #224]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4403      	add	r3, r0
 8006f02:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006f04:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	4933      	ldr	r1, [pc, #204]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	3304      	adds	r3, #4
 8006f18:	6819      	ldr	r1, [r3, #0]
 8006f1a:	482f      	ldr	r0, [pc, #188]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4403      	add	r3, r0
 8006f28:	3304      	adds	r3, #4
 8006f2a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006f2c:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	4929      	ldr	r1, [pc, #164]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	3308      	adds	r3, #8
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	4825      	ldr	r0, [pc, #148]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4403      	add	r3, r0
 8006f50:	3308      	adds	r3, #8
 8006f52:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	491f      	ldr	r1, [pc, #124]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	330c      	adds	r3, #12
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	481b      	ldr	r0, [pc, #108]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4403      	add	r3, r0
 8006f78:	330c      	adds	r3, #12
 8006f7a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1e5a      	subs	r2, r3, #1
 8006f82:	4915      	ldr	r1, [pc, #84]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	3310      	adds	r3, #16
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	4811      	ldr	r0, [pc, #68]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4403      	add	r3, r0
 8006fa0:	3310      	adds	r3, #16
 8006fa2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	1e5a      	subs	r2, r3, #1
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <SYSVIEW_DeleteTask+0x174>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2214      	movs	r2, #20
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fa32 	bl	8008424 <memset>
    _NumTasks--;
 8006fc0:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	4a03      	ldr	r2, [pc, #12]	; (8006fd4 <SYSVIEW_DeleteTask+0x170>)
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e000      	b.n	8006fce <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006fcc:	bf00      	nop
  }
}
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20001c78 	.word	0x20001c78
 8006fd8:	20001bd8 	.word	0x20001bd8

08006fdc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	2214      	movs	r2, #20
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 fa16 	bl	8008424 <memset>
  TaskInfo.TaskID     = TaskID;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fd9d 	bl	8007b50 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007016:	bf00      	nop
 8007018:	3728      	adds	r7, #40	; 0x28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007026:	4b21      	ldr	r3, [pc, #132]	; (80070ac <_DoInit+0x8c>)
 8007028:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2203      	movs	r2, #3
 800702e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2203      	movs	r2, #3
 8007034:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <_DoInit+0x90>)
 800703a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <_DoInit+0x94>)
 8007040:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007048:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a14      	ldr	r2, [pc, #80]	; (80070b0 <_DoInit+0x90>)
 8007060:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <_DoInit+0x98>)
 8007066:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2210      	movs	r2, #16
 800706c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3307      	adds	r3, #7
 8007084:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <_DoInit+0x9c>)
 8007086:	6810      	ldr	r0, [r2, #0]
 8007088:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <_DoInit+0xa0>)
 800708e:	6810      	ldr	r0, [r2, #0]
 8007090:	6018      	str	r0, [r3, #0]
 8007092:	8891      	ldrh	r1, [r2, #4]
 8007094:	7992      	ldrb	r2, [r2, #6]
 8007096:	8099      	strh	r1, [r3, #4]
 8007098:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20002308 	.word	0x20002308
 80070b0:	08008508 	.word	0x08008508
 80070b4:	20001c7c 	.word	0x20001c7c
 80070b8:	2000207c 	.word	0x2000207c
 80070bc:	08008514 	.word	0x08008514
 80070c0:	08008518 	.word	0x08008518

080070c4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08c      	sub	sp, #48	; 0x30
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80070d0:	4b3e      	ldr	r3, [pc, #248]	; (80071cc <SEGGER_RTT_ReadNoLock+0x108>)
 80070d2:	623b      	str	r3, [r7, #32]
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <SEGGER_RTT_ReadNoLock+0x1e>
 80070de:	f7ff ff9f 	bl	8007020 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	3360      	adds	r3, #96	; 0x60
 80070ee:	4a37      	ldr	r2, [pc, #220]	; (80071cc <SEGGER_RTT_ReadNoLock+0x108>)
 80070f0:	4413      	add	r3, r2
 80070f2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007104:	2300      	movs	r3, #0
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	429a      	cmp	r2, r3
 800710e:	d92b      	bls.n	8007168 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4293      	cmp	r3, r2
 8007120:	bf28      	it	cs
 8007122:	4613      	movcs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	4413      	add	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007136:	f001 f96a 	bl	800840e <memcpy>
    NumBytesRead += NumBytesRem;
 800713a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	4413      	add	r3, r2
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007160:	429a      	cmp	r2, r3
 8007162:	d101      	bne.n	8007168 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007164:	2300      	movs	r3, #0
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4293      	cmp	r3, r2
 8007176:	bf28      	it	cs
 8007178:	4613      	movcs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d019      	beq.n	80071b6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	4413      	add	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	6939      	ldr	r1, [r7, #16]
 8007190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007192:	f001 f93c 	bl	800840e <memcpy>
    NumBytesRead += NumBytesRem;
 8007196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	4413      	add	r3, r2
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800719e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80071ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3730      	adds	r7, #48	; 0x30
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20002308 	.word	0x20002308

080071d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80071e0:	e002      	b.n	80071e8 <_EncodeStr+0x18>
    Len++;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	3301      	adds	r3, #1
 80071e6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4413      	add	r3, r2
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f6      	bne.n	80071e2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d901      	bls.n	8007200 <_EncodeStr+0x30>
    Len = Limit;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2bfe      	cmp	r3, #254	; 0xfe
 8007204:	d806      	bhi.n	8007214 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	60fa      	str	r2, [r7, #12]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e011      	b.n	8007238 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	60fa      	str	r2, [r7, #12]
 800721a:	22ff      	movs	r2, #255	; 0xff
 800721c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	60fa      	str	r2, [r7, #12]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	0a19      	lsrs	r1, r3, #8
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	60fa      	str	r2, [r7, #12]
 8007234:	b2ca      	uxtb	r2, r1
 8007236:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800723c:	e00a      	b.n	8007254 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	1c53      	adds	r3, r2, #1
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1c59      	adds	r1, r3, #1
 8007248:	60f9      	str	r1, [r7, #12]
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	701a      	strb	r2, [r3, #0]
    n++;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	3301      	adds	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	429a      	cmp	r2, r3
 800725a:	d3f0      	bcc.n	800723e <_EncodeStr+0x6e>
  }
  return pPayload;
 800725c:	68fb      	ldr	r3, [r7, #12]
}
 800725e:	4618      	mov	r0, r3
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr
	...

08007280 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <_HandleIncomingPacket+0xd4>)
 8007288:	7e1b      	ldrb	r3, [r3, #24]
 800728a:	4618      	mov	r0, r3
 800728c:	1cfb      	adds	r3, r7, #3
 800728e:	2201      	movs	r2, #1
 8007290:	4619      	mov	r1, r3
 8007292:	f7ff ff17 	bl	80070c4 <SEGGER_RTT_ReadNoLock>
 8007296:	4603      	mov	r3, r0
 8007298:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd4d      	ble.n	800733c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d022      	beq.n	80072ec <_HandleIncomingPacket+0x6c>
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	dc0b      	bgt.n	80072c2 <_HandleIncomingPacket+0x42>
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d015      	beq.n	80072da <_HandleIncomingPacket+0x5a>
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	dc02      	bgt.n	80072b8 <_HandleIncomingPacket+0x38>
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d00e      	beq.n	80072d4 <_HandleIncomingPacket+0x54>
 80072b6:	e034      	b.n	8007322 <_HandleIncomingPacket+0xa2>
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d011      	beq.n	80072e0 <_HandleIncomingPacket+0x60>
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d012      	beq.n	80072e6 <_HandleIncomingPacket+0x66>
 80072c0:	e02f      	b.n	8007322 <_HandleIncomingPacket+0xa2>
 80072c2:	2b07      	cmp	r3, #7
 80072c4:	d018      	beq.n	80072f8 <_HandleIncomingPacket+0x78>
 80072c6:	2b07      	cmp	r3, #7
 80072c8:	db13      	blt.n	80072f2 <_HandleIncomingPacket+0x72>
 80072ca:	2b7f      	cmp	r3, #127	; 0x7f
 80072cc:	d038      	beq.n	8007340 <_HandleIncomingPacket+0xc0>
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d015      	beq.n	80072fe <_HandleIncomingPacket+0x7e>
 80072d2:	e026      	b.n	8007322 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80072d4:	f000 fac2 	bl	800785c <SEGGER_SYSVIEW_Start>
      break;
 80072d8:	e037      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80072da:	f000 fb79 	bl	80079d0 <SEGGER_SYSVIEW_Stop>
      break;
 80072de:	e034      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80072e0:	f000 fd2e 	bl	8007d40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80072e4:	e031      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80072e6:	f000 fd17 	bl	8007d18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80072ea:	e02e      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80072ec:	f000 fb96 	bl	8007a1c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80072f0:	e02b      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80072f2:	f000 ffbf 	bl	8008274 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80072f6:	e028      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80072f8:	f000 ff9e 	bl	8008238 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80072fc:	e025      	b.n	800734a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80072fe:	4b15      	ldr	r3, [pc, #84]	; (8007354 <_HandleIncomingPacket+0xd4>)
 8007300:	7e1b      	ldrb	r3, [r3, #24]
 8007302:	4618      	mov	r0, r3
 8007304:	1cfb      	adds	r3, r7, #3
 8007306:	2201      	movs	r2, #1
 8007308:	4619      	mov	r1, r3
 800730a:	f7ff fedb 	bl	80070c4 <SEGGER_RTT_ReadNoLock>
 800730e:	4603      	mov	r3, r0
 8007310:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd15      	ble.n	8007344 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 ff0c 	bl	8008138 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007320:	e010      	b.n	8007344 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	b25b      	sxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	da0e      	bge.n	8007348 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800732a:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <_HandleIncomingPacket+0xd4>)
 800732c:	7e1b      	ldrb	r3, [r3, #24]
 800732e:	4618      	mov	r0, r3
 8007330:	1cfb      	adds	r3, r7, #3
 8007332:	2201      	movs	r2, #1
 8007334:	4619      	mov	r1, r3
 8007336:	f7ff fec5 	bl	80070c4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800733a:	e005      	b.n	8007348 <_HandleIncomingPacket+0xc8>
    }
  }
 800733c:	bf00      	nop
 800733e:	e004      	b.n	800734a <_HandleIncomingPacket+0xca>
      break;
 8007340:	bf00      	nop
 8007342:	e002      	b.n	800734a <_HandleIncomingPacket+0xca>
      break;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <_HandleIncomingPacket+0xca>
      break;
 8007348:	bf00      	nop
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	2000208c 	.word	0x2000208c

08007358 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	; 0x30
 800735c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800735e:	2301      	movs	r3, #1
 8007360:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007362:	1d3b      	adds	r3, r7, #4
 8007364:	3301      	adds	r3, #1
 8007366:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736c:	4b31      	ldr	r3, [pc, #196]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
 8007372:	e00b      	b.n	800738c <_TrySendOverflowPacket+0x34>
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	b2da      	uxtb	r2, r3
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800737e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	09db      	lsrs	r3, r3, #7
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	2b7f      	cmp	r3, #127	; 0x7f
 8007390:	d8f0      	bhi.n	8007374 <_TrySendOverflowPacket+0x1c>
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80073a2:	4b25      	ldr	r3, [pc, #148]	; (8007438 <_TrySendOverflowPacket+0xe0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80073a8:	4b22      	ldr	r3, [pc, #136]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	623b      	str	r3, [r7, #32]
 80073ba:	e00b      	b.n	80073d4 <_TrySendOverflowPacket+0x7c>
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	6279      	str	r1, [r7, #36]	; 0x24
 80073c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	09db      	lsrs	r3, r3, #7
 80073d2:	623b      	str	r3, [r7, #32]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b7f      	cmp	r3, #127	; 0x7f
 80073d8:	d8f0      	bhi.n	80073bc <_TrySendOverflowPacket+0x64>
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	627a      	str	r2, [r7, #36]	; 0x24
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80073ea:	4b12      	ldr	r3, [pc, #72]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	4618      	mov	r0, r3
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	1d3b      	adds	r3, r7, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	f7f8 fea8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007400:	4603      	mov	r3, r0
 8007402:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800740a:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007410:	4b08      	ldr	r3, [pc, #32]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	4b06      	ldr	r3, [pc, #24]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	e004      	b.n	8007428 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	3301      	adds	r3, #1
 8007424:	4a03      	ldr	r2, [pc, #12]	; (8007434 <_TrySendOverflowPacket+0xdc>)
 8007426:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007428:	693b      	ldr	r3, [r7, #16]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3730      	adds	r7, #48	; 0x30
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	2000208c 	.word	0x2000208c
 8007438:	e0001004 	.word	0xe0001004

0800743c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007448:	4b6c      	ldr	r3, [pc, #432]	; (80075fc <_SendPacket+0x1c0>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d010      	beq.n	8007472 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007450:	4b6a      	ldr	r3, [pc, #424]	; (80075fc <_SendPacket+0x1c0>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 80a3 	beq.w	80075a0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800745a:	4b68      	ldr	r3, [pc, #416]	; (80075fc <_SendPacket+0x1c0>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d109      	bne.n	8007476 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007462:	f7ff ff79 	bl	8007358 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007466:	4b65      	ldr	r3, [pc, #404]	; (80075fc <_SendPacket+0x1c0>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b01      	cmp	r3, #1
 800746c:	f040 809a 	bne.w	80075a4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007470:	e001      	b.n	8007476 <_SendPacket+0x3a>
    goto Send;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <_SendPacket+0x3c>
Send:
 8007476:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b1f      	cmp	r3, #31
 800747c:	d809      	bhi.n	8007492 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800747e:	4b5f      	ldr	r3, [pc, #380]	; (80075fc <_SendPacket+0x1c0>)
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 808b 	bne.w	80075a8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b17      	cmp	r3, #23
 8007496:	d807      	bhi.n	80074a8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b01      	subs	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e03d      	b.n	8007524 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d912      	bls.n	80074dc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	09da      	lsrs	r2, r3, #7
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b01      	subs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	3a01      	subs	r2, #1
 80074ce:	60fa      	str	r2, [r7, #12]
 80074d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e006      	b.n	80074ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b7f      	cmp	r3, #127	; 0x7f
 80074ee:	d912      	bls.n	8007516 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	09da      	lsrs	r2, r3, #7
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	3a01      	subs	r2, #1
 8007508:	60fa      	str	r2, [r7, #12]
 800750a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800750e:	b2da      	uxtb	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e006      	b.n	8007524 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b01      	subs	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	b2da      	uxtb	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007524:	4b36      	ldr	r3, [pc, #216]	; (8007600 <_SendPacket+0x1c4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <_SendPacket+0x1c0>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	623b      	str	r3, [r7, #32]
 800753c:	e00b      	b.n	8007556 <_SendPacket+0x11a>
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	6279      	str	r1, [r7, #36]	; 0x24
 8007548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	09db      	lsrs	r3, r3, #7
 8007554:	623b      	str	r3, [r7, #32]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2b7f      	cmp	r3, #127	; 0x7f
 800755a:	d8f0      	bhi.n	800753e <_SendPacket+0x102>
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	627a      	str	r2, [r7, #36]	; 0x24
 8007562:	6a3a      	ldr	r2, [r7, #32]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <_SendPacket+0x1c0>)
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	4618      	mov	r0, r3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	461a      	mov	r2, r3
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	f7f8 fde8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007580:	4603      	mov	r3, r0
 8007582:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800758a:	4a1c      	ldr	r2, [pc, #112]	; (80075fc <_SendPacket+0x1c0>)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	60d3      	str	r3, [r2, #12]
 8007590:	e00b      	b.n	80075aa <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <_SendPacket+0x1c0>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	b2da      	uxtb	r2, r3
 800759a:	4b18      	ldr	r3, [pc, #96]	; (80075fc <_SendPacket+0x1c0>)
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	e004      	b.n	80075aa <_SendPacket+0x16e>
    goto SendDone;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <_SendPacket+0x16e>
      goto SendDone;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <_SendPacket+0x16e>
      goto SendDone;
 80075a8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80075aa:	4b14      	ldr	r3, [pc, #80]	; (80075fc <_SendPacket+0x1c0>)
 80075ac:	7e1b      	ldrb	r3, [r3, #24]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4a14      	ldr	r2, [pc, #80]	; (8007604 <_SendPacket+0x1c8>)
 80075b2:	460b      	mov	r3, r1
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	4413      	add	r3, r2
 80075bc:	336c      	adds	r3, #108	; 0x6c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <_SendPacket+0x1c0>)
 80075c2:	7e1b      	ldrb	r3, [r3, #24]
 80075c4:	4618      	mov	r0, r3
 80075c6:	490f      	ldr	r1, [pc, #60]	; (8007604 <_SendPacket+0x1c8>)
 80075c8:	4603      	mov	r3, r0
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	4403      	add	r3, r0
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	440b      	add	r3, r1
 80075d2:	3370      	adds	r3, #112	; 0x70
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d00b      	beq.n	80075f2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075da:	4b08      	ldr	r3, [pc, #32]	; (80075fc <_SendPacket+0x1c0>)
 80075dc:	789b      	ldrb	r3, [r3, #2]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d107      	bne.n	80075f2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <_SendPacket+0x1c0>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80075e8:	f7ff fe4a 	bl	8007280 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <_SendPacket+0x1c0>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80075f2:	bf00      	nop
 80075f4:	3728      	adds	r7, #40	; 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000208c 	.word	0x2000208c
 8007600:	e0001004 	.word	0xe0001004
 8007604:	20002308 	.word	0x20002308

08007608 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007610:	f3ef 8311 	mrs	r3, BASEPRI
 8007614:	f04f 0120 	mov.w	r1, #32
 8007618:	f381 8811 	msr	BASEPRI, r1
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	4808      	ldr	r0, [pc, #32]	; (8007640 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007620:	f7ff fe22 	bl	8007268 <_PreparePacket>
 8007624:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	68b8      	ldr	r0, [r7, #8]
 800762c:	f7ff ff06 	bl	800743c <_SendPacket>
  RECORD_END();
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f383 8811 	msr	BASEPRI, r3
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	200020bc 	.word	0x200020bc

08007644 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800764e:	f3ef 8311 	mrs	r3, BASEPRI
 8007652:	f04f 0120 	mov.w	r1, #32
 8007656:	f381 8811 	msr	BASEPRI, r1
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	4816      	ldr	r0, [pc, #88]	; (80076b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800765e:	f7ff fe03 	bl	8007268 <_PreparePacket>
 8007662:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	e00b      	b.n	800768a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	1c59      	adds	r1, r3, #1
 800767a:	61f9      	str	r1, [r7, #28]
 800767c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	09db      	lsrs	r3, r3, #7
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b7f      	cmp	r3, #127	; 0x7f
 800768e:	d8f0      	bhi.n	8007672 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	61fa      	str	r2, [r7, #28]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	6938      	ldr	r0, [r7, #16]
 80076a6:	f7ff fec9 	bl	800743c <_SendPacket>
  RECORD_END();
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f383 8811 	msr	BASEPRI, r3
}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200020bc 	.word	0x200020bc

080076bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08c      	sub	sp, #48	; 0x30
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076c8:	f3ef 8311 	mrs	r3, BASEPRI
 80076cc:	f04f 0120 	mov.w	r1, #32
 80076d0:	f381 8811 	msr	BASEPRI, r1
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	4825      	ldr	r0, [pc, #148]	; (800776c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80076d8:	f7ff fdc6 	bl	8007268 <_PreparePacket>
 80076dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ea:	e00b      	b.n	8007704 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	1c59      	adds	r1, r3, #1
 80076f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80076f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	09db      	lsrs	r3, r3, #7
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	2b7f      	cmp	r3, #127	; 0x7f
 8007708:	d8f0      	bhi.n	80076ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	623b      	str	r3, [r7, #32]
 8007722:	e00b      	b.n	800773c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	6279      	str	r1, [r7, #36]	; 0x24
 800772e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	09db      	lsrs	r3, r3, #7
 800773a:	623b      	str	r3, [r7, #32]
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2b7f      	cmp	r3, #127	; 0x7f
 8007740:	d8f0      	bhi.n	8007724 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	627a      	str	r2, [r7, #36]	; 0x24
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	6979      	ldr	r1, [r7, #20]
 8007756:	69b8      	ldr	r0, [r7, #24]
 8007758:	f7ff fe70 	bl	800743c <_SendPacket>
  RECORD_END();
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f383 8811 	msr	BASEPRI, r3
}
 8007762:	bf00      	nop
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200020bc 	.word	0x200020bc

08007770 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800777e:	f3ef 8311 	mrs	r3, BASEPRI
 8007782:	f04f 0120 	mov.w	r1, #32
 8007786:	f381 8811 	msr	BASEPRI, r1
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	4832      	ldr	r0, [pc, #200]	; (8007858 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800778e:	f7ff fd6b 	bl	8007268 <_PreparePacket>
 8007792:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
 80077a0:	e00b      	b.n	80077ba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	1c59      	adds	r1, r3, #1
 80077aa:	6379      	str	r1, [r7, #52]	; 0x34
 80077ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	09db      	lsrs	r3, r3, #7
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b7f      	cmp	r3, #127	; 0x7f
 80077be:	d8f0      	bhi.n	80077a2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	637a      	str	r2, [r7, #52]	; 0x34
 80077c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d8:	e00b      	b.n	80077f2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	1c59      	adds	r1, r3, #1
 80077e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	09db      	lsrs	r3, r3, #7
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2b7f      	cmp	r3, #127	; 0x7f
 80077f6:	d8f0      	bhi.n	80077da <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	623b      	str	r3, [r7, #32]
 8007810:	e00b      	b.n	800782a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	b2da      	uxtb	r2, r3
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	6279      	str	r1, [r7, #36]	; 0x24
 800781c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	09db      	lsrs	r3, r3, #7
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	2b7f      	cmp	r3, #127	; 0x7f
 800782e:	d8f0      	bhi.n	8007812 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	627a      	str	r2, [r7, #36]	; 0x24
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	6979      	ldr	r1, [r7, #20]
 8007844:	69b8      	ldr	r0, [r7, #24]
 8007846:	f7ff fdf9 	bl	800743c <_SendPacket>
  RECORD_END();
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f383 8811 	msr	BASEPRI, r3
}
 8007850:	bf00      	nop
 8007852:	3738      	adds	r7, #56	; 0x38
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200020bc 	.word	0x200020bc

0800785c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b08c      	sub	sp, #48	; 0x30
 8007860:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007862:	4b58      	ldr	r3, [pc, #352]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 8007864:	2201      	movs	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007868:	f3ef 8311 	mrs	r3, BASEPRI
 800786c:	f04f 0120 	mov.w	r1, #32
 8007870:	f381 8811 	msr	BASEPRI, r1
 8007874:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007876:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	220a      	movs	r2, #10
 800787c:	4952      	ldr	r1, [pc, #328]	; (80079c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800787e:	4618      	mov	r0, r3
 8007880:	f7f8 fc66 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800788a:	200a      	movs	r0, #10
 800788c:	f7ff febc 	bl	8007608 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007890:	f3ef 8311 	mrs	r3, BASEPRI
 8007894:	f04f 0120 	mov.w	r1, #32
 8007898:	f381 8811 	msr	BASEPRI, r1
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	484b      	ldr	r0, [pc, #300]	; (80079cc <SEGGER_SYSVIEW_Start+0x170>)
 80078a0:	f7ff fce2 	bl	8007268 <_PreparePacket>
 80078a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ae:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078b4:	e00b      	b.n	80078ce <SEGGER_SYSVIEW_Start+0x72>
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	1c59      	adds	r1, r3, #1
 80078be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	09db      	lsrs	r3, r3, #7
 80078cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	2b7f      	cmp	r3, #127	; 0x7f
 80078d2:	d8f0      	bhi.n	80078b6 <SEGGER_SYSVIEW_Start+0x5a>
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
 80078e8:	4b36      	ldr	r3, [pc, #216]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	e00b      	b.n	8007908 <SEGGER_SYSVIEW_Start+0xac>
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	1c59      	adds	r1, r3, #1
 80078f8:	6279      	str	r1, [r7, #36]	; 0x24
 80078fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	09db      	lsrs	r3, r3, #7
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b7f      	cmp	r3, #127	; 0x7f
 800790c:	d8f0      	bhi.n	80078f0 <SEGGER_SYSVIEW_Start+0x94>
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	627a      	str	r2, [r7, #36]	; 0x24
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	e00b      	b.n	8007942 <SEGGER_SYSVIEW_Start+0xe6>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	1c59      	adds	r1, r3, #1
 8007932:	61f9      	str	r1, [r7, #28]
 8007934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	09db      	lsrs	r3, r3, #7
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b7f      	cmp	r3, #127	; 0x7f
 8007946:	d8f0      	bhi.n	800792a <SEGGER_SYSVIEW_Start+0xce>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	61fa      	str	r2, [r7, #28]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	e00b      	b.n	800797a <SEGGER_SYSVIEW_Start+0x11e>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	1c59      	adds	r1, r3, #1
 800796a:	6179      	str	r1, [r7, #20]
 800796c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	09db      	lsrs	r3, r3, #7
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b7f      	cmp	r3, #127	; 0x7f
 800797e:	d8f0      	bhi.n	8007962 <SEGGER_SYSVIEW_Start+0x106>
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	617a      	str	r2, [r7, #20]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007990:	2218      	movs	r2, #24
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fd51 	bl	800743c <_SendPacket>
      RECORD_END();
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <SEGGER_SYSVIEW_Start+0x168>)
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80079ae:	f000 f9c7 	bl	8007d40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80079b2:	f000 f9b1 	bl	8007d18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80079b6:	f000 fc5d 	bl	8008274 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80079ba:	bf00      	nop
 80079bc:	3730      	adds	r7, #48	; 0x30
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	2000208c 	.word	0x2000208c
 80079c8:	08008538 	.word	0x08008538
 80079cc:	200020bc 	.word	0x200020bc

080079d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80079d6:	f3ef 8311 	mrs	r3, BASEPRI
 80079da:	f04f 0120 	mov.w	r1, #32
 80079de:	f381 8811 	msr	BASEPRI, r1
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	480b      	ldr	r0, [pc, #44]	; (8007a14 <SEGGER_SYSVIEW_Stop+0x44>)
 80079e6:	f7ff fc3f 	bl	8007268 <_PreparePacket>
 80079ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <SEGGER_SYSVIEW_Stop+0x48>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80079f4:	220b      	movs	r2, #11
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6838      	ldr	r0, [r7, #0]
 80079fa:	f7ff fd1f 	bl	800743c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <SEGGER_SYSVIEW_Stop+0x48>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f383 8811 	msr	BASEPRI, r3
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200020bc 	.word	0x200020bc
 8007a18:	2000208c 	.word	0x2000208c

08007a1c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08c      	sub	sp, #48	; 0x30
 8007a20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a22:	f3ef 8311 	mrs	r3, BASEPRI
 8007a26:	f04f 0120 	mov.w	r1, #32
 8007a2a:	f381 8811 	msr	BASEPRI, r1
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	4845      	ldr	r0, [pc, #276]	; (8007b48 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007a32:	f7ff fc19 	bl	8007268 <_PreparePacket>
 8007a36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a40:	4b42      	ldr	r3, [pc, #264]	; (8007b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a46:	e00b      	b.n	8007a60 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	09db      	lsrs	r3, r3, #7
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	2b7f      	cmp	r3, #127	; 0x7f
 8007a64:	d8f0      	bhi.n	8007a48 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7a:	4b34      	ldr	r3, [pc, #208]	; (8007b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	623b      	str	r3, [r7, #32]
 8007a80:	e00b      	b.n	8007a9a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	1c59      	adds	r1, r3, #1
 8007a8a:	6279      	str	r1, [r7, #36]	; 0x24
 8007a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	09db      	lsrs	r3, r3, #7
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a9e:	d8f0      	bhi.n	8007a82 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	4b25      	ldr	r3, [pc, #148]	; (8007b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e00b      	b.n	8007ad4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	1c59      	adds	r1, r3, #1
 8007ac4:	61f9      	str	r1, [r7, #28]
 8007ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	09db      	lsrs	r3, r3, #7
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ad8:	d8f0      	bhi.n	8007abc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	61fa      	str	r2, [r7, #28]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	e00b      	b.n	8007b0c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	6179      	str	r1, [r7, #20]
 8007afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	09db      	lsrs	r3, r3, #7
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b10:	d8f0      	bhi.n	8007af4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	617a      	str	r2, [r7, #20]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b22:	2218      	movs	r2, #24
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	68b8      	ldr	r0, [r7, #8]
 8007b28:	f7ff fc88 	bl	800743c <_SendPacket>
  RECORD_END();
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b32:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007b3a:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	4798      	blx	r3
  }
}
 8007b40:	bf00      	nop
 8007b42:	3730      	adds	r7, #48	; 0x30
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	200020bc 	.word	0x200020bc
 8007b4c:	2000208c 	.word	0x2000208c

08007b50 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b092      	sub	sp, #72	; 0x48
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007b58:	f3ef 8311 	mrs	r3, BASEPRI
 8007b5c:	f04f 0120 	mov.w	r1, #32
 8007b60:	f381 8811 	msr	BASEPRI, r1
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	486a      	ldr	r0, [pc, #424]	; (8007d10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007b68:	f7ff fb7e 	bl	8007268 <_PreparePacket>
 8007b6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4b66      	ldr	r3, [pc, #408]	; (8007d14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	643b      	str	r3, [r7, #64]	; 0x40
 8007b82:	e00b      	b.n	8007b9c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8a:	1c59      	adds	r1, r3, #1
 8007b8c:	6479      	str	r1, [r7, #68]	; 0x44
 8007b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b98:	09db      	lsrs	r3, r3, #7
 8007b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba0:	d8f0      	bhi.n	8007b84 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8007ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bbc:	e00b      	b.n	8007bd6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc4:	1c59      	adds	r1, r3, #1
 8007bc6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	09db      	lsrs	r3, r3, #7
 8007bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007bda:	d8f0      	bhi.n	8007bbe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff faeb 	bl	80071d0 <_EncodeStr>
 8007bfa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007bfc:	2209      	movs	r2, #9
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	6938      	ldr	r0, [r7, #16]
 8007c02:	f7ff fc1b 	bl	800743c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	633b      	str	r3, [r7, #48]	; 0x30
 8007c1a:	e00b      	b.n	8007c34 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	6379      	str	r1, [r7, #52]	; 0x34
 8007c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	09db      	lsrs	r3, r3, #7
 8007c32:	633b      	str	r3, [r7, #48]	; 0x30
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	2b7f      	cmp	r3, #127	; 0x7f
 8007c38:	d8f0      	bhi.n	8007c1c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	637a      	str	r2, [r7, #52]	; 0x34
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c54:	e00b      	b.n	8007c6e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	09db      	lsrs	r3, r3, #7
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2b7f      	cmp	r3, #127	; 0x7f
 8007c72:	d8f0      	bhi.n	8007c56 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	623b      	str	r3, [r7, #32]
 8007c8e:	e00b      	b.n	8007ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	1c59      	adds	r1, r3, #1
 8007c98:	6279      	str	r1, [r7, #36]	; 0x24
 8007c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	09db      	lsrs	r3, r3, #7
 8007ca6:	623b      	str	r3, [r7, #32]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cac:	d8f0      	bhi.n	8007c90 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	e00b      	b.n	8007ce0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	1c59      	adds	r1, r3, #1
 8007cd0:	61f9      	str	r1, [r7, #28]
 8007cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	09db      	lsrs	r3, r3, #7
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ce4:	d8f0      	bhi.n	8007cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	61fa      	str	r2, [r7, #28]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007cf6:	2215      	movs	r2, #21
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	6938      	ldr	r0, [r7, #16]
 8007cfc:	f7ff fb9e 	bl	800743c <_SendPacket>
  RECORD_END();
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f383 8811 	msr	BASEPRI, r3
}
 8007d06:	bf00      	nop
 8007d08:	3748      	adds	r7, #72	; 0x48
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200020bc 	.word	0x200020bc
 8007d14:	2000208c 	.word	0x2000208c

08007d18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007d1c:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007d2e:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	4798      	blx	r3
  }
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000208c 	.word	0x2000208c

08007d40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007d40:	b590      	push	{r4, r7, lr}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d019      	beq.n	8007d82 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d014      	beq.n	8007d82 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4798      	blx	r3
 8007d60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007d64:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007d66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	f04f 0400 	mov.w	r4, #0
 8007d72:	0013      	movs	r3, r2
 8007d74:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007d76:	461a      	mov	r2, r3
 8007d78:	4601      	mov	r1, r0
 8007d7a:	200d      	movs	r0, #13
 8007d7c:	f7ff fc9e 	bl	80076bc <SEGGER_SYSVIEW_RecordU32x2>
 8007d80:	e005      	b.n	8007d8e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007d82:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	200c      	movs	r0, #12
 8007d8a:	f7ff fc5b 	bl	8007644 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000208c 	.word	0x2000208c
 8007d9c:	e0001004 	.word	0xe0001004

08007da0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007da6:	f3ef 8311 	mrs	r3, BASEPRI
 8007daa:	f04f 0120 	mov.w	r1, #32
 8007dae:	f381 8811 	msr	BASEPRI, r1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007db6:	f7ff fa57 	bl	8007268 <_PreparePacket>
 8007dba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	e00b      	b.n	8007dec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	6179      	str	r1, [r7, #20]
 8007dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	09db      	lsrs	r3, r3, #7
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b7f      	cmp	r3, #127	; 0x7f
 8007df0:	d8f0      	bhi.n	8007dd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	617a      	str	r2, [r7, #20]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007e02:	2202      	movs	r2, #2
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	68b8      	ldr	r0, [r7, #8]
 8007e08:	f7ff fb18 	bl	800743c <_SendPacket>
  RECORD_END();
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f383 8811 	msr	BASEPRI, r3
}
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200020bc 	.word	0x200020bc
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e2e:	f04f 0120 	mov.w	r1, #32
 8007e32:	f381 8811 	msr	BASEPRI, r1
 8007e36:	607b      	str	r3, [r7, #4]
 8007e38:	4807      	ldr	r0, [pc, #28]	; (8007e58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007e3a:	f7ff fa15 	bl	8007268 <_PreparePacket>
 8007e3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007e40:	2203      	movs	r2, #3
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6838      	ldr	r0, [r7, #0]
 8007e46:	f7ff faf9 	bl	800743c <_SendPacket>
  RECORD_END();
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f383 8811 	msr	BASEPRI, r3
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200020bc 	.word	0x200020bc

08007e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007e62:	f3ef 8311 	mrs	r3, BASEPRI
 8007e66:	f04f 0120 	mov.w	r1, #32
 8007e6a:	f381 8811 	msr	BASEPRI, r1
 8007e6e:	607b      	str	r3, [r7, #4]
 8007e70:	4807      	ldr	r0, [pc, #28]	; (8007e90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007e72:	f7ff f9f9 	bl	8007268 <_PreparePacket>
 8007e76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007e78:	2212      	movs	r2, #18
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6838      	ldr	r0, [r7, #0]
 8007e7e:	f7ff fadd 	bl	800743c <_SendPacket>
  RECORD_END();
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f383 8811 	msr	BASEPRI, r3
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200020bc 	.word	0x200020bc

08007e94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9e:	f04f 0120 	mov.w	r1, #32
 8007ea2:	f381 8811 	msr	BASEPRI, r1
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	4807      	ldr	r0, [pc, #28]	; (8007ec8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007eaa:	f7ff f9dd 	bl	8007268 <_PreparePacket>
 8007eae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007eb0:	2211      	movs	r2, #17
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f7ff fac1 	bl	800743c <_SendPacket>
  RECORD_END();
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f383 8811 	msr	BASEPRI, r3
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200020bc 	.word	0x200020bc

08007ecc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ed8:	f04f 0120 	mov.w	r1, #32
 8007edc:	f381 8811 	msr	BASEPRI, r1
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	4819      	ldr	r0, [pc, #100]	; (8007f48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007ee4:	f7ff f9c0 	bl	8007268 <_PreparePacket>
 8007ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007eee:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	e00b      	b.n	8007f1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	1c59      	adds	r1, r3, #1
 8007f0a:	61f9      	str	r1, [r7, #28]
 8007f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	09db      	lsrs	r3, r3, #7
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f1e:	d8f0      	bhi.n	8007f02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	61fa      	str	r2, [r7, #28]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007f30:	2208      	movs	r2, #8
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	6938      	ldr	r0, [r7, #16]
 8007f36:	f7ff fa81 	bl	800743c <_SendPacket>
  RECORD_END();
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f383 8811 	msr	BASEPRI, r3
}
 8007f40:	bf00      	nop
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200020bc 	.word	0x200020bc
 8007f4c:	2000208c 	.word	0x2000208c

08007f50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f58:	f3ef 8311 	mrs	r3, BASEPRI
 8007f5c:	f04f 0120 	mov.w	r1, #32
 8007f60:	f381 8811 	msr	BASEPRI, r1
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	4819      	ldr	r0, [pc, #100]	; (8007fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007f68:	f7ff f97e 	bl	8007268 <_PreparePacket>
 8007f6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f72:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	e00b      	b.n	8007f9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	61f9      	str	r1, [r7, #28]
 8007f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	09db      	lsrs	r3, r3, #7
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa2:	d8f0      	bhi.n	8007f86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	61fa      	str	r2, [r7, #28]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	6938      	ldr	r0, [r7, #16]
 8007fba:	f7ff fa3f 	bl	800743c <_SendPacket>
  RECORD_END();
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f383 8811 	msr	BASEPRI, r3
}
 8007fc4:	bf00      	nop
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	200020bc 	.word	0x200020bc
 8007fd0:	2000208c 	.word	0x2000208c

08007fd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe0:	f04f 0120 	mov.w	r1, #32
 8007fe4:	f381 8811 	msr	BASEPRI, r1
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	4819      	ldr	r0, [pc, #100]	; (8008050 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007fec:	f7ff f93c 	bl	8007268 <_PreparePacket>
 8007ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007ff6:	4b17      	ldr	r3, [pc, #92]	; (8008054 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	e00b      	b.n	8008022 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	1c59      	adds	r1, r3, #1
 8008012:	61f9      	str	r1, [r7, #28]
 8008014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	09db      	lsrs	r3, r3, #7
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b7f      	cmp	r3, #127	; 0x7f
 8008026:	d8f0      	bhi.n	800800a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	61fa      	str	r2, [r7, #28]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008038:	2206      	movs	r2, #6
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	6938      	ldr	r0, [r7, #16]
 800803e:	f7ff f9fd 	bl	800743c <_SendPacket>
  RECORD_END();
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f383 8811 	msr	BASEPRI, r3
}
 8008048:	bf00      	nop
 800804a:	3720      	adds	r7, #32
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	200020bc 	.word	0x200020bc
 8008054:	2000208c 	.word	0x2000208c

08008058 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b08a      	sub	sp, #40	; 0x28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008062:	f3ef 8311 	mrs	r3, BASEPRI
 8008066:	f04f 0120 	mov.w	r1, #32
 800806a:	f381 8811 	msr	BASEPRI, r1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	4827      	ldr	r0, [pc, #156]	; (8008110 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008072:	f7ff f8f9 	bl	8007268 <_PreparePacket>
 8008076:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800807c:	4b25      	ldr	r3, [pc, #148]	; (8008114 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	623b      	str	r3, [r7, #32]
 800808e:	e00b      	b.n	80080a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	b2da      	uxtb	r2, r3
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	1c59      	adds	r1, r3, #1
 8008098:	6279      	str	r1, [r7, #36]	; 0x24
 800809a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	09db      	lsrs	r3, r3, #7
 80080a6:	623b      	str	r3, [r7, #32]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2b7f      	cmp	r3, #127	; 0x7f
 80080ac:	d8f0      	bhi.n	8008090 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	627a      	str	r2, [r7, #36]	; 0x24
 80080b4:	6a3a      	ldr	r2, [r7, #32]
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e00b      	b.n	80080e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	1c59      	adds	r1, r3, #1
 80080d0:	61f9      	str	r1, [r7, #28]
 80080d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	09db      	lsrs	r3, r3, #7
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b7f      	cmp	r3, #127	; 0x7f
 80080e4:	d8f0      	bhi.n	80080c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	61fa      	str	r2, [r7, #28]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80080f6:	2207      	movs	r2, #7
 80080f8:	68f9      	ldr	r1, [r7, #12]
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f7ff f99e 	bl	800743c <_SendPacket>
  RECORD_END();
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f383 8811 	msr	BASEPRI, r3
}
 8008106:	bf00      	nop
 8008108:	3728      	adds	r7, #40	; 0x28
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200020bc 	.word	0x200020bc
 8008114:	2000208c 	.word	0x2000208c

08008118 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	1ad3      	subs	r3, r2, r3
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000208c 	.word	0x2000208c

08008138 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b08c      	sub	sp, #48	; 0x30
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d06d      	beq.n	8008226 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008150:	2300      	movs	r3, #0
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
 8008154:	e008      	b.n	8008168 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	3301      	adds	r3, #1
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816c:	429a      	cmp	r2, r3
 800816e:	d3f2      	bcc.n	8008156 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008170:	e000      	b.n	8008174 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008172:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d055      	beq.n	8008226 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800817a:	f3ef 8311 	mrs	r3, BASEPRI
 800817e:	f04f 0120 	mov.w	r1, #32
 8008182:	f381 8811 	msr	BASEPRI, r1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	482a      	ldr	r0, [pc, #168]	; (8008234 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800818a:	f7ff f86d 	bl	8007268 <_PreparePacket>
 800818e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	e00b      	b.n	80081b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	1c59      	adds	r1, r3, #1
 80081a6:	6279      	str	r1, [r7, #36]	; 0x24
 80081a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	09db      	lsrs	r3, r3, #7
 80081b4:	623b      	str	r3, [r7, #32]
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	2b7f      	cmp	r3, #127	; 0x7f
 80081ba:	d8f0      	bhi.n	800819e <SEGGER_SYSVIEW_SendModule+0x66>
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	627a      	str	r2, [r7, #36]	; 0x24
 80081c2:	6a3a      	ldr	r2, [r7, #32]
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	e00b      	b.n	80081f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	1c59      	adds	r1, r3, #1
 80081e0:	61f9      	str	r1, [r7, #28]
 80081e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	09db      	lsrs	r3, r3, #7
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b7f      	cmp	r3, #127	; 0x7f
 80081f4:	d8f0      	bhi.n	80081d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	61fa      	str	r2, [r7, #28]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	4619      	mov	r1, r3
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7fe ffde 	bl	80071d0 <_EncodeStr>
 8008214:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008216:	2216      	movs	r2, #22
 8008218:	68f9      	ldr	r1, [r7, #12]
 800821a:	6938      	ldr	r0, [r7, #16]
 800821c:	f7ff f90e 	bl	800743c <_SendPacket>
      RECORD_END();
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008226:	bf00      	nop
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200020b4 	.word	0x200020b4
 8008234:	200020bc 	.word	0x200020bc

08008238 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00f      	beq.n	8008266 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f2      	bne.n	800824c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200020b4 	.word	0x200020b4

08008274 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800827a:	f3ef 8311 	mrs	r3, BASEPRI
 800827e:	f04f 0120 	mov.w	r1, #32
 8008282:	f381 8811 	msr	BASEPRI, r1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	4817      	ldr	r0, [pc, #92]	; (80082e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800828a:	f7fe ffed 	bl	8007268 <_PreparePacket>
 800828e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	e00b      	b.n	80082b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	6179      	str	r1, [r7, #20]
 80082aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	09db      	lsrs	r3, r3, #7
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2b7f      	cmp	r3, #127	; 0x7f
 80082bc:	d8f0      	bhi.n	80082a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	617a      	str	r2, [r7, #20]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80082ce:	221b      	movs	r2, #27
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	68b8      	ldr	r0, [r7, #8]
 80082d4:	f7ff f8b2 	bl	800743c <_SendPacket>
  RECORD_END();
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200020bc 	.word	0x200020bc
 80082ec:	200020b8 	.word	0x200020b8

080082f0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082f8:	f3ef 8311 	mrs	r3, BASEPRI
 80082fc:	f04f 0120 	mov.w	r1, #32
 8008300:	f381 8811 	msr	BASEPRI, r1
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	4827      	ldr	r0, [pc, #156]	; (80083a4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008308:	f7fe ffae 	bl	8007268 <_PreparePacket>
 800830c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	6938      	ldr	r0, [r7, #16]
 8008314:	f7fe ff5c 	bl	80071d0 <_EncodeStr>
 8008318:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
 800831e:	2301      	movs	r3, #1
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	e00b      	b.n	800833c <SEGGER_SYSVIEW_Warn+0x4c>
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	6279      	str	r1, [r7, #36]	; 0x24
 800832e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	09db      	lsrs	r3, r3, #7
 800833a:	623b      	str	r3, [r7, #32]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b7f      	cmp	r3, #127	; 0x7f
 8008340:	d8f0      	bhi.n	8008324 <SEGGER_SYSVIEW_Warn+0x34>
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	627a      	str	r2, [r7, #36]	; 0x24
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e00b      	b.n	8008374 <SEGGER_SYSVIEW_Warn+0x84>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	1c59      	adds	r1, r3, #1
 8008364:	61f9      	str	r1, [r7, #28]
 8008366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	09db      	lsrs	r3, r3, #7
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b7f      	cmp	r3, #127	; 0x7f
 8008378:	d8f0      	bhi.n	800835c <SEGGER_SYSVIEW_Warn+0x6c>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800838a:	221a      	movs	r2, #26
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	6938      	ldr	r0, [r7, #16]
 8008390:	f7ff f854 	bl	800743c <_SendPacket>
  RECORD_END();
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f383 8811 	msr	BASEPRI, r3
}
 800839a:	bf00      	nop
 800839c:	3728      	adds	r7, #40	; 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200020bc 	.word	0x200020bc

080083a8 <__libc_init_array>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	2500      	movs	r5, #0
 80083ac:	4e0c      	ldr	r6, [pc, #48]	; (80083e0 <__libc_init_array+0x38>)
 80083ae:	4c0d      	ldr	r4, [pc, #52]	; (80083e4 <__libc_init_array+0x3c>)
 80083b0:	1ba4      	subs	r4, r4, r6
 80083b2:	10a4      	asrs	r4, r4, #2
 80083b4:	42a5      	cmp	r5, r4
 80083b6:	d109      	bne.n	80083cc <__libc_init_array+0x24>
 80083b8:	f000 f83c 	bl	8008434 <_init>
 80083bc:	2500      	movs	r5, #0
 80083be:	4e0a      	ldr	r6, [pc, #40]	; (80083e8 <__libc_init_array+0x40>)
 80083c0:	4c0a      	ldr	r4, [pc, #40]	; (80083ec <__libc_init_array+0x44>)
 80083c2:	1ba4      	subs	r4, r4, r6
 80083c4:	10a4      	asrs	r4, r4, #2
 80083c6:	42a5      	cmp	r5, r4
 80083c8:	d105      	bne.n	80083d6 <__libc_init_array+0x2e>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083d0:	4798      	blx	r3
 80083d2:	3501      	adds	r5, #1
 80083d4:	e7ee      	b.n	80083b4 <__libc_init_array+0xc>
 80083d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083da:	4798      	blx	r3
 80083dc:	3501      	adds	r5, #1
 80083de:	e7f2      	b.n	80083c6 <__libc_init_array+0x1e>
 80083e0:	08008544 	.word	0x08008544
 80083e4:	08008544 	.word	0x08008544
 80083e8:	08008544 	.word	0x08008544
 80083ec:	08008548 	.word	0x08008548

080083f0 <memcmp>:
 80083f0:	b530      	push	{r4, r5, lr}
 80083f2:	2400      	movs	r4, #0
 80083f4:	42a2      	cmp	r2, r4
 80083f6:	d101      	bne.n	80083fc <memcmp+0xc>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e007      	b.n	800840c <memcmp+0x1c>
 80083fc:	5d03      	ldrb	r3, [r0, r4]
 80083fe:	3401      	adds	r4, #1
 8008400:	190d      	adds	r5, r1, r4
 8008402:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008406:	42ab      	cmp	r3, r5
 8008408:	d0f4      	beq.n	80083f4 <memcmp+0x4>
 800840a:	1b58      	subs	r0, r3, r5
 800840c:	bd30      	pop	{r4, r5, pc}

0800840e <memcpy>:
 800840e:	b510      	push	{r4, lr}
 8008410:	1e43      	subs	r3, r0, #1
 8008412:	440a      	add	r2, r1
 8008414:	4291      	cmp	r1, r2
 8008416:	d100      	bne.n	800841a <memcpy+0xc>
 8008418:	bd10      	pop	{r4, pc}
 800841a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008422:	e7f7      	b.n	8008414 <memcpy+0x6>

08008424 <memset>:
 8008424:	4603      	mov	r3, r0
 8008426:	4402      	add	r2, r0
 8008428:	4293      	cmp	r3, r2
 800842a:	d100      	bne.n	800842e <memset+0xa>
 800842c:	4770      	bx	lr
 800842e:	f803 1b01 	strb.w	r1, [r3], #1
 8008432:	e7f9      	b.n	8008428 <memset+0x4>

08008434 <_init>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr

08008440 <_fini>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr
