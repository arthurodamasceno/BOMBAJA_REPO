
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800550c  0800550c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800550c  0800550c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  20000010  08005524  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002d10  08005524  00022d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116fa  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e85  00000000  00000000  00031733  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016966  00000000  00000000  000365a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbf1  00000000  00000000  0004cf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dbcb  00000000  00000000  0005aaf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d86c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  000d8740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005484 	.word	0x08005484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005484 	.word	0x08005484

08000150 <GetPage>:
/* STM32F103 have 128 PAGES (Page 0 to Page 127) of 1 KB each. This makes up 128 KB Flash Memory
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address) {
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	for (int indx = 0; indx < 128; indx++) {
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
 800015c:	e016      	b.n	800018c <GetPage+0x3c>
		if ((Address < (0x08000000 + (FLASH_PAGE_SIZE * (indx + 1))))
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000164:	3301      	adds	r3, #1
 8000166:	029b      	lsls	r3, r3, #10
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	429a      	cmp	r2, r3
 800016c:	d20b      	bcs.n	8000186 <GetPage+0x36>
				&& (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) {
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000174:	029b      	lsls	r3, r3, #10
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d304      	bcc.n	8000186 <GetPage+0x36>
			return (0x08000000 + FLASH_PAGE_SIZE * indx);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000182:	029b      	lsls	r3, r3, #10
 8000184:	e006      	b.n	8000194 <GetPage+0x44>
	for (int indx = 0; indx < 128; indx++) {
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	3301      	adds	r3, #1
 800018a:	60fb      	str	r3, [r7, #12]
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	2b7f      	cmp	r3, #127	; 0x7f
 8000190:	dde5      	ble.n	800015e <GetPage+0xe>
		}
	}

	return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <float2Bytes>:

uint8_t bytes_temp[4];

void float2Bytes(uint8_t *ftoa_bytes_temp, uint32_t float_variable) {
 800019e:	b480      	push	{r7}
 80001a0:	b085      	sub	sp, #20
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
 80001a6:	6039      	str	r1, [r7, #0]
	union {
		uint32_t a;
		uint8_t bytes[4];
	} thing;

	thing.a = float_variable;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < 4; i++) {
 80001ac:	2300      	movs	r3, #0
 80001ae:	73fb      	strb	r3, [r7, #15]
 80001b0:	e00c      	b.n	80001cc <float2Bytes+0x2e>
		ftoa_bytes_temp[i] = thing.bytes[i];
 80001b2:	7bfa      	ldrb	r2, [r7, #15]
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	6879      	ldr	r1, [r7, #4]
 80001b8:	440b      	add	r3, r1
 80001ba:	f107 0110 	add.w	r1, r7, #16
 80001be:	440a      	add	r2, r1
 80001c0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80001c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	3301      	adds	r3, #1
 80001ca:	73fb      	strb	r3, [r7, #15]
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d9ef      	bls.n	80001b2 <float2Bytes+0x14>
	}

}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <Bytes2float>:

uint32_t Bytes2float(uint8_t *ftoa_bytes_temp) {
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	union {
		uint32_t a;
		uint8_t bytes[4];
	} thing;

	for (uint8_t i = 0; i < 4; i++) {
 80001e4:	2300      	movs	r3, #0
 80001e6:	75fb      	strb	r3, [r7, #23]
 80001e8:	e00c      	b.n	8000204 <Bytes2float+0x28>
		thing.bytes[i] = ftoa_bytes_temp[i];
 80001ea:	7dfb      	ldrb	r3, [r7, #23]
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	441a      	add	r2, r3
 80001f0:	7dfb      	ldrb	r3, [r7, #23]
 80001f2:	7812      	ldrb	r2, [r2, #0]
 80001f4:	f107 0118 	add.w	r1, r7, #24
 80001f8:	440b      	add	r3, r1
 80001fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 4; i++) {
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	3301      	adds	r3, #1
 8000202:	75fb      	strb	r3, [r7, #23]
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	2b03      	cmp	r3, #3
 8000208:	d9ef      	bls.n	80001ea <Bytes2float+0xe>
	}

	uint32_t float_variable = thing.a;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	613b      	str	r3, [r7, #16]
	return float_variable;
 800020e:	693b      	ldr	r3, [r7, #16]
}
 8000210:	4618      	mov	r0, r3
 8000212:	371c      	adds	r7, #28
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
	...

0800021c <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data,
		uint16_t numberofwords) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b08b      	sub	sp, #44	; 0x2c
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	4613      	mov	r3, r2
 8000228:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800022e:	f002 fbe3 	bl	80029f8 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/

	uint32_t StartPage = GetPage(StartPageAddress);
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f7ff ff8c 	bl	8000150 <GetPage>
 8000238:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000246:	69f8      	ldr	r0, [r7, #28]
 8000248:	f7ff ff82 	bl	8000150 <GetPage>
 800024c:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000254:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000256:	6a3b      	ldr	r3, [r7, #32]
 8000258:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 800025a:	69ba      	ldr	r2, [r7, #24]
 800025c:	6a3b      	ldr	r3, [r7, #32]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	0a9b      	lsrs	r3, r3, #10
 8000262:	3301      	adds	r3, #1
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000266:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4619      	mov	r1, r3
 800026e:	4818      	ldr	r0, [pc, #96]	; (80002d0 <Flash_Write_Data+0xb4>)
 8000270:	f002 fcb4 	bl	8002bdc <HAL_FLASHEx_Erase>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d01e      	beq.n	80002b8 <Flash_Write_Data+0x9c>
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 800027a:	f002 fbf3 	bl	8002a64 <HAL_FLASH_GetError>
 800027e:	4603      	mov	r3, r0
 8000280:	e021      	b.n	80002c6 <Flash_Write_Data+0xaa>

	/* Program the user Flash area word by word*/

	while (sofar < numberofwords) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
				Data[sofar]) == HAL_OK) {
 8000282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	4413      	add	r3, r2
 800028a:	681b      	ldr	r3, [r3, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress,
 800028c:	f04f 0400 	mov.w	r4, #0
 8000290:	461a      	mov	r2, r3
 8000292:	4623      	mov	r3, r4
 8000294:	68f9      	ldr	r1, [r7, #12]
 8000296:	2002      	movs	r0, #2
 8000298:	f002 fb3e 	bl	8002918 <HAL_FLASH_Program>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <Flash_Write_Data+0x94>
			StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	3304      	adds	r3, #4
 80002a6:	60fb      	str	r3, [r7, #12]
			sofar++;
 80002a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002aa:	3301      	adds	r3, #1
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
 80002ae:	e003      	b.n	80002b8 <Flash_Write_Data+0x9c>
		} else {
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 80002b0:	f002 fbd8 	bl	8002a64 <HAL_FLASH_GetError>
 80002b4:	4603      	mov	r3, r0
 80002b6:	e006      	b.n	80002c6 <Flash_Write_Data+0xaa>
	while (sofar < numberofwords) {
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbe0      	blt.n	8000282 <Flash_Write_Data+0x66>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80002c0:	f002 fbc0 	bl	8002a44 <HAL_FLASH_Lock>

	return 0;
 80002c4:	2300      	movs	r3, #0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	372c      	adds	r7, #44	; 0x2c
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd90      	pop	{r4, r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf,
		uint16_t numberofwords) {
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	4613      	mov	r3, r2
 80002e0:	80fb      	strh	r3, [r7, #6]
	while (1) {

		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3304      	adds	r3, #4
 80002ee:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	3304      	adds	r3, #4
 80002f4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	1e5a      	subs	r2, r3, #1
 80002fa:	80fa      	strh	r2, [r7, #6]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d000      	beq.n	8000302 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t*) StartPageAddress;
 8000300:	e7ef      	b.n	80002e2 <Flash_Read_Data+0xe>
			break;
 8000302:	bf00      	nop
	}
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
	...

08000310 <Flash_Write_NUM>:
	for (int i = 0; i < numberofbytes; i++) {
		Buf[i] = Data[i / 4] >> (8 * (i % 4));
	}
}

void Flash_Write_NUM(uint32_t StartSectorAddress, uint32_t Num) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]

	float2Bytes(bytes_temp, Num);
 800031a:	6839      	ldr	r1, [r7, #0]
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <Flash_Write_NUM+0x24>)
 800031e:	f7ff ff3e 	bl	800019e <float2Bytes>

	Flash_Write_Data(StartSectorAddress, (uint32_t*) bytes_temp, 1);
 8000322:	2201      	movs	r2, #1
 8000324:	4903      	ldr	r1, [pc, #12]	; (8000334 <Flash_Write_NUM+0x24>)
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff78 	bl	800021c <Flash_Write_Data>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20002be4 	.word	0x20002be4

08000338 <Flash_Read_NUM>:

uint32_t Flash_Read_NUM(uint32_t StartSectorAddress) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	uint32_t value;

	Flash_Read_Data(StartSectorAddress, (uint32_t*) buffer, 1);
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f7ff ffc3 	bl	80002d4 <Flash_Read_Data>
	value = Bytes2float(buffer);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff42 	bl	80001dc <Bytes2float>
 8000358:	60f8      	str	r0, [r7, #12]
	return value;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <vApplicationGetIdleTaskMemory+0x28>)
 8000374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <vApplicationGetIdleTaskMemory+0x2c>)
 800037a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000003c 	.word	0x2000003c
 8000390:	20000090 	.word	0x20000090

08000394 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800039a:	f000 feb1 	bl	8001100 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800039e:	f000 f897 	bl	80004d0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003a2:	f000 f9af 	bl	8000704 <MX_GPIO_Init>
	MX_DMA_Init();
 80003a6:	f000 f98f 	bl	80006c8 <MX_DMA_Init>
	MX_ADC1_Init();
 80003aa:	f000 f8ed 	bl	8000588 <MX_ADC1_Init>
	MX_CAN_Init();
 80003ae:	f000 f955 	bl	800065c <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	OD = Flash_Read_NUM(0x0801FC00);
 80003b2:	4830      	ldr	r0, [pc, #192]	; (8000474 <main+0xe0>)
 80003b4:	f7ff ffc0 	bl	8000338 <Flash_Read_NUM>
 80003b8:	4602      	mov	r2, r0
 80003ba:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <main+0xe4>)
 80003bc:	601a      	str	r2, [r3, #0]

	CAN_Filter_Config();
 80003be:	f000 fa7d 	bl	80008bc <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 80003c2:	f240 4101 	movw	r1, #1025	; 0x401
 80003c6:	482d      	ldr	r0, [pc, #180]	; (800047c <main+0xe8>)
 80003c8:	f001 fd8c 	bl	8001ee4 <HAL_CAN_ActivateNotification>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <main+0x42>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80003d2:	f000 fc79 	bl	8000cc8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 80003d6:	4829      	ldr	r0, [pc, #164]	; (800047c <main+0xe8>)
 80003d8:	f001 fc66 	bl	8001ca8 <HAL_CAN_Start>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <main+0x52>
		Error_Handler();
 80003e2:	f000 fc71 	bl	8000cc8 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 4);
 80003e6:	2204      	movs	r2, #4
 80003e8:	4925      	ldr	r1, [pc, #148]	; (8000480 <main+0xec>)
 80003ea:	4826      	ldr	r0, [pc, #152]	; (8000484 <main+0xf0>)
 80003ec:	f000 ffb4 	bl	8001358 <HAL_ADC_Start_DMA>

	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <main+0xf4>)
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	2304      	movs	r3, #4
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2280      	movs	r2, #128	; 0x80
 80003fc:	4923      	ldr	r1, [pc, #140]	; (800048c <main+0xf8>)
 80003fe:	4824      	ldr	r0, [pc, #144]	; (8000490 <main+0xfc>)
 8000400:	f003 fe6b 	bl	80040da <xTaskCreate>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <main+0x100>)
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	2304      	movs	r3, #4
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	4921      	ldr	r1, [pc, #132]	; (8000498 <main+0x104>)
 8000412:	4822      	ldr	r0, [pc, #136]	; (800049c <main+0x108>)
 8000414:	f003 fe61 	bl	80040da <xTaskCreate>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 8000418:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <main+0x10c>)
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	2304      	movs	r3, #4
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2300      	movs	r3, #0
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	491f      	ldr	r1, [pc, #124]	; (80004a4 <main+0x110>)
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <main+0x114>)
 8000428:	f003 fe57 	bl	80040da <xTaskCreate>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 800042c:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <main+0x118>)
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	2305      	movs	r3, #5
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2300      	movs	r3, #0
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	491d      	ldr	r1, [pc, #116]	; (80004b0 <main+0x11c>)
 800043a:	481e      	ldr	r0, [pc, #120]	; (80004b4 <main+0x120>)
 800043c:	f003 fe4d 	bl	80040da <xTaskCreate>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <main+0x124>)
 8000442:	9301      	str	r3, [sp, #4]
 8000444:	2304      	movs	r3, #4
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	2300      	movs	r3, #0
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	491b      	ldr	r1, [pc, #108]	; (80004bc <main+0x128>)
 800044e:	481c      	ldr	r0, [pc, #112]	; (80004c0 <main+0x12c>)
 8000450:	f003 fe43 	bl	80040da <xTaskCreate>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 6, &OD_Task);
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <main+0x130>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	2306      	movs	r3, #6
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2300      	movs	r3, #0
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	4919      	ldr	r1, [pc, #100]	; (80004c8 <main+0x134>)
 8000462:	481a      	ldr	r0, [pc, #104]	; (80004cc <main+0x138>)
 8000464:	f003 fe39 	bl	80040da <xTaskCreate>

	vTaskStartScheduler();
 8000468:	f004 f8d4 	bl	8004614 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 800046c:	2001      	movs	r0, #1
 800046e:	f000 fe79 	bl	8001164 <HAL_Delay>
 8000472:	e7fb      	b.n	800046c <main+0xd8>
 8000474:	0801fc00 	.word	0x0801fc00
 8000478:	20000290 	.word	0x20000290
 800047c:	20002bfc 	.word	0x20002bfc
 8000480:	20002be8 	.word	0x20002be8
 8000484:	20002c2c 	.word	0x20002c2c
 8000488:	20002c24 	.word	0x20002c24
 800048c:	0800549c 	.word	0x0800549c
 8000490:	08000909 	.word	0x08000909
 8000494:	20002bf8 	.word	0x20002bf8
 8000498:	080054a4 	.word	0x080054a4
 800049c:	08000969 	.word	0x08000969
 80004a0:	20002c28 	.word	0x20002c28
 80004a4:	080054b0 	.word	0x080054b0
 80004a8:	080009c9 	.word	0x080009c9
 80004ac:	20002ca4 	.word	0x20002ca4
 80004b0:	080054bc 	.word	0x080054bc
 80004b4:	08000a89 	.word	0x08000a89
 80004b8:	20002bf4 	.word	0x20002bf4
 80004bc:	080054c8 	.word	0x080054c8
 80004c0:	08000a29 	.word	0x08000a29
 80004c4:	20002bf0 	.word	0x20002bf0
 80004c8:	080054d0 	.word	0x080054d0
 80004cc:	08000bdd 	.word	0x08000bdd

080004d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b094      	sub	sp, #80	; 0x50
 80004d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f004 ffc8 	bl	8005474 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000500:	2301      	movs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800051c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fdc4 	bl	80030b4 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x66>
		Error_Handler();
 8000532:	f000 fbc9 	bl	8000cc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000546:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2102      	movs	r1, #2
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f82e 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x92>
		Error_Handler();
 800055e:	f000 fbb3 	bl	8000cc8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000562:	2302      	movs	r3, #2
 8000564:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f9d8 	bl	8003924 <HAL_RCCEx_PeriphCLKConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xae>
		Error_Handler();
 800057a:	f000 fba5 	bl	8000cc8 <Error_Handler>
	}
}
 800057e:	bf00      	nop
 8000580:	3750      	adds	r7, #80	; 0x50
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <MX_ADC1_Init+0xcc>)
 800059a:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <MX_ADC1_Init+0xd0>)
 800059c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005b8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80005c6:	4823      	ldr	r0, [pc, #140]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005c8:	f000 fdee 	bl	80011a8 <HAL_ADC_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0x4e>
		Error_Handler();
 80005d2:	f000 fb79 	bl	8000cc8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2301      	movs	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005de:	2307      	movs	r3, #7
 80005e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <MX_ADC1_Init+0xcc>)
 80005e8:	f000 ffb0 	bl	800154c <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x6e>
		Error_Handler();
 80005f2:	f000 fb69 	bl	8000cc8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80005f6:	2303      	movs	r3, #3
 80005f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4814      	ldr	r0, [pc, #80]	; (8000654 <MX_ADC1_Init+0xcc>)
 8000604:	f000 ffa2 	bl	800154c <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x8a>
		Error_Handler();
 800060e:	f000 fb5b 	bl	8000cc8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000612:	2308      	movs	r3, #8
 8000614:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000616:	2303      	movs	r3, #3
 8000618:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_ADC1_Init+0xcc>)
 8000620:	f000 ff94 	bl	800154c <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xa6>
		Error_Handler();
 800062a:	f000 fb4d 	bl	8000cc8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800062e:	2309      	movs	r3, #9
 8000630:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000632:	2304      	movs	r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_ADC1_Init+0xcc>)
 800063c:	f000 ff86 	bl	800154c <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0xc2>
		Error_Handler();
 8000646:	f000 fb3f 	bl	8000cc8 <Error_Handler>
	}
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20002c2c 	.word	0x20002c2c
 8000658:	40012400 	.word	0x40012400

0800065c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_CAN_Init+0x64>)
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_CAN_Init+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_CAN_Init+0x64>)
 8000668:	2209      	movs	r2, #9
 800066a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_CAN_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_CAN_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_CAN_Init+0x64>)
 800067a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800067e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_CAN_Init+0x64>)
 8000682:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000686:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_CAN_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_CAN_Init+0x64>)
 8000690:	2201      	movs	r2, #1
 8000692:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_CAN_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_CAN_Init+0x64>)
 800069c:	2201      	movs	r2, #1
 800069e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_CAN_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_CAN_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_CAN_Init+0x64>)
 80006ae:	f001 f937 	bl	8001920 <HAL_CAN_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_CAN_Init+0x60>
		Error_Handler();
 80006b8:	f000 fb06 	bl	8000cc8 <Error_Handler>
	}
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20002bfc 	.word	0x20002bfc
 80006c4:	40006400 	.word	0x40006400

080006c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_DMA_Init+0x38>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <MX_DMA_Init+0x38>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_DMA_Init+0x38>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	200b      	movs	r0, #11
 80006ec:	f001 fefb 	bl	80024e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006f0:	200b      	movs	r0, #11
 80006f2:	f001 ff14 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	4b53      	ldr	r3, [pc, #332]	; (8000868 <MX_GPIO_Init+0x164>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a52      	ldr	r2, [pc, #328]	; (8000868 <MX_GPIO_Init+0x164>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <MX_GPIO_Init+0x164>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000730:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <MX_GPIO_Init+0x164>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a4c      	ldr	r2, [pc, #304]	; (8000868 <MX_GPIO_Init+0x164>)
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <MX_GPIO_Init+0x164>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <MX_GPIO_Init+0x164>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a46      	ldr	r2, [pc, #280]	; (8000868 <MX_GPIO_Init+0x164>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <MX_GPIO_Init+0x164>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b41      	ldr	r3, [pc, #260]	; (8000868 <MX_GPIO_Init+0x164>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a40      	ldr	r2, [pc, #256]	; (8000868 <MX_GPIO_Init+0x164>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <MX_GPIO_Init+0x164>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077e:	483b      	ldr	r0, [pc, #236]	; (800086c <MX_GPIO_Init+0x168>)
 8000780:	f002 fc45 	bl	800300e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <MX_GPIO_Init+0x168>)
 800078c:	f002 fc3f 	bl	800300e <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	4836      	ldr	r0, [pc, #216]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000798:	f002 fc39 	bl	800300e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	4834      	ldr	r0, [pc, #208]	; (8000874 <MX_GPIO_Init+0x170>)
 80007a2:	f002 fc34 	bl	800300e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	482b      	ldr	r0, [pc, #172]	; (800086c <MX_GPIO_Init+0x168>)
 80007c0:	f002 fab4 	bl	8002d2c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4823      	ldr	r0, [pc, #140]	; (800086c <MX_GPIO_Init+0x168>)
 80007de:	f002 faa5 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <MX_GPIO_Init+0x16c>)
 80007fc:	f002 fa96 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_GPIO_Init+0x174>)
 8000808:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000816:	f002 fa89 	bl	8002d2c <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210a      	movs	r1, #10
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f001 fe61 	bl	80024e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f001 fe7a 	bl	800251e <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082a:	2308      	movs	r3, #8
 800082c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0x170>)
 8000842:	f002 fa73 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000846:	2310      	movs	r3, #16
 8000848:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_GPIO_Init+0x170>)
 800085a:	f002 fa67 	bl	8002d2c <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	40011000 	.word	0x40011000
 8000870:	40010800 	.word	0x40010800
 8000874:	40010c00 	.word	0x40010c00
 8000878:	10210000 	.word	0x10210000

0800087c <EXTI15_10_IRQHandler>:

/*Configure GPIO pin INTERRUPT HANDLER */
void EXTI15_10_IRQHandler(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000882:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000886:	f002 fbf3 	bl	8003070 <HAL_GPIO_EXTI_IRQHandler>

	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(OD_Task);
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <EXTI15_10_IRQHandler+0x38>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fe50 	bl	8004534 <xTaskResumeFromISR>
 8000894:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <EXTI15_10_IRQHandler+0x30>
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <EXTI15_10_IRQHandler+0x3c>)
 800089e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	f3bf 8f6f 	isb	sy
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20002bf0 	.word	0x20002bf0
 80008b8:	e000ed04 	.word	0xe000ed04

080008bc <CAN_Filter_Config>:

/*Configure can filters */
void CAN_Filter_Config(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <CAN_Filter_Config+0x48>)
 80008ec:	f001 f913 	bl	8001b16 <HAL_CAN_ConfigFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <CAN_Filter_Config+0x3e>
		Error_Handler();
 80008f6:	f000 f9e7 	bl	8000cc8 <Error_Handler>
	}
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20002bfc 	.word	0x20002bfc

08000908 <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	while (1) {
		//buffer[0] = (uint8_t) (analog[0] >> 8) & 0xFF;  //bat CALIBRAR
		//buffer[1] = (uint8_t) analog[0] & 0xFF;

		uint8_t batbuff[2];
		batbuff[0] = (uint8_t) (analog[0] >> 8) & 0xFF;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <Bat_taskF+0x58>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b29b      	uxth	r3, r3
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		batbuff[1] = (uint8_t) analog[0] & 0xFF;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <Bat_taskF+0x58>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
		BatHeader.StdId = 0x650;
 800092c:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8000930:	60bb      	str	r3, [r7, #8]
		BatHeader.IDE = CAN_ID_STD;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
		BatHeader.RTR = CAN_RTR_DATA;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000942:	f107 0108 	add.w	r1, r7, #8
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <Bat_taskF+0x5c>)
 8000948:	f001 f9f2 	bl	8001d30 <HAL_CAN_AddTxMessage>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <Bat_taskF+0x4e>
				!= HAL_OK) {
			Error_Handler();
 8000952:	f000 f9b9 	bl	8000cc8 <Error_Handler>
		}

		vTaskDelay(1000); /*1Hz frequency*/
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f003 fceb 	bl	8004334 <vTaskDelay>
	while (1) {
 800095e:	e7d7      	b.n	8000910 <Bat_taskF+0x8>
 8000960:	20002be8 	.word	0x20002be8
 8000964:	20002bfc 	.word	0x20002bfc

08000968 <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t fuelbuff[2];
		fuelbuff[0] = (uint8_t) (analog[1] >> 8) & 0xFF;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <Fuel_taskF+0x58>)
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		fuelbuff[1] = (uint8_t) analog[1] & 0xFF;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <Fuel_taskF+0x58>)
 8000980:	885b      	ldrh	r3, [r3, #2]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
		FuelHeader.StdId = 0x652;
 800098c:	f240 6352 	movw	r3, #1618	; 0x652
 8000990:	60bb      	str	r3, [r7, #8]
		FuelHeader.IDE = CAN_ID_STD;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
		FuelHeader.RTR = CAN_RTR_DATA;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <Fuel_taskF+0x5c>)
 80009a8:	f001 f9c2 	bl	8001d30 <HAL_CAN_AddTxMessage>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <Fuel_taskF+0x4e>
				!= HAL_OK) {
			Error_Handler();
 80009b2:	f000 f989 	bl	8000cc8 <Error_Handler>
		}

		vTaskDelay(20); /*50Hz frequency*/
 80009b6:	2014      	movs	r0, #20
 80009b8:	f003 fcbc 	bl	8004334 <vTaskDelay>
	while (1) {
 80009bc:	e7d8      	b.n	8000970 <Fuel_taskF+0x8>
 80009be:	bf00      	nop
 80009c0:	20002be8 	.word	0x20002be8
 80009c4:	20002bfc 	.word	0x20002bfc

080009c8 <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t speedbuff[2];
		speedbuff[0] = (uint8_t) (analog[2] >> 8) & 0xFF;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <Speed_taskF+0x58>)
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		speedbuff[1] = (uint8_t) analog[2] & 0xFF;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <Speed_taskF+0x58>)
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 80009ec:	f240 6353 	movw	r3, #1619	; 0x653
 80009f0:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a02:	f107 0108 	add.w	r1, r7, #8
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <Speed_taskF+0x5c>)
 8000a08:	f001 f992 	bl	8001d30 <HAL_CAN_AddTxMessage>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <Speed_taskF+0x4e>
				!= HAL_OK) {
			Error_Handler();
 8000a12:	f000 f959 	bl	8000cc8 <Error_Handler>
		}

		vTaskDelay(10); /*100Hz frequency*/
 8000a16:	200a      	movs	r0, #10
 8000a18:	f003 fc8c 	bl	8004334 <vTaskDelay>
	while (1) {
 8000a1c:	e7d8      	b.n	80009d0 <Speed_taskF+0x8>
 8000a1e:	bf00      	nop
 8000a20:	20002be8 	.word	0x20002be8
 8000a24:	20002bfc 	.word	0x20002bfc

08000a28 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

		//buffer[6] = (uint8_t) (analog[3] >> 8) & 0xFF;  //rpm CALIBRAR
		//buffer[7] = (uint8_t) analog[3] & 0xFF;

		uint8_t rpmbuff[2];
		rpmbuff[0] = (uint8_t) (analog[3] >> 8) & 0xFF;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <RPM_taskF+0x58>)
 8000a32:	88db      	ldrh	r3, [r3, #6]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rpmbuff[1] = (uint8_t) analog[3] & 0xFF;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <RPM_taskF+0x58>)
 8000a40:	88db      	ldrh	r3, [r3, #6]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
		RPMHeader.StdId = 0x654;
 8000a4c:	f240 6354 	movw	r3, #1620	; 0x654
 8000a50:	60bb      	str	r3, [r7, #8]
		RPMHeader.IDE = CAN_ID_STD;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
		RPMHeader.RTR = CAN_RTR_DATA;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a62:	f107 0108 	add.w	r1, r7, #8
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <RPM_taskF+0x5c>)
 8000a68:	f001 f962 	bl	8001d30 <HAL_CAN_AddTxMessage>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <RPM_taskF+0x4e>
				!= HAL_OK) {
			Error_Handler();
 8000a72:	f000 f929 	bl	8000cc8 <Error_Handler>
		}

		vTaskDelay(10); /*100Hz frequency*/
 8000a76:	200a      	movs	r0, #10
 8000a78:	f003 fc5c 	bl	8004334 <vTaskDelay>
	while (1) {
 8000a7c:	e7d8      	b.n	8000a30 <RPM_taskF+0x8>
 8000a7e:	bf00      	nop
 8000a80:	20002be8 	.word	0x20002be8
 8000a84:	20002bfc 	.word	0x20002bfc

08000a88 <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b090      	sub	sp, #64	; 0x40
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t tempdata[16];

		CSen
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a96:	484d      	ldr	r0, [pc, #308]	; (8000bcc <Temp_taskF+0x144>)
 8000a98:	f002 fab9 	bl	800300e <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000aa0:	e018      	b.n	8000ad4 <Temp_taskF+0x4c>
			SCK_H
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	484a      	ldr	r0, [pc, #296]	; (8000bd0 <Temp_taskF+0x148>)
 8000aa8:	f002 fab1 	bl	800300e <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000aac:	2110      	movs	r1, #16
 8000aae:	4848      	ldr	r0, [pc, #288]	; (8000bd0 <Temp_taskF+0x148>)
 8000ab0:	f002 fa96 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abe:	4413      	add	r3, r2
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
			SCK_L
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4841      	ldr	r0, [pc, #260]	; (8000bd0 <Temp_taskF+0x148>)
 8000aca:	f002 faa0 	bl	800300e <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	dde3      	ble.n	8000aa2 <Temp_taskF+0x1a>
		}
		CSdis
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	483a      	ldr	r0, [pc, #232]	; (8000bcc <Temp_taskF+0x144>)
 8000ae2:	f002 fa94 	bl	800300e <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 8000ae6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d146      	bne.n	8000b7c <Temp_taskF+0xf4>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000aee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000af8:	4413      	add	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b00:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b08:	4413      	add	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000b10:	4413      	add	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000b18:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <Temp_taskF+0x14c>)
 8000b22:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <Temp_taskF+0x14c>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
					+ tempdata[12];
 8000b6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <Temp_taskF+0x14c>)
 8000b7a:	801a      	strh	r2, [r3, #0]
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <Temp_taskF+0x14c>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <Temp_taskF+0x14c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 8000b98:	f240 6351 	movw	r3, #1617	; 0x651
 8000b9c:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000bae:	f107 010c 	add.w	r1, r7, #12
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <Temp_taskF+0x150>)
 8000bb4:	f001 f8bc 	bl	8001d30 <HAL_CAN_AddTxMessage>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <Temp_taskF+0x13a>
				!= HAL_OK) {
			Error_Handler();
 8000bbe:	f000 f883 	bl	8000cc8 <Error_Handler>
		}

		vTaskDelay(200); /*5Hz frequency*/
 8000bc2:	20c8      	movs	r0, #200	; 0xc8
 8000bc4:	f003 fbb6 	bl	8004334 <vTaskDelay>
	while (1) {
 8000bc8:	e762      	b.n	8000a90 <Temp_taskF+0x8>
 8000bca:	bf00      	nop
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	20002c5c 	.word	0x20002c5c
 8000bd8:	20002bfc 	.word	0x20002bfc

08000bdc <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	while (1) {

		vTaskSuspend(NULL);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f003 fbd9 	bl	800439c <vTaskSuspend>
		PULSO += 1;
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <OD_taskF+0xb4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <OD_taskF+0xb4>)
 8000bf4:	701a      	strb	r2, [r3, #0]
		if (PULSO == 1) { //ODOMETRO 100m A CADA 58 VOLTAS!!!
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <OD_taskF+0xb4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d1f2      	bne.n	8000be4 <OD_taskF+0x8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	4824      	ldr	r0, [pc, #144]	; (8000c94 <OD_taskF+0xb8>)
 8000c04:	f002 fa1b 	bl	800303e <HAL_GPIO_TogglePin>
			PULSO = 0;
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <OD_taskF+0xb4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
			uint8_t odbuff[4];

			OD = Flash_Read_NUM(0x0801FC00);
 8000c0e:	4822      	ldr	r0, [pc, #136]	; (8000c98 <OD_taskF+0xbc>)
 8000c10:	f7ff fb92 	bl	8000338 <Flash_Read_NUM>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <OD_taskF+0xc0>)
 8000c18:	601a      	str	r2, [r3, #0]
			OD += 100;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <OD_taskF+0xc0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3364      	adds	r3, #100	; 0x64
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <OD_taskF+0xc0>)
 8000c22:	6013      	str	r3, [r2, #0]
			Flash_Write_NUM(0x0801FC00, OD);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <OD_taskF+0xc0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <OD_taskF+0xbc>)
 8000c2c:	f7ff fb70 	bl	8000310 <Flash_Write_NUM>
			odbuff[0] = (uint8_t) (OD >> 24) & 0xFF;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <OD_taskF+0xc0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	0e1b      	lsrs	r3, r3, #24
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			odbuff[1] = (uint8_t) (OD >> 16) & 0xFF;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <OD_taskF+0xc0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0c1b      	lsrs	r3, r3, #16
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			odbuff[2] = (uint8_t) (OD >> 8) & 0xFF;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <OD_taskF+0xc0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			odbuff[3] = (uint8_t) OD & 0xFF;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <OD_taskF+0xc0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			uint32_t TxMailbox;

			CAN_TxHeaderTypeDef odHeader;

			odHeader.DLC = 4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
			odHeader.StdId = 0x655;
 8000c62:	f240 6355 	movw	r3, #1621	; 0x655
 8000c66:	60bb      	str	r3, [r7, #8]
			odHeader.IDE = CAN_ID_STD;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
			odHeader.RTR = CAN_RTR_DATA;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

			if (HAL_CAN_AddTxMessage(&hcan, &odHeader, odbuff, &TxMailbox)
 8000c70:	f107 0320 	add.w	r3, r7, #32
 8000c74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <OD_taskF+0xc4>)
 8000c7e:	f001 f857 	bl	8001d30 <HAL_CAN_AddTxMessage>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0ad      	beq.n	8000be4 <OD_taskF+0x8>
					!= HAL_OK) {
				Error_Handler();
 8000c88:	f000 f81e 	bl	8000cc8 <Error_Handler>
		vTaskSuspend(NULL);
 8000c8c:	e7aa      	b.n	8000be4 <OD_taskF+0x8>
 8000c8e:	bf00      	nop
 8000c90:	20000294 	.word	0x20000294
 8000c94:	40011000 	.word	0x40011000
 8000c98:	0801fc00 	.word	0x0801fc00
 8000c9c:	20000290 	.word	0x20000290
 8000ca0:	20002bfc 	.word	0x20002bfc

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cb6:	f000 fa39 	bl	800112c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012c00 	.word	0x40012c00

08000cc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_MspInit+0x68>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_MspInit+0x68>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_MspInit+0x68>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_MspInit+0x68>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_MspInit+0x68>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x68>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	f06f 0001 	mvn.w	r0, #1
 8000d12:	f001 fbe8 	bl	80024e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_MspInit+0x6c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_MspInit+0x6c>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000

08000d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <HAL_ADC_MspInit+0xe8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d15f      	bne.n	8000e24 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a2b      	ldr	r2, [pc, #172]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_ADC_MspInit+0xec>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dac:	230c      	movs	r3, #12
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4619      	mov	r1, r3
 8000dba:	481e      	ldr	r0, [pc, #120]	; (8000e34 <HAL_ADC_MspInit+0xf0>)
 8000dbc:	f001 ffb6 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dd0:	f001 ffac 	bl	8002d2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_ADC_MspInit+0xfc>)
 8000dd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000dfe:	2220      	movs	r2, #32
 8000e00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000e0a:	f001 fb97 	bl	800253c <HAL_DMA_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000e14:	f7ff ff58 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012400 	.word	0x40012400
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	20002c60 	.word	0x20002c60
 8000e40:	40020008 	.word	0x40020008

08000e44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a35      	ldr	r2, [pc, #212]	; (8000f34 <HAL_CAN_MspInit+0xf0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d163      	bne.n	8000f2c <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	61d3      	str	r3, [r2, #28]
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_CAN_MspInit+0xf4>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4824      	ldr	r0, [pc, #144]	; (8000f3c <HAL_CAN_MspInit+0xf8>)
 8000eaa:	f001 ff3f 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481e      	ldr	r0, [pc, #120]	; (8000f3c <HAL_CAN_MspInit+0xf8>)
 8000ec4:	f001 ff32 	bl	8002d2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_CAN_MspInit+0xfc>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_CAN_MspInit+0xfc>)
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2105      	movs	r1, #5
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f001 faf8 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ef6:	2013      	movs	r0, #19
 8000ef8:	f001 fb11 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2105      	movs	r1, #5
 8000f00:	2014      	movs	r0, #20
 8000f02:	f001 faf0 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f06:	2014      	movs	r0, #20
 8000f08:	f001 fb09 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2105      	movs	r1, #5
 8000f10:	2015      	movs	r0, #21
 8000f12:	f001 fae8 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f16:	2015      	movs	r0, #21
 8000f18:	f001 fb01 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2016      	movs	r0, #22
 8000f22:	f001 fae0 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f26:	2016      	movs	r0, #22
 8000f28:	f001 faf9 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40006400 	.word	0x40006400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	40010000 	.word	0x40010000

08000f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2019      	movs	r0, #25
 8000f5a:	f001 fac4 	bl	80024e6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f001 fadd 	bl	800251e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fc7e 	bl	8003888 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f8c:	f002 fc68 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8000f90:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0c9b      	lsrs	r3, r3, #18
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_InitTick+0xa8>)
 8000fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fc2:	f002 fd65 	bl	8003a90 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fce:	f002 fd93 	bl	8003af8 <HAL_TIM_Base_Start_IT>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	20002ca8 	.word	0x20002ca8
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <HardFault_Handler+0x4>

08001002 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <MemManage_Handler+0x4>

08001008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <BusFault_Handler+0x4>

0800100e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <UsageFault_Handler+0x4>

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Channel1_IRQHandler+0x10>)
 8001026:	f001 fb43 	bl	80026b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20002c60 	.word	0x20002c60

08001034 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800103a:	f000 ff78 	bl	8001f2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20002bfc 	.word	0x20002bfc

08001048 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800104e:	f000 ff6e 	bl	8001f2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20002bfc 	.word	0x20002bfc

0800105c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <CAN1_RX1_IRQHandler+0x10>)
 8001062:	f000 ff64 	bl	8001f2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20002bfc 	.word	0x20002bfc

08001070 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <CAN1_SCE_IRQHandler+0x10>)
 8001076:	f000 ff5a 	bl	8001f2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20002bfc 	.word	0x20002bfc

08001084 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM1_UP_IRQHandler+0x10>)
 800108a:	f002 fd58 	bl	8003b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20002ca8 	.word	0x20002ca8

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SystemInit+0x5c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <SystemInit+0x5c>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0x5c>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <SystemInit+0x5c>)
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <SystemInit+0x60>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0x5c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <SystemInit+0x5c>)
 80010ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SystemInit+0x5c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SystemInit+0x5c>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <SystemInit+0x5c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <SystemInit+0x5c>)
 80010d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SystemInit+0x5c>)
 80010de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SystemInit+0x64>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	f8ff0000 	.word	0xf8ff0000
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x28>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f001 f9dd 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ff14 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fdda 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x1c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x20>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x20>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000008 	.word	0x20000008
 800114c:	20002ce8 	.word	0x20002ce8

08001150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <HAL_GetTick+0x10>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20002ce8 	.word	0x20002ce8

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff fff0 	bl	8001150 <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_Delay+0x40>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffe0 	bl	8001150 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0be      	b.n	8001348 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdac 	bl	8000d44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 faf7 	bl	80017e0 <ADC_ConversionStop_Disable>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8099 	bne.w	8001336 <HAL_ADC_Init+0x18e>
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8095 	bne.w	8001336 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7b1b      	ldrb	r3, [r3, #12]
 800122e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4313      	orrs	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001240:	d003      	beq.n	800124a <HAL_ADC_Init+0xa2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_ADC_Init+0xa8>
 800124a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124e:	e000      	b.n	8001252 <HAL_ADC_Init+0xaa>
 8001250:	2300      	movs	r3, #0
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7d1b      	ldrb	r3, [r3, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d119      	bne.n	8001294 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b1b      	ldrb	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	3b01      	subs	r3, #1
 800126e:	035a      	lsls	r2, r3, #13
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	e00b      	b.n	8001294 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	f043 0220 	orr.w	r2, r3, #32
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_ADC_Init+0x1a8>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d003      	beq.n	80012ce <HAL_ADC_Init+0x126>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_Init+0x1ac>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f023 0303 	bic.w	r3, r3, #3
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001312:	e018      	b.n	8001346 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	f023 0312 	bic.w	r3, r3, #18
 800131c:	f043 0210 	orr.w	r2, r3, #16
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001334:	e007      	b.n	8001346 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	ffe1f7fd 	.word	0xffe1f7fd
 8001354:	ff1f0efe 	.word	0xff1f0efe

08001358 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a64      	ldr	r2, [pc, #400]	; (8001500 <HAL_ADC_Start_DMA+0x1a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_ADC_Start_DMA+0x24>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a63      	ldr	r2, [pc, #396]	; (8001504 <HAL_ADC_Start_DMA+0x1ac>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d106      	bne.n	800138a <HAL_ADC_Start_DMA+0x32>
 800137c:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_ADC_Start_DMA+0x1a8>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 80b3 	bne.w	80014f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_ADC_Start_DMA+0x40>
 8001394:	2302      	movs	r3, #2
 8001396:	e0ae      	b.n	80014f6 <HAL_ADC_Start_DMA+0x19e>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f9cb 	bl	800173c <ADC_Enable>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 809a 	bne.w	80014e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_ADC_Start_DMA+0x1ac>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Start_DMA+0x84>
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <HAL_ADC_Start_DMA+0x1a8>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d115      	bne.n	8001408 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d026      	beq.n	8001444 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001406:	e01d      	b.n	8001444 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a39      	ldr	r2, [pc, #228]	; (8001500 <HAL_ADC_Start_DMA+0x1a8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d004      	beq.n	8001428 <HAL_ADC_Start_DMA+0xd0>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a38      	ldr	r2, [pc, #224]	; (8001504 <HAL_ADC_Start_DMA+0x1ac>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10d      	bne.n	8001444 <HAL_ADC_Start_DMA+0xec>
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_ADC_Start_DMA+0x1a8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800143c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	f023 0206 	bic.w	r2, r3, #6
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
 800145c:	e002      	b.n	8001464 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_ADC_Start_DMA+0x1b0>)
 8001472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_ADC_Start_DMA+0x1b4>)
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_ADC_Start_DMA+0x1b8>)
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0202 	mvn.w	r2, #2
 800148c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a18      	ldr	r0, [r3, #32]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	334c      	adds	r3, #76	; 0x4c
 80014a8:	4619      	mov	r1, r3
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f001 f89f 	bl	80025f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014c0:	d108      	bne.n	80014d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014d2:	e00f      	b.n	80014f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014e4:	e006      	b.n	80014f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80014ee:	e001      	b.n	80014f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012400 	.word	0x40012400
 8001504:	40012800 	.word	0x40012800
 8001508:	08001855 	.word	0x08001855
 800150c:	080018d1 	.word	0x080018d1
 8001510:	080018ed 	.word	0x080018ed

08001514 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
	...

0800154c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x20>
 8001568:	2302      	movs	r3, #2
 800156a:	e0dc      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1da>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b06      	cmp	r3, #6
 800157a:	d81c      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b05      	subs	r3, #5
 800158e:	221f      	movs	r2, #31
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4019      	ands	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b05      	subs	r3, #5
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
 80015b4:	e03c      	b.n	8001630 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d81c      	bhi.n	80015f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	3b23      	subs	r3, #35	; 0x23
 80015d0:	221f      	movs	r2, #31
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	4019      	ands	r1, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	; 0x23
 80015ea:	fa00 f203 	lsl.w	r2, r0, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
 80015f6:	e01b      	b.n	8001630 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b41      	subs	r3, #65	; 0x41
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b41      	subs	r3, #65	; 0x41
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d91c      	bls.n	8001672 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68d9      	ldr	r1, [r3, #12]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1e      	subs	r3, #30
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4019      	ands	r1, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	3b1e      	subs	r3, #30
 8001664:	fa00 f203 	lsl.w	r2, r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	e019      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6919      	ldr	r1, [r3, #16]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016b2:	2b11      	cmp	r3, #17
 80016b4:	d132      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_ADC_ConfigChannel+0x1e4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d125      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d126      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d11a      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_ADC_ConfigChannel+0x1e8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_ADC_ConfigChannel+0x1ec>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x1b2>
 800170a:	e007      	b.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40012400 	.word	0x40012400
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83

0800173c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d039      	beq.n	80017ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <ADC_Enable+0x9c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <ADC_Enable+0xa0>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001778:	e002      	b.n	8001780 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001786:	f7ff fce3 	bl	8001150 <HAL_GetTick>
 800178a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800178c:	e018      	b.n	80017c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800178e:	f7ff fcdf 	bl	8001150 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d911      	bls.n	80017c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f043 0210 	orr.w	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e007      	b.n	80017d0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d1df      	bne.n	800178e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000000 	.word	0x20000000
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d127      	bne.n	800184a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800180a:	f7ff fca1 	bl	8001150 <HAL_GetTick>
 800180e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001810:	e014      	b.n	800183c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001812:	f7ff fc9d 	bl	8001150 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d90d      	bls.n	800183c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d0e3      	beq.n	8001812 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d127      	bne.n	80018be <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001884:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001888:	d115      	bne.n	80018b6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800188e:	2b00      	cmp	r3, #0
 8001890:	d111      	bne.n	80018b6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff fe2c 	bl	8001514 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018bc:	e004      	b.n	80018c8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff fe21 	bl	8001526 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f043 0204 	orr.w	r2, r3, #4
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fe10 	bl	8001538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0ed      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fa80 	bl	8000e44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0202 	bic.w	r2, r2, #2
 8001952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff fbfc 	bl	8001150 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195a:	e012      	b.n	8001982 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195c:	f7ff fbf8 	bl	8001150 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b0a      	cmp	r3, #10
 8001968:	d90b      	bls.n	8001982 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0c5      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e5      	bne.n	800195c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a0:	f7ff fbd6 	bl	8001150 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019a6:	e012      	b.n	80019ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a8:	f7ff fbd2 	bl	8001150 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d90b      	bls.n	80019ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2205      	movs	r2, #5
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e09f      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0e5      	beq.n	80019a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e5b      	ldrb	r3, [r3, #25]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7e9b      	ldrb	r3, [r3, #26]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0220 	bic.w	r2, r2, #32
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7edb      	ldrb	r3, [r3, #27]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0210 	bic.w	r2, r2, #16
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0210 	orr.w	r2, r2, #16
 8001a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7f1b      	ldrb	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0208 	bic.w	r2, r2, #8
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7f5b      	ldrb	r3, [r3, #29]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0204 	orr.w	r2, r2, #4
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	ea42 0103 	orr.w	r1, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d003      	beq.n	8001b3c <HAL_CAN_ConfigFilter+0x26>
 8001b34:	7cfb      	ldrb	r3, [r7, #19]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	f040 80aa 	bne.w	8001c90 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d123      	bne.n	8001bbe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3248      	adds	r2, #72	; 0x48
 8001b9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb4:	6979      	ldr	r1, [r7, #20]
 8001bb6:	3348      	adds	r3, #72	; 0x48
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d122      	bne.n	8001c0c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001be6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3248      	adds	r2, #72	; 0x48
 8001bec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	3348      	adds	r3, #72	; 0x48
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c52:	e007      	b.n	8001c64 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c82:	f023 0201 	bic.w	r2, r3, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e006      	b.n	8001c9e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d12e      	bne.n	8001d1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fa3c 	bl	8001150 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cda:	e012      	b.n	8001d02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cdc:	f7ff fa38 	bl	8001150 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d90b      	bls.n	8001d02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2205      	movs	r2, #5
 8001cfa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e012      	b.n	8001d28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e5      	bne.n	8001cdc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e006      	b.n	8001d28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d003      	beq.n	8001d5c <HAL_CAN_AddTxMessage+0x2c>
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f040 80b8 	bne.w	8001ecc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a0 	beq.w	8001ebc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	0e1b      	lsrs	r3, r3, #24
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d907      	bls.n	8001d9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e09e      	b.n	8001eda <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	409a      	lsls	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	6809      	ldr	r1, [r1, #0]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	440b      	add	r3, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e00f      	b.n	8001dea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3318      	adds	r3, #24
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	440b      	add	r3, r1
 8001de8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3318      	adds	r3, #24
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	440b      	add	r3, r1
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	7d1b      	ldrb	r3, [r3, #20]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d111      	bne.n	8001e2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3318      	adds	r3, #24
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	440b      	add	r3, r1
 8001e26:	3304      	adds	r3, #4
 8001e28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3307      	adds	r3, #7
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	061a      	lsls	r2, r3, #24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3306      	adds	r3, #6
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	4313      	orrs	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	3204      	adds	r2, #4
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	ea43 0200 	orr.w	r2, r3, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3303      	adds	r3, #3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	061a      	lsls	r2, r3, #24
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	4610      	mov	r0, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	ea43 0200 	orr.w	r2, r3, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	6811      	ldr	r1, [r2, #0]
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	440b      	add	r3, r1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e00e      	b.n	8001eda <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e006      	b.n	8001eda <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d002      	beq.n	8001f02 <HAL_CAN_ActivateNotification+0x1e>
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d109      	bne.n	8001f16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6959      	ldr	r1, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e006      	b.n	8001f24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b08a      	sub	sp, #40	; 0x28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d07c      	beq.n	800206e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d023      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f97d 	bl	8002290 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f96:	e016      	b.n	8001fc6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	e00c      	b.n	8001fc6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	e002      	b.n	8001fc6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f980 	bl	80022c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d024      	beq.n	800201a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f95c 	bl	80022a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fea:	e016      	b.n	800201a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	e00c      	b.n	800201a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e002      	b.n	800201a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f95f 	bl	80022d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d024      	beq.n	800206e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800202c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f93b 	bl	80022b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800203e:	e016      	b.n	800206e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d004      	beq.n	8002054 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	e00c      	b.n	800206e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e002      	b.n	800206e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f93e 	bl	80022ea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00c      	beq.n	8002092 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2210      	movs	r2, #16
 8002090:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f92d 	bl	800230e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f915 	bl	80022fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00c      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2210      	movs	r2, #16
 80020f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2208      	movs	r2, #8
 8002110:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f90d 	bl	8002332 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8f5 	bl	8002320 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2210      	movs	r2, #16
 8002150:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8f6 	bl	8002344 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2208      	movs	r2, #8
 8002172:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f8ee 	bl	8002356 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d075      	beq.n	8002270 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06c      	beq.n	8002268 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03d      	beq.n	8002268 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d038      	beq.n	8002268 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fc:	2b30      	cmp	r3, #48	; 0x30
 80021fe:	d017      	beq.n	8002230 <HAL_CAN_IRQHandler+0x302>
 8002200:	2b30      	cmp	r3, #48	; 0x30
 8002202:	d804      	bhi.n	800220e <HAL_CAN_IRQHandler+0x2e0>
 8002204:	2b10      	cmp	r3, #16
 8002206:	d009      	beq.n	800221c <HAL_CAN_IRQHandler+0x2ee>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d00c      	beq.n	8002226 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800220c:	e024      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800220e:	2b50      	cmp	r3, #80	; 0x50
 8002210:	d018      	beq.n	8002244 <HAL_CAN_IRQHandler+0x316>
 8002212:	2b60      	cmp	r3, #96	; 0x60
 8002214:	d01b      	beq.n	800224e <HAL_CAN_IRQHandler+0x320>
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d00f      	beq.n	800223a <HAL_CAN_IRQHandler+0x30c>
            break;
 800221a:	e01d      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002224:	e018      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800222e:	e013      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f043 0320 	orr.w	r3, r3, #32
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002238:	e00e      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002242:	e009      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800224c:	e004      	b.n	8002258 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002256:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002266:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2204      	movs	r2, #4
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f870 	bl	8002368 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4906      	ldr	r1, [pc, #24]	; (8002414 <__NVIC_EnableIRQ+0x34>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff4f 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff64 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ffb2 	bl	800246c <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff81 	bl	8002418 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff57 	bl	80023e0 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e043      	b.n	80025da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_DMA_Init+0xa8>)
 800255a:	4413      	add	r3, r2
 800255c:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_DMA_Init+0xac>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_DMA_Init+0xb0>)
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800258a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	bffdfff8 	.word	0xbffdfff8
 80025e8:	cccccccd 	.word	0xcccccccd
 80025ec:	40020000 	.word	0x40020000

080025f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_DMA_Start_IT+0x20>
 800260c:	2302      	movs	r3, #2
 800260e:	e04a      	b.n	80026a6 <HAL_DMA_Start_IT+0xb6>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800261e:	2b01      	cmp	r3, #1
 8002620:	d13a      	bne.n	8002698 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f938 	bl	80028bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 020e 	orr.w	r2, r2, #14
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e00f      	b.n	8002686 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0204 	bic.w	r2, r2, #4
 8002674:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 020a 	orr.w	r2, r2, #10
 8002684:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e005      	b.n	80026a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
 80026a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d04f      	beq.n	8002778 <HAL_DMA_IRQHandler+0xc8>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04a      	beq.n	8002778 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d029      	beq.n	800275e <HAL_DMA_IRQHandler+0xae>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <HAL_DMA_IRQHandler+0xaa>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_DMA_IRQHandler+0x1f8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01a      	beq.n	8002754 <HAL_DMA_IRQHandler+0xa4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a62      	ldr	r2, [pc, #392]	; (80028ac <HAL_DMA_IRQHandler+0x1fc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d012      	beq.n	800274e <HAL_DMA_IRQHandler+0x9e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <HAL_DMA_IRQHandler+0x200>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x98>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5f      	ldr	r2, [pc, #380]	; (80028b4 <HAL_DMA_IRQHandler+0x204>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d102      	bne.n	8002742 <HAL_DMA_IRQHandler+0x92>
 800273c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002740:	e00e      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 8002742:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002746:	e00b      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 8002748:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800274c:	e008      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 800274e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002752:	e005      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	e002      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 800275a:	2340      	movs	r3, #64	; 0x40
 800275c:	e000      	b.n	8002760 <HAL_DMA_IRQHandler+0xb0>
 800275e:	2304      	movs	r3, #4
 8002760:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <HAL_DMA_IRQHandler+0x208>)
 8002762:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8094 	beq.w	8002896 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002776:	e08e      	b.n	8002896 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2202      	movs	r2, #2
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d056      	beq.n	8002836 <HAL_DMA_IRQHandler+0x186>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d051      	beq.n	8002836 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020a 	bic.w	r2, r2, #10
 80027ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <HAL_DMA_IRQHandler+0x1f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d029      	beq.n	8002816 <HAL_DMA_IRQHandler+0x166>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <HAL_DMA_IRQHandler+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x162>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a35      	ldr	r2, [pc, #212]	; (80028a8 <HAL_DMA_IRQHandler+0x1f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01a      	beq.n	800280c <HAL_DMA_IRQHandler+0x15c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a34      	ldr	r2, [pc, #208]	; (80028ac <HAL_DMA_IRQHandler+0x1fc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d012      	beq.n	8002806 <HAL_DMA_IRQHandler+0x156>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a32      	ldr	r2, [pc, #200]	; (80028b0 <HAL_DMA_IRQHandler+0x200>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x150>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <HAL_DMA_IRQHandler+0x204>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_DMA_IRQHandler+0x14a>
 80027f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f8:	e00e      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 80027fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fe:	e00b      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 8002800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002804:	e008      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 8002806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280a:	e005      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 800280c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002810:	e002      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 8002812:	2320      	movs	r3, #32
 8002814:	e000      	b.n	8002818 <HAL_DMA_IRQHandler+0x168>
 8002816:	2302      	movs	r3, #2
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_DMA_IRQHandler+0x208>)
 800281a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d034      	beq.n	8002896 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002834:	e02f      	b.n	8002896 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2208      	movs	r2, #8
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d028      	beq.n	8002898 <HAL_DMA_IRQHandler+0x1e8>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 020e 	bic.w	r2, r2, #14
 800285e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
    }
  }
  return;
 8002896:	bf00      	nop
 8002898:	bf00      	nop
}
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40020008 	.word	0x40020008
 80028a4:	4002001c 	.word	0x4002001c
 80028a8:	40020030 	.word	0x40020030
 80028ac:	40020044 	.word	0x40020044
 80028b0:	40020058 	.word	0x40020058
 80028b4:	4002006c 	.word	0x4002006c
 80028b8:	40020000 	.word	0x40020000

080028bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d108      	bne.n	80028fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028fa:	e007      	b.n	800290c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
	...

08002918 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002932:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_FLASH_Program+0xd8>)
 8002934:	7e1b      	ldrb	r3, [r3, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_FLASH_Program+0x26>
 800293a:	2302      	movs	r3, #2
 800293c:	e054      	b.n	80029e8 <HAL_FLASH_Program+0xd0>
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_FLASH_Program+0xd8>)
 8002940:	2201      	movs	r2, #1
 8002942:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002944:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002948:	f000 f8b2 	bl	8002ab0 <FLASH_WaitForLastOperation>
 800294c:	4603      	mov	r3, r0
 800294e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d144      	bne.n	80029e0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800295c:	2301      	movs	r3, #1
 800295e:	757b      	strb	r3, [r7, #21]
 8002960:	e007      	b.n	8002972 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d102      	bne.n	800296e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002968:	2302      	movs	r3, #2
 800296a:	757b      	strb	r3, [r7, #21]
 800296c:	e001      	b.n	8002972 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800296e:	2304      	movs	r3, #4
 8002970:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002972:	2300      	movs	r3, #0
 8002974:	75bb      	strb	r3, [r7, #22]
 8002976:	e02d      	b.n	80029d4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002978:	7dbb      	ldrb	r3, [r7, #22]
 800297a:	005a      	lsls	r2, r3, #1
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	eb02 0c03 	add.w	ip, r2, r3
 8002982:	7dbb      	ldrb	r3, [r7, #22]
 8002984:	0119      	lsls	r1, r3, #4
 8002986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800298a:	f1c1 0620 	rsb	r6, r1, #32
 800298e:	f1a1 0020 	sub.w	r0, r1, #32
 8002992:	fa22 f401 	lsr.w	r4, r2, r1
 8002996:	fa03 f606 	lsl.w	r6, r3, r6
 800299a:	4334      	orrs	r4, r6
 800299c:	fa23 f000 	lsr.w	r0, r3, r0
 80029a0:	4304      	orrs	r4, r0
 80029a2:	fa23 f501 	lsr.w	r5, r3, r1
 80029a6:	b2a3      	uxth	r3, r4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4660      	mov	r0, ip
 80029ac:	f000 f864 	bl	8002a78 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029b4:	f000 f87c 	bl	8002ab0 <FLASH_WaitForLastOperation>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80029bc:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_FLASH_Program+0xdc>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <HAL_FLASH_Program+0xdc>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80029ce:	7dbb      	ldrb	r3, [r7, #22]
 80029d0:	3301      	adds	r3, #1
 80029d2:	75bb      	strb	r3, [r7, #22]
 80029d4:	7dba      	ldrb	r2, [r7, #22]
 80029d6:	7d7b      	ldrb	r3, [r7, #21]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3cd      	bcc.n	8002978 <HAL_FLASH_Program+0x60>
 80029dc:	e000      	b.n	80029e0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80029de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_FLASH_Program+0xd8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]

  return status;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	20002cf0 	.word	0x20002cf0
 80029f4:	40022000 	.word	0x40022000

080029f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_FLASH_Unlock+0x40>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_FLASH_Unlock+0x40>)
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_FLASH_Unlock+0x44>)
 8002a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_FLASH_Unlock+0x40>)
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_FLASH_Unlock+0x48>)
 8002a18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_FLASH_Unlock+0x40>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	45670123 	.word	0x45670123
 8002a40:	cdef89ab 	.word	0xcdef89ab

08002a44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_FLASH_Lock+0x1c>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_FLASH_Lock+0x1c>)
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40022000 	.word	0x40022000

08002a64 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_FLASH_GetError+0x10>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20002cf0 	.word	0x20002cf0

08002a78 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <FLASH_Program_HalfWord+0x30>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <FLASH_Program_HalfWord+0x34>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <FLASH_Program_HalfWord+0x34>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	887a      	ldrh	r2, [r7, #2]
 8002a9a:	801a      	strh	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20002cf0 	.word	0x20002cf0
 8002aac:	40022000 	.word	0x40022000

08002ab0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7fe fb4a 	bl	8001150 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002abe:	e010      	b.n	8002ae2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d00c      	beq.n	8002ae2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <FLASH_WaitForLastOperation+0x2e>
 8002ace:	f7fe fb3f 	bl	8001150 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d201      	bcs.n	8002ae2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e025      	b.n	8002b2e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e8      	bne.n	8002ac0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002afc:	2220      	movs	r2, #32
 8002afe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <FLASH_WaitForLastOperation+0x88>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b24:	f000 f80a 	bl	8002b3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40022000 	.word	0x40022000

08002b3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b5c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b7c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <FLASH_SetErrorCode+0x9c>)
 8002b9c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f240 1201 	movw	r2, #257	; 0x101
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d106      	bne.n	8002bc2 <FLASH_SetErrorCode+0x86>
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	61d3      	str	r3, [r2, #28]
}  
 8002bc0:	e002      	b.n	8002bc8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <FLASH_SetErrorCode+0x98>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60d3      	str	r3, [r2, #12]
}  
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	20002cf0 	.word	0x20002cf0

08002bdc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bee:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <HAL_FLASHEx_Erase+0xd0>)
 8002bf0:	7e1b      	ldrb	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_FLASHEx_Erase+0x1e>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e053      	b.n	8002ca2 <HAL_FLASHEx_Erase+0xc6>
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <HAL_FLASHEx_Erase+0xd0>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d116      	bne.n	8002c36 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c0c:	f7ff ff50 	bl	8002ab0 <FLASH_WaitForLastOperation>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d141      	bne.n	8002c9a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f000 f84c 	bl	8002cb4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c20:	f7ff ff46 	bl	8002ab0 <FLASH_WaitForLastOperation>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_FLASHEx_Erase+0xd4>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <HAL_FLASHEx_Erase+0xd4>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	6113      	str	r3, [r2, #16]
 8002c34:	e031      	b.n	8002c9a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c3a:	f7ff ff39 	bl	8002ab0 <FLASH_WaitForLastOperation>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d12a      	bne.n	8002c9a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	e019      	b.n	8002c88 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	f000 f849 	bl	8002cec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c5e:	f7ff ff27 	bl	8002ab0 <FLASH_WaitForLastOperation>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_FLASHEx_Erase+0xd4>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_FLASHEx_Erase+0xd4>)
 8002c6c:	f023 0302 	bic.w	r3, r3, #2
 8002c70:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	601a      	str	r2, [r3, #0]
            break;
 8002c7e:	e00c      	b.n	8002c9a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c86:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	029a      	lsls	r2, r3, #10
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3dc      	bcc.n	8002c54 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <HAL_FLASHEx_Erase+0xd0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	761a      	strb	r2, [r3, #24]

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20002cf0 	.word	0x20002cf0
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <FLASH_MassErase+0x30>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <FLASH_MassErase+0x34>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <FLASH_MassErase+0x34>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <FLASH_MassErase+0x34>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <FLASH_MassErase+0x34>)
 8002cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20002cf0 	.word	0x20002cf0
 8002ce8:	40022000 	.word	0x40022000

08002cec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <FLASH_PageErase+0x38>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <FLASH_PageErase+0x3c>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <FLASH_PageErase+0x3c>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <FLASH_PageErase+0x3c>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <FLASH_PageErase+0x3c>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <FLASH_PageErase+0x3c>)
 8002d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d16:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20002cf0 	.word	0x20002cf0
 8002d28:	40022000 	.word	0x40022000

08002d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3e:	e127      	b.n	8002f90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d40:	2201      	movs	r2, #1
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 8116 	bne.w	8002f8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d034      	beq.n	8002dd0 <HAL_GPIO_Init+0xa4>
 8002d66:	2b12      	cmp	r3, #18
 8002d68:	d80d      	bhi.n	8002d86 <HAL_GPIO_Init+0x5a>
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x9a>
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d804      	bhi.n	8002d7c <HAL_GPIO_Init+0x50>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0xae>
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d01c      	beq.n	8002db4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d7a:	e048      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d043      	beq.n	8002e08 <HAL_GPIO_Init+0xdc>
 8002d80:	2b11      	cmp	r3, #17
 8002d82:	d01b      	beq.n	8002dbc <HAL_GPIO_Init+0x90>
          break;
 8002d84:	e043      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d86:	4a89      	ldr	r2, [pc, #548]	; (8002fac <HAL_GPIO_Init+0x280>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d026      	beq.n	8002dda <HAL_GPIO_Init+0xae>
 8002d8c:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_GPIO_Init+0x280>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d806      	bhi.n	8002da0 <HAL_GPIO_Init+0x74>
 8002d92:	4a87      	ldr	r2, [pc, #540]	; (8002fb0 <HAL_GPIO_Init+0x284>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d020      	beq.n	8002dda <HAL_GPIO_Init+0xae>
 8002d98:	4a86      	ldr	r2, [pc, #536]	; (8002fb4 <HAL_GPIO_Init+0x288>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_GPIO_Init+0xae>
          break;
 8002d9e:	e036      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002da0:	4a85      	ldr	r2, [pc, #532]	; (8002fb8 <HAL_GPIO_Init+0x28c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0xae>
 8002da6:	4a85      	ldr	r2, [pc, #532]	; (8002fbc <HAL_GPIO_Init+0x290>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d016      	beq.n	8002dda <HAL_GPIO_Init+0xae>
 8002dac:	4a84      	ldr	r2, [pc, #528]	; (8002fc0 <HAL_GPIO_Init+0x294>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0xae>
          break;
 8002db2:	e02c      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e028      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e023      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	623b      	str	r3, [r7, #32]
          break;
 8002dce:	e01e      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	623b      	str	r3, [r7, #32]
          break;
 8002dd8:	e019      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de2:	2304      	movs	r3, #4
 8002de4:	623b      	str	r3, [r7, #32]
          break;
 8002de6:	e012      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df0:	2308      	movs	r3, #8
 8002df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	611a      	str	r2, [r3, #16]
          break;
 8002dfa:	e008      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	615a      	str	r2, [r3, #20]
          break;
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
          break;
 8002e0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2bff      	cmp	r3, #255	; 0xff
 8002e12:	d801      	bhi.n	8002e18 <HAL_GPIO_Init+0xec>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	e001      	b.n	8002e1c <HAL_GPIO_Init+0xf0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2bff      	cmp	r3, #255	; 0xff
 8002e22:	d802      	bhi.n	8002e2a <HAL_GPIO_Init+0xfe>
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x104>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	3b08      	subs	r3, #8
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	210f      	movs	r1, #15
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8096 	beq.w	8002f8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_GPIO_Init+0x298>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4a58      	ldr	r2, [pc, #352]	; (8002fc4 <HAL_GPIO_Init+0x298>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6193      	str	r3, [r2, #24]
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_GPIO_Init+0x298>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e76:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_GPIO_Init+0x29c>)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	; (8002fcc <HAL_GPIO_Init+0x2a0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0x19e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_GPIO_Init+0x2a4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_GPIO_Init+0x19a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <HAL_GPIO_Init+0x2a8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_Init+0x196>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2ac>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_GPIO_Init+0x192>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x1a0>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e004      	b.n	8002ecc <HAL_GPIO_Init+0x1a0>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_Init+0x1a0>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_GPIO_Init+0x1a0>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	f002 0203 	and.w	r2, r2, #3
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	4093      	lsls	r3, r2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002edc:	493a      	ldr	r1, [pc, #232]	; (8002fc8 <HAL_GPIO_Init+0x29c>)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef6:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4938      	ldr	r1, [pc, #224]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
 8002f02:	e006      	b.n	8002f12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4933      	ldr	r1, [pc, #204]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	492e      	ldr	r1, [pc, #184]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
 8002f2a:	e006      	b.n	8002f3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4929      	ldr	r1, [pc, #164]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4924      	ldr	r1, [pc, #144]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	491a      	ldr	r1, [pc, #104]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
 8002f7a:	e006      	b.n	8002f8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4915      	ldr	r1, [pc, #84]	; (8002fdc <HAL_GPIO_Init+0x2b0>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f47f aed0 	bne.w	8002d40 <HAL_GPIO_Init+0x14>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	372c      	adds	r7, #44	; 0x2c
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	10210000 	.word	0x10210000
 8002fb0:	10110000 	.word	0x10110000
 8002fb4:	10120000 	.word	0x10120000
 8002fb8:	10310000 	.word	0x10310000
 8002fbc:	10320000 	.word	0x10320000
 8002fc0:	10220000 	.word	0x10220000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	40010c00 	.word	0x40010c00
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40011400 	.word	0x40011400
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]
 800301a:	4613      	mov	r3, r2
 800301c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301e:	787b      	ldrb	r3, [r7, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003024:	887a      	ldrh	r2, [r7, #2]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800302a:	e003      	b.n	8003034 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	041a      	lsls	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800305c:	e002      	b.n	8003064 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
	...

08003070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f806 	bl	80030a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e26c      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8087 	beq.w	80031e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d4:	4b92      	ldr	r3, [pc, #584]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00c      	beq.n	80030fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e0:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d112      	bne.n	8003112 <HAL_RCC_OscConfig+0x5e>
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d10b      	bne.n	8003112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	4b89      	ldr	r3, [pc, #548]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x12c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d168      	bne.n	80031e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e246      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x76>
 800311c:	4b80      	ldr	r3, [pc, #512]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a7f      	ldr	r2, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e02e      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7a      	ldr	r2, [pc, #488]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0xbc>
 8003156:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a71      	ldr	r2, [pc, #452]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6e      	ldr	r2, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xd4>
 8003170:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a67      	ldr	r2, [pc, #412]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd ffde 	bl	8001150 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd ffda 	bl	8001150 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1fa      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xe4>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fd ffca 	bl	8001150 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fd ffc6 	bl	8001150 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1e6      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x10c>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031fa:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x18c>
 8003206:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x176>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1ba      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4939      	ldr	r1, [pc, #228]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_OscConfig+0x270>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fd ff7f 	bl	8001150 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7fd ff7b 	bl	8001150 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e19b      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4927      	ldr	r1, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x270>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd ff5e 	bl	8001150 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fd ff5a 	bl	8001150 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e17a      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03a      	beq.n	8003338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d019      	beq.n	80032fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7fd ff3e 	bl	8001150 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fd ff3a 	bl	8001150 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e15a      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f000 faf6 	bl	80038e8 <RCC_Delay>
 80032fc:	e01c      	b.n	8003338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fd ff24 	bl	8001150 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330a:	e00f      	b.n	800332c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7fd ff20 	bl	8001150 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d908      	bls.n	800332c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e140      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	42420000 	.word	0x42420000
 8003328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b9e      	ldr	r3, [pc, #632]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e9      	bne.n	800330c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a6 	beq.w	8003492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b97      	ldr	r3, [pc, #604]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a93      	ldr	r2, [pc, #588]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]
 8003362:	4b91      	ldr	r3, [pc, #580]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b8e      	ldr	r3, [pc, #568]	; (80035ac <HAL_RCC_OscConfig+0x4f8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <HAL_RCC_OscConfig+0x4f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a8a      	ldr	r2, [pc, #552]	; (80035ac <HAL_RCC_OscConfig+0x4f8>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fd fee1 	bl	8001150 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fd fedd 	bl	8001150 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0fd      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b81      	ldr	r3, [pc, #516]	; (80035ac <HAL_RCC_OscConfig+0x4f8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x312>
 80033b8:	4b7b      	ldr	r3, [pc, #492]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a7a      	ldr	r2, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	e02d      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x334>
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	e01c      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d10c      	bne.n	800340a <HAL_RCC_OscConfig+0x356>
 80033f0:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a6c      	ldr	r2, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e00b      	b.n	8003422 <HAL_RCC_OscConfig+0x36e>
 800340a:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a66      	ldr	r2, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fe91 	bl	8001150 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fd fe8d 	bl	8001150 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0ab      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCC_OscConfig+0x37e>
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fd fe7b 	bl	8001150 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fd fe77 	bl	8001150 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e095      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4a47      	ldr	r2, [pc, #284]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8081 	beq.w	800359e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d061      	beq.n	800356c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d146      	bne.n	800353e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0x4fc>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fd fe4b 	bl	8001150 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034be:	f7fd fe47 	bl	8001150 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e067      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d108      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034e6:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	492d      	ldr	r1, [pc, #180]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a19      	ldr	r1, [r3, #32]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	430b      	orrs	r3, r1
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCC_OscConfig+0x4fc>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fd fe1b 	bl	8001150 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fd fe17 	bl	8001150 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e037      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x46a>
 800353c:	e02f      	b.n	800359e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_RCC_OscConfig+0x4fc>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fd fe04 	bl	8001150 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fd fe00 	bl	8001150 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e020      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x498>
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e013      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42420060 	.word	0x42420060

080035b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0d0      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4965      	ldr	r1, [pc, #404]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a58      	ldr	r2, [pc, #352]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800361a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a52      	ldr	r2, [pc, #328]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	494d      	ldr	r1, [pc, #308]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d040      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d115      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07f      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e073      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06b      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4936      	ldr	r1, [pc, #216]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fd54 	bl	8001150 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fd fd50 	bl	8001150 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e053      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b27      	ldr	r3, [pc, #156]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d210      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	4922      	ldr	r1, [pc, #136]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e032      	b.n	800376a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4916      	ldr	r1, [pc, #88]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f821 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003746:	4601      	mov	r1, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	fa21 f303 	lsr.w	r3, r1, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1cc>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1d0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fbee 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40022000 	.word	0x40022000
 8003778:	40021000 	.word	0x40021000
 800377c:	080054f4 	.word	0x080054f4
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b490      	push	{r4, r7}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003790:	1d3c      	adds	r4, r7, #4
 8003792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_RCC_GetSysClockFreq+0xb4>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x40>
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x46>
 80037c6:	e02d      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ca:	623b      	str	r3, [r7, #32]
      break;
 80037cc:	e02d      	b.n	800382a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	0c9b      	lsrs	r3, r3, #18
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037da:	4413      	add	r3, r2
 80037dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	0c5b      	lsrs	r3, r3, #17
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037fa:	4413      	add	r3, r2
 80037fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003800:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003806:	fb02 f203 	mul.w	r2, r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	e004      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	623b      	str	r3, [r7, #32]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003826:	623b      	str	r3, [r7, #32]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	6a3b      	ldr	r3, [r7, #32]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3728      	adds	r7, #40	; 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc90      	pop	{r4, r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	080054d8 	.word	0x080054d8
 800383c:	080054e8 	.word	0x080054e8
 8003840:	40021000 	.word	0x40021000
 8003844:	007a1200 	.word	0x007a1200
 8003848:	003d0900 	.word	0x003d0900

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <HAL_RCC_GetHCLKFreq+0x10>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff fff2 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003868:	4601      	mov	r1, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4a03      	ldr	r2, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	08005504 	.word	0x08005504

08003888 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	220f      	movs	r2, #15
 8003896:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCC_GetClockConfig+0x58>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0203 	and.w	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCC_GetClockConfig+0x58>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_GetClockConfig+0x58>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_GetClockConfig+0x58>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_GetClockConfig+0x5c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0207 	and.w	r2, r3, #7
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40022000 	.word	0x40022000

080038e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <RCC_Delay+0x34>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <RCC_Delay+0x38>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0a5b      	lsrs	r3, r3, #9
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003904:	bf00      	nop
  }
  while (Delay --);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	60fa      	str	r2, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <RCC_Delay+0x1c>
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000000 	.word	0x20000000
 8003920:	10624dd3 	.word	0x10624dd3

08003924 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d07d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	61d3      	str	r3, [r2, #28]
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d118      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003978:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003984:	f7fd fbe4 	bl	8001150 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	e008      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fd fbe0 	bl	8001150 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e06d      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02e      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d027      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c8:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fd fbaf 	bl	8001150 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd fbab 	bl	8001150 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e036      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4917      	ldr	r1, [pc, #92]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	490b      	ldr	r1, [pc, #44]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	42420440 	.word	0x42420440

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e01d      	b.n	8003ade <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f815 	bl	8003ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 f962 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d122      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d11b      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0202 	mvn.w	r2, #2
 8003b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8ed 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8e0 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8ef 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d122      	bne.n	8003bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d11b      	bne.n	8003bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0204 	mvn.w	r2, #4
 8003bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8c3 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003bda:	e005      	b.n	8003be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8b6 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8c5 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d122      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11b      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0208 	mvn.w	r2, #8
 8003c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2204      	movs	r2, #4
 8003c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f899 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003c2e:	e005      	b.n	8003c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f88c 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f89b 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d122      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d11b      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0210 	mvn.w	r2, #16
 8003c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f86f 	bl	8003d60 <HAL_TIM_IC_CaptureCallback>
 8003c82:	e005      	b.n	8003c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f862 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f871 	bl	8003d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0201 	mvn.w	r2, #1
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fc fff1 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f8c0 	bl	8003e6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f835 	bl	8003d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f88b 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e82:	e003      	b.n	8003e8c <LoopCopyDataInit>

08003e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e8a:	3104      	adds	r1, #4

08003e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e8c:	480a      	ldr	r0, [pc, #40]	; (8003eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e94:	d3f6      	bcc.n	8003e84 <CopyDataInit>
  ldr r2, =_sbss
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e98:	e002      	b.n	8003ea0 <LoopFillZerobss>

08003e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e9c:	f842 3b04 	str.w	r3, [r2], #4

08003ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003ea4:	d3f9      	bcc.n	8003e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ea6:	f7fd f8f7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eaa:	f001 fabf 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003eae:	f7fc fa71 	bl	8000394 <main>
  bx lr
 8003eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8003eb4:	08005514 	.word	0x08005514
  ldr r0, =_sdata
 8003eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003ebc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003ec0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003ec4:	20002d10 	.word	0x20002d10

08003ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ec8:	e7fe      	b.n	8003ec8 <ADC1_2_IRQHandler>

08003eca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f103 0208 	add.w	r2, r3, #8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0208 	add.w	r2, r3, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f103 0208 	add.w	r2, r3, #8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d103      	bne.n	8003f86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e00c      	b.n	8003fa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e002      	b.n	8003f94 <vListInsert+0x2e>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d2f6      	bcs.n	8003f8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6852      	ldr	r2, [r2, #4]
 8003ff6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d103      	bne.n	800400a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1e5a      	subs	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af04      	add	r7, sp, #16
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	623b      	str	r3, [r7, #32]
 800404e:	e7fe      	b.n	800404e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <xTaskCreateStatic+0x42>
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	e7fe      	b.n	8004068 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800406a:	2354      	movs	r3, #84	; 0x54
 800406c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b54      	cmp	r3, #84	; 0x54
 8004072:	d009      	beq.n	8004088 <xTaskCreateStatic+0x60>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e7fe      	b.n	8004086 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01e      	beq.n	80040cc <xTaskCreateStatic+0xa4>
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01b      	beq.n	80040cc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040a6:	2300      	movs	r3, #0
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9302      	str	r3, [sp, #8]
 80040ae:	f107 0314 	add.w	r3, r7, #20
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f850 	bl	8004164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c6:	f000 f8cb 	bl	8004260 <prvAddNewTaskToReadyList>
 80040ca:	e001      	b.n	80040d0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040d0:	697b      	ldr	r3, [r7, #20]
	}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08c      	sub	sp, #48	; 0x30
 80040de:	af04      	add	r7, sp, #16
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ffc8 	bl	8005084 <pvPortMalloc>
 80040f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040fc:	2054      	movs	r0, #84	; 0x54
 80040fe:	f000 ffc1 	bl	8005084 <pvPortMalloc>
 8004102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
 8004110:	e005      	b.n	800411e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f001 f878 	bl	8005208 <vPortFree>
 8004118:	e001      	b.n	800411e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d017      	beq.n	8004154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	2300      	movs	r3, #0
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	9302      	str	r3, [sp, #8]
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f80e 	bl	8004164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004148:	69f8      	ldr	r0, [r7, #28]
 800414a:	f000 f889 	bl	8004260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	e002      	b.n	800415a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800415a:	69bb      	ldr	r3, [r7, #24]
	}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800417c:	3b01      	subs	r3, #1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <prvInitialiseNewTask+0x46>
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e7fe      	b.n	80041a8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e012      	b.n	80041d6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	7819      	ldrb	r1, [r3, #0]
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	3334      	adds	r3, #52	; 0x34
 80041c0:	460a      	mov	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d006      	beq.n	80041de <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	3301      	adds	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	2b0f      	cmp	r3, #15
 80041da:	d9e9      	bls.n	80041b0 <prvInitialiseNewTask+0x4c>
 80041dc:	e000      	b.n	80041e0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80041de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d901      	bls.n	80041f2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041ee:	2306      	movs	r3, #6
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe7d 	bl	8003f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fe78 	bl	8003f08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	f1c3 0207 	rsb	r2, r3, #7
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	69b8      	ldr	r0, [r7, #24]
 8004242:	f000 fd41 	bl	8004cc8 <pxPortInitialiseStack>
 8004246:	4602      	mov	r2, r0
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004258:	bf00      	nop
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004268:	f000 fe16 	bl	8004e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800426c:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <prvAddNewTaskToReadyList+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a29      	ldr	r2, [pc, #164]	; (8004318 <prvAddNewTaskToReadyList+0xb8>)
 8004274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800427e:	4a27      	ldr	r2, [pc, #156]	; (800431c <prvAddNewTaskToReadyList+0xbc>)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <prvAddNewTaskToReadyList+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d110      	bne.n	80042ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800428c:	f000 fbf8 	bl	8004a80 <prvInitialiseTaskLists>
 8004290:	e00d      	b.n	80042ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <prvAddNewTaskToReadyList+0xc0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <prvAddNewTaskToReadyList+0xbc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d802      	bhi.n	80042ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042a8:	4a1c      	ldr	r2, [pc, #112]	; (800431c <prvAddNewTaskToReadyList+0xbc>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <prvAddNewTaskToReadyList+0xc4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <prvAddNewTaskToReadyList+0xc4>)
 80042b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <prvAddNewTaskToReadyList+0xc8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <prvAddNewTaskToReadyList+0xc8>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a15      	ldr	r2, [pc, #84]	; (800432c <prvAddNewTaskToReadyList+0xcc>)
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7ff fe1d 	bl	8003f20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042e6:	f000 fe05 	bl	8004ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <prvAddNewTaskToReadyList+0xc0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00e      	beq.n	8004310 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <prvAddNewTaskToReadyList+0xbc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d207      	bcs.n	8004310 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <prvAddNewTaskToReadyList+0xd0>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000398 	.word	0x20000398
 800431c:	20000298 	.word	0x20000298
 8004320:	200003a4 	.word	0x200003a4
 8004324:	200003b4 	.word	0x200003b4
 8004328:	200003a0 	.word	0x200003a0
 800432c:	2000029c 	.word	0x2000029c
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <vTaskDelay+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <vTaskDelay+0x2e>
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	e7fe      	b.n	8004360 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004362:	f000 f9b5 	bl	80046d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004366:	2100      	movs	r1, #0
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fc47 	bl	8004bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800436e:	f000 f9bd 	bl	80046ec <xTaskResumeAll>
 8004372:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <vTaskDelay+0x64>)
 800437c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	200003c0 	.word	0x200003c0
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80043a4:	f000 fd78 	bl	8004e98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <vTaskSuspend+0x18>
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <vTaskSuspend+0x104>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e000      	b.n	80043b6 <vTaskSuspend+0x1a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fe0a 	bl	8003fd6 <uxListRemove>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d115      	bne.n	80043f4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4935      	ldr	r1, [pc, #212]	; (80044a4 <vTaskSuspend+0x108>)
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vTaskSuspend+0x58>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	2201      	movs	r2, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43da      	mvns	r2, r3
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <vTaskSuspend+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4013      	ands	r3, r2
 80043f0:	4a2d      	ldr	r2, [pc, #180]	; (80044a8 <vTaskSuspend+0x10c>)
 80043f2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3318      	adds	r3, #24
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fde8 	bl	8003fd6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3304      	adds	r3, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4827      	ldr	r0, [pc, #156]	; (80044ac <vTaskSuspend+0x110>)
 800440e:	f7ff fd87 	bl	8003f20 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d103      	bne.n	8004426 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004426:	f000 fd65 	bl	8004ef4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800442a:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <vTaskSuspend+0x114>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004432:	f000 fd31 	bl	8004e98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004436:	f000 fbbd 	bl	8004bb4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800443a:	f000 fd5b 	bl	8004ef4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <vTaskSuspend+0x104>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d126      	bne.n	8004496 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <vTaskSuspend+0x114>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <vTaskSuspend+0x118>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <vTaskSuspend+0xd0>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	e7fe      	b.n	800446a <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <vTaskSuspend+0x11c>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800447c:	e00b      	b.n	8004496 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <vTaskSuspend+0x110>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <vTaskSuspend+0x120>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <vTaskSuspend+0x104>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
	}
 8004490:	e001      	b.n	8004496 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8004492:	f000 fa83 	bl	800499c <vTaskSwitchContext>
	}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000298 	.word	0x20000298
 80044a4:	2000029c 	.word	0x2000029c
 80044a8:	200003a0 	.word	0x200003a0
 80044ac:	20000384 	.word	0x20000384
 80044b0:	200003a4 	.word	0x200003a4
 80044b4:	200003c0 	.word	0x200003c0
 80044b8:	e000ed04 	.word	0xe000ed04
 80044bc:	20000398 	.word	0x20000398

080044c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <prvTaskIsTaskSuspended+0x2a>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e7fe      	b.n	80044e8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4a0f      	ldr	r2, [pc, #60]	; (800452c <prvTaskIsTaskSuspended+0x6c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <prvTaskIsTaskSuspended+0x38>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <prvTaskIsTaskSuspended+0x3a>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00f      	beq.n	800451e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <prvTaskIsTaskSuspended+0x70>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00a      	beq.n	800451e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <prvTaskIsTaskSuspended+0x54>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <prvTaskIsTaskSuspended+0x56>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800451a:	2301      	movs	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800451e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000384 	.word	0x20000384
 8004530:	20000358 	.word	0x20000358

08004534 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <xTaskResumeFromISR+0x2a>
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e7fe      	b.n	800455c <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800455e:	f000 fd55 	bl	800500c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004562:	f3ef 8211 	mrs	r2, BASEPRI
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	617a      	str	r2, [r7, #20]
 8004578:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800457a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800457c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800457e:	6a38      	ldr	r0, [r7, #32]
 8004580:	f7ff ff9e 	bl	80044c0 <prvTaskIsTaskSuspended>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d02f      	beq.n	80045ea <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <xTaskResumeFromISR+0xcc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d125      	bne.n	80045de <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <xTaskResumeFromISR+0xd0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d301      	bcc.n	80045a4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fd14 	bl	8003fd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <xTaskResumeFromISR+0xd4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	4a12      	ldr	r2, [pc, #72]	; (8004608 <xTaskResumeFromISR+0xd4>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4a0f      	ldr	r2, [pc, #60]	; (800460c <xTaskResumeFromISR+0xd8>)
 80045ce:	441a      	add	r2, r3
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7ff fca2 	bl	8003f20 <vListInsertEnd>
 80045dc:	e005      	b.n	80045ea <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	3318      	adds	r3, #24
 80045e2:	4619      	mov	r1, r3
 80045e4:	480a      	ldr	r0, [pc, #40]	; (8004610 <xTaskResumeFromISR+0xdc>)
 80045e6:	f7ff fc9b 	bl	8003f20 <vListInsertEnd>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3728      	adds	r7, #40	; 0x28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	200003c0 	.word	0x200003c0
 8004604:	20000298 	.word	0x20000298
 8004608:	200003a0 	.word	0x200003a0
 800460c:	2000029c 	.word	0x2000029c
 8004610:	20000358 	.word	0x20000358

08004614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004622:	463a      	mov	r2, r7
 8004624:	1d39      	adds	r1, r7, #4
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4618      	mov	r0, r3
 800462c:	f7fb fe9a 	bl	8000364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	460a      	mov	r2, r1
 8004642:	491d      	ldr	r1, [pc, #116]	; (80046b8 <vTaskStartScheduler+0xa4>)
 8004644:	481d      	ldr	r0, [pc, #116]	; (80046bc <vTaskStartScheduler+0xa8>)
 8004646:	f7ff fcef 	bl	8004028 <xTaskCreateStatic>
 800464a:	4602      	mov	r2, r0
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <vTaskStartScheduler+0xac>)
 800464e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <vTaskStartScheduler+0xac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e001      	b.n	8004662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <vTaskStartScheduler+0x80>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vTaskStartScheduler+0xb0>)
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <vTaskStartScheduler+0xb4>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <vTaskStartScheduler+0xb8>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800468e:	f000 fb93 	bl	8004db8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004692:	e00d      	b.n	80046b0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d109      	bne.n	80046b0 <vTaskStartScheduler+0x9c>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e7fe      	b.n	80046ae <vTaskStartScheduler+0x9a>
}
 80046b0:	bf00      	nop
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	080054ec 	.word	0x080054ec
 80046bc:	08004a51 	.word	0x08004a51
 80046c0:	200003bc 	.word	0x200003bc
 80046c4:	200003b8 	.word	0x200003b8
 80046c8:	200003a4 	.word	0x200003a4
 80046cc:	2000039c 	.word	0x2000039c

080046d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <vTaskSuspendAll+0x18>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	4a03      	ldr	r2, [pc, #12]	; (80046e8 <vTaskSuspendAll+0x18>)
 80046dc:	6013      	str	r3, [r2, #0]
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	200003c0 	.word	0x200003c0

080046ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <xTaskResumeAll+0x114>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <xTaskResumeAll+0x2a>
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	e7fe      	b.n	8004714 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004716:	f000 fbbf 	bl	8004e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <xTaskResumeAll+0x114>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <xTaskResumeAll+0x114>)
 8004722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <xTaskResumeAll+0x114>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d161      	bne.n	80047f0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800472c:	4b35      	ldr	r3, [pc, #212]	; (8004804 <xTaskResumeAll+0x118>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d05d      	beq.n	80047f0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004734:	e02e      	b.n	8004794 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <xTaskResumeAll+0x11c>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3318      	adds	r3, #24
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fc47 	bl	8003fd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fc42 	bl	8003fd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	2201      	movs	r2, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	4b2c      	ldr	r3, [pc, #176]	; (800480c <xTaskResumeAll+0x120>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	4a2a      	ldr	r2, [pc, #168]	; (800480c <xTaskResumeAll+0x120>)
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <xTaskResumeAll+0x124>)
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f7ff fbd0 	bl	8003f20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <xTaskResumeAll+0x128>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <xTaskResumeAll+0x12c>)
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004794:	4b1c      	ldr	r3, [pc, #112]	; (8004808 <xTaskResumeAll+0x11c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1cc      	bne.n	8004736 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047a2:	f000 fa07 	bl	8004bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047a6:	4b1d      	ldr	r3, [pc, #116]	; (800481c <xTaskResumeAll+0x130>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047b2:	f000 f837 	bl	8004824 <xTaskIncrementTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <xTaskResumeAll+0x12c>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f1      	bne.n	80047b2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <xTaskResumeAll+0x130>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <xTaskResumeAll+0x12c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <xTaskResumeAll+0x134>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f0:	f000 fb80 	bl	8004ef4 <vPortExitCritical>

	return xAlreadyYielded;
 80047f4:	68bb      	ldr	r3, [r7, #8]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200003c0 	.word	0x200003c0
 8004804:	20000398 	.word	0x20000398
 8004808:	20000358 	.word	0x20000358
 800480c:	200003a0 	.word	0x200003a0
 8004810:	2000029c 	.word	0x2000029c
 8004814:	20000298 	.word	0x20000298
 8004818:	200003ac 	.word	0x200003ac
 800481c:	200003a8 	.word	0x200003a8
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800482e:	4b50      	ldr	r3, [pc, #320]	; (8004970 <xTaskIncrementTick+0x14c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 808c 	bne.w	8004950 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004838:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <xTaskIncrementTick+0x150>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004840:	4a4c      	ldr	r2, [pc, #304]	; (8004974 <xTaskIncrementTick+0x150>)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11f      	bne.n	800488c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <xTaskIncrementTick+0x154>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <xTaskIncrementTick+0x46>
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	e7fe      	b.n	8004868 <xTaskIncrementTick+0x44>
 800486a:	4b43      	ldr	r3, [pc, #268]	; (8004978 <xTaskIncrementTick+0x154>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	4b42      	ldr	r3, [pc, #264]	; (800497c <xTaskIncrementTick+0x158>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a40      	ldr	r2, [pc, #256]	; (8004978 <xTaskIncrementTick+0x154>)
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4a40      	ldr	r2, [pc, #256]	; (800497c <xTaskIncrementTick+0x158>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b40      	ldr	r3, [pc, #256]	; (8004980 <xTaskIncrementTick+0x15c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <xTaskIncrementTick+0x15c>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	f000 f994 	bl	8004bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800488c:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <xTaskIncrementTick+0x160>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d34d      	bcc.n	8004932 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	4b38      	ldr	r3, [pc, #224]	; (8004978 <xTaskIncrementTick+0x154>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <xTaskIncrementTick+0x80>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <xTaskIncrementTick+0x82>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <xTaskIncrementTick+0x160>)
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	601a      	str	r2, [r3, #0]
					break;
 80048b2:	e03e      	b.n	8004932 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048b4:	4b30      	ldr	r3, [pc, #192]	; (8004978 <xTaskIncrementTick+0x154>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d203      	bcs.n	80048d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <xTaskIncrementTick+0x160>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
						break;
 80048d2:	e02e      	b.n	8004932 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fb7c 	bl	8003fd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3318      	adds	r3, #24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fb73 	bl	8003fd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	4b23      	ldr	r3, [pc, #140]	; (8004988 <xTaskIncrementTick+0x164>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <xTaskIncrementTick+0x164>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <xTaskIncrementTick+0x168>)
 8004910:	441a      	add	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7ff fb01 	bl	8003f20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <xTaskIncrementTick+0x16c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	429a      	cmp	r2, r3
 800492a:	d3b4      	bcc.n	8004896 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004930:	e7b1      	b.n	8004896 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <xTaskIncrementTick+0x16c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004938:	4914      	ldr	r1, [pc, #80]	; (800498c <xTaskIncrementTick+0x168>)
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d907      	bls.n	800495a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e004      	b.n	800495a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <xTaskIncrementTick+0x170>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <xTaskIncrementTick+0x170>)
 8004958:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <xTaskIncrementTick+0x174>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004966:	697b      	ldr	r3, [r7, #20]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200003c0 	.word	0x200003c0
 8004974:	2000039c 	.word	0x2000039c
 8004978:	20000350 	.word	0x20000350
 800497c:	20000354 	.word	0x20000354
 8004980:	200003b0 	.word	0x200003b0
 8004984:	200003b8 	.word	0x200003b8
 8004988:	200003a0 	.word	0x200003a0
 800498c:	2000029c 	.word	0x2000029c
 8004990:	20000298 	.word	0x20000298
 8004994:	200003a8 	.word	0x200003a8
 8004998:	200003ac 	.word	0x200003ac

0800499c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <vTaskSwitchContext+0xa0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049aa:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <vTaskSwitchContext+0xa4>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049b0:	e03e      	b.n	8004a30 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <vTaskSwitchContext+0xa4>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <vTaskSwitchContext+0xa8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	f1c3 031f 	rsb	r3, r3, #31
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	491e      	ldr	r1, [pc, #120]	; (8004a48 <vTaskSwitchContext+0xac>)
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	e7fe      	b.n	80049f4 <vTaskSwitchContext+0x58>
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <vTaskSwitchContext+0xac>)
 8004a02:	4413      	add	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3308      	adds	r3, #8
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <vTaskSwitchContext+0x8a>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <vTaskSwitchContext+0xb0>)
 8004a2e:	6013      	str	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	200003c0 	.word	0x200003c0
 8004a40:	200003ac 	.word	0x200003ac
 8004a44:	200003a0 	.word	0x200003a0
 8004a48:	2000029c 	.word	0x2000029c
 8004a4c:	20000298 	.word	0x20000298

08004a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a58:	f000 f852 	bl	8004b00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvIdleTask+0x28>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d9f9      	bls.n	8004a58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <prvIdleTask+0x2c>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a74:	e7f0      	b.n	8004a58 <prvIdleTask+0x8>
 8004a76:	bf00      	nop
 8004a78:	2000029c 	.word	0x2000029c
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	e00c      	b.n	8004aa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <prvInitialiseTaskLists+0x60>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fa15 	bl	8003eca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b06      	cmp	r3, #6
 8004aaa:	d9ef      	bls.n	8004a8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004aac:	480d      	ldr	r0, [pc, #52]	; (8004ae4 <prvInitialiseTaskLists+0x64>)
 8004aae:	f7ff fa0c 	bl	8003eca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ab2:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <prvInitialiseTaskLists+0x68>)
 8004ab4:	f7ff fa09 	bl	8003eca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ab8:	480c      	ldr	r0, [pc, #48]	; (8004aec <prvInitialiseTaskLists+0x6c>)
 8004aba:	f7ff fa06 	bl	8003eca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004abe:	480c      	ldr	r0, [pc, #48]	; (8004af0 <prvInitialiseTaskLists+0x70>)
 8004ac0:	f7ff fa03 	bl	8003eca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ac4:	480b      	ldr	r0, [pc, #44]	; (8004af4 <prvInitialiseTaskLists+0x74>)
 8004ac6:	f7ff fa00 	bl	8003eca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvInitialiseTaskLists+0x78>)
 8004acc:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <prvInitialiseTaskLists+0x64>)
 8004ace:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvInitialiseTaskLists+0x7c>)
 8004ad2:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <prvInitialiseTaskLists+0x68>)
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	2000029c 	.word	0x2000029c
 8004ae4:	20000328 	.word	0x20000328
 8004ae8:	2000033c 	.word	0x2000033c
 8004aec:	20000358 	.word	0x20000358
 8004af0:	2000036c 	.word	0x2000036c
 8004af4:	20000384 	.word	0x20000384
 8004af8:	20000350 	.word	0x20000350
 8004afc:	20000354 	.word	0x20000354

08004b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b06:	e019      	b.n	8004b3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b08:	f000 f9c6 	bl	8004e98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <prvCheckTasksWaitingTermination+0x4c>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fa5c 	bl	8003fd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <prvCheckTasksWaitingTermination+0x50>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <prvCheckTasksWaitingTermination+0x50>)
 8004b26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b32:	f000 f9df 	bl	8004ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f80e 	bl	8004b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e1      	bne.n	8004b08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2000036c 	.word	0x2000036c
 8004b50:	20000398 	.word	0x20000398
 8004b54:	20000380 	.word	0x20000380

08004b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb4a 	bl	8005208 <vPortFree>
				vPortFree( pxTCB );
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb47 	bl	8005208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b7a:	e017      	b.n	8004bac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d103      	bne.n	8004b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fb3e 	bl	8005208 <vPortFree>
	}
 8004b8c:	e00e      	b.n	8004bac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d009      	beq.n	8004bac <prvDeleteTCB+0x54>
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e7fe      	b.n	8004baa <prvDeleteTCB+0x52>
	}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <prvResetNextTaskUnblockTime+0x40>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <prvResetNextTaskUnblockTime+0x14>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <prvResetNextTaskUnblockTime+0x16>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <prvResetNextTaskUnblockTime+0x44>)
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bd6:	e008      	b.n	8004bea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <prvResetNextTaskUnblockTime+0x40>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvResetNextTaskUnblockTime+0x44>)
 8004be8:	6013      	str	r3, [r2, #0]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000350 	.word	0x20000350
 8004bf8:	200003b8 	.word	0x200003b8

08004bfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f9df 	bl	8003fd6 <uxListRemove>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	2201      	movs	r2, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4013      	ands	r3, r2
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d10a      	bne.n	8004c54 <prvAddCurrentTaskToDelayedList+0x58>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	481a      	ldr	r0, [pc, #104]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c4e:	f7ff f967 	bl	8003f20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c52:	e026      	b.n	8004ca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d209      	bcs.n	8004c80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff f974 	bl	8003f66 <vListInsert>
}
 8004c7e:	e010      	b.n	8004ca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7ff f96a 	bl	8003f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d202      	bcs.n	8004ca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c9c:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6013      	str	r3, [r2, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000039c 	.word	0x2000039c
 8004cb0:	20000298 	.word	0x20000298
 8004cb4:	200003a0 	.word	0x200003a0
 8004cb8:	20000384 	.word	0x20000384
 8004cbc:	20000354 	.word	0x20000354
 8004cc0:	20000350 	.word	0x20000350
 8004cc4:	200003b8 	.word	0x200003b8

08004cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3b04      	subs	r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b04      	subs	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <pxPortInitialiseStack+0x54>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b14      	subs	r3, #20
 8004d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b20      	subs	r3, #32
 8004d0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	08004d21 	.word	0x08004d21

08004d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <prvTaskExitError+0x4c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d009      	beq.n	8004d48 <prvTaskExitError+0x28>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e7fe      	b.n	8004d46 <prvTaskExitError+0x26>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d5a:	bf00      	nop
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0fc      	beq.n	8004d5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	2000000c 	.word	0x2000000c

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d8e:	4770      	bx	lr

08004d90 <pxCurrentTCBConst2>:
 8004d90:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d98:	4806      	ldr	r0, [pc, #24]	; (8004db4 <prvPortStartFirstTask+0x1c>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	b662      	cpsie	i
 8004da4:	b661      	cpsie	f
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	df00      	svc	0
 8004db0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004db2:	bf00      	nop
 8004db4:	e000ed08 	.word	0xe000ed08

08004db8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <xPortStartScheduler+0xcc>)
 8004dc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <xPortStartScheduler+0xd0>)
 8004de4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004de8:	2207      	movs	r2, #7
 8004dea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dec:	e009      	b.n	8004e02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004df6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d0ef      	beq.n	8004dee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d009      	beq.n	8004e2e <xPortStartScheduler+0x76>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	e7fe      	b.n	8004e2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e2e:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e64:	f000 f8b0 	bl	8004fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <xPortStartScheduler+0xdc>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e6e:	f7ff ff93 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e72:	f7ff fd93 	bl	800499c <vTaskSwitchContext>
	prvTaskExitError();
 8004e76:	f7ff ff53 	bl	8004d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	e000e400 	.word	0xe000e400
 8004e88:	200003c4 	.word	0x200003c4
 8004e8c:	200003c8 	.word	0x200003c8
 8004e90:	e000ed20 	.word	0xe000ed20
 8004e94:	2000000c 	.word	0x2000000c

08004e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <vPortEnterCritical+0x54>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <vPortEnterCritical+0x54>)
 8004eb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <vPortEnterCritical+0x54>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10e      	bne.n	8004ee0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortEnterCritical+0x58>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <vPortEnterCritical+0x48>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	e7fe      	b.n	8004ede <vPortEnterCritical+0x46>
	}
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <vPortExitCritical+0x48>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <vPortExitCritical+0x22>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	e7fe      	b.n	8004f14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <vPortExitCritical+0x48>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <vPortExitCritical+0x48>)
 8004f1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <vPortExitCritical+0x48>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <vPortExitCritical+0x3e>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	2000000c 	.word	0x2000000c

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f5a:	f380 8811 	msr	BASEPRI, r0
 8004f5e:	f7ff fd1d 	bl	800499c <vTaskSwitchContext>
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f76:	f380 8809 	msr	PSP, r0
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	4770      	bx	lr

08004f80 <pxCurrentTCBConst>:
 8004f80:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa0:	f7ff fc40 	bl	8004824 <xTaskIncrementTick>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <SysTick_Handler+0x3c>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <vPortSetupTimerInterrupt+0x30>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <vPortSetupTimerInterrupt+0x34>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <vPortSetupTimerInterrupt+0x38>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a09      	ldr	r2, [pc, #36]	; (8005004 <vPortSetupTimerInterrupt+0x3c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <vPortSetupTimerInterrupt+0x40>)
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fea:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <vPortSetupTimerInterrupt+0x30>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	e000e010 	.word	0xe000e010
 8004ffc:	e000e018 	.word	0xe000e018
 8005000:	20000000 	.word	0x20000000
 8005004:	10624dd3 	.word	0x10624dd3
 8005008:	e000e014 	.word	0xe000e014

0800500c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005012:	f3ef 8305 	mrs	r3, IPSR
 8005016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d913      	bls.n	8005046 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <vPortValidateInterruptPriority+0x68>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005028:	4b13      	ldr	r3, [pc, #76]	; (8005078 <vPortValidateInterruptPriority+0x6c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	7afa      	ldrb	r2, [r7, #11]
 800502e:	429a      	cmp	r2, r3
 8005030:	d209      	bcs.n	8005046 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	e7fe      	b.n	8005044 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <vPortValidateInterruptPriority+0x70>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <vPortValidateInterruptPriority+0x74>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d909      	bls.n	800506a <vPortValidateInterruptPriority+0x5e>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	e7fe      	b.n	8005068 <vPortValidateInterruptPriority+0x5c>
	}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	e000e3f0 	.word	0xe000e3f0
 8005078:	200003c4 	.word	0x200003c4
 800507c:	e000ed0c 	.word	0xe000ed0c
 8005080:	200003c8 	.word	0x200003c8

08005084 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005090:	f7ff fb1e 	bl	80046d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005094:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <pvPortMalloc+0x170>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800509c:	f000 f90c 	bl	80052b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050a0:	4b55      	ldr	r3, [pc, #340]	; (80051f8 <pvPortMalloc+0x174>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 808c 	bne.w	80051c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050b4:	2208      	movs	r2, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f023 0307 	bic.w	r3, r3, #7
 80050cc:	3308      	adds	r3, #8
 80050ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <pvPortMalloc+0x6a>
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e7fe      	b.n	80050ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d068      	beq.n	80051c6 <pvPortMalloc+0x142>
 80050f4:	4b41      	ldr	r3, [pc, #260]	; (80051fc <pvPortMalloc+0x178>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d863      	bhi.n	80051c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <pvPortMalloc+0x17c>)
 8005100:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005102:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <pvPortMalloc+0x17c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005108:	e004      	b.n	8005114 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d903      	bls.n	8005126 <pvPortMalloc+0xa2>
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f1      	bne.n	800510a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005126:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <pvPortMalloc+0x170>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	429a      	cmp	r2, r3
 800512e:	d04a      	beq.n	80051c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	4413      	add	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	2308      	movs	r3, #8
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	429a      	cmp	r2, r3
 8005150:	d91e      	bls.n	8005190 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <pvPortMalloc+0xf4>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e7fe      	b.n	8005176 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800518a:	69b8      	ldr	r0, [r7, #24]
 800518c:	f000 f8f6 	bl	800537c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <pvPortMalloc+0x178>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <pvPortMalloc+0x178>)
 800519c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800519e:	4b17      	ldr	r3, [pc, #92]	; (80051fc <pvPortMalloc+0x178>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <pvPortMalloc+0x180>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d203      	bcs.n	80051b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <pvPortMalloc+0x178>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <pvPortMalloc+0x180>)
 80051b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <pvPortMalloc+0x174>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051c6:	f7ff fa91 	bl	80046ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <pvPortMalloc+0x164>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e7fe      	b.n	80051e6 <pvPortMalloc+0x162>
	return pvReturn;
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20002bd4 	.word	0x20002bd4
 80051f8:	20002be0 	.word	0x20002be0
 80051fc:	20002bd8 	.word	0x20002bd8
 8005200:	20002bcc 	.word	0x20002bcc
 8005204:	20002bdc 	.word	0x20002bdc

08005208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d046      	beq.n	80052a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800521a:	2308      	movs	r3, #8
 800521c:	425b      	negs	r3, r3
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <vPortFree+0xa8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <vPortFree+0x42>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e7fe      	b.n	8005248 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <vPortFree+0x5e>
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	e7fe      	b.n	8005264 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <vPortFree+0xa8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d019      	beq.n	80052a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d115      	bne.n	80052a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortFree+0xa8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800528c:	f7ff fa20 	bl	80046d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <vPortFree+0xac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4413      	add	r3, r2
 800529a:	4a06      	ldr	r2, [pc, #24]	; (80052b4 <vPortFree+0xac>)
 800529c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529e:	6938      	ldr	r0, [r7, #16]
 80052a0:	f000 f86c 	bl	800537c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052a4:	f7ff fa22 	bl	80046ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20002be0 	.word	0x20002be0
 80052b4:	20002bd8 	.word	0x20002bd8

080052b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80052c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <prvHeapInit+0xac>)
 80052c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3307      	adds	r3, #7
 80052d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <prvHeapInit+0xac>)
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <prvHeapInit+0xb0>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <prvHeapInit+0xb0>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005304:	2208      	movs	r2, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <prvHeapInit+0xb4>)
 8005318:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <prvHeapInit+0xb4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <prvHeapInit+0xb4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <prvHeapInit+0xb4>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <prvHeapInit+0xb8>)
 8005346:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a09      	ldr	r2, [pc, #36]	; (8005374 <prvHeapInit+0xbc>)
 800534e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <prvHeapInit+0xc0>)
 8005352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200003cc 	.word	0x200003cc
 8005368:	20002bcc 	.word	0x20002bcc
 800536c:	20002bd4 	.word	0x20002bd4
 8005370:	20002bdc 	.word	0x20002bdc
 8005374:	20002bd8 	.word	0x20002bd8
 8005378:	20002be0 	.word	0x20002be0

0800537c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <prvInsertBlockIntoFreeList+0xa8>)
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e002      	b.n	8005390 <prvInsertBlockIntoFreeList+0x14>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d8f7      	bhi.n	800538a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4413      	add	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d108      	bne.n	80053be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d118      	bne.n	8005404 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <prvInsertBlockIntoFreeList+0xac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d00d      	beq.n	80053fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e008      	b.n	800540c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <prvInsertBlockIntoFreeList+0xac>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e003      	b.n	800540c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d002      	beq.n	800541a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20002bcc 	.word	0x20002bcc
 8005428:	20002bd4 	.word	0x20002bd4

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2500      	movs	r5, #0
 8005430:	4e0c      	ldr	r6, [pc, #48]	; (8005464 <__libc_init_array+0x38>)
 8005432:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005434:	1ba4      	subs	r4, r4, r6
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	42a5      	cmp	r5, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	f000 f822 	bl	8005484 <_init>
 8005440:	2500      	movs	r5, #0
 8005442:	4e0a      	ldr	r6, [pc, #40]	; (800546c <__libc_init_array+0x40>)
 8005444:	4c0a      	ldr	r4, [pc, #40]	; (8005470 <__libc_init_array+0x44>)
 8005446:	1ba4      	subs	r4, r4, r6
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	42a5      	cmp	r5, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005454:	4798      	blx	r3
 8005456:	3501      	adds	r5, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800545e:	4798      	blx	r3
 8005460:	3501      	adds	r5, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	0800550c 	.word	0x0800550c
 8005468:	0800550c 	.word	0x0800550c
 800546c:	0800550c 	.word	0x0800550c
 8005470:	08005510 	.word	0x08005510

08005474 <memset>:
 8005474:	4603      	mov	r3, r0
 8005476:	4402      	add	r2, r0
 8005478:	4293      	cmp	r3, r2
 800547a:	d100      	bne.n	800547e <memset+0xa>
 800547c:	4770      	bx	lr
 800547e:	f803 1b01 	strb.w	r1, [r3], #1
 8005482:	e7f9      	b.n	8005478 <memset+0x4>

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
