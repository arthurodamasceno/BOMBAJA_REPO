
Rear_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800844c  0800844c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800844c  0800844c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004794  20000010  08008464  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047a4  08008464  000247a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae68  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003699  00000000  00000000  0003aea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  0003fc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004b0c  00000000  00000000  00041248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e82  00000000  00000000  00045d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086520  00000000  00000000  00058bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000622c  00000000  00000000  000df174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080082ec 	.word	0x080082ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080082ec 	.word	0x080082ec

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200046fc 	.word	0x200046fc

080001dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a06      	ldr	r2, [pc, #24]	; (8000204 <vApplicationGetIdleTaskMemory+0x28>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <vApplicationGetIdleTaskMemory+0x2c>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	2000002c 	.word	0x2000002c
 8000208:	20000080 	.word	0x20000080

0800020c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000212:	f000 ff63 	bl	80010dc <HAL_Init>

	HAL_Delay(2000);
 8000216:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800021a:	f000 ff91 	bl	8001140 <HAL_Delay>
	/* Configure the system clock */
	SystemClock_Config();
 800021e:	f000 f84b 	bl	80002b8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000222:	f000 f991 	bl	8000548 <MX_GPIO_Init>
	MX_DMA_Init();
 8000226:	f000 f971 	bl	800050c <MX_DMA_Init>
	MX_ADC1_Init();
 800022a:	f000 f8a1 	bl	8000370 <MX_ADC1_Init>
	MX_CAN_Init();
 800022e:	f000 f909 	bl	8000444 <MX_CAN_Init>

	/* USER CODE BEGIN 0 */
	MX_I2C1_Init();
 8000232:	f000 f93d 	bl	80004b0 <MX_I2C1_Init>

	DWT_CTRL |= (1 << 0);
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0x90>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a18      	ldr	r2, [pc, #96]	; (800029c <main+0x90>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

	//OD = Flash_Read_NUM(0x0801FC00);

	CAN_Filter_Config();
 8000242:	f000 fa4d 	bl	80006e0 <CAN_Filter_Config>

	if (HAL_CAN_ActivateNotification(&hcan,
 8000246:	f240 4101 	movw	r1, #1025	; 0x401
 800024a:	4815      	ldr	r0, [pc, #84]	; (80002a0 <main+0x94>)
 800024c:	f001 fe38 	bl	8001ec0 <HAL_CAN_ActivateNotification>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <main+0x4e>
	CAN_IT_TX_MAILBOX_EMPTY /*| CAN_IT_RX_FIFO0_MSG_PENDING*/| CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 8000256:	f000 fce5 	bl	8000c24 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan)) {
 800025a:	4811      	ldr	r0, [pc, #68]	; (80002a0 <main+0x94>)
 800025c:	f001 fd12 	bl	8001c84 <HAL_CAN_Start>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <main+0x5e>
		Error_Handler();
 8000266:	f000 fcdd 	bl	8000c24 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analog, 2);
 800026a:	2202      	movs	r2, #2
 800026c:	490d      	ldr	r1, [pc, #52]	; (80002a4 <main+0x98>)
 800026e:	480e      	ldr	r0, [pc, #56]	; (80002a8 <main+0x9c>)
 8000270:	f001 f860 	bl	8001334 <HAL_ADC_Start_DMA>

	SEGGER_SYSVIEW_Conf();
 8000274:	f006 fa58 	bl	8006728 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000278:	f007 fa28 	bl	80076cc <SEGGER_SYSVIEW_Start>

	xTaskCreate(Start_taskF, "StartTask", 128, NULL, 7, &Start_Task);
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0xa0>)
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	2307      	movs	r3, #7
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2300      	movs	r3, #0
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	4909      	ldr	r1, [pc, #36]	; (80002b0 <main+0xa4>)
 800028a:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0xa8>)
 800028c:	f004 fd7a 	bl	8004d84 <xTaskCreate>

	vTaskStartScheduler();
 8000290:	f005 f816 	bl	80052c0 <vTaskStartScheduler>
	/* USER CODE END 0 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
		HAL_Delay(1); /*JUST IN CASE*/
 8000294:	2001      	movs	r0, #1
 8000296:	f000 ff53 	bl	8001140 <HAL_Delay>
 800029a:	e7fb      	b.n	8000294 <main+0x88>
 800029c:	e0001000 	.word	0xe0001000
 80002a0:	20004608 	.word	0x20004608
 80002a4:	200045a0 	.word	0x200045a0
 80002a8:	20004638 	.word	0x20004638
 80002ac:	200046b4 	.word	0x200046b4
 80002b0:	08008304 	.word	0x08008304
 80002b4:	0800072d 	.word	0x0800072d

080002b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f008 f808 	bl	80082dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f9ec 	bl	80036ec <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x66>
		Error_Handler();
 800031a:	f000 fc83 	bl	8000c24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fc56 	bl	8003bec <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x92>
		Error_Handler();
 8000346:	f000 fc6d 	bl	8000c24 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800034e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000352:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f003 fe14 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xae>
		Error_Handler();
 8000362:	f000 fc5f 	bl	8000c24 <Error_Handler>
	}
}
 8000366:	bf00      	nop
 8000368:	3750      	adds	r7, #80	; 0x50
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000380:	4b2e      	ldr	r3, [pc, #184]	; (800043c <MX_ADC1_Init+0xcc>)
 8000382:	4a2f      	ldr	r2, [pc, #188]	; (8000440 <MX_ADC1_Init+0xd0>)
 8000384:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <MX_ADC1_Init+0xcc>)
 8000388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_ADC1_Init+0xcc>)
 8000390:	2201      	movs	r2, #1
 8000392:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000394:	4b29      	ldr	r3, [pc, #164]	; (800043c <MX_ADC1_Init+0xcc>)
 8000396:	2200      	movs	r2, #0
 8000398:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_ADC1_Init+0xcc>)
 800039c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003a0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a2:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_ADC1_Init+0xcc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_ADC1_Init+0xcc>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003ae:	4823      	ldr	r0, [pc, #140]	; (800043c <MX_ADC1_Init+0xcc>)
 80003b0:	f000 fee8 	bl	8001184 <HAL_ADC_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0x4e>
		Error_Handler();
 80003ba:	f000 fc33 	bl	8000c24 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80003be:	2302      	movs	r3, #2
 80003c0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003c6:	2307      	movs	r3, #7
 80003c8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	481b      	ldr	r0, [pc, #108]	; (800043c <MX_ADC1_Init+0xcc>)
 80003d0:	f001 f8aa 	bl	8001528 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x6e>
		Error_Handler();
 80003da:	f000 fc23 	bl	8000c24 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80003de:	2303      	movs	r3, #3
 80003e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	4814      	ldr	r0, [pc, #80]	; (800043c <MX_ADC1_Init+0xcc>)
 80003ec:	f001 f89c 	bl	8001528 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0x8a>
		Error_Handler();
 80003f6:	f000 fc15 	bl	8000c24 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80003fa:	2308      	movs	r3, #8
 80003fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80003fe:	2303      	movs	r3, #3
 8000400:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_ADC1_Init+0xcc>)
 8000408:	f001 f88e 	bl	8001528 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xa6>
		Error_Handler();
 8000412:	f000 fc07 	bl	8000c24 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000416:	2309      	movs	r3, #9
 8000418:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800041a:	2304      	movs	r3, #4
 800041c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_ADC1_Init+0xcc>)
 8000424:	f001 f880 	bl	8001528 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0xc2>
		Error_Handler();
 800042e:	f000 fbf9 	bl	8000c24 <Error_Handler>
	}
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20004638 	.word	0x20004638
 8000440:	40012400 	.word	0x40012400

08000444 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_CAN_Init+0x64>)
 800044a:	4a18      	ldr	r2, [pc, #96]	; (80004ac <MX_CAN_Init+0x68>)
 800044c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_CAN_Init+0x64>)
 8000450:	2209      	movs	r2, #9
 8000452:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_CAN_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_CAN_Init+0x64>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_CAN_Init+0x64>)
 8000462:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000466:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_CAN_Init+0x64>)
 800046a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800046e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <MX_CAN_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_CAN_Init+0x64>)
 8000478:	2201      	movs	r2, #1
 800047a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MX_CAN_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_CAN_Init+0x64>)
 8000484:	2201      	movs	r2, #1
 8000486:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <MX_CAN_Init+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_CAN_Init+0x64>)
 8000490:	2200      	movs	r2, #0
 8000492:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <MX_CAN_Init+0x64>)
 8000496:	f001 fa31 	bl	80018fc <HAL_CAN_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_CAN_Init+0x60>
		Error_Handler();
 80004a0:	f000 fbc0 	bl	8000c24 <Error_Handler>
	}
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20004608 	.word	0x20004608
 80004ac:	40006400 	.word	0x40006400

080004b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_I2C1_Init+0x50>)
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <MX_I2C1_Init+0x54>)
 80004b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_I2C1_Init+0x50>)
 80004bc:	4a12      	ldr	r2, [pc, #72]	; (8000508 <MX_I2C1_Init+0x58>)
 80004be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_I2C1_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_I2C1_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_I2C1_Init+0x50>)
 80004ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_I2C1_Init+0x50>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_I2C1_Init+0x50>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MX_I2C1_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_I2C1_Init+0x50>)
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_I2C1_Init+0x50>)
 80004ee:	f002 fbc5 	bl	8002c7c <HAL_I2C_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80004f8:	f000 fb94 	bl	8000c24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200045a8 	.word	0x200045a8
 8000504:	40005400 	.word	0x40005400
 8000508:	000186a0 	.word	0x000186a0

0800050c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_DMA_Init+0x38>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <MX_DMA_Init+0x38>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_DMA_Init+0x38>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2105      	movs	r1, #5
 800052e:	200b      	movs	r0, #11
 8000530:	f001 ffc7 	bl	80024c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000534:	200b      	movs	r0, #11
 8000536:	f001 ffe0 	bl	80024fa <HAL_NVIC_EnableIRQ>

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b53      	ldr	r3, [pc, #332]	; (80006ac <MX_GPIO_Init+0x164>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a52      	ldr	r2, [pc, #328]	; (80006ac <MX_GPIO_Init+0x164>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b50      	ldr	r3, [pc, #320]	; (80006ac <MX_GPIO_Init+0x164>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <MX_GPIO_Init+0x164>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a4c      	ldr	r2, [pc, #304]	; (80006ac <MX_GPIO_Init+0x164>)
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b4a      	ldr	r3, [pc, #296]	; (80006ac <MX_GPIO_Init+0x164>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0320 	and.w	r3, r3, #32
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b47      	ldr	r3, [pc, #284]	; (80006ac <MX_GPIO_Init+0x164>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a46      	ldr	r2, [pc, #280]	; (80006ac <MX_GPIO_Init+0x164>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b44      	ldr	r3, [pc, #272]	; (80006ac <MX_GPIO_Init+0x164>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b41      	ldr	r3, [pc, #260]	; (80006ac <MX_GPIO_Init+0x164>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a40      	ldr	r2, [pc, #256]	; (80006ac <MX_GPIO_Init+0x164>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <MX_GPIO_Init+0x164>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	483b      	ldr	r0, [pc, #236]	; (80006b0 <MX_GPIO_Init+0x168>)
 80005c4:	f002 fb07 	bl	8002bd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4838      	ldr	r0, [pc, #224]	; (80006b0 <MX_GPIO_Init+0x168>)
 80005d0:	f002 fb01 	bl	8002bd6 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005da:	4836      	ldr	r0, [pc, #216]	; (80006b4 <MX_GPIO_Init+0x16c>)
 80005dc:	f002 fafb 	bl	8002bd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2108      	movs	r1, #8
 80005e4:	4834      	ldr	r0, [pc, #208]	; (80006b8 <MX_GPIO_Init+0x170>)
 80005e6:	f002 faf6 	bl	8002bd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	482b      	ldr	r0, [pc, #172]	; (80006b0 <MX_GPIO_Init+0x168>)
 8000604:	f002 f976 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800060c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4823      	ldr	r0, [pc, #140]	; (80006b0 <MX_GPIO_Init+0x168>)
 8000622:	f002 f967 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <MX_GPIO_Init+0x16c>)
 8000640:	f002 f958 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_GPIO_Init+0x174>)
 800064c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4619      	mov	r1, r3
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <MX_GPIO_Init+0x16c>)
 800065a:	f002 f94b 	bl	80028f4 <HAL_GPIO_Init>
	/*Configure GPIO pin INTERRUPT : PA12 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	210f      	movs	r1, #15
 8000662:	2028      	movs	r0, #40	; 0x28
 8000664:	f001 ff2d 	bl	80024c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000668:	2028      	movs	r0, #40	; 0x28
 800066a:	f001 ff46 	bl	80024fa <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066e:	2308      	movs	r3, #8
 8000670:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_GPIO_Init+0x170>)
 8000686:	f002 f935 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800068a:	2310      	movs	r3, #16
 800068c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x170>)
 800069e:	f002 f929 	bl	80028f4 <HAL_GPIO_Init>

}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40011000 	.word	0x40011000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	10210000 	.word	0x10210000

080006c0 <EXTI15_10_IRQHandler>:

/*Configure GPIO pin INTERRUPT HANDLER */
void EXTI15_10_IRQHandler(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80006c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006c8:	f002 fab6 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
	//BaseType_t checkIfYieldRequired;
	//checkIfYieldRequired = xTaskResumeFromISR(OD_Task);
	//portYIELD_FROM_ISR(checkIfYieldRequired);
	//BaseType_t xHigherPriorityTaskWoken;
	//xHigherPriorityTaskWoken = pdFALSE;
	xSemaphoreGiveFromISR(xSemaphore, NULL);
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <EXTI15_10_IRQHandler+0x1c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f8a2 	bl	800481c <xQueueGiveFromISR>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20004604 	.word	0x20004604

080006e0 <CAN_Filter_Config>:

/*Configure can filters */
void CAN_Filter_Config(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filt;
	can_filt.FilterActivation = ENABLE;
 80006e6:	2301      	movs	r3, #1
 80006e8:	623b      	str	r3, [r7, #32]
	can_filt.FilterBank = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
	can_filt.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
	can_filt.FilterIdHigh = 0x0000;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
	can_filt.FilterIdLow = 0x0000;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
	can_filt.FilterMaskIdHigh = 0x0000;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
	can_filt.FilterMaskIdLow = 0x0000;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
	can_filt.FilterMode = CAN_FILTERMODE_IDMASK;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
	can_filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8000706:	2301      	movs	r3, #1
 8000708:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &can_filt) != HAL_OK) {
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <CAN_Filter_Config+0x48>)
 8000710:	f001 f9ef 	bl	8001af2 <HAL_CAN_ConfigFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <CAN_Filter_Config+0x3e>
		Error_Handler();
 800071a:	f000 fa83 	bl	8000c24 <Error_Handler>
	}
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20004608 	.word	0x20004608

0800072c <Start_taskF>:

void Start_taskF(void *pvParameters) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]

	xSemaphore = xSemaphoreCreateBinary();
 8000734:	2203      	movs	r2, #3
 8000736:	2100      	movs	r1, #0
 8000738:	2001      	movs	r0, #1
 800073a:	f004 f80d 	bl	8004758 <xQueueGenericCreate>
 800073e:	4602      	mov	r2, r0
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <Start_taskF+0xd0>)
 8000742:	601a      	str	r2, [r3, #0]
	vTaskDelay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f004 fd83 	bl	8005250 <vTaskDelay>
	xTaskCreate(Bat_taskF, "BatTask", 128, NULL, 4, &Bat_Task);
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <Start_taskF+0xd4>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2304      	movs	r3, #4
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	492b      	ldr	r1, [pc, #172]	; (8000804 <Start_taskF+0xd8>)
 8000758:	482b      	ldr	r0, [pc, #172]	; (8000808 <Start_taskF+0xdc>)
 800075a:	f004 fb13 	bl	8004d84 <xTaskCreate>
	vTaskDelay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f004 fd76 	bl	8005250 <vTaskDelay>
	xTaskCreate(Fuel_taskF, "FuelTask", 128, NULL, 4, &Fuel_Task);
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <Start_taskF+0xe0>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	2304      	movs	r3, #4
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	4927      	ldr	r1, [pc, #156]	; (8000810 <Start_taskF+0xe4>)
 8000772:	4828      	ldr	r0, [pc, #160]	; (8000814 <Start_taskF+0xe8>)
 8000774:	f004 fb06 	bl	8004d84 <xTaskCreate>
	vTaskDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f004 fd69 	bl	8005250 <vTaskDelay>
	xTaskCreate(Speed_taskF, "SpeedTask", 128, NULL, 4, &Speed_Task);
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <Start_taskF+0xec>)
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2304      	movs	r3, #4
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2300      	movs	r3, #0
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	4924      	ldr	r1, [pc, #144]	; (800081c <Start_taskF+0xf0>)
 800078c:	4824      	ldr	r0, [pc, #144]	; (8000820 <Start_taskF+0xf4>)
 800078e:	f004 faf9 	bl	8004d84 <xTaskCreate>
	vTaskDelay(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f004 fd5c 	bl	8005250 <vTaskDelay>
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 5, &Temp_Task);
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <Start_taskF+0xf8>)
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2305      	movs	r3, #5
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	4920      	ldr	r1, [pc, #128]	; (8000828 <Start_taskF+0xfc>)
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <Start_taskF+0x100>)
 80007a8:	f004 faec 	bl	8004d84 <xTaskCreate>
	vTaskDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f004 fd4f 	bl	8005250 <vTaskDelay>
	xTaskCreate(RPM_taskF, "RPMTask", 128, NULL, 4, &RPM_Task);
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <Start_taskF+0x104>)
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	2304      	movs	r3, #4
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2300      	movs	r3, #0
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	491d      	ldr	r1, [pc, #116]	; (8000834 <Start_taskF+0x108>)
 80007c0:	481d      	ldr	r0, [pc, #116]	; (8000838 <Start_taskF+0x10c>)
 80007c2:	f004 fadf 	bl	8004d84 <xTaskCreate>
	vTaskDelay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f004 fd42 	bl	8005250 <vTaskDelay>
	xTaskCreate(OD_taskF, "ODTask", 128, NULL, 2, &OD_Task);
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <Start_taskF+0x110>)
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2302      	movs	r3, #2
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	4919      	ldr	r1, [pc, #100]	; (8000840 <Start_taskF+0x114>)
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <Start_taskF+0x118>)
 80007dc:	f004 fad2 	bl	8004d84 <xTaskCreate>

	if (Start_Task != NULL) {
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <Start_taskF+0x11c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d004      	beq.n	80007f2 <Start_taskF+0xc6>
		vTaskDelete(Start_Task);
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <Start_taskF+0x11c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fc15 	bl	800501c <vTaskDelete>
	}

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004604 	.word	0x20004604
 8000800:	20004630 	.word	0x20004630
 8000804:	08008310 	.word	0x08008310
 8000808:	0800084d 	.word	0x0800084d
 800080c:	20004600 	.word	0x20004600
 8000810:	08008318 	.word	0x08008318
 8000814:	080008cd 	.word	0x080008cd
 8000818:	20004634 	.word	0x20004634
 800081c:	08008324 	.word	0x08008324
 8000820:	0800093d 	.word	0x0800093d
 8000824:	200046b0 	.word	0x200046b0
 8000828:	08008330 	.word	0x08008330
 800082c:	08000a25 	.word	0x08000a25
 8000830:	200045fc 	.word	0x200045fc
 8000834:	0800833c 	.word	0x0800833c
 8000838:	080009b1 	.word	0x080009b1
 800083c:	200045a4 	.word	0x200045a4
 8000840:	08008344 	.word	0x08008344
 8000844:	08000b89 	.word	0x08000b89
 8000848:	200046b4 	.word	0x200046b4

0800084c <Bat_taskF>:

/*Battery level read task */
void Bat_taskF(void *pvParameters) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;  //Ticks to wait since routine starts
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 800085a:	f004 fe3d 	bl	80054d8 <xTaskGetTickCount>
 800085e:	4603      	mov	r3, r0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		//buffer[0] = (uint8_t) (analog[0] >> 8) & 0xFF;  //bat CALIBRAR
		//buffer[1] = (uint8_t) analog[0] & 0xFF;

		uint8_t batbuff[2];
		batbuff[0] = (uint8_t) (analog[0] >> 8) & 0xFF;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <Bat_taskF+0x74>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		batbuff[1] = (uint8_t) analog[0] & 0xFF;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <Bat_taskF+0x74>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef BatHeader;

		BatHeader.DLC = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
		BatHeader.StdId = 0x650;
 800087e:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8000882:	60bb      	str	r3, [r7, #8]
		BatHeader.IDE = CAN_ID_STD;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
		BatHeader.RTR = CAN_RTR_DATA;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &BatHeader, batbuff, &TxMailbox)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000894:	f107 0108 	add.w	r1, r7, #8
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <Bat_taskF+0x78>)
 800089a:	f001 fa37 	bl	8001d0c <HAL_CAN_AddTxMessage>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d006      	beq.n	80008b2 <Bat_taskF+0x66>
				!= HAL_OK) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <Bat_taskF+0x7c>)
 80008aa:	f002 f9ac 	bl	8002c06 <HAL_GPIO_TogglePin>
			Error_Handler();
 80008ae:	f000 f9b9 	bl	8000c24 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*1Hz frequency*/
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fc4b 	bl	8005154 <vTaskDelayUntil>
	while (1) {
 80008be:	e7d0      	b.n	8000862 <Bat_taskF+0x16>
 80008c0:	200045a0 	.word	0x200045a0
 80008c4:	20004608 	.word	0x20004608
 80008c8:	40011000 	.word	0x40011000

080008cc <Fuel_taskF>:
	}
}

/*Fuel level read task */
void Fuel_taskF(void *pvParameters) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;  //Ticks to wait since routine starts
 80008d4:	2314      	movs	r3, #20
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 80008d8:	f004 fdfe 	bl	80054d8 <xTaskGetTickCount>
 80008dc:	4603      	mov	r3, r0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28

	while (1) {
		uint8_t fuelbuff[2];
		fuelbuff[0] = (uint8_t) (analog[1] >> 8) & 0xFF;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <Fuel_taskF+0x68>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		fuelbuff[1] = (uint8_t) analog[1] & 0xFF;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <Fuel_taskF+0x68>)
 80008f0:	885b      	ldrh	r3, [r3, #2]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef FuelHeader;

		FuelHeader.DLC = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
		FuelHeader.StdId = 0x652;
 80008fc:	f240 6352 	movw	r3, #1618	; 0x652
 8000900:	60bb      	str	r3, [r7, #8]
		FuelHeader.IDE = CAN_ID_STD;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
		FuelHeader.RTR = CAN_RTR_DATA;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &FuelHeader, fuelbuff, &TxMailbox)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000912:	f107 0108 	add.w	r1, r7, #8
 8000916:	4808      	ldr	r0, [pc, #32]	; (8000938 <Fuel_taskF+0x6c>)
 8000918:	f001 f9f8 	bl	8001d0c <HAL_CAN_AddTxMessage>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <Fuel_taskF+0x5a>
				!= HAL_OK) {
			Error_Handler();
 8000922:	f000 f97f 	bl	8000c24 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*50Hz frequency*/
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800092c:	4618      	mov	r0, r3
 800092e:	f004 fc11 	bl	8005154 <vTaskDelayUntil>
	while (1) {
 8000932:	e7d5      	b.n	80008e0 <Fuel_taskF+0x14>
 8000934:	200045a0 	.word	0x200045a0
 8000938:	20004608 	.word	0x20004608

0800093c <Speed_taskF>:
	}
}

/*Speed read task */
void Speed_taskF(void *pvParameters) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 8000944:	230a      	movs	r3, #10
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8000948:	f004 fdc6 	bl	80054d8 <xTaskGetTickCount>
 800094c:	4603      	mov	r3, r0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
		uint8_t speedbuff[2];
		speedbuff[0] = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		HAL_I2C_Master_Receive(&hi2c1, (0x4 << 1), &speedbuff[1], 1, 10);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	230a      	movs	r3, #10
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	2108      	movs	r1, #8
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <Speed_taskF+0x6c>)
 8000966:	f002 fab1 	bl	8002ecc <HAL_I2C_Master_Receive>

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef SpeedHeader;

		SpeedHeader.DLC = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
		SpeedHeader.StdId = 0x653;
 800096e:	f240 6353 	movw	r3, #1619	; 0x653
 8000972:	60bb      	str	r3, [r7, #8]
		SpeedHeader.IDE = CAN_ID_STD;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
		SpeedHeader.RTR = CAN_RTR_DATA;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &SpeedHeader, speedbuff, &TxMailbox)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000984:	f107 0108 	add.w	r1, r7, #8
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <Speed_taskF+0x70>)
 800098a:	f001 f9bf 	bl	8001d0c <HAL_CAN_AddTxMessage>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <Speed_taskF+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8000994:	f000 f946 	bl	8000c24 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fbd8 	bl	8005154 <vTaskDelayUntil>
	while (1) {
 80009a4:	e7d4      	b.n	8000950 <Speed_taskF+0x14>
 80009a6:	bf00      	nop
 80009a8:	200045a8 	.word	0x200045a8
 80009ac:	20004608 	.word	0x20004608

080009b0 <RPM_taskF>:
	}
}

/*RPM read task */
void RPM_taskF(void *pvParameters) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;  //Ticks to wait since routine starts
 80009b8:	230a      	movs	r3, #10
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	xLastWakeTime = xTaskGetTickCount();
 80009bc:	f004 fd8c 	bl	80054d8 <xTaskGetTickCount>
 80009c0:	4603      	mov	r3, r0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

		//buffer[6] = (uint8_t) (analog[3] >> 8) & 0xFF;  //rpm CALIBRAR
		//buffer[7] = (uint8_t) analog[3] & 0xFF;

		uint8_t rpmbuff[2];
		rpmbuff[0] = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		HAL_I2C_Master_Receive(&hi2c1, (0x5 << 1), &rpmbuff[1], 1, 10);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	230a      	movs	r3, #10
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	210a      	movs	r1, #10
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <RPM_taskF+0x6c>)
 80009da:	f002 fa77 	bl	8002ecc <HAL_I2C_Master_Receive>

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef RPMHeader;

		RPMHeader.DLC = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
		RPMHeader.StdId = 0x654;
 80009e2:	f240 6354 	movw	r3, #1620	; 0x654
 80009e6:	60bb      	str	r3, [r7, #8]
		RPMHeader.IDE = CAN_ID_STD;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
		RPMHeader.RTR = CAN_RTR_DATA;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

		if (HAL_CAN_AddTxMessage(&hcan, &RPMHeader, rpmbuff, &TxMailbox)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009f8:	f107 0108 	add.w	r1, r7, #8
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <RPM_taskF+0x70>)
 80009fe:	f001 f985 	bl	8001d0c <HAL_CAN_AddTxMessage>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <RPM_taskF+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8000a08:	f000 f90c 	bl	8000c24 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*100Hz frequency*/
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fb9e 	bl	8005154 <vTaskDelayUntil>
	while (1) {
 8000a18:	e7d4      	b.n	80009c4 <RPM_taskF+0x14>
 8000a1a:	bf00      	nop
 8000a1c:	200045a8 	.word	0x200045a8
 8000a20:	20004608 	.word	0x20004608

08000a24 <Temp_taskF>:
	}
}

/*Temperature read task */
void Temp_taskF(void *pvParameters) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b092      	sub	sp, #72	; 0x48
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;  //Ticks to wait since routine starts
 8000a2c:	23c8      	movs	r3, #200	; 0xc8
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
	xLastWakeTime = xTaskGetTickCount();
 8000a30:	f004 fd52 	bl	80054d8 <xTaskGetTickCount>
 8000a34:	4603      	mov	r3, r0
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (1) {
		uint8_t tempdata[16];

		CSen
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3e:	484e      	ldr	r0, [pc, #312]	; (8000b78 <Temp_taskF+0x154>)
 8000a40:	f002 f8c9 	bl	8002bd6 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
 8000a48:	e018      	b.n	8000a7c <Temp_taskF+0x58>
			SCK_H
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	484b      	ldr	r0, [pc, #300]	; (8000b7c <Temp_taskF+0x158>)
 8000a50:	f002 f8c1 	bl	8002bd6 <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000a54:	2110      	movs	r1, #16
 8000a56:	4849      	ldr	r0, [pc, #292]	; (8000b7c <Temp_taskF+0x158>)
 8000a58:	f002 f8a6 	bl	8002ba8 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a66:	4413      	add	r3, r2
 8000a68:	460a      	mov	r2, r1
 8000a6a:	701a      	strb	r2, [r3, #0]
			SCK_L
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2108      	movs	r1, #8
 8000a70:	4842      	ldr	r0, [pc, #264]	; (8000b7c <Temp_taskF+0x158>)
 8000a72:	f002 f8b0 	bl	8002bd6 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a78:	3301      	adds	r3, #1
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8000a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	dde3      	ble.n	8000a4a <Temp_taskF+0x26>
		}
		CSdis
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a88:	483b      	ldr	r0, [pc, #236]	; (8000b78 <Temp_taskF+0x154>)
 8000a8a:	f002 f8a4 	bl	8002bd6 <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 8000a8e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d146      	bne.n	8000b24 <Temp_taskF+0x100>
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000a96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000aa0:	4413      	add	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000aa8:	4413      	add	r3, r2
					+ tempdata[4] * 256 + tempdata[5] * 128 + tempdata[6] * 64;
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000ab8:	4413      	add	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000ac0:	4413      	add	r3, r2
			temp16 = tempdata[1] * 2048 + tempdata[2] * 1024 + tempdata[3] * 512
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <Temp_taskF+0x15c>)
 8000aca:	801a      	strh	r2, [r3, #0]
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b29b      	uxth	r3, r3
					+ tempdata[9] * 8 + tempdata[10] * 4 + tempdata[11] * 2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <Temp_taskF+0x15c>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	b29a      	uxth	r2, r3
					+ tempdata[12];
 8000b16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b29a      	uxth	r2, r3
			temp16 = temp16 + tempdata[7] * 32 + tempdata[8] * 16
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <Temp_taskF+0x15c>)
 8000b22:	801a      	strh	r2, [r3, #0]
		}

		uint8_t tempbuff[2];
		tempbuff[0] = (uint8_t) (temp16 >> 8) & 0xFF;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <Temp_taskF+0x15c>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		tempbuff[1] = (uint8_t) temp16 & 0xFF;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <Temp_taskF+0x15c>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint32_t TxMailbox;

		CAN_TxHeaderTypeDef TempHeader;

		TempHeader.DLC = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
		TempHeader.StdId = 0x651;
 8000b40:	f240 6351 	movw	r3, #1617	; 0x651
 8000b44:	60fb      	str	r3, [r7, #12]
		TempHeader.IDE = CAN_ID_STD;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
		TempHeader.RTR = CAN_RTR_DATA;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]

		if (HAL_CAN_AddTxMessage(&hcan, &TempHeader, tempbuff, &TxMailbox)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b56:	f107 010c 	add.w	r1, r7, #12
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <Temp_taskF+0x160>)
 8000b5c:	f001 f8d6 	bl	8001d0c <HAL_CAN_AddTxMessage>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <Temp_taskF+0x146>
				!= HAL_OK) {
			Error_Handler();
 8000b66:	f000 f85d 	bl	8000c24 <Error_Handler>
		}

		vTaskDelayUntil(&xLastWakeTime, xFrequency); /*5Hz frequency*/
 8000b6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 faef 	bl	8005154 <vTaskDelayUntil>
	while (1) {
 8000b76:	e75f      	b.n	8000a38 <Temp_taskF+0x14>
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	20004668 	.word	0x20004668
 8000b84:	20004608 	.word	0x20004608

08000b88 <OD_taskF>:
	}
}

/*Odometer read write task */
void OD_taskF(void *pvParameters) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	while (1) {
		if ( xSemaphoreTake( xSemaphore, LONG_TIME ) == pdTRUE) {
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <OD_taskF+0x6c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 fedd 	bl	8004958 <xQueueSemaphoreTake>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d1f5      	bne.n	8000b90 <OD_taskF+0x8>
			PULSO += 1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <OD_taskF+0x70>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <OD_taskF+0x70>)
 8000bae:	701a      	strb	r2, [r3, #0]

			if (PULSO == 60) { //ODOMETRO 100m A CADA 58 VOLTAS!!!
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <OD_taskF+0x70>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b3c      	cmp	r3, #60	; 0x3c
 8000bb6:	d1eb      	bne.n	8000b90 <OD_taskF+0x8>

				PULSO = 0;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <OD_taskF+0x70>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
				uint8_t odbuff[1];
				odbuff[0] = 0x44; //flag
 8000bbe:	2344      	movs	r3, #68	; 0x44
 8000bc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

				uint32_t TxMailbox;

				CAN_TxHeaderTypeDef odHeader;

				odHeader.DLC = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
				odHeader.StdId = 0x666;
 8000bc8:	f240 6366 	movw	r3, #1638	; 0x666
 8000bcc:	60bb      	str	r3, [r7, #8]
				odHeader.IDE = CAN_ID_STD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
				odHeader.RTR = CAN_RTR_DATA;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

				if (HAL_CAN_AddTxMessage(&hcan, &odHeader, odbuff, &TxMailbox)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000bde:	f107 0108 	add.w	r1, r7, #8
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <OD_taskF+0x74>)
 8000be4:	f001 f892 	bl	8001d0c <HAL_CAN_AddTxMessage>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0d0      	beq.n	8000b90 <OD_taskF+0x8>
						!= HAL_OK) {

					Error_Handler();
 8000bee:	f000 f819 	bl	8000c24 <Error_Handler>
		if ( xSemaphoreTake( xSemaphore, LONG_TIME ) == pdTRUE) {
 8000bf2:	e7cd      	b.n	8000b90 <OD_taskF+0x8>
 8000bf4:	20004604 	.word	0x20004604
 8000bf8:	20000280 	.word	0x20000280
 8000bfc:	20004608 	.word	0x20004608

08000c00 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c12:	f000 fa79 	bl	8001108 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00

08000c24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x6c>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	f06f 0001 	mvn.w	r0, #1
 8000c6e:	f001 fc28 	bl	80024c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_MspInit+0x70>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_MspInit+0x70>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c8e:	f005 fa13 	bl	80060b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_I2C_MspInit+0x70>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d123      	bne.n	8000d0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cce:	61d3      	str	r3, [r2, #28]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf4:	23c0      	movs	r3, #192	; 0xc0
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000d08:	f001 fdf4 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d15f      	bne.n	8000e00 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a25      	ldr	r2, [pc, #148]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	4619      	mov	r1, r3
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <HAL_ADC_MspInit+0xf0>)
 8000d98:	f001 fdac 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4619      	mov	r1, r3
 8000daa:	481a      	ldr	r0, [pc, #104]	; (8000e14 <HAL_ADC_MspInit+0xf4>)
 8000dac:	f001 fda2 	bl	80028f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <HAL_ADC_MspInit+0xfc>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dda:	2220      	movs	r2, #32
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000de6:	f001 fb97 	bl	8002518 <HAL_DMA_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000df0:	f7ff ff18 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000df8:	621a      	str	r2, [r3, #32]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_ADC_MspInit+0xf8>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	2000466c 	.word	0x2000466c
 8000e1c:	40020008 	.word	0x40020008

08000e20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a35      	ldr	r2, [pc, #212]	; (8000f10 <HAL_CAN_MspInit+0xf0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d163      	bne.n	8000f08 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	61d3      	str	r3, [r2, #28]
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <HAL_CAN_MspInit+0xf4>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4824      	ldr	r0, [pc, #144]	; (8000f18 <HAL_CAN_MspInit+0xf8>)
 8000e86:	f001 fd35 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481e      	ldr	r0, [pc, #120]	; (8000f18 <HAL_CAN_MspInit+0xf8>)
 8000ea0:	f001 fd28 	bl	80028f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_CAN_MspInit+0xfc>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <HAL_CAN_MspInit+0xfc>)
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2013      	movs	r0, #19
 8000ece:	f001 faf8 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ed2:	2013      	movs	r0, #19
 8000ed4:	f001 fb11 	bl	80024fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	2014      	movs	r0, #20
 8000ede:	f001 faf0 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ee2:	2014      	movs	r0, #20
 8000ee4:	f001 fb09 	bl	80024fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2015      	movs	r0, #21
 8000eee:	f001 fae8 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ef2:	2015      	movs	r0, #21
 8000ef4:	f001 fb01 	bl	80024fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2105      	movs	r1, #5
 8000efc:	2016      	movs	r0, #22
 8000efe:	f001 fae0 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f02:	2016      	movs	r0, #22
 8000f04:	f001 faf9 	bl	80024fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40006400 	.word	0x40006400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010c00 	.word	0x40010c00
 8000f1c:	40010000 	.word	0x40010000

08000f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2019      	movs	r0, #25
 8000f36:	f001 fac4 	bl	80024c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f3a:	2019      	movs	r0, #25
 8000f3c:	f001 fadd 	bl	80024fa <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 ffc0 	bl	8003ee8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f68:	f002 ffaa 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8000f6c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_InitTick+0xa0>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_InitTick+0xa8>)
 8000f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f9e:	f003 f8a7 	bl	80040f0 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d104      	bne.n	8000fb2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000faa:	f003 f8d5 	bl	8004158 <HAL_TIM_Base_Start_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	200046b8 	.word	0x200046b8
 8000fc8:	40012c00 	.word	0x40012c00

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <HardFault_Handler+0x4>

08000fde <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <UsageFault_Handler+0x4>

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <DMA1_Channel1_IRQHandler+0x10>)
 8001002:	f001 fb43 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000466c 	.word	0x2000466c

08001010 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001016:	f000 ff78 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20004608 	.word	0x20004608

08001024 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800102a:	f000 ff6e 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20004608 	.word	0x20004608

08001038 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <CAN1_RX1_IRQHandler+0x10>)
 800103e:	f000 ff64 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20004608 	.word	0x20004608

0800104c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <CAN1_SCE_IRQHandler+0x10>)
 8001052:	f000 ff5a 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20004608 	.word	0x20004608

08001060 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM1_UP_IRQHandler+0x10>)
 8001066:	f003 f89a 	bl	800419e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200046b8 	.word	0x200046b8

08001074 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <SystemInit+0x5c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <SystemInit+0x5c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <SystemInit+0x5c>)
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4911      	ldr	r1, [pc, #68]	; (80010d0 <SystemInit+0x5c>)
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <SystemInit+0x60>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0x5c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <SystemInit+0x5c>)
 8001096:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <SystemInit+0x5c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SystemInit+0x5c>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x5c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x5c>)
 80010b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SystemInit+0x5c>)
 80010ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SystemInit+0x64>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	f8ff0000 	.word	0xf8ff0000
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x28>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f001 f9dd 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ff14 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd9a 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000008 	.word	0x20000008
 8001128:	200046f8 	.word	0x200046f8

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	200046f8 	.word	0x200046f8

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fff0 	bl	800112c <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_Delay+0x40>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffe0 	bl	800112c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0be      	b.n	8001324 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fdac 	bl	8000d20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 faf7 	bl	80017bc <ADC_ConversionStop_Disable>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 8099 	bne.w	8001312 <HAL_ADC_Init+0x18e>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8095 	bne.w	8001312 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	f043 0202 	orr.w	r2, r3, #2
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001204:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7b1b      	ldrb	r3, [r3, #12]
 800120a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800120c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	4313      	orrs	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800121c:	d003      	beq.n	8001226 <HAL_ADC_Init+0xa2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <HAL_ADC_Init+0xa8>
 8001226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122a:	e000      	b.n	800122e <HAL_ADC_Init+0xaa>
 800122c:	2300      	movs	r3, #0
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7d1b      	ldrb	r3, [r3, #20]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d119      	bne.n	8001270 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	3b01      	subs	r3, #1
 800124a:	035a      	lsls	r2, r3, #13
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e00b      	b.n	8001270 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f043 0220 	orr.w	r2, r3, #32
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_ADC_Init+0x1a8>)
 800128c:	4013      	ands	r3, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	430b      	orrs	r3, r1
 8001296:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d003      	beq.n	80012aa <HAL_ADC_Init+0x126>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d104      	bne.n	80012b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	051b      	lsls	r3, r3, #20
 80012b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_ADC_Init+0x1ac>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10b      	bne.n	80012f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ee:	e018      	b.n	8001322 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f023 0312 	bic.w	r3, r3, #18
 80012f8:	f043 0210 	orr.w	r2, r3, #16
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001310:	e007      	b.n	8001322 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	ffe1f7fd 	.word	0xffe1f7fd
 8001330:	ff1f0efe 	.word	0xff1f0efe

08001334 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a64      	ldr	r2, [pc, #400]	; (80014dc <HAL_ADC_Start_DMA+0x1a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d004      	beq.n	8001358 <HAL_ADC_Start_DMA+0x24>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d106      	bne.n	8001366 <HAL_ADC_Start_DMA+0x32>
 8001358:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_ADC_Start_DMA+0x1a8>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 80b3 	bne.w	80014cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_Start_DMA+0x40>
 8001370:	2302      	movs	r3, #2
 8001372:	e0ae      	b.n	80014d2 <HAL_ADC_Start_DMA+0x19e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f9cb 	bl	8001718 <ADC_Enable>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 809a 	bne.w	80014c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_ADC_Start_DMA+0x1ac>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x84>
 80013ac:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <HAL_ADC_Start_DMA+0x1a8>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d115      	bne.n	80013e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e2:	e01d      	b.n	8001420 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a39      	ldr	r2, [pc, #228]	; (80014dc <HAL_ADC_Start_DMA+0x1a8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d004      	beq.n	8001404 <HAL_ADC_Start_DMA+0xd0>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d10d      	bne.n	8001420 <HAL_ADC_Start_DMA+0xec>
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_ADC_Start_DMA+0x1a8>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	f023 0206 	bic.w	r2, r3, #6
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_ADC_Start_DMA+0x1b0>)
 800144e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_ADC_Start_DMA+0x1b4>)
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_ADC_Start_DMA+0x1b8>)
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f06f 0202 	mvn.w	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001478:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a18      	ldr	r0, [r3, #32]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	334c      	adds	r3, #76	; 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f001 f89f 	bl	80025cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001498:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800149c:	d108      	bne.n	80014b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014ae:	e00f      	b.n	80014d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014c0:	e006      	b.n	80014d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80014ca:	e001      	b.n	80014d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012400 	.word	0x40012400
 80014e0:	40012800 	.word	0x40012800
 80014e4:	08001831 	.word	0x08001831
 80014e8:	080018ad 	.word	0x080018ad
 80014ec:	080018c9 	.word	0x080018c9

080014f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
	...

08001528 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x20>
 8001544:	2302      	movs	r3, #2
 8001546:	e0dc      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1da>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d81c      	bhi.n	8001592 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b05      	subs	r3, #5
 800156a:	221f      	movs	r2, #31
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	4019      	ands	r1, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b05      	subs	r3, #5
 8001584:	fa00 f203 	lsl.w	r2, r0, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
 8001590:	e03c      	b.n	800160c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d81c      	bhi.n	80015d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b23      	subs	r3, #35	; 0x23
 80015ac:	221f      	movs	r2, #31
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4019      	ands	r1, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b23      	subs	r3, #35	; 0x23
 80015c6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	e01b      	b.n	800160c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b41      	subs	r3, #65	; 0x41
 80015e6:	221f      	movs	r2, #31
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b41      	subs	r3, #65	; 0x41
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b09      	cmp	r3, #9
 8001612:	d91c      	bls.n	800164e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	3b1e      	subs	r3, #30
 8001626:	2207      	movs	r2, #7
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4019      	ands	r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6898      	ldr	r0, [r3, #8]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	3b1e      	subs	r3, #30
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	e019      	b.n	8001682 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6919      	ldr	r1, [r3, #16]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	2207      	movs	r2, #7
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d003      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800168e:	2b11      	cmp	r3, #17
 8001690:	d132      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_ADC_ConfigChannel+0x1e4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d125      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d126      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d11a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_ADC_ConfigChannel+0x1e8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_ADC_ConfigChannel+0x1ec>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9a      	lsrs	r2, r3, #18
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_ConfigChannel+0x1b2>
 80016e6:	e007      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40012400 	.word	0x40012400
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83

08001718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d039      	beq.n	80017aa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <ADC_Enable+0x9c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <ADC_Enable+0xa0>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001754:	e002      	b.n	800175c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001762:	f7ff fce3 	bl	800112c <HAL_GetTick>
 8001766:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001768:	e018      	b.n	800179c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800176a:	f7ff fcdf 	bl	800112c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d911      	bls.n	800179c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f043 0210 	orr.w	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e007      	b.n	80017ac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1df      	bne.n	800176a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d127      	bne.n	8001826 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e6:	f7ff fca1 	bl	800112c <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017ec:	e014      	b.n	8001818 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ee:	f7ff fc9d 	bl	800112c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d90d      	bls.n	8001818 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f043 0210 	orr.w	r2, r3, #16
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d0e3      	beq.n	80017ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001846:	2b00      	cmp	r3, #0
 8001848:	d127      	bne.n	800189a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001860:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001864:	d115      	bne.n	8001892 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800186a:	2b00      	cmp	r3, #0
 800186c:	d111      	bne.n	8001892 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff fe2c 	bl	80014f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001898:	e004      	b.n	80018a4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fe21 	bl	8001502 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f043 0204 	orr.w	r2, r3, #4
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fe10 	bl	8001514 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ed      	b.n	8001aea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fa80 	bl	8000e20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0202 	bic.w	r2, r2, #2
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff fbfc 	bl	800112c <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff fbf8 	bl	800112c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0c5      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e5      	bne.n	8001938 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff fbd6 	bl	800112c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001982:	e012      	b.n	80019aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001984:	f7ff fbd2 	bl	800112c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e09f      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0e5      	beq.n	8001984 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e1b      	ldrb	r3, [r3, #24]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0220 	bic.w	r2, r2, #32
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7edb      	ldrb	r3, [r3, #27]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0210 	bic.w	r2, r2, #16
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7f5b      	ldrb	r3, [r3, #29]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0204 	orr.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	ea42 0103 	orr.w	r1, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d003      	beq.n	8001b18 <HAL_CAN_ConfigFilter+0x26>
 8001b10:	7cfb      	ldrb	r3, [r7, #19]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	f040 80aa 	bne.w	8001c6c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2201      	movs	r2, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d123      	bne.n	8001b9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3248      	adds	r2, #72	; 0x48
 8001b7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b90:	6979      	ldr	r1, [r7, #20]
 8001b92:	3348      	adds	r3, #72	; 0x48
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d122      	bne.n	8001be8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3248      	adds	r2, #72	; 0x48
 8001bc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	3348      	adds	r3, #72	; 0x48
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c02:	e007      	b.n	8001c14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c2e:	e007      	b.n	8001c40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c5e:	f023 0201 	bic.w	r2, r3, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d12e      	bne.n	8001cf6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa3c 	bl	800112c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff fa38 	bl	800112c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e012      	b.n	8001d04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e006      	b.n	8001d04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d003      	beq.n	8001d38 <HAL_CAN_AddTxMessage+0x2c>
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	f040 80b8 	bne.w	8001ea8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80a0 	beq.w	8001e98 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	0e1b      	lsrs	r3, r3, #24
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e09e      	b.n	8001eb6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	6809      	ldr	r1, [r1, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	440b      	add	r3, r1
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e00f      	b.n	8001dc6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	440b      	add	r3, r1
 8001dc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	7d1b      	ldrb	r3, [r3, #20]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d111      	bne.n	8001e06 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3318      	adds	r3, #24
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3318      	adds	r3, #24
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	440b      	add	r3, r1
 8001e02:	3304      	adds	r3, #4
 8001e04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3307      	adds	r3, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	061a      	lsls	r2, r3, #24
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3306      	adds	r3, #6
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3305      	adds	r3, #5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4313      	orrs	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	3204      	adds	r2, #4
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4610      	mov	r0, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	ea43 0200 	orr.w	r2, r3, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3303      	adds	r3, #3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	061a      	lsls	r2, r3, #24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	4610      	mov	r0, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6811      	ldr	r1, [r2, #0]
 8001e64:	ea43 0200 	orr.w	r2, r3, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4413      	add	r3, r2
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	6811      	ldr	r1, [r2, #0]
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e00e      	b.n	8001eb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e006      	b.n	8001eb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <HAL_CAN_ActivateNotification+0x1e>
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d109      	bne.n	8001ef2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e006      	b.n	8001f00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b08a      	sub	sp, #40	; 0x28
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d07c      	beq.n	800204a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d023      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f97d 	bl	800226c <HAL_CAN_TxMailbox0CompleteCallback>
 8001f72:	e016      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e00c      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e002      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f980 	bl	80022a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d024      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f95c 	bl	800227e <HAL_CAN_TxMailbox1CompleteCallback>
 8001fc6:	e016      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	e00c      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e002      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f95f 	bl	80022b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d024      	beq.n	800204a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002008:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f93b 	bl	8002290 <HAL_CAN_TxMailbox2CompleteCallback>
 800201a:	e016      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e00c      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	e002      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f93e 	bl	80022c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2210      	movs	r2, #16
 800206c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2208      	movs	r2, #8
 8002088:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f92d 	bl	80022ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f915 	bl	80022d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00c      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2208      	movs	r2, #8
 80020ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f90d 	bl	800230e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8f5 	bl	80022fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2210      	movs	r2, #16
 800212c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8f6 	bl	8002320 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2208      	movs	r2, #8
 800214e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8ee 	bl	8002332 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d075      	beq.n	800224c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03d      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d038      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d017      	beq.n	800220c <HAL_CAN_IRQHandler+0x302>
 80021dc:	2b30      	cmp	r3, #48	; 0x30
 80021de:	d804      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x2e0>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d009      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x2ee>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d00c      	beq.n	8002202 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e8:	e024      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80021ea:	2b50      	cmp	r3, #80	; 0x50
 80021ec:	d018      	beq.n	8002220 <HAL_CAN_IRQHandler+0x316>
 80021ee:	2b60      	cmp	r3, #96	; 0x60
 80021f0:	d01b      	beq.n	800222a <HAL_CAN_IRQHandler+0x320>
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d00f      	beq.n	8002216 <HAL_CAN_IRQHandler+0x30c>
            break;
 80021f6:	e01d      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002200:	e018      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f043 0310 	orr.w	r3, r3, #16
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800220a:	e013      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002214:	e00e      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221e:	e009      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002228:	e004      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002232:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002242:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f870 	bl	8002344 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4906      	ldr	r1, [pc, #24]	; (80023f0 <__NVIC_EnableIRQ+0x34>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff4f 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff64 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ffb2 	bl	8002448 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff81 	bl	80023f4 <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff57 	bl	80023bc <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e043      	b.n	80025b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_DMA_Init+0xa8>)
 8002536:	4413      	add	r3, r2
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_DMA_Init+0xac>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	009a      	lsls	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <HAL_DMA_Init+0xb0>)
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002562:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	bffdfff8 	.word	0xbffdfff8
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_DMA_Start_IT+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e04a      	b.n	8002682 <HAL_DMA_Start_IT+0xb6>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d13a      	bne.n	8002674 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f938 	bl	8002898 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 020e 	orr.w	r2, r2, #14
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e00f      	b.n	8002662 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0204 	bic.w	r2, r2, #4
 8002650:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 020a 	orr.w	r2, r2, #10
 8002660:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e005      	b.n	8002680 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2204      	movs	r2, #4
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d04f      	beq.n	8002754 <HAL_DMA_IRQHandler+0xc8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04a      	beq.n	8002754 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a66      	ldr	r2, [pc, #408]	; (800287c <HAL_DMA_IRQHandler+0x1f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d029      	beq.n	800273a <HAL_DMA_IRQHandler+0xae>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_DMA_IRQHandler+0x1f4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_IRQHandler+0xaa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_DMA_IRQHandler+0x1f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_IRQHandler+0xa4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a62      	ldr	r2, [pc, #392]	; (8002888 <HAL_DMA_IRQHandler+0x1fc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d012      	beq.n	800272a <HAL_DMA_IRQHandler+0x9e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_DMA_IRQHandler+0x200>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00a      	beq.n	8002724 <HAL_DMA_IRQHandler+0x98>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_DMA_IRQHandler+0x204>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_DMA_IRQHandler+0x92>
 8002718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271c:	e00e      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 800271e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002722:	e00b      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 8002724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002728:	e008      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 800272a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800272e:	e005      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 8002730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002734:	e002      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	e000      	b.n	800273c <HAL_DMA_IRQHandler+0xb0>
 800273a:	2304      	movs	r3, #4
 800273c:	4a55      	ldr	r2, [pc, #340]	; (8002894 <HAL_DMA_IRQHandler+0x208>)
 800273e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8094 	beq.w	8002872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002752:	e08e      	b.n	8002872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2202      	movs	r2, #2
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d056      	beq.n	8002812 <HAL_DMA_IRQHandler+0x186>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d051      	beq.n	8002812 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020a 	bic.w	r2, r2, #10
 800278a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_DMA_IRQHandler+0x1f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d029      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x166>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_DMA_IRQHandler+0x1f4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d022      	beq.n	80027ee <HAL_DMA_IRQHandler+0x162>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a35      	ldr	r2, [pc, #212]	; (8002884 <HAL_DMA_IRQHandler+0x1f8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x15c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_DMA_IRQHandler+0x1fc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d012      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x156>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a32      	ldr	r2, [pc, #200]	; (800288c <HAL_DMA_IRQHandler+0x200>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00a      	beq.n	80027dc <HAL_DMA_IRQHandler+0x150>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a31      	ldr	r2, [pc, #196]	; (8002890 <HAL_DMA_IRQHandler+0x204>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d102      	bne.n	80027d6 <HAL_DMA_IRQHandler+0x14a>
 80027d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d4:	e00e      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	e00b      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	e008      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e6:	e005      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ec:	e002      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027ee:	2320      	movs	r3, #32
 80027f0:	e000      	b.n	80027f4 <HAL_DMA_IRQHandler+0x168>
 80027f2:	2302      	movs	r3, #2
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_DMA_IRQHandler+0x208>)
 80027f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d034      	beq.n	8002872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002810:	e02f      	b.n	8002872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2208      	movs	r2, #8
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d028      	beq.n	8002874 <HAL_DMA_IRQHandler+0x1e8>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020e 	bic.w	r2, r2, #14
 800283a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
    }
  }
  return;
 8002872:	bf00      	nop
 8002874:	bf00      	nop
}
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40020008 	.word	0x40020008
 8002880:	4002001c 	.word	0x4002001c
 8002884:	40020030 	.word	0x40020030
 8002888:	40020044 	.word	0x40020044
 800288c:	40020058 	.word	0x40020058
 8002890:	4002006c 	.word	0x4002006c
 8002894:	40020000 	.word	0x40020000

08002898 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d108      	bne.n	80028d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028d6:	e007      	b.n	80028e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08b      	sub	sp, #44	; 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002906:	e127      	b.n	8002b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002908:	2201      	movs	r2, #1
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8116 	bne.w	8002b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b12      	cmp	r3, #18
 800292c:	d034      	beq.n	8002998 <HAL_GPIO_Init+0xa4>
 800292e:	2b12      	cmp	r3, #18
 8002930:	d80d      	bhi.n	800294e <HAL_GPIO_Init+0x5a>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d02b      	beq.n	800298e <HAL_GPIO_Init+0x9a>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d804      	bhi.n	8002944 <HAL_GPIO_Init+0x50>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d031      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d01c      	beq.n	800297c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e048      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002944:	2b03      	cmp	r3, #3
 8002946:	d043      	beq.n	80029d0 <HAL_GPIO_Init+0xdc>
 8002948:	2b11      	cmp	r3, #17
 800294a:	d01b      	beq.n	8002984 <HAL_GPIO_Init+0x90>
          break;
 800294c:	e043      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800294e:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d026      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002954:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d806      	bhi.n	8002968 <HAL_GPIO_Init+0x74>
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_GPIO_Init+0x284>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d020      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002960:	4a86      	ldr	r2, [pc, #536]	; (8002b7c <HAL_GPIO_Init+0x288>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 8002966:	e036      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002968:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_GPIO_Init+0x28c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800296e:	4a85      	ldr	r2, [pc, #532]	; (8002b84 <HAL_GPIO_Init+0x290>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d016      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002974:	4a84      	ldr	r2, [pc, #528]	; (8002b88 <HAL_GPIO_Init+0x294>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e028      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e023      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01e      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e019      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e012      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2bff      	cmp	r3, #255	; 0xff
 80029da:	d801      	bhi.n	80029e0 <HAL_GPIO_Init+0xec>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	e001      	b.n	80029e4 <HAL_GPIO_Init+0xf0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d802      	bhi.n	80029f2 <HAL_GPIO_Init+0xfe>
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x104>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3b08      	subs	r3, #8
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	210f      	movs	r1, #15
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8096 	beq.w	8002b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x19e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_GPIO_Init+0x2a4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x19a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x196>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x192>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a92:	2300      	movs	r3, #0
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa4:	493a      	ldr	r1, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4938      	ldr	r1, [pc, #224]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
 8002aca:	e006      	b.n	8002ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4933      	ldr	r1, [pc, #204]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	492e      	ldr	r1, [pc, #184]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4924      	ldr	r1, [pc, #144]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4915      	ldr	r1, [pc, #84]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f aed0 	bne.w	8002908 <HAL_GPIO_Init+0x14>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	372c      	adds	r7, #44	; 0x2c
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	10210000 	.word	0x10210000
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	10120000 	.word	0x10120000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10320000 	.word	0x10320000
 8002b88:	10220000 	.word	0x10220000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40010800 	.word	0x40010800
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e001      	b.n	8002bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	807b      	strh	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be6:	787b      	ldrb	r3, [r7, #1]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bf2:	e003      	b.n	8002bfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	041a      	lsls	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	611a      	str	r2, [r3, #16]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f806 	bl	8002c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e10f      	b.n	8002eae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fffe 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	; 0x24
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f001 f8ea 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a7b      	ldr	r2, [pc, #492]	; (8002eb8 <HAL_I2C_Init+0x23c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d807      	bhi.n	8002ce0 <HAL_I2C_Init+0x64>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_I2C_Init+0x240>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bf94      	ite	ls
 8002cd8:	2301      	movls	r3, #1
 8002cda:	2300      	movhi	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e006      	b.n	8002cee <HAL_I2C_Init+0x72>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_I2C_Init+0x244>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0db      	b.n	8002eae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_I2C_Init+0x248>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a64      	ldr	r2, [pc, #400]	; (8002eb8 <HAL_I2C_Init+0x23c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d802      	bhi.n	8002d30 <HAL_I2C_Init+0xb4>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	e009      	b.n	8002d44 <HAL_I2C_Init+0xc8>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <HAL_I2C_Init+0x24c>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	3301      	adds	r3, #1
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4956      	ldr	r1, [pc, #344]	; (8002eb8 <HAL_I2C_Init+0x23c>)
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d80d      	bhi.n	8002d80 <HAL_I2C_Init+0x104>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e59      	subs	r1, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	bf38      	it	cc
 8002d7c:	2304      	movcc	r3, #4
 8002d7e:	e04f      	b.n	8002e20 <HAL_I2C_Init+0x1a4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Init+0x130>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_Init+0x156>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x15e>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_I2C_Init+0x1a4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_I2C_Init+0x184>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Init+0x1a4>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6911      	ldr	r1, [r2, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	001e847f 	.word	0x001e847f
 8002ec0:	003d08ff 	.word	0x003d08ff
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
 8002edc:	4613      	mov	r3, r2
 8002ede:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7fe f924 	bl	800112c <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 8213 	bne.w	800331a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2319      	movs	r3, #25
 8002efa:	2201      	movs	r2, #1
 8002efc:	497e      	ldr	r1, [pc, #504]	; (80030f8 <HAL_I2C_Master_Receive+0x22c>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fac8 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e206      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_I2C_Master_Receive+0x50>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e1ff      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d007      	beq.n	8002f42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2222      	movs	r2, #34	; 0x22
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	893a      	ldrh	r2, [r7, #8]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_I2C_Master_Receive+0x230>)
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f9cc 	bl	8003328 <I2C_MasterRequestRead>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1c0      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d113      	bne.n	8002fca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e194      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d11d      	bne.n	800300e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800300a:	b662      	cpsie	i
 800300c:	e172      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	2b02      	cmp	r3, #2
 8003014:	d11d      	bne.n	8003052 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003026:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800304e:	b662      	cpsie	i
 8003050:	e150      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003078:	e13c      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b03      	cmp	r3, #3
 8003080:	f200 80f5 	bhi.w	800326e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	2b01      	cmp	r3, #1
 800308a:	d123      	bne.n	80030d4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fad5 	bl	8003640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e13d      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d2:	e10f      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d150      	bne.n	800317e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	4906      	ldr	r1, [pc, #24]	; (8003100 <HAL_I2C_Master_Receive+0x234>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f9d4 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e112      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
 80030f6:	bf00      	nop
 80030f8:	00100002 	.word	0x00100002
 80030fc:	ffff0000 	.word	0xffff0000
 8003100:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003104:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003148:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317c:	e0ba      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2200      	movs	r2, #0
 8003186:	4967      	ldr	r1, [pc, #412]	; (8003324 <HAL_I2C_Master_Receive+0x458>)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f983 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0c1      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2200      	movs	r2, #0
 80031e4:	494f      	ldr	r1, [pc, #316]	; (8003324 <HAL_I2C_Master_Receive+0x458>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f954 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e092      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003238:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800326c:	e042      	b.n	80032f4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9e4 	bl	8003640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e04c      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d118      	bne.n	80032f4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f aebe 	bne.w	800307a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010004 	.word	0x00010004

08003328 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d006      	beq.n	8003362 <I2C_MasterRequestRead+0x3a>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d003      	beq.n	8003362 <I2C_MasterRequestRead+0x3a>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003360:	d108      	bne.n	8003374 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00b      	b.n	800338c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2b11      	cmp	r3, #17
 800337a:	d107      	bne.n	800338c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f87b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e06d      	b.n	8003484 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	e053      	b.n	800346c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c4:	897b      	ldrh	r3, [r7, #10]
 80033c6:	11db      	asrs	r3, r3, #7
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0306 	and.w	r3, r3, #6
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f063 030f 	orn	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	492a      	ldr	r1, [pc, #168]	; (800348c <I2C_MasterRequestRead+0x164>)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8ad 	bl	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e048      	b.n	8003484 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4923      	ldr	r1, [pc, #140]	; (8003490 <I2C_MasterRequestRead+0x168>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f89d 	bl	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e038      	b.n	8003484 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003436:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f825 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e017      	b.n	8003484 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	11db      	asrs	r3, r3, #7
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f063 030e 	orn	r3, r3, #14
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <I2C_MasterRequestRead+0x168>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f865 	bl	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	00010008 	.word	0x00010008
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	e025      	b.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fd fe3d 	bl	800112c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e023      	b.n	800353a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	e00c      	b.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d0b6      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003550:	e051      	b.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d123      	bne.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f043 0204 	orr.w	r2, r3, #4
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e046      	b.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d021      	beq.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fd fdbb 	bl	800112c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e020      	b.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10c      	bne.n	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e00b      	b.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d18d      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800364c:	e042      	b.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d119      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e029      	b.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fd fd4c 	bl	800112c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d116      	bne.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d1b5      	bne.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e26c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	d00c      	beq.n	8003732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003718:	4b8f      	ldr	r3, [pc, #572]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d112      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
 8003724:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b89      	ldr	r3, [pc, #548]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06c      	beq.n	8003818 <HAL_RCC_OscConfig+0x12c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e246      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x76>
 8003754:	4b80      	ldr	r3, [pc, #512]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e02e      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x98>
 800376a:	4b7b      	ldr	r3, [pc, #492]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7a      	ldr	r2, [pc, #488]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b78      	ldr	r3, [pc, #480]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a77      	ldr	r2, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0xbc>
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a71      	ldr	r2, [pc, #452]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 80037a8:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6a      	ldr	r2, [pc, #424]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b68      	ldr	r3, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a67      	ldr	r2, [pc, #412]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd fcb0 	bl	800112c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fd fcac 	bl	800112c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1fa      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe4>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd fc9c 	bl	800112c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fd fc98 	bl	800112c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1e6      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x10c>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003832:	4b49      	ldr	r3, [pc, #292]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1ba      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4939      	ldr	r1, [pc, #228]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e03a      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fd fc51 	bl	800112c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fd fc4d 	bl	800112c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e19b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4927      	ldr	r1, [pc, #156]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd fc30 	bl	800112c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fd fc2c 	bl	800112c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e17a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d03a      	beq.n	8003970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d019      	beq.n	8003936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fd fc10 	bl	800112c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fd fc0c 	bl	800112c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e15a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f000 fb0a 	bl	8003f48 <RCC_Delay>
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7fd fbf6 	bl	800112c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003942:	e00f      	b.n	8003964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7fd fbf2 	bl	800112c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d908      	bls.n	8003964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e140      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	42420000 	.word	0x42420000
 8003960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b9e      	ldr	r3, [pc, #632]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e9      	bne.n	8003944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a6 	beq.w	8003aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b97      	ldr	r3, [pc, #604]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4a93      	ldr	r2, [pc, #588]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	61d3      	str	r3, [r2, #28]
 800399a:	4b91      	ldr	r3, [pc, #580]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b8b      	ldr	r3, [pc, #556]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a8a      	ldr	r2, [pc, #552]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fd fbb3 	bl	800112c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fd fbaf 	bl	800112c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0fd      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x312>
 80039f0:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e02d      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x334>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a72      	ldr	r2, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	e01c      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x356>
 8003a28:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7fd fb63 	bl	800112c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fd fb5f 	bl	800112c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0ab      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RCC_OscConfig+0x37e>
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fb4d 	bl	800112c <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd fb49 	bl	800112c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e095      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a47      	ldr	r2, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8081 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d061      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d146      	bne.n	8003b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fd fb1d 	bl	800112c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fd fb19 	bl	800112c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e067      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d108      	bne.n	8003b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1e:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	492d      	ldr	r1, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a19      	ldr	r1, [r3, #32]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	430b      	orrs	r3, r1
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fd faed 	bl	800112c <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fd fae9 	bl	800112c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e037      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x46a>
 8003b74:	e02f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fad6 	bl	800112c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fad2 	bl	800112c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e020      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x498>
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e013      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42420060 	.word	0x42420060

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d0      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d910      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4965      	ldr	r1, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d040      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e073      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06b      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4936      	ldr	r1, [pc, #216]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd fa26 	bl	800112c <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd fa22 	bl	800112c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e053      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d210      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1cc>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd f8c0 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08008420 	.word	0x08008420
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b490      	push	{r4, r7}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dc8:	1d3c      	adds	r4, r7, #4
 8003dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x46>
 8003dfe:	e02d      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e02:	623b      	str	r3, [r7, #32]
      break;
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e12:	4413      	add	r3, r2
 8003e14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c5b      	lsrs	r3, r3, #17
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e32:	4413      	add	r3, r2
 8003e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3e:	fb02 f203 	mul.w	r2, r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e004      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	623b      	str	r3, [r7, #32]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e5e:	623b      	str	r3, [r7, #32]
      break;
 8003e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e62:	6a3b      	ldr	r3, [r7, #32]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc90      	pop	{r4, r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	0800834c 	.word	0x0800834c
 8003e74:	0800835c 	.word	0x0800835c
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	007a1200 	.word	0x007a1200
 8003e80:	003d0900 	.word	0x003d0900

08003e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	20000000 	.word	0x20000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff2 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	08008430 	.word	0x08008430

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffde 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4601      	mov	r1, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0adb      	lsrs	r3, r3, #11
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08008430 	.word	0x08008430

08003ee8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_RCC_GetClockConfig+0x58>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCC_GetClockConfig+0x58>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_GetClockConfig+0x58>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_RCC_GetClockConfig+0x58>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0207 	and.w	r2, r3, #7
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40022000 	.word	0x40022000

08003f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <RCC_Delay+0x34>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <RCC_Delay+0x38>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0a5b      	lsrs	r3, r3, #9
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f64:	bf00      	nop
  }
  while (Delay --);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e5a      	subs	r2, r3, #1
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f9      	bne.n	8003f64 <RCC_Delay+0x1c>
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	10624dd3 	.word	0x10624dd3

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d07d      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa4:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b4c      	ldr	r3, [pc, #304]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4a4b      	ldr	r2, [pc, #300]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	61d3      	str	r3, [r2, #28]
 8003fbc:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d118      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd8:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a42      	ldr	r2, [pc, #264]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe4:	f7fd f8a2 	bl	800112c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	e008      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fd f89e 	bl	800112c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e06d      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400a:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004012:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02e      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d027      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800403e:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d014      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fd f86d 	bl	800112c <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fd f869 	bl	800112c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e036      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ee      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4917      	ldr	r1, [pc, #92]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	4313      	orrs	r3, r2
 8004088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	490b      	ldr	r1, [pc, #44]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4904      	ldr	r1, [pc, #16]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42420440 	.word	0x42420440

080040f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01d      	b.n	800413e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f815 	bl	8004146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f962 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b06      	cmp	r3, #6
 8004180:	d007      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d122      	bne.n	80041fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d11b      	bne.n	80041fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0202 	mvn.w	r2, #2
 80041ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f8ed 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8e0 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8ef 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b04      	cmp	r3, #4
 8004206:	d122      	bne.n	800424e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0204 	mvn.w	r2, #4
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8c3 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 800423a:	e005      	b.n	8004248 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f8b6 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8c5 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d122      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11b      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0208 	mvn.w	r2, #8
 8004272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f899 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 800428e:	e005      	b.n	800429c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f88c 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f89b 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d122      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d11b      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f06f 0210 	mvn.w	r2, #16
 80042c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2208      	movs	r2, #8
 80042cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f86f 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 80042e2:	e005      	b.n	80042f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f862 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f871 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0201 	mvn.w	r2, #1
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fc6f 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d10e      	bne.n	800434e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d107      	bne.n	800434e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8c0 	bl	80044ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d10e      	bne.n	800437a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d107      	bne.n	800437a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f835 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d10e      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0220 	mvn.w	r2, #32
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f88b 	bl	80044bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <TIM_Base_SetConfig+0xbc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <TIM_Base_SetConfig+0xc0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <TIM_Base_SetConfig+0xbc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <TIM_Base_SetConfig+0xc0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800

080044bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044e2:	e003      	b.n	80044ec <LoopCopyDataInit>

080044e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80044e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80044ea:	3104      	adds	r1, #4

080044ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80044ec:	480a      	ldr	r0, [pc, #40]	; (8004518 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80044f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80044f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80044f4:	d3f6      	bcc.n	80044e4 <CopyDataInit>
  ldr r2, =_sbss
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80044f8:	e002      	b.n	8004500 <LoopFillZerobss>

080044fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80044fc:	f842 3b04 	str.w	r3, [r2], #4

08004500 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004502:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004504:	d3f9      	bcc.n	80044fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004506:	f7fc fdb5 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f003 fea9 	bl	8008260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800450e:	f7fb fe7d 	bl	800020c <main>
  bx lr
 8004512:	4770      	bx	lr
  ldr r3, =_sidata
 8004514:	08008454 	.word	0x08008454
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800451c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004520:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004524:	200047a4 	.word	0x200047a4

08004528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004528:	e7fe      	b.n	8004528 <ADC1_2_IRQHandler>

0800452a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f103 0208 	add.w	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f04f 32ff 	mov.w	r2, #4294967295
 8004542:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0208 	add.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f103 0208 	add.w	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d103      	bne.n	80045e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e00c      	b.n	8004600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3308      	adds	r3, #8
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e002      	b.n	80045f4 <vListInsert+0x2e>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d2f6      	bcs.n	80045ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6852      	ldr	r2, [r2, #4]
 8004656:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d103      	bne.n	800466a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	e7fe      	b.n	80046ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046b0:	f001 fd58 	bl	8006164 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	68f9      	ldr	r1, [r7, #12]
 80046be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	441a      	add	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	3b01      	subs	r3, #1
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	441a      	add	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	; 0xff
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22ff      	movs	r2, #255	; 0xff
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3310      	adds	r3, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f84c 	bl	80057b0 <xTaskRemoveFromEventList>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <xQueueGenericReset+0xcc>)
 8004720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	e009      	b.n	8004744 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3310      	adds	r3, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fef8 	bl	800452a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3324      	adds	r3, #36	; 0x24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fef3 	bl	800452a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004744:	f001 fd3c 	bl	80061c0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004748:	2301      	movs	r3, #1
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <xQueueGenericCreate+0x28>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e7fe      	b.n	800477e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e004      	b.n	8004796 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3348      	adds	r3, #72	; 0x48
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fde2 	bl	8006364 <pvPortMalloc>
 80047a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	3348      	adds	r3, #72	; 0x48
 80047ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047b6:	79fa      	ldrb	r2, [r7, #7]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f805 	bl	80047d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047c8:	69bb      	ldr	r3, [r7, #24]
	}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e002      	b.n	80047f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004800:	2101      	movs	r1, #1
 8004802:	69b8      	ldr	r0, [r7, #24]
 8004804:	f7ff ff40 	bl	8004688 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	2073      	movs	r0, #115	; 0x73
 8004810:	f002 fe54 	bl	80074bc <SEGGER_SYSVIEW_RecordU32x3>
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueGiveFromISR+0x28>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	e7fe      	b.n	8004842 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <xQueueGiveFromISR+0x44>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e7fe      	b.n	800485e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGiveFromISR+0x54>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGiveFromISR+0x58>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGiveFromISR+0x5a>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <xQueueGiveFromISR+0x72>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e7fe      	b.n	800488c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800488e:	f001 fd2d 	bl	80062ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004892:	f3ef 8211 	mrs	r2, BASEPRI
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	617a      	str	r2, [r7, #20]
 80048a8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d235      	bcs.n	800492a <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 fb80 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 80048d0:	4601      	mov	r1, r0
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	2060      	movs	r0, #96	; 0x60
 80048d8:	f002 fd96 	bl	8007408 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d112      	bne.n	8004914 <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	3324      	adds	r3, #36	; 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ff58 	bl	80057b0 <xTaskRemoveFromEventList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e007      	b.n	8004924 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004918:	3301      	adds	r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	b25a      	sxtb	r2, r3
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004924:	2301      	movs	r3, #1
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
 8004928:	e00b      	b.n	8004942 <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	4618      	mov	r0, r3
 800492e:	f003 fb4f 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 8004932:	4601      	mov	r1, r0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	2060      	movs	r0, #96	; 0x60
 800493a:	f002 fd65 	bl	8007408 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800494e:	4618      	mov	r0, r3
 8004950:	3738      	adds	r7, #56	; 0x38
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b091      	sub	sp, #68	; 0x44
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	e7fe      	b.n	8004986 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <xQueueSemaphoreTake+0x4c>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e7fe      	b.n	80049a2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049a4:	f001 f8c2 	bl	8005b2c <xTaskGetSchedulerState>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <xQueueSemaphoreTake+0x5c>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <xQueueSemaphoreTake+0x60>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <xQueueSemaphoreTake+0x62>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <xQueueSemaphoreTake+0x7a>
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	e7fe      	b.n	80049d0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049d2:	f001 fbc7 	bl	8006164 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d036      	beq.n	8004a50 <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 faf3 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 80049ea:	4604      	mov	r4, r0
 80049ec:	2000      	movs	r0, #0
 80049ee:	f003 faef 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 80049f2:	4601      	mov	r1, r0
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	2301      	movs	r3, #1
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	460a      	mov	r2, r1
 80049fe:	4621      	mov	r1, r4
 8004a00:	205c      	movs	r0, #92	; 0x5c
 8004a02:	f002 fdd1 	bl	80075a8 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	1e5a      	subs	r2, r3, #1
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <xQueueSemaphoreTake+0xc8>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a16:	f001 f9d7 	bl	8005dc8 <pvTaskIncrementMutexHeldCount>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00f      	beq.n	8004a48 <xQueueSemaphoreTake+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 febf 	bl	80057b0 <xTaskRemoveFromEventList>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <xQueueSemaphoreTake+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a38:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <xQueueSemaphoreTake+0x278>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a48:	f001 fbba 	bl	80061c0 <vPortExitCritical>
				return pdPASS;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0ba      	b.n	8004bc6 <xQueueSemaphoreTake+0x26e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d122      	bne.n	8004a9c <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <xQueueSemaphoreTake+0x118>
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e7fe      	b.n	8004a6e <xQueueSemaphoreTake+0x116>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a70:	f001 fba6 	bl	80061c0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	4618      	mov	r0, r3
 8004a78:	f003 faaa 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f003 faa6 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 8004a84:	4601      	mov	r1, r0
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	2301      	movs	r3, #1
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	460a      	mov	r2, r1
 8004a90:	4621      	mov	r1, r4
 8004a92:	205c      	movs	r0, #92	; 0x5c
 8004a94:	f002 fd88 	bl	80075a8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e094      	b.n	8004bc6 <xQueueSemaphoreTake+0x26e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fee8 	bl	800587c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ab0:	f001 fb86 	bl	80061c0 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ab4:	f000 fc62 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ab8:	f001 fb54 	bl	8006164 <vPortEnterCritical>
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d103      	bne.n	8004ad2 <xQueueSemaphoreTake+0x17a>
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d103      	bne.n	8004ae8 <xQueueSemaphoreTake+0x190>
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae8:	f001 fb6a 	bl	80061c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aec:	463a      	mov	r2, r7
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fed7 	bl	80058a8 <xTaskCheckForTimeOut>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d132      	bne.n	8004b66 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b02:	f000 f8d0 	bl	8004ca6 <prvIsQueueEmpty>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d026      	beq.n	8004b5a <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8004b14:	f001 fb26 	bl	8006164 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 f823 	bl	8005b68 <xTaskPriorityInherit>
 8004b22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b24:	f001 fb4c 	bl	80061c0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	3324      	adds	r3, #36	; 0x24
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fe19 	bl	8005768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b38:	f000 f863 	bl	8004c02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b3c:	f000 fc2c 	bl	8005398 <xTaskResumeAll>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af45 	bne.w	80049d2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004b48:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <xQueueSemaphoreTake+0x278>)
 8004b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	e73b      	b.n	80049d2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b5c:	f000 f851 	bl	8004c02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b60:	f000 fc1a 	bl	8005398 <xTaskResumeAll>
 8004b64:	e735      	b.n	80049d2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b68:	f000 f84b 	bl	8004c02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b6c:	f000 fc14 	bl	8005398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b72:	f000 f898 	bl	8004ca6 <prvIsQueueEmpty>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f43f af2a 	beq.w	80049d2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8004b84:	f001 faee 	bl	8006164 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b8a:	f000 f823 	bl	8004bd4 <prvGetDisinheritPriorityAfterTimeout>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f870 	bl	8005c7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b9c:	f001 fb10 	bl	80061c0 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f003 fa14 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 8004ba8:	4604      	mov	r4, r0
 8004baa:	2000      	movs	r0, #0
 8004bac:	f003 fa10 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	460a      	mov	r2, r1
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	205c      	movs	r0, #92	; 0x5c
 8004bc0:	f002 fcf2 	bl	80075a8 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004bc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	373c      	adds	r7, #60	; 0x3c
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e001      	b.n	8004bf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c0a:	f001 faab 	bl	8006164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c16:	e011      	b.n	8004c3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fdc3 	bl	80057b0 <xTaskRemoveFromEventList>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c30:	f000 fe9a 	bl	8005968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dce9      	bgt.n	8004c18 <prvUnlockQueue+0x16>
 8004c44:	e000      	b.n	8004c48 <prvUnlockQueue+0x46>
					break;
 8004c46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c50:	f001 fab6 	bl	80061c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c54:	f001 fa86 	bl	8006164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c60:	e011      	b.n	8004c86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fd9e 	bl	80057b0 <xTaskRemoveFromEventList>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c7a:	f000 fe75 	bl	8005968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c7e:	7bbb      	ldrb	r3, [r7, #14]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	dce9      	bgt.n	8004c62 <prvUnlockQueue+0x60>
 8004c8e:	e000      	b.n	8004c92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c9a:	f001 fa91 	bl	80061c0 <vPortExitCritical>
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cae:	f001 fa59 	bl	8006164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e001      	b.n	8004cc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cc4:	f001 fa7c 	bl	80061c0 <vPortExitCritical>

	return xReturn;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08e      	sub	sp, #56	; 0x38
 8004cd6:	af04      	add	r7, sp, #16
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <xTaskCreateStatic+0x28>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <xTaskCreateStatic+0x42>
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e7fe      	b.n	8004d12 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d14:	2354      	movs	r3, #84	; 0x54
 8004d16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b54      	cmp	r3, #84	; 0x54
 8004d1c:	d009      	beq.n	8004d32 <xTaskCreateStatic+0x60>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e7fe      	b.n	8004d30 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01e      	beq.n	8004d76 <xTaskCreateStatic+0xa4>
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01b      	beq.n	8004d76 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d50:	2300      	movs	r3, #0
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	9302      	str	r3, [sp, #8]
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f850 	bl	8004e0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d70:	f000 f8cc 	bl	8004f0c <prvAddNewTaskToReadyList>
 8004d74:	e001      	b.n	8004d7a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d7a:	697b      	ldr	r3, [r7, #20]
	}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3728      	adds	r7, #40	; 0x28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08c      	sub	sp, #48	; 0x30
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 fae3 	bl	8006364 <pvPortMalloc>
 8004d9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00e      	beq.n	8004dc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004da6:	2054      	movs	r0, #84	; 0x54
 8004da8:	f001 fadc 	bl	8006364 <pvPortMalloc>
 8004dac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dba:	e005      	b.n	8004dc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dbc:	6978      	ldr	r0, [r7, #20]
 8004dbe:	f001 fb93 	bl	80064e8 <vPortFree>
 8004dc2:	e001      	b.n	8004dc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9303      	str	r3, [sp, #12]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f80e 	bl	8004e0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df2:	69f8      	ldr	r0, [r7, #28]
 8004df4:	f000 f88a 	bl	8004f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	e002      	b.n	8004e04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004e02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e04:	69bb      	ldr	r3, [r7, #24]
	}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b088      	sub	sp, #32
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e26:	3b01      	subs	r3, #1
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f023 0307 	bic.w	r3, r3, #7
 8004e34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <prvInitialiseNewTask+0x46>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e7fe      	b.n	8004e52 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e012      	b.n	8004e80 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	7819      	ldrb	r1, [r3, #0]
 8004e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	3334      	adds	r3, #52	; 0x34
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d9e9      	bls.n	8004e5a <prvInitialiseNewTask+0x4c>
 8004e86:	e000      	b.n	8004e8a <prvInitialiseNewTask+0x7c>
		{
			break;
 8004e88:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d901      	bls.n	8004e9c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e98:	2306      	movs	r3, #6
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2200      	movs	r2, #0
 8004eac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fb58 	bl	8004568 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	3318      	adds	r3, #24
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fb53 	bl	8004568 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	f1c3 0207 	rsb	r2, r3, #7
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2200      	movs	r2, #0
 8004edc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	69b8      	ldr	r0, [r7, #24]
 8004eec:	f000 fff8 	bl	8005ee0 <pxPortInitialiseStack>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f02:	bf00      	nop
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f0c:	b5b0      	push	{r4, r5, r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f14:	f001 f926 	bl	8006164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <prvAddNewTaskToReadyList+0xf4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	4a38      	ldr	r2, [pc, #224]	; (8005000 <prvAddNewTaskToReadyList+0xf4>)
 8004f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <prvAddNewTaskToReadyList+0xf8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f2a:	4a36      	ldr	r2, [pc, #216]	; (8005004 <prvAddNewTaskToReadyList+0xf8>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f30:	4b33      	ldr	r3, [pc, #204]	; (8005000 <prvAddNewTaskToReadyList+0xf4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d110      	bne.n	8004f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f38:	f000 fd3a 	bl	80059b0 <prvInitialiseTaskLists>
 8004f3c:	e00d      	b.n	8004f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f3e:	4b32      	ldr	r3, [pc, #200]	; (8005008 <prvAddNewTaskToReadyList+0xfc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f46:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <prvAddNewTaskToReadyList+0xf8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d802      	bhi.n	8004f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f54:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <prvAddNewTaskToReadyList+0xf8>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <prvAddNewTaskToReadyList+0x100>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <prvAddNewTaskToReadyList+0x100>)
 8004f62:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <prvAddNewTaskToReadyList+0x8c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f002 ff09 	bl	8007d84 <SEGGER_SYSVIEW_OnTaskCreate>
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	461d      	mov	r5, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461c      	mov	r4, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1ae3      	subs	r3, r4, r3
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	462b      	mov	r3, r5
 8004f94:	f001 fc62 	bl	800685c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f002 ff76 	bl	8007e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <prvAddNewTaskToReadyList+0x104>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <prvAddNewTaskToReadyList+0x104>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a15      	ldr	r2, [pc, #84]	; (8005014 <prvAddNewTaskToReadyList+0x108>)
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7ff fad9 	bl	8004580 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fce:	f001 f8f7 	bl	80061c0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <prvAddNewTaskToReadyList+0xfc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <prvAddNewTaskToReadyList+0xf8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d207      	bcs.n	8004ff8 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <prvAddNewTaskToReadyList+0x10c>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8005000:	20000384 	.word	0x20000384
 8005004:	20000284 	.word	0x20000284
 8005008:	20000390 	.word	0x20000390
 800500c:	200003a0 	.word	0x200003a0
 8005010:	2000038c 	.word	0x2000038c
 8005014:	20000288 	.word	0x20000288
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005024:	f001 f89e 	bl	8006164 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <vTaskDelete+0x18>
 800502e:	4b3f      	ldr	r3, [pc, #252]	; (800512c <vTaskDelete+0x110>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	e000      	b.n	8005036 <vTaskDelete+0x1a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3304      	adds	r3, #4
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fafa 	bl	8004636 <uxListRemove>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d115      	bne.n	8005074 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4938      	ldr	r1, [pc, #224]	; (8005130 <vTaskDelete+0x114>)
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vTaskDelete+0x58>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	2201      	movs	r2, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43da      	mvns	r2, r3
 800506a:	4b32      	ldr	r3, [pc, #200]	; (8005134 <vTaskDelete+0x118>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4013      	ands	r3, r2
 8005070:	4a30      	ldr	r2, [pc, #192]	; (8005134 <vTaskDelete+0x118>)
 8005072:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3318      	adds	r3, #24
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fad8 	bl	8004636 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005086:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <vTaskDelete+0x11c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <vTaskDelete+0x11c>)
 800508e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005090:	4b26      	ldr	r3, [pc, #152]	; (800512c <vTaskDelete+0x110>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	429a      	cmp	r2, r3
 8005098:	d10b      	bne.n	80050b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4826      	ldr	r0, [pc, #152]	; (800513c <vTaskDelete+0x120>)
 80050a2:	f7ff fa6d 	bl	8004580 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <vTaskDelete+0x124>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a24      	ldr	r2, [pc, #144]	; (8005140 <vTaskDelete+0x124>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e009      	b.n	80050c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <vTaskDelete+0x128>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <vTaskDelete+0x128>)
 80050ba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fce3 	bl	8005a88 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80050c2:	f000 fd0f 	bl	8005ae4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f002 ff81 	bl	8007fd0 <SEGGER_SYSVIEW_ShrinkId>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4619      	mov	r1, r3
 80050d2:	2022      	movs	r0, #34	; 0x22
 80050d4:	f002 f95c 	bl	8007390 <SEGGER_SYSVIEW_RecordU32>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fc26 	bl	800692c <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 80050e0:	f001 f86e 	bl	80061c0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <vTaskDelete+0x12c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01a      	beq.n	8005122 <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <vTaskDelete+0x110>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d115      	bne.n	8005122 <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <vTaskDelete+0x130>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <vTaskDelete+0xf6>
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e7fe      	b.n	8005110 <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <vTaskDelete+0x134>)
 8005114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000284 	.word	0x20000284
 8005130:	20000288 	.word	0x20000288
 8005134:	2000038c 	.word	0x2000038c
 8005138:	200003a0 	.word	0x200003a0
 800513c:	20000358 	.word	0x20000358
 8005140:	2000036c 	.word	0x2000036c
 8005144:	20000384 	.word	0x20000384
 8005148:	20000390 	.word	0x20000390
 800514c:	200003ac 	.word	0x200003ac
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <vTaskDelayUntil+0x28>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e7fe      	b.n	800517a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <vTaskDelayUntil+0x42>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e7fe      	b.n	8005194 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005196:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <vTaskDelayUntil+0xf0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <vTaskDelayUntil+0x5e>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e7fe      	b.n	80051b0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80051b2:	f000 f8e3 	bl	800537c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <vTaskDelayUntil+0xf4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	4413      	add	r3, r2
 80051c4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d20b      	bcs.n	80051e8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d211      	bcs.n	80051fe <vTaskDelayUntil+0xaa>
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d90d      	bls.n	80051fe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e00a      	b.n	80051fe <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d303      	bcc.n	80051fa <vTaskDelayUntil+0xa6>
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d901      	bls.n	80051fe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800520a:	2024      	movs	r0, #36	; 0x24
 800520c:	f002 f8a2 	bl	8007354 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fde9 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800521e:	f000 f8bb 	bl	8005398 <xTaskResumeAll>
 8005222:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <vTaskDelayUntil+0xf8>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800523a:	bf00      	nop
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200003ac 	.word	0x200003ac
 8005248:	20000388 	.word	0x20000388
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <vTaskDelay+0x68>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <vTaskDelay+0x2e>
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	e7fe      	b.n	800527c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800527e:	f000 f87d 	bl	800537c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	2023      	movs	r0, #35	; 0x23
 8005286:	f002 f883 	bl	8007390 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800528a:	2100      	movs	r1, #0
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fdaf 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005292:	f000 f881 	bl	8005398 <xTaskResumeAll>
 8005296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <vTaskDelay+0x6c>)
 80052a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200003ac 	.word	0x200003ac
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ce:	463a      	mov	r2, r7
 80052d0:	1d39      	adds	r1, r7, #4
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fa ff80 	bl	80001dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	9202      	str	r2, [sp, #8]
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	2300      	movs	r3, #0
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	2300      	movs	r3, #0
 80052ec:	460a      	mov	r2, r1
 80052ee:	491d      	ldr	r1, [pc, #116]	; (8005364 <vTaskStartScheduler+0xa4>)
 80052f0:	481d      	ldr	r0, [pc, #116]	; (8005368 <vTaskStartScheduler+0xa8>)
 80052f2:	f7ff fcee 	bl	8004cd2 <xTaskCreateStatic>
 80052f6:	4602      	mov	r2, r0
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <vTaskStartScheduler+0xac>)
 80052fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <vTaskStartScheduler+0xac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e001      	b.n	800530e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d115      	bne.n	8005340 <vTaskStartScheduler+0x80>
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <vTaskStartScheduler+0xb0>)
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <vTaskStartScheduler+0xb4>)
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005334:	4b10      	ldr	r3, [pc, #64]	; (8005378 <vTaskStartScheduler+0xb8>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800533a:	f000 fe4d 	bl	8005fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800533e:	e00d      	b.n	800535c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d109      	bne.n	800535c <vTaskStartScheduler+0x9c>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e7fe      	b.n	800535a <vTaskStartScheduler+0x9a>
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08008360 	.word	0x08008360
 8005368:	08005981 	.word	0x08005981
 800536c:	200003a8 	.word	0x200003a8
 8005370:	200003a4 	.word	0x200003a4
 8005374:	20000390 	.word	0x20000390
 8005378:	20000388 	.word	0x20000388

0800537c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <vTaskSuspendAll+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a03      	ldr	r2, [pc, #12]	; (8005394 <vTaskSuspendAll+0x18>)
 8005388:	6013      	str	r3, [r2, #0]
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200003ac 	.word	0x200003ac

08005398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a6:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <xTaskResumeAll+0x2a>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	e7fe      	b.n	80053c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053c2:	f000 fecf 	bl	8006164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d165      	bne.n	80054a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053d8:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <xTaskResumeAll+0x120>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d061      	beq.n	80054a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e0:	e032      	b.n	8005448 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053e2:	4b36      	ldr	r3, [pc, #216]	; (80054bc <xTaskResumeAll+0x124>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3318      	adds	r3, #24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f921 	bl	8004636 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f91c 	bl	8004636 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4618      	mov	r0, r3
 8005402:	f002 fd43 	bl	8007e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	2201      	movs	r2, #1
 800540c:	409a      	lsls	r2, r3
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <xTaskResumeAll+0x128>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <xTaskResumeAll+0x128>)
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4a27      	ldr	r2, [pc, #156]	; (80054c4 <xTaskResumeAll+0x12c>)
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f7ff f8a6 	bl	8004580 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <xTaskResumeAll+0x130>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <xTaskResumeAll+0x134>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005448:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <xTaskResumeAll+0x124>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1c8      	bne.n	80053e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005456:	f000 fb45 	bl	8005ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <xTaskResumeAll+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d010      	beq.n	8005488 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005466:	f000 f857 	bl	8005518 <xTaskIncrementTick>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005470:	4b16      	ldr	r3, [pc, #88]	; (80054cc <xTaskResumeAll+0x134>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3b01      	subs	r3, #1
 800547a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f1      	bne.n	8005466 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <xTaskResumeAll+0x138>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <xTaskResumeAll+0x134>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005494:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <xTaskResumeAll+0x13c>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a4:	f000 fe8c 	bl	80061c0 <vPortExitCritical>

	return xAlreadyYielded;
 80054a8:	68bb      	ldr	r3, [r7, #8]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200003ac 	.word	0x200003ac
 80054b8:	20000384 	.word	0x20000384
 80054bc:	20000344 	.word	0x20000344
 80054c0:	2000038c 	.word	0x2000038c
 80054c4:	20000288 	.word	0x20000288
 80054c8:	20000284 	.word	0x20000284
 80054cc:	20000398 	.word	0x20000398
 80054d0:	20000394 	.word	0x20000394
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <xTaskGetTickCount+0x18>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054e4:	687b      	ldr	r3, [r7, #4]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20000388 	.word	0x20000388

080054f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054fa:	f000 fef7 	bl	80062ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <xTaskGetTickCountFromISR+0x20>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005508:	683b      	ldr	r3, [r7, #0]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000388 	.word	0x20000388

08005518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005522:	4b52      	ldr	r3, [pc, #328]	; (800566c <xTaskIncrementTick+0x154>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 8090 	bne.w	800564c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800552c:	4b50      	ldr	r3, [pc, #320]	; (8005670 <xTaskIncrementTick+0x158>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005534:	4a4e      	ldr	r2, [pc, #312]	; (8005670 <xTaskIncrementTick+0x158>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11f      	bne.n	8005580 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005540:	4b4c      	ldr	r3, [pc, #304]	; (8005674 <xTaskIncrementTick+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <xTaskIncrementTick+0x46>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	e7fe      	b.n	800555c <xTaskIncrementTick+0x44>
 800555e:	4b45      	ldr	r3, [pc, #276]	; (8005674 <xTaskIncrementTick+0x15c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	4b44      	ldr	r3, [pc, #272]	; (8005678 <xTaskIncrementTick+0x160>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a42      	ldr	r2, [pc, #264]	; (8005674 <xTaskIncrementTick+0x15c>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4a42      	ldr	r2, [pc, #264]	; (8005678 <xTaskIncrementTick+0x160>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b42      	ldr	r3, [pc, #264]	; (800567c <xTaskIncrementTick+0x164>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a40      	ldr	r2, [pc, #256]	; (800567c <xTaskIncrementTick+0x164>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	f000 fab2 	bl	8005ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <xTaskIncrementTick+0x168>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d351      	bcc.n	800562e <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800558a:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <xTaskIncrementTick+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <xTaskIncrementTick+0x80>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <xTaskIncrementTick+0x82>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800559e:	4b38      	ldr	r3, [pc, #224]	; (8005680 <xTaskIncrementTick+0x168>)
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	601a      	str	r2, [r3, #0]
					break;
 80055a6:	e042      	b.n	800562e <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055a8:	4b32      	ldr	r3, [pc, #200]	; (8005674 <xTaskIncrementTick+0x15c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d203      	bcs.n	80055c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055c0:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <xTaskIncrementTick+0x168>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6013      	str	r3, [r2, #0]
						break;
 80055c6:	e032      	b.n	800562e <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f832 	bl	8004636 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3318      	adds	r3, #24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff f829 	bl	8004636 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 fc50 	bl	8007e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <xTaskIncrementTick+0x16c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	4a22      	ldr	r2, [pc, #136]	; (8005684 <xTaskIncrementTick+0x16c>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <xTaskIncrementTick+0x170>)
 800560c:	441a      	add	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f7fe ffb3 	bl	8004580 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	4b1b      	ldr	r3, [pc, #108]	; (800568c <xTaskIncrementTick+0x174>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d3b0      	bcc.n	800558a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562c:	e7ad      	b.n	800558a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800562e:	4b17      	ldr	r3, [pc, #92]	; (800568c <xTaskIncrementTick+0x174>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4914      	ldr	r1, [pc, #80]	; (8005688 <xTaskIncrementTick+0x170>)
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d907      	bls.n	8005656 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005646:	2301      	movs	r3, #1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e004      	b.n	8005656 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800564c:	4b10      	ldr	r3, [pc, #64]	; (8005690 <xTaskIncrementTick+0x178>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <xTaskIncrementTick+0x178>)
 8005654:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <xTaskIncrementTick+0x17c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005662:	697b      	ldr	r3, [r7, #20]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	200003ac 	.word	0x200003ac
 8005670:	20000388 	.word	0x20000388
 8005674:	2000033c 	.word	0x2000033c
 8005678:	20000340 	.word	0x20000340
 800567c:	2000039c 	.word	0x2000039c
 8005680:	200003a4 	.word	0x200003a4
 8005684:	2000038c 	.word	0x2000038c
 8005688:	20000288 	.word	0x20000288
 800568c:	20000284 	.word	0x20000284
 8005690:	20000394 	.word	0x20000394
 8005694:	20000398 	.word	0x20000398

08005698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <vTaskSwitchContext+0xb8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056a6:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <vTaskSwitchContext+0xbc>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056ac:	e04c      	b.n	8005748 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80056ae:	4b29      	ldr	r3, [pc, #164]	; (8005754 <vTaskSwitchContext+0xbc>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056b4:	4b28      	ldr	r3, [pc, #160]	; (8005758 <vTaskSwitchContext+0xc0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	fab3 f383 	clz	r3, r3
 80056c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056c2:	7afb      	ldrb	r3, [r7, #11]
 80056c4:	f1c3 031f 	rsb	r3, r3, #31
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	4924      	ldr	r1, [pc, #144]	; (800575c <vTaskSwitchContext+0xc4>)
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	e7fe      	b.n	80056f0 <vTaskSwitchContext+0x58>
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a17      	ldr	r2, [pc, #92]	; (800575c <vTaskSwitchContext+0xc4>)
 80056fe:	4413      	add	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	3308      	adds	r3, #8
 8005714:	429a      	cmp	r2, r3
 8005716:	d104      	bne.n	8005722 <vTaskSwitchContext+0x8a>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <vTaskSwitchContext+0xc8>)
 800572a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <vTaskSwitchContext+0xc8>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <vTaskSwitchContext+0xcc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d102      	bne.n	800573e <vTaskSwitchContext+0xa6>
 8005738:	f002 fb08 	bl	8007d4c <SEGGER_SYSVIEW_OnIdle>
}
 800573c:	e004      	b.n	8005748 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800573e:	4b08      	ldr	r3, [pc, #32]	; (8005760 <vTaskSwitchContext+0xc8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f002 fb60 	bl	8007e08 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200003ac 	.word	0x200003ac
 8005754:	20000398 	.word	0x20000398
 8005758:	2000038c 	.word	0x2000038c
 800575c:	20000288 	.word	0x20000288
 8005760:	20000284 	.word	0x20000284
 8005764:	200003a8 	.word	0x200003a8

08005768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <vTaskPlaceOnEventList+0x24>
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e7fe      	b.n	800578a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <vTaskPlaceOnEventList+0x44>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3318      	adds	r3, #24
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fe ff16 	bl	80045c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800579a:	2101      	movs	r1, #1
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f000 fb27 	bl	8005df0 <prvAddCurrentTaskToDelayedList>
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000284 	.word	0x20000284

080057b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <xTaskRemoveFromEventList+0x2a>
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e7fe      	b.n	80057d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3318      	adds	r3, #24
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe ff29 	bl	8004636 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057e4:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <xTaskRemoveFromEventList+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d120      	bne.n	800582e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe ff20 	bl	8004636 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f002 fb47 	bl	8007e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	2201      	movs	r2, #1
 8005804:	409a      	lsls	r2, r3
 8005806:	4b18      	ldr	r3, [pc, #96]	; (8005868 <xTaskRemoveFromEventList+0xb8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4313      	orrs	r3, r2
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <xTaskRemoveFromEventList+0xb8>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <xTaskRemoveFromEventList+0xbc>)
 800581e:	441a      	add	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe feaa 	bl	8004580 <vListInsertEnd>
 800582c:	e005      	b.n	800583a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3318      	adds	r3, #24
 8005832:	4619      	mov	r1, r3
 8005834:	480e      	ldr	r0, [pc, #56]	; (8005870 <xTaskRemoveFromEventList+0xc0>)
 8005836:	f7fe fea3 	bl	8004580 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <xTaskRemoveFromEventList+0xc4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	429a      	cmp	r2, r3
 8005846:	d905      	bls.n	8005854 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <xTaskRemoveFromEventList+0xc8>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e001      	b.n	8005858 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005858:	697b      	ldr	r3, [r7, #20]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200003ac 	.word	0x200003ac
 8005868:	2000038c 	.word	0x2000038c
 800586c:	20000288 	.word	0x20000288
 8005870:	20000344 	.word	0x20000344
 8005874:	20000284 	.word	0x20000284
 8005878:	20000398 	.word	0x20000398

0800587c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <vTaskInternalSetTimeOutState+0x24>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <vTaskInternalSetTimeOutState+0x28>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	605a      	str	r2, [r3, #4]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000039c 	.word	0x2000039c
 80058a4:	20000388 	.word	0x20000388

080058a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <xTaskCheckForTimeOut+0x24>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	e7fe      	b.n	80058ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <xTaskCheckForTimeOut+0x3e>
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e7fe      	b.n	80058e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058e6:	f000 fc3d 	bl	8006164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <xTaskCheckForTimeOut+0xb8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	e023      	b.n	8005952 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <xTaskCheckForTimeOut+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d007      	beq.n	8005926 <xTaskCheckForTimeOut+0x7e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e015      	b.n	8005952 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	429a      	cmp	r2, r3
 800592e:	d20b      	bcs.n	8005948 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff9d 	bl	800587c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e004      	b.n	8005952 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f000 fc35 	bl	80061c0 <vPortExitCritical>

	return xReturn;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000388 	.word	0x20000388
 8005964:	2000039c 	.word	0x2000039c

08005968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <vTaskMissedYield+0x14>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000398 	.word	0x20000398

08005980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005988:	f000 f852 	bl	8005a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvIdleTask+0x28>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d9f9      	bls.n	8005988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <prvIdleTask+0x2c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a4:	e7f0      	b.n	8005988 <prvIdleTask+0x8>
 80059a6:	bf00      	nop
 80059a8:	20000288 	.word	0x20000288
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e00c      	b.n	80059d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <prvInitialiseTaskLists+0x60>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fdad 	bl	800452a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d9ef      	bls.n	80059bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059de:	f7fe fda4 	bl	800452a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 80059e4:	f7fe fda1 	bl	800452a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x6c>)
 80059ea:	f7fe fd9e 	bl	800452a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ee:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x70>)
 80059f0:	f7fe fd9b 	bl	800452a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x74>)
 80059f6:	f7fe fd98 	bl	800452a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x78>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <prvInitialiseTaskLists+0x7c>)
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000288 	.word	0x20000288
 8005a14:	20000314 	.word	0x20000314
 8005a18:	20000328 	.word	0x20000328
 8005a1c:	20000344 	.word	0x20000344
 8005a20:	20000358 	.word	0x20000358
 8005a24:	20000370 	.word	0x20000370
 8005a28:	2000033c 	.word	0x2000033c
 8005a2c:	20000340 	.word	0x20000340

08005a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a36:	e019      	b.n	8005a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a38:	f000 fb94 	bl	8006164 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <prvCheckTasksWaitingTermination+0x4c>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fdf4 	bl	8004636 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fbad 	bl	80061c0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f80e 	bl	8005a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e1      	bne.n	8005a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000358 	.word	0x20000358
 8005a80:	20000384 	.word	0x20000384
 8005a84:	2000036c 	.word	0x2000036c

08005a88 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d108      	bne.n	8005aac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fd22 	bl	80064e8 <vPortFree>
				vPortFree( pxTCB );
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fd1f 	bl	80064e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005aaa:	e017      	b.n	8005adc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d103      	bne.n	8005abe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fd16 	bl	80064e8 <vPortFree>
	}
 8005abc:	e00e      	b.n	8005adc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d009      	beq.n	8005adc <prvDeleteTCB+0x54>
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e7fe      	b.n	8005ada <prvDeleteTCB+0x52>
	}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aea:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <prvResetNextTaskUnblockTime+0x40>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <prvResetNextTaskUnblockTime+0x14>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <prvResetNextTaskUnblockTime+0x16>
 8005af8:	2300      	movs	r3, #0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <prvResetNextTaskUnblockTime+0x44>)
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295
 8005b04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b06:	e008      	b.n	8005b1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <prvResetNextTaskUnblockTime+0x40>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <prvResetNextTaskUnblockTime+0x44>)
 8005b18:	6013      	str	r3, [r2, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	2000033c 	.word	0x2000033c
 8005b28:	200003a4 	.word	0x200003a4

08005b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <xTaskGetSchedulerState+0x34>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	e008      	b.n	8005b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <xTaskGetSchedulerState+0x38>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	e001      	b.n	8005b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b52:	687b      	ldr	r3, [r7, #4]
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000390 	.word	0x20000390
 8005b64:	200003ac 	.word	0x200003ac

08005b68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d073      	beq.n	8005c66 <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <xTaskPriorityInherit+0x108>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d263      	bcs.n	8005c54 <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db06      	blt.n	8005ba2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b94:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <xTaskPriorityInherit+0x108>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	f1c3 0207 	rsb	r2, r3, #7
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a30      	ldr	r2, [pc, #192]	; (8005c74 <xTaskPriorityInherit+0x10c>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d101      	bne.n	8005bbe <xTaskPriorityInherit+0x56>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xTaskPriorityInherit+0x58>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03a      	beq.n	8005c3a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fd34 	bl	8004636 <uxListRemove>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d115      	bne.n	8005c00 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd8:	4926      	ldr	r1, [pc, #152]	; (8005c74 <xTaskPriorityInherit+0x10c>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <xTaskPriorityInherit+0x98>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43da      	mvns	r2, r3
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <xTaskPriorityInherit+0x110>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <xTaskPriorityInherit+0x110>)
 8005bfe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <xTaskPriorityInherit+0x108>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	2201      	movs	r2, #1
 8005c10:	409a      	lsls	r2, r3
 8005c12:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <xTaskPriorityInherit+0x110>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xTaskPriorityInherit+0x110>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <xTaskPriorityInherit+0x10c>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fca4 	bl	8004580 <vListInsertEnd>
 8005c38:	e004      	b.n	8005c44 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <xTaskPriorityInherit+0x108>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4619      	mov	r1, r3
 8005c48:	2049      	movs	r0, #73	; 0x49
 8005c4a:	f001 fba1 	bl	8007390 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e008      	b.n	8005c66 <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <xTaskPriorityInherit+0x108>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d201      	bcs.n	8005c66 <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c66:	68fb      	ldr	r3, [r7, #12]
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000284 	.word	0x20000284
 8005c74:	20000288 	.word	0x20000288
 8005c78:	2000038c 	.word	0x2000038c

08005c7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 808f 	beq.w	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x138>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e7fe      	b.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e002      	b.n	8005cc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d070      	beq.n	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x138>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d16b      	bne.n	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x138>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cdc:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d109      	bne.n	8005cfa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	e7fe      	b.n	8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	204a      	movs	r0, #74	; 0x4a
 8005d00:	f001 fb46 	bl	8007390 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	db04      	blt.n	8005d22 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f1c3 0207 	rsb	r2, r3, #7
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	6959      	ldr	r1, [r3, #20]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005d32:	4413      	add	r3, r2
 8005d34:	4299      	cmp	r1, r3
 8005d36:	d101      	bne.n	8005d3c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d038      	beq.n	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x138>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fc75 	bl	8004636 <uxListRemove>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d115      	bne.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0x102>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	491a      	ldr	r1, [pc, #104]	; (8005dc0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0x102>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005d7c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 f883 	bl	8007e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8005da6:	441a      	add	r2, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7fe fbe6 	bl	8004580 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005db4:	bf00      	nop
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000284 	.word	0x20000284
 8005dc0:	20000288 	.word	0x20000288
 8005dc4:	2000038c 	.word	0x2000038c

08005dc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <pvTaskIncrementMutexHeldCount+0x24>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <pvTaskIncrementMutexHeldCount+0x24>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dda:	3201      	adds	r2, #1
 8005ddc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <pvTaskIncrementMutexHeldCount+0x24>)
 8005de0:	681b      	ldr	r3, [r3, #0]
	}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000284 	.word	0x20000284

08005df0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dfa:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e00:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fc15 	bl	8004636 <uxListRemove>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e12:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <prvAddCurrentTaskToDelayedList+0xdc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4013      	ands	r3, r2
 8005e26:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <prvAddCurrentTaskToDelayedList+0xdc>)
 8005e28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d110      	bne.n	8005e54 <prvAddCurrentTaskToDelayedList+0x64>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005e38:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	211b      	movs	r1, #27
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f002 f866 	bl	8007f10 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e44:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4820      	ldr	r0, [pc, #128]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005e4e:	f7fe fb97 	bl	8004580 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e52:	e032      	b.n	8005eba <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d20f      	bcs.n	8005e8c <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2104      	movs	r1, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 f84c 	bl	8007f10 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e78:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7fe fb9e 	bl	80045c6 <vListInsert>
}
 8005e8a:	e016      	b.n	8005eba <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2104      	movs	r1, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f002 f83c 	bl	8007f10 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fe fb8e 	bl	80045c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <prvAddCurrentTaskToDelayedList+0xec>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d202      	bcs.n	8005eba <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <prvAddCurrentTaskToDelayedList+0xec>)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000388 	.word	0x20000388
 8005ec8:	20000284 	.word	0x20000284
 8005ecc:	2000038c 	.word	0x2000038c
 8005ed0:	20000370 	.word	0x20000370
 8005ed4:	20000340 	.word	0x20000340
 8005ed8:	2000033c 	.word	0x2000033c
 8005edc:	200003a4 	.word	0x200003a4

08005ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b04      	subs	r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3b04      	subs	r3, #4
 8005f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <pxPortInitialiseStack+0x54>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3b14      	subs	r3, #20
 8005f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3b20      	subs	r3, #32
 8005f26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr
 8005f34:	08005f39 	.word	0x08005f39

08005f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <prvTaskExitError+0x4c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d009      	beq.n	8005f60 <prvTaskExitError+0x28>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e7fe      	b.n	8005f5e <prvTaskExitError+0x26>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f72:	bf00      	nop
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0fc      	beq.n	8005f74 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	2000000c 	.word	0x2000000c
	...

08005f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005fae:	4770      	bx	lr

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005fb8:	4806      	ldr	r0, [pc, #24]	; (8005fd4 <prvPortStartFirstTask+0x1c>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f380 8808 	msr	MSP, r0
 8005fc2:	b662      	cpsie	i
 8005fc4:	b661      	cpsie	f
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	df00      	svc	0
 8005fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fd2:	bf00      	nop
 8005fd4:	e000ed08 	.word	0xe000ed08

08005fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fde:	4b31      	ldr	r3, [pc, #196]	; (80060a4 <xPortStartScheduler+0xcc>)
 8005fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	22ff      	movs	r2, #255	; 0xff
 8005fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006000:	b2da      	uxtb	r2, r3
 8006002:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <xPortStartScheduler+0xd0>)
 8006004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006006:	4b29      	ldr	r3, [pc, #164]	; (80060ac <xPortStartScheduler+0xd4>)
 8006008:	2207      	movs	r2, #7
 800600a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800600c:	e009      	b.n	8006022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800600e:	4b27      	ldr	r3, [pc, #156]	; (80060ac <xPortStartScheduler+0xd4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	4a25      	ldr	r2, [pc, #148]	; (80060ac <xPortStartScheduler+0xd4>)
 8006016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d0ef      	beq.n	800600e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800602e:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <xPortStartScheduler+0xd4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1c3 0307 	rsb	r3, r3, #7
 8006036:	2b04      	cmp	r3, #4
 8006038:	d009      	beq.n	800604e <xPortStartScheduler+0x76>
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	e7fe      	b.n	800604c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <xPortStartScheduler+0xd4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	4a15      	ldr	r2, [pc, #84]	; (80060ac <xPortStartScheduler+0xd4>)
 8006056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <xPortStartScheduler+0xd4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006060:	4a12      	ldr	r2, [pc, #72]	; (80060ac <xPortStartScheduler+0xd4>)
 8006062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <xPortStartScheduler+0xd8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <xPortStartScheduler+0xd8>)
 8006072:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <xPortStartScheduler+0xd8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <xPortStartScheduler+0xd8>)
 800607e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006084:	f000 f910 	bl	80062a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <xPortStartScheduler+0xdc>)
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800608e:	f7ff ff93 	bl	8005fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006092:	f7ff fb01 	bl	8005698 <vTaskSwitchContext>
	prvTaskExitError();
 8006096:	f7ff ff4f 	bl	8005f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	e000e400 	.word	0xe000e400
 80060a8:	200003b0 	.word	0x200003b0
 80060ac:	200003b4 	.word	0x200003b4
 80060b0:	e000ed20 	.word	0xe000ed20
 80060b4:	2000000c 	.word	0x2000000c

080060b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060be:	4b26      	ldr	r3, [pc, #152]	; (8006158 <vInitPrioGroupValue+0xa0>)
 80060c0:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b1e      	ldr	r3, [pc, #120]	; (800615c <vInitPrioGroupValue+0xa4>)
 80060e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <vInitPrioGroupValue+0xa8>)
 80060e8:	2207      	movs	r2, #7
 80060ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ec:	e009      	b.n	8006102 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <vInitPrioGroupValue+0xa8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <vInitPrioGroupValue+0xa8>)
 80060f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d0ef      	beq.n	80060ee <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <vInitPrioGroupValue+0xa8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1c3 0307 	rsb	r3, r3, #7
 8006116:	2b04      	cmp	r3, #4
 8006118:	d009      	beq.n	800612e <vInitPrioGroupValue+0x76>
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	e7fe      	b.n	800612c <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <vInitPrioGroupValue+0xa8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <vInitPrioGroupValue+0xa8>)
 8006136:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <vInitPrioGroupValue+0xa8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006140:	4a07      	ldr	r2, [pc, #28]	; (8006160 <vInitPrioGroupValue+0xa8>)
 8006142:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e400 	.word	0xe000e400
 800615c:	200003b0 	.word	0x200003b0
 8006160:	200003b4 	.word	0x200003b4

08006164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <vPortEnterCritical+0x54>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	4a0d      	ldr	r2, [pc, #52]	; (80061b8 <vPortEnterCritical+0x54>)
 8006184:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <vPortEnterCritical+0x54>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10e      	bne.n	80061ac <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <vPortEnterCritical+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <vPortEnterCritical+0x48>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	e7fe      	b.n	80061aa <vPortEnterCritical+0x46>
	}
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	2000000c 	.word	0x2000000c
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <vPortExitCritical+0x48>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <vPortExitCritical+0x22>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e7fe      	b.n	80061e0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <vPortExitCritical+0x48>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a07      	ldr	r2, [pc, #28]	; (8006208 <vPortExitCritical+0x48>)
 80061ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <vPortExitCritical+0x48>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <vPortExitCritical+0x3e>
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	2000000c 	.word	0x2000000c
 800620c:	00000000 	.word	0x00000000

08006210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006210:	f3ef 8009 	mrs	r0, PSP
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <pxCurrentTCBConst>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006226:	f04f 0050 	mov.w	r0, #80	; 0x50
 800622a:	f380 8811 	msr	BASEPRI, r0
 800622e:	f7ff fa33 	bl	8005698 <vTaskSwitchContext>
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8811 	msr	BASEPRI, r0
 800623a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	6808      	ldr	r0, [r1, #0]
 8006242:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006246:	f380 8809 	msr	PSP, r0
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	4770      	bx	lr

08006250 <pxCurrentTCBConst>:
 8006250:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop

08006258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006270:	f001 fcf2 	bl	8007c58 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006274:	f7ff f950 	bl	8005518 <xTaskIncrementTick>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d006      	beq.n	800628c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800627e:	f001 fd49 	bl	8007d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <SysTick_Handler+0x4c>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e001      	b.n	8006290 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800628c:	f001 fd26 	bl	8007cdc <SEGGER_SYSVIEW_RecordExitISR>
 8006290:	2300      	movs	r3, #0
 8006292:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <vPortSetupTimerInterrupt+0x30>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <vPortSetupTimerInterrupt+0x34>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <vPortSetupTimerInterrupt+0x38>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <vPortSetupTimerInterrupt+0x3c>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	099b      	lsrs	r3, r3, #6
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <vPortSetupTimerInterrupt+0x40>)
 80062c6:	3b01      	subs	r3, #1
 80062c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ca:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <vPortSetupTimerInterrupt+0x30>)
 80062cc:	2207      	movs	r2, #7
 80062ce:	601a      	str	r2, [r3, #0]
}
 80062d0:	bf00      	nop
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	e000e010 	.word	0xe000e010
 80062dc:	e000e018 	.word	0xe000e018
 80062e0:	20000000 	.word	0x20000000
 80062e4:	10624dd3 	.word	0x10624dd3
 80062e8:	e000e014 	.word	0xe000e014

080062ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062f2:	f3ef 8305 	mrs	r3, IPSR
 80062f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b0f      	cmp	r3, #15
 80062fc:	d913      	bls.n	8006326 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <vPortValidateInterruptPriority+0x68>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006308:	4b13      	ldr	r3, [pc, #76]	; (8006358 <vPortValidateInterruptPriority+0x6c>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	7afa      	ldrb	r2, [r7, #11]
 800630e:	429a      	cmp	r2, r3
 8006310:	d209      	bcs.n	8006326 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	e7fe      	b.n	8006324 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <vPortValidateInterruptPriority+0x70>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800632e:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <vPortValidateInterruptPriority+0x74>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d909      	bls.n	800634a <vPortValidateInterruptPriority+0x5e>
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	e7fe      	b.n	8006348 <vPortValidateInterruptPriority+0x5c>
	}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	e000e3f0 	.word	0xe000e3f0
 8006358:	200003b0 	.word	0x200003b0
 800635c:	e000ed0c 	.word	0xe000ed0c
 8006360:	200003b4 	.word	0x200003b4

08006364 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006370:	f7ff f804 	bl	800537c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006374:	4b57      	ldr	r3, [pc, #348]	; (80064d4 <pvPortMalloc+0x170>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800637c:	f000 f90c 	bl	8006598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006380:	4b55      	ldr	r3, [pc, #340]	; (80064d8 <pvPortMalloc+0x174>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 808c 	bne.w	80064a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01c      	beq.n	80063ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006394:	2208      	movs	r2, #8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d013      	beq.n	80063ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	3308      	adds	r3, #8
 80063ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <pvPortMalloc+0x6a>
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e7fe      	b.n	80063cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d068      	beq.n	80064a6 <pvPortMalloc+0x142>
 80063d4:	4b41      	ldr	r3, [pc, #260]	; (80064dc <pvPortMalloc+0x178>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d863      	bhi.n	80064a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063de:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <pvPortMalloc+0x17c>)
 80063e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063e2:	4b3f      	ldr	r3, [pc, #252]	; (80064e0 <pvPortMalloc+0x17c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e8:	e004      	b.n	80063f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d903      	bls.n	8006406 <pvPortMalloc+0xa2>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f1      	bne.n	80063ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <pvPortMalloc+0x170>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640c:	429a      	cmp	r2, r3
 800640e:	d04a      	beq.n	80064a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2208      	movs	r2, #8
 8006416:	4413      	add	r3, r2
 8006418:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	2308      	movs	r3, #8
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	429a      	cmp	r2, r3
 8006430:	d91e      	bls.n	8006470 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4413      	add	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <pvPortMalloc+0xf4>
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	e7fe      	b.n	8006456 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800646a:	69b8      	ldr	r0, [r7, #24]
 800646c:	f000 f8f6 	bl	800665c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <pvPortMalloc+0x178>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <pvPortMalloc+0x178>)
 800647c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <pvPortMalloc+0x178>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <pvPortMalloc+0x180>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <pvPortMalloc+0x178>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <pvPortMalloc+0x180>)
 8006490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <pvPortMalloc+0x174>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	431a      	orrs	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064a6:	f7fe ff77 	bl	8005398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <pvPortMalloc+0x164>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e7fe      	b.n	80064c6 <pvPortMalloc+0x162>
	return pvReturn;
 80064c8:	69fb      	ldr	r3, [r7, #28]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3728      	adds	r7, #40	; 0x28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20001bc0 	.word	0x20001bc0
 80064d8:	20001bcc 	.word	0x20001bcc
 80064dc:	20001bc4 	.word	0x20001bc4
 80064e0:	20001bb8 	.word	0x20001bb8
 80064e4:	20001bc8 	.word	0x20001bc8

080064e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d046      	beq.n	8006588 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064fa:	2308      	movs	r3, #8
 80064fc:	425b      	negs	r3, r3
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b20      	ldr	r3, [pc, #128]	; (8006590 <vPortFree+0xa8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <vPortFree+0x42>
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e7fe      	b.n	8006528 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <vPortFree+0x5e>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	e7fe      	b.n	8006544 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <vPortFree+0xa8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d019      	beq.n	8006588 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d115      	bne.n	8006588 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortFree+0xa8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	43db      	mvns	r3, r3
 8006566:	401a      	ands	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800656c:	f7fe ff06 	bl	800537c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <vPortFree+0xac>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4413      	add	r3, r2
 800657a:	4a06      	ldr	r2, [pc, #24]	; (8006594 <vPortFree+0xac>)
 800657c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800657e:	6938      	ldr	r0, [r7, #16]
 8006580:	f000 f86c 	bl	800665c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006584:	f7fe ff08 	bl	8005398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006588:	bf00      	nop
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20001bcc 	.word	0x20001bcc
 8006594:	20001bc4 	.word	0x20001bc4

08006598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80065a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a4:	4b27      	ldr	r3, [pc, #156]	; (8006644 <prvHeapInit+0xac>)
 80065a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3307      	adds	r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0307 	bic.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <prvHeapInit+0xac>)
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065d0:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <prvHeapInit+0xb0>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d6:	4b1c      	ldr	r3, [pc, #112]	; (8006648 <prvHeapInit+0xb0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e4:	2208      	movs	r2, #8
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <prvHeapInit+0xb4>)
 80065f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <prvHeapInit+0xb4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006602:	4b12      	ldr	r3, [pc, #72]	; (800664c <prvHeapInit+0xb4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <prvHeapInit+0xb4>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <prvHeapInit+0xb8>)
 8006626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a09      	ldr	r2, [pc, #36]	; (8006654 <prvHeapInit+0xbc>)
 800662e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <prvHeapInit+0xc0>)
 8006632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006636:	601a      	str	r2, [r3, #0]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200003b8 	.word	0x200003b8
 8006648:	20001bb8 	.word	0x20001bb8
 800664c:	20001bc0 	.word	0x20001bc0
 8006650:	20001bc8 	.word	0x20001bc8
 8006654:	20001bc4 	.word	0x20001bc4
 8006658:	20001bcc 	.word	0x20001bcc

0800665c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006664:	4b27      	ldr	r3, [pc, #156]	; (8006704 <prvInsertBlockIntoFreeList+0xa8>)
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e002      	b.n	8006670 <prvInsertBlockIntoFreeList+0x14>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	429a      	cmp	r2, r3
 8006678:	d8f7      	bhi.n	800666a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d108      	bne.n	800669e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	441a      	add	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d118      	bne.n	80066e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <prvInsertBlockIntoFreeList+0xac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d00d      	beq.n	80066da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e008      	b.n	80066ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <prvInsertBlockIntoFreeList+0xac>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e003      	b.n	80066ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d002      	beq.n	80066fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	20001bb8 	.word	0x20001bb8
 8006708:	20001bc0 	.word	0x20001bc0

0800670c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006710:	4803      	ldr	r0, [pc, #12]	; (8006720 <_cbSendSystemDesc+0x14>)
 8006712:	f001 fa4d 	bl	8007bb0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006716:	4803      	ldr	r0, [pc, #12]	; (8006724 <_cbSendSystemDesc+0x18>)
 8006718:	f001 fa4a 	bl	8007bb0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800671c:	bf00      	nop
 800671e:	bd80      	pop	{r7, pc}
 8006720:	08008368 	.word	0x08008368
 8006724:	08008398 	.word	0x08008398

08006728 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <SEGGER_SYSVIEW_Conf+0x20>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <SEGGER_SYSVIEW_Conf+0x20>)
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <SEGGER_SYSVIEW_Conf+0x24>)
 8006736:	4a06      	ldr	r2, [pc, #24]	; (8006750 <SEGGER_SYSVIEW_Conf+0x28>)
 8006738:	f000 fdba 	bl	80072b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800673c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006740:	f000 fdfa 	bl	8007338 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006744:	bf00      	nop
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000000 	.word	0x20000000
 800674c:	0800670d 	.word	0x0800670d
 8006750:	08008438 	.word	0x08008438

08006754 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b085      	sub	sp, #20
 8006758:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	e034      	b.n	80067ca <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006760:	491e      	ldr	r1, [pc, #120]	; (80067dc <_cbSendTaskList+0x88>)
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	491a      	ldr	r1, [pc, #104]	; (80067dc <_cbSendTaskList+0x88>)
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	3304      	adds	r3, #4
 8006780:	681c      	ldr	r4, [r3, #0]
 8006782:	4916      	ldr	r1, [pc, #88]	; (80067dc <_cbSendTaskList+0x88>)
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3308      	adds	r3, #8
 8006792:	681d      	ldr	r5, [r3, #0]
 8006794:	4911      	ldr	r1, [pc, #68]	; (80067dc <_cbSendTaskList+0x88>)
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	330c      	adds	r3, #12
 80067a4:	681e      	ldr	r6, [r3, #0]
 80067a6:	490d      	ldr	r1, [pc, #52]	; (80067dc <_cbSendTaskList+0x88>)
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3310      	adds	r3, #16
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4633      	mov	r3, r6
 80067bc:	462a      	mov	r2, r5
 80067be:	4621      	mov	r1, r4
 80067c0:	f000 f970 	bl	8006aa4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3301      	adds	r3, #1
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <_cbSendTaskList+0x8c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d3c5      	bcc.n	8006760 <_cbSendTaskList+0xc>
  }
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067dc:	20001bd0 	.word	0x20001bd0
 80067e0:	20001c70 	.word	0x20001c70

080067e4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80067e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80067ea:	f7fe fe83 	bl	80054f4 <xTaskGetTickCountFromISR>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80067f8:	e9d7 5600 	ldrd	r5, r6, [r7]
 80067fc:	462b      	mov	r3, r5
 80067fe:	4634      	mov	r4, r6
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	0162      	lsls	r2, r4, #5
 800680a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800680e:	0159      	lsls	r1, r3, #5
 8006810:	460b      	mov	r3, r1
 8006812:	4614      	mov	r4, r2
 8006814:	1b5b      	subs	r3, r3, r5
 8006816:	eb64 0406 	sbc.w	r4, r4, r6
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	00a2      	lsls	r2, r4, #2
 8006824:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006828:	0099      	lsls	r1, r3, #2
 800682a:	460b      	mov	r3, r1
 800682c:	4614      	mov	r4, r2
 800682e:	195b      	adds	r3, r3, r5
 8006830:	eb44 0406 	adc.w	r4, r4, r6
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	00e2      	lsls	r2, r4, #3
 800683e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006842:	00d9      	lsls	r1, r3, #3
 8006844:	460b      	mov	r3, r1
 8006846:	4614      	mov	r4, r2
 8006848:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800684c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006850:	4618      	mov	r0, r3
 8006852:	4621      	mov	r1, r4
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800685c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800686a:	2205      	movs	r2, #5
 800686c:	492b      	ldr	r1, [pc, #172]	; (800691c <SYSVIEW_AddTask+0xc0>)
 800686e:	68b8      	ldr	r0, [r7, #8]
 8006870:	f001 fd1a 	bl	80082a8 <memcmp>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04b      	beq.n	8006912 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800687a:	4b29      	ldr	r3, [pc, #164]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b07      	cmp	r3, #7
 8006880:	d903      	bls.n	800688a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006882:	4828      	ldr	r0, [pc, #160]	; (8006924 <SYSVIEW_AddTask+0xc8>)
 8006884:	f001 fc90 	bl	80081a8 <SEGGER_SYSVIEW_Warn>
    return;
 8006888:	e044      	b.n	8006914 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800688a:	4b25      	ldr	r3, [pc, #148]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4926      	ldr	r1, [pc, #152]	; (8006928 <SYSVIEW_AddTask+0xcc>)
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800689e:	4b20      	ldr	r3, [pc, #128]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4921      	ldr	r1, [pc, #132]	; (8006928 <SYSVIEW_AddTask+0xcc>)
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3304      	adds	r3, #4
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80068b4:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	491b      	ldr	r1, [pc, #108]	; (8006928 <SYSVIEW_AddTask+0xcc>)
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	3308      	adds	r3, #8
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80068ca:	4b15      	ldr	r3, [pc, #84]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4916      	ldr	r1, [pc, #88]	; (8006928 <SYSVIEW_AddTask+0xcc>)
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	330c      	adds	r3, #12
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4910      	ldr	r1, [pc, #64]	; (8006928 <SYSVIEW_AddTask+0xcc>)
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3310      	adds	r3, #16
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	4a08      	ldr	r2, [pc, #32]	; (8006920 <SYSVIEW_AddTask+0xc4>)
 80068fe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f8ca 	bl	8006aa4 <SYSVIEW_SendTaskInfo>
 8006910:	e000      	b.n	8006914 <SYSVIEW_AddTask+0xb8>
    return;
 8006912:	bf00      	nop

}
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	080083a8 	.word	0x080083a8
 8006920:	20001c70 	.word	0x20001c70
 8006924:	080083b0 	.word	0x080083b0
 8006928:	20001bd0 	.word	0x20001bd0

0800692c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8006934:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80ab 	beq.w	8006a94 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e00d      	b.n	8006960 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8006944:	4956      	ldr	r1, [pc, #344]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d008      	beq.n	800696c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	4b4e      	ldr	r3, [pc, #312]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d3ec      	bcc.n	8006944 <SYSVIEW_DeleteTask+0x18>
 800696a:	e000      	b.n	800696e <SYSVIEW_DeleteTask+0x42>
      break;
 800696c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800696e:	4b4b      	ldr	r3, [pc, #300]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3b01      	subs	r3, #1
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	429a      	cmp	r2, r3
 8006978:	d111      	bne.n	800699e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4a46      	ldr	r2, [pc, #280]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006986:	4413      	add	r3, r2
 8006988:	2214      	movs	r2, #20
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f001 fca5 	bl	80082dc <memset>
    _NumTasks--;
 8006992:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3b01      	subs	r3, #1
 8006998:	4a40      	ldr	r2, [pc, #256]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e07b      	b.n	8006a96 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d276      	bcs.n	8006a96 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80069a8:	4b3c      	ldr	r3, [pc, #240]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	1e5a      	subs	r2, r3, #1
 80069ae:	493c      	ldr	r1, [pc, #240]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	4838      	ldr	r0, [pc, #224]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4403      	add	r3, r0
 80069ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80069cc:	4b33      	ldr	r3, [pc, #204]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	4933      	ldr	r1, [pc, #204]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	3304      	adds	r3, #4
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	482f      	ldr	r0, [pc, #188]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4403      	add	r3, r0
 80069f0:	3304      	adds	r3, #4
 80069f2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	1e5a      	subs	r2, r3, #1
 80069fa:	4929      	ldr	r1, [pc, #164]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	3308      	adds	r3, #8
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	4825      	ldr	r0, [pc, #148]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4403      	add	r3, r0
 8006a18:	3308      	adds	r3, #8
 8006a1a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8006a1c:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	491f      	ldr	r1, [pc, #124]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	330c      	adds	r3, #12
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	481b      	ldr	r0, [pc, #108]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4403      	add	r3, r0
 8006a40:	330c      	adds	r3, #12
 8006a42:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	1e5a      	subs	r2, r3, #1
 8006a4a:	4915      	ldr	r1, [pc, #84]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	3310      	adds	r3, #16
 8006a58:	6819      	ldr	r1, [r3, #0]
 8006a5a:	4811      	ldr	r0, [pc, #68]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4403      	add	r3, r0
 8006a68:	3310      	adds	r3, #16
 8006a6a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	1e5a      	subs	r2, r3, #1
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <SYSVIEW_DeleteTask+0x174>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	2214      	movs	r2, #20
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fc2a 	bl	80082dc <memset>
    _NumTasks--;
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a03      	ldr	r2, [pc, #12]	; (8006a9c <SYSVIEW_DeleteTask+0x170>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e000      	b.n	8006a96 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006a94:	bf00      	nop
  }
}
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20001c70 	.word	0x20001c70
 8006aa0:	20001bd0 	.word	0x20001bd0

08006aa4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	; 0x28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	2214      	movs	r2, #20
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fc0e 	bl	80082dc <memset>
  TaskInfo.TaskID     = TaskID;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ff71 	bl	80079c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006ade:	bf00      	nop
 8006ae0:	3728      	adds	r7, #40	; 0x28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006aee:	4b21      	ldr	r3, [pc, #132]	; (8006b74 <_DoInit+0x8c>)
 8006af0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2203      	movs	r2, #3
 8006af6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2203      	movs	r2, #3
 8006afc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <_DoInit+0x90>)
 8006b02:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1d      	ldr	r2, [pc, #116]	; (8006b7c <_DoInit+0x94>)
 8006b08:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b10:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <_DoInit+0x90>)
 8006b28:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <_DoInit+0x98>)
 8006b2e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2210      	movs	r2, #16
 8006b34:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3307      	adds	r3, #7
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <_DoInit+0x9c>)
 8006b4e:	6810      	ldr	r0, [r2, #0]
 8006b50:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <_DoInit+0xa0>)
 8006b56:	6810      	ldr	r0, [r2, #0]
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	8891      	ldrh	r1, [r2, #4]
 8006b5c:	7992      	ldrb	r2, [r2, #6]
 8006b5e:	8099      	strh	r1, [r3, #4]
 8006b60:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	200046fc 	.word	0x200046fc
 8006b78:	08008400 	.word	0x08008400
 8006b7c:	20001c74 	.word	0x20001c74
 8006b80:	20002074 	.word	0x20002074
 8006b84:	0800840c 	.word	0x0800840c
 8006b88:	08008410 	.word	0x08008410

08006b8c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <SEGGER_RTT_ReadNoLock+0x108>)
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <SEGGER_RTT_ReadNoLock+0x1e>
 8006ba6:	f7ff ff9f 	bl	8006ae8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3360      	adds	r3, #96	; 0x60
 8006bb6:	4a37      	ldr	r2, [pc, #220]	; (8006c94 <SEGGER_RTT_ReadNoLock+0x108>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d92b      	bls.n	8006c30 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bf28      	it	cs
 8006bea:	4613      	movcs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	4413      	add	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	6939      	ldr	r1, [r7, #16]
 8006bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bfe:	f001 fb62 	bl	80082c6 <memcpy>
    NumBytesRead += NumBytesRem;
 8006c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d101      	bne.n	8006c30 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	bf28      	it	cs
 8006c40:	4613      	movcs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d019      	beq.n	8006c7e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	4413      	add	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c5a:	f001 fb34 	bl	80082c6 <memcpy>
    NumBytesRead += NumBytesRem;
 8006c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200046fc 	.word	0x200046fc

08006c98 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006ca6:	4b3c      	ldr	r3, [pc, #240]	; (8006d98 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006cb4:	f7ff ff18 	bl	8006ae8 <_DoInit>
  SEGGER_RTT_LOCK();
 8006cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbc:	f04f 0120 	mov.w	r1, #32
 8006cc0:	f381 8811 	msr	BASEPRI, r1
 8006cc4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006cc6:	4b34      	ldr	r3, [pc, #208]	; (8006d98 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8006cc8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006cce:	6939      	ldr	r1, [r7, #16]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	440b      	add	r3, r1
 8006cde:	3304      	adds	r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	dbeb      	blt.n	8006cce <SEGGER_RTT_AllocUpBuffer+0x36>
 8006cf6:	e000      	b.n	8006cfa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006cf8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	da3d      	bge.n	8006d80 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006d04:	6939      	ldr	r1, [r7, #16]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	440b      	add	r3, r1
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006d18:	6939      	ldr	r1, [r7, #16]
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	440b      	add	r3, r1
 8006d28:	3304      	adds	r3, #4
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006d2e:	6939      	ldr	r1, [r7, #16]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3320      	adds	r3, #32
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006d42:	6939      	ldr	r1, [r7, #16]
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	3328      	adds	r3, #40	; 0x28
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006d56:	6939      	ldr	r1, [r7, #16]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	440b      	add	r3, r1
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	440b      	add	r3, r1
 8006d78:	332c      	adds	r3, #44	; 0x2c
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200046fc 	.word	0x200046fc

08006d9c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006daa:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006db8:	f7ff fe96 	bl	8006ae8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8006dbe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d24b      	bcs.n	8006e64 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 8006dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd0:	f04f 0120 	mov.w	r1, #32
 8006dd4:	f381 8811 	msr	BASEPRI, r1
 8006dd8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d031      	beq.n	8006e44 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	3360      	adds	r3, #96	; 0x60
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	440b      	add	r3, r1
 8006e02:	3364      	adds	r3, #100	; 0x64
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006e08:	6979      	ldr	r1, [r7, #20]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	440b      	add	r3, r1
 8006e16:	3368      	adds	r3, #104	; 0x68
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	440b      	add	r3, r1
 8006e2a:	3370      	adds	r3, #112	; 0x70
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006e30:	6979      	ldr	r1, [r7, #20]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4613      	mov	r3, r2
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	440b      	add	r3, r1
 8006e3e:	336c      	adds	r3, #108	; 0x6c
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	440b      	add	r3, r1
 8006e52:	3374      	adds	r3, #116	; 0x74
 8006e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e56:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e002      	b.n	8006e6a <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	200046fc 	.word	0x200046fc

08006e78 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006e88:	e002      	b.n	8006e90 <_EncodeStr+0x18>
    Len++;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4413      	add	r3, r2
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f6      	bne.n	8006e8a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d901      	bls.n	8006ea8 <_EncodeStr+0x30>
    Len = Limit;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2bfe      	cmp	r3, #254	; 0xfe
 8006eac:	d806      	bhi.n	8006ebc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	60fa      	str	r2, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e011      	b.n	8006ee0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	60fa      	str	r2, [r7, #12]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	0a19      	lsrs	r1, r3, #8
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	60fa      	str	r2, [r7, #12]
 8006edc:	b2ca      	uxtb	r2, r1
 8006ede:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006ee4:	e00a      	b.n	8006efc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	1c53      	adds	r3, r2, #1
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	60f9      	str	r1, [r7, #12]
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	701a      	strb	r2, [r3, #0]
    n++;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d3f0      	bcc.n	8006ee6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006f04:	68fb      	ldr	r3, [r7, #12]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
	...

08006f28 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006f2e:	4b33      	ldr	r3, [pc, #204]	; (8006ffc <_HandleIncomingPacket+0xd4>)
 8006f30:	7e1b      	ldrb	r3, [r3, #24]
 8006f32:	4618      	mov	r0, r3
 8006f34:	1cfb      	adds	r3, r7, #3
 8006f36:	2201      	movs	r2, #1
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7ff fe27 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd4d      	ble.n	8006fe4 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d022      	beq.n	8006f94 <_HandleIncomingPacket+0x6c>
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	dc0b      	bgt.n	8006f6a <_HandleIncomingPacket+0x42>
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d015      	beq.n	8006f82 <_HandleIncomingPacket+0x5a>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	dc02      	bgt.n	8006f60 <_HandleIncomingPacket+0x38>
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d00e      	beq.n	8006f7c <_HandleIncomingPacket+0x54>
 8006f5e:	e034      	b.n	8006fca <_HandleIncomingPacket+0xa2>
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d011      	beq.n	8006f88 <_HandleIncomingPacket+0x60>
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d012      	beq.n	8006f8e <_HandleIncomingPacket+0x66>
 8006f68:	e02f      	b.n	8006fca <_HandleIncomingPacket+0xa2>
 8006f6a:	2b07      	cmp	r3, #7
 8006f6c:	d018      	beq.n	8006fa0 <_HandleIncomingPacket+0x78>
 8006f6e:	2b07      	cmp	r3, #7
 8006f70:	db13      	blt.n	8006f9a <_HandleIncomingPacket+0x72>
 8006f72:	2b7f      	cmp	r3, #127	; 0x7f
 8006f74:	d038      	beq.n	8006fe8 <_HandleIncomingPacket+0xc0>
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d015      	beq.n	8006fa6 <_HandleIncomingPacket+0x7e>
 8006f7a:	e026      	b.n	8006fca <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006f7c:	f000 fba6 	bl	80076cc <SEGGER_SYSVIEW_Start>
      break;
 8006f80:	e037      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006f82:	f000 fc5d 	bl	8007840 <SEGGER_SYSVIEW_Stop>
      break;
 8006f86:	e034      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006f88:	f000 fe36 	bl	8007bf8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006f8c:	e031      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006f8e:	f000 fdfb 	bl	8007b88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006f92:	e02e      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006f94:	f000 fc7a 	bl	800788c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006f98:	e02b      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006f9a:	f001 f8c7 	bl	800812c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006f9e:	e028      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006fa0:	f001 f8a6 	bl	80080f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006fa4:	e025      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <_HandleIncomingPacket+0xd4>)
 8006fa8:	7e1b      	ldrb	r3, [r3, #24]
 8006faa:	4618      	mov	r0, r3
 8006fac:	1cfb      	adds	r3, r7, #3
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f7ff fdeb 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd15      	ble.n	8006fec <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 f814 	bl	8007ff0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006fc8:	e010      	b.n	8006fec <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da0e      	bge.n	8006ff0 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <_HandleIncomingPacket+0xd4>)
 8006fd4:	7e1b      	ldrb	r3, [r3, #24]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	1cfb      	adds	r3, r7, #3
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f7ff fdd5 	bl	8006b8c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006fe2:	e005      	b.n	8006ff0 <_HandleIncomingPacket+0xc8>
    }
  }
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
      break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <_HandleIncomingPacket+0xca>
      break;
 8006ff0:	bf00      	nop
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000448c 	.word	0x2000448c

08007000 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007006:	2301      	movs	r3, #1
 8007008:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	3301      	adds	r3, #1
 800700e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007014:	4b31      	ldr	r3, [pc, #196]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
 800701a:	e00b      	b.n	8007034 <_TrySendOverflowPacket+0x34>
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	b2da      	uxtb	r2, r3
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	09db      	lsrs	r3, r3, #7
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b7f      	cmp	r3, #127	; 0x7f
 8007038:	d8f0      	bhi.n	800701c <_TrySendOverflowPacket+0x1c>
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800704a:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <_TrySendOverflowPacket+0xe0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007050:	4b22      	ldr	r3, [pc, #136]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	e00b      	b.n	800707c <_TrySendOverflowPacket+0x7c>
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	1c59      	adds	r1, r3, #1
 800706c:	6279      	str	r1, [r7, #36]	; 0x24
 800706e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	09db      	lsrs	r3, r3, #7
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2b7f      	cmp	r3, #127	; 0x7f
 8007080:	d8f0      	bhi.n	8007064 <_TrySendOverflowPacket+0x64>
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	627a      	str	r2, [r7, #36]	; 0x24
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	4618      	mov	r0, r3
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	1d3b      	adds	r3, r7, #4
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	1d3b      	adds	r3, r7, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	f7f9 f854 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80070a8:	4603      	mov	r3, r0
 80070aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80070b2:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80070b8:	4b08      	ldr	r3, [pc, #32]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e004      	b.n	80070d0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	3301      	adds	r3, #1
 80070cc:	4a03      	ldr	r2, [pc, #12]	; (80070dc <_TrySendOverflowPacket+0xdc>)
 80070ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80070d0:	693b      	ldr	r3, [r7, #16]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3730      	adds	r7, #48	; 0x30
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	2000448c 	.word	0x2000448c
 80070e0:	e0001004 	.word	0xe0001004

080070e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80070f0:	4b6c      	ldr	r3, [pc, #432]	; (80072a4 <_SendPacket+0x1c0>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d010      	beq.n	800711a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80070f8:	4b6a      	ldr	r3, [pc, #424]	; (80072a4 <_SendPacket+0x1c0>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 80a3 	beq.w	8007248 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007102:	4b68      	ldr	r3, [pc, #416]	; (80072a4 <_SendPacket+0x1c0>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d109      	bne.n	800711e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800710a:	f7ff ff79 	bl	8007000 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800710e:	4b65      	ldr	r3, [pc, #404]	; (80072a4 <_SendPacket+0x1c0>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b01      	cmp	r3, #1
 8007114:	f040 809a 	bne.w	800724c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007118:	e001      	b.n	800711e <_SendPacket+0x3a>
    goto Send;
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <_SendPacket+0x3c>
Send:
 800711e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b1f      	cmp	r3, #31
 8007124:	d809      	bhi.n	800713a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007126:	4b5f      	ldr	r3, [pc, #380]	; (80072a4 <_SendPacket+0x1c0>)
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 808b 	bne.w	8007250 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b17      	cmp	r3, #23
 800713e:	d807      	bhi.n	8007150 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3b01      	subs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e03d      	b.n	80071cc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b7f      	cmp	r3, #127	; 0x7f
 800715c:	d912      	bls.n	8007184 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	09da      	lsrs	r2, r3, #7
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3b01      	subs	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	3a01      	subs	r2, #1
 8007176:	60fa      	str	r2, [r7, #12]
 8007178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e006      	b.n	8007192 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3b01      	subs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b7f      	cmp	r3, #127	; 0x7f
 8007196:	d912      	bls.n	80071be <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	09da      	lsrs	r2, r3, #7
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b01      	subs	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	3a01      	subs	r2, #1
 80071b0:	60fa      	str	r2, [r7, #12]
 80071b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e006      	b.n	80071cc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80071cc:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <_SendPacket+0x1c4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80071d2:	4b34      	ldr	r3, [pc, #208]	; (80072a4 <_SendPacket+0x1c0>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	e00b      	b.n	80071fe <_SendPacket+0x11a>
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	1c59      	adds	r1, r3, #1
 80071ee:	6279      	str	r1, [r7, #36]	; 0x24
 80071f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	09db      	lsrs	r3, r3, #7
 80071fc:	623b      	str	r3, [r7, #32]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	2b7f      	cmp	r3, #127	; 0x7f
 8007202:	d8f0      	bhi.n	80071e6 <_SendPacket+0x102>
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	627a      	str	r2, [r7, #36]	; 0x24
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <_SendPacket+0x1c0>)
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	4618      	mov	r0, r3
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	461a      	mov	r2, r3
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f7f8 ff94 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007228:	4603      	mov	r3, r0
 800722a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007232:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <_SendPacket+0x1c0>)
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	60d3      	str	r3, [r2, #12]
 8007238:	e00b      	b.n	8007252 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800723a:	4b1a      	ldr	r3, [pc, #104]	; (80072a4 <_SendPacket+0x1c0>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <_SendPacket+0x1c0>)
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e004      	b.n	8007252 <_SendPacket+0x16e>
    goto SendDone;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <_SendPacket+0x16e>
      goto SendDone;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <_SendPacket+0x16e>
      goto SendDone;
 8007250:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007252:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <_SendPacket+0x1c0>)
 8007254:	7e1b      	ldrb	r3, [r3, #24]
 8007256:	4619      	mov	r1, r3
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <_SendPacket+0x1c8>)
 800725a:	460b      	mov	r3, r1
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	440b      	add	r3, r1
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	336c      	adds	r3, #108	; 0x6c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <_SendPacket+0x1c0>)
 800726a:	7e1b      	ldrb	r3, [r3, #24]
 800726c:	4618      	mov	r0, r3
 800726e:	490f      	ldr	r1, [pc, #60]	; (80072ac <_SendPacket+0x1c8>)
 8007270:	4603      	mov	r3, r0
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4403      	add	r3, r0
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	440b      	add	r3, r1
 800727a:	3370      	adds	r3, #112	; 0x70
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d00b      	beq.n	800729a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <_SendPacket+0x1c0>)
 8007284:	789b      	ldrb	r3, [r3, #2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <_SendPacket+0x1c0>)
 800728c:	2201      	movs	r2, #1
 800728e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007290:	f7ff fe4a 	bl	8006f28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007294:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <_SendPacket+0x1c0>)
 8007296:	2200      	movs	r2, #0
 8007298:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800729a:	bf00      	nop
 800729c:	3728      	adds	r7, #40	; 0x28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2000448c 	.word	0x2000448c
 80072a8:	e0001004 	.word	0xe0001004
 80072ac:	200046fc 	.word	0x200046fc

080072b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80072be:	2300      	movs	r3, #0
 80072c0:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80072c4:	4917      	ldr	r1, [pc, #92]	; (8007324 <SEGGER_SYSVIEW_Init+0x74>)
 80072c6:	4818      	ldr	r0, [pc, #96]	; (8007328 <SEGGER_SYSVIEW_Init+0x78>)
 80072c8:	f7ff fce6 	bl	8006c98 <SEGGER_RTT_AllocUpBuffer>
 80072cc:	4603      	mov	r3, r0
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b16      	ldr	r3, [pc, #88]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80072d4:	4b15      	ldr	r3, [pc, #84]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	4b14      	ldr	r3, [pc, #80]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072de:	7e1b      	ldrb	r3, [r3, #24]
 80072e0:	4618      	mov	r0, r3
 80072e2:	2300      	movs	r3, #0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2308      	movs	r3, #8
 80072e8:	4a11      	ldr	r2, [pc, #68]	; (8007330 <SEGGER_SYSVIEW_Init+0x80>)
 80072ea:	490f      	ldr	r1, [pc, #60]	; (8007328 <SEGGER_SYSVIEW_Init+0x78>)
 80072ec:	f7ff fd56 	bl	8006d9c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <SEGGER_SYSVIEW_Init+0x84>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a0c      	ldr	r2, [pc, #48]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 80072fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80072fe:	4a0b      	ldr	r2, [pc, #44]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007304:	4a09      	ldr	r2, [pc, #36]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007310:	4a06      	ldr	r2, [pc, #24]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <SEGGER_SYSVIEW_Init+0x7c>)
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20002084 	.word	0x20002084
 8007328:	08008418 	.word	0x08008418
 800732c:	2000448c 	.word	0x2000448c
 8007330:	20004484 	.word	0x20004484
 8007334:	e0001004 	.word	0xe0001004

08007338 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007340:	4a03      	ldr	r2, [pc, #12]	; (8007350 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6113      	str	r3, [r2, #16]
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	2000448c 	.word	0x2000448c

08007354 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800735c:	f3ef 8311 	mrs	r3, BASEPRI
 8007360:	f04f 0120 	mov.w	r1, #32
 8007364:	f381 8811 	msr	BASEPRI, r1
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4808      	ldr	r0, [pc, #32]	; (800738c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800736c:	f7ff fdd0 	bl	8006f10 <_PreparePacket>
 8007370:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	68b8      	ldr	r0, [r7, #8]
 8007378:	f7ff feb4 	bl	80070e4 <_SendPacket>
  RECORD_END();
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f383 8811 	msr	BASEPRI, r3
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200044bc 	.word	0x200044bc

08007390 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800739a:	f3ef 8311 	mrs	r3, BASEPRI
 800739e:	f04f 0120 	mov.w	r1, #32
 80073a2:	f381 8811 	msr	BASEPRI, r1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	4816      	ldr	r0, [pc, #88]	; (8007404 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80073aa:	f7ff fdb1 	bl	8006f10 <_PreparePacket>
 80073ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e00b      	b.n	80073d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	61f9      	str	r1, [r7, #28]
 80073c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	09db      	lsrs	r3, r3, #7
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b7f      	cmp	r3, #127	; 0x7f
 80073da:	d8f0      	bhi.n	80073be <SEGGER_SYSVIEW_RecordU32+0x2e>
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	61fa      	str	r2, [r7, #28]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	6938      	ldr	r0, [r7, #16]
 80073f2:	f7ff fe77 	bl	80070e4 <_SendPacket>
  RECORD_END();
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f383 8811 	msr	BASEPRI, r3
}
 80073fc:	bf00      	nop
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200044bc 	.word	0x200044bc

08007408 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	; 0x30
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007414:	f3ef 8311 	mrs	r3, BASEPRI
 8007418:	f04f 0120 	mov.w	r1, #32
 800741c:	f381 8811 	msr	BASEPRI, r1
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	4825      	ldr	r0, [pc, #148]	; (80074b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007424:	f7ff fd74 	bl	8006f10 <_PreparePacket>
 8007428:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
 8007436:	e00b      	b.n	8007450 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	09db      	lsrs	r3, r3, #7
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	2b7f      	cmp	r3, #127	; 0x7f
 8007454:	d8f0      	bhi.n	8007438 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800745c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	e00b      	b.n	8007488 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	b2da      	uxtb	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	6279      	str	r1, [r7, #36]	; 0x24
 800747a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	09db      	lsrs	r3, r3, #7
 8007486:	623b      	str	r3, [r7, #32]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2b7f      	cmp	r3, #127	; 0x7f
 800748c:	d8f0      	bhi.n	8007470 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	627a      	str	r2, [r7, #36]	; 0x24
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	69b8      	ldr	r0, [r7, #24]
 80074a4:	f7ff fe1e 	bl	80070e4 <_SendPacket>
  RECORD_END();
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
 80074b0:	3730      	adds	r7, #48	; 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	200044bc 	.word	0x200044bc

080074bc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80074ca:	f3ef 8311 	mrs	r3, BASEPRI
 80074ce:	f04f 0120 	mov.w	r1, #32
 80074d2:	f381 8811 	msr	BASEPRI, r1
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	4832      	ldr	r0, [pc, #200]	; (80075a4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80074da:	f7ff fd19 	bl	8006f10 <_PreparePacket>
 80074de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	633b      	str	r3, [r7, #48]	; 0x30
 80074ec:	e00b      	b.n	8007506 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	6379      	str	r1, [r7, #52]	; 0x34
 80074f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	09db      	lsrs	r3, r3, #7
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	2b7f      	cmp	r3, #127	; 0x7f
 800750a:	d8f0      	bhi.n	80074ee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	637a      	str	r2, [r7, #52]	; 0x34
 8007512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
 8007524:	e00b      	b.n	800753e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	b2da      	uxtb	r2, r3
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	1c59      	adds	r1, r3, #1
 800752e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	09db      	lsrs	r3, r3, #7
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	2b7f      	cmp	r3, #127	; 0x7f
 8007542:	d8f0      	bhi.n	8007526 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	62fa      	str	r2, [r7, #44]	; 0x2c
 800754a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	e00b      	b.n	8007576 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	6279      	str	r1, [r7, #36]	; 0x24
 8007568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	09db      	lsrs	r3, r3, #7
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	2b7f      	cmp	r3, #127	; 0x7f
 800757a:	d8f0      	bhi.n	800755e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	627a      	str	r2, [r7, #36]	; 0x24
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	69b8      	ldr	r0, [r7, #24]
 8007592:	f7ff fda7 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f383 8811 	msr	BASEPRI, r3
}
 800759c:	bf00      	nop
 800759e:	3738      	adds	r7, #56	; 0x38
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200044bc 	.word	0x200044bc

080075a8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b090      	sub	sp, #64	; 0x40
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80075b6:	f3ef 8311 	mrs	r3, BASEPRI
 80075ba:	f04f 0120 	mov.w	r1, #32
 80075be:	f381 8811 	msr	BASEPRI, r1
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	4840      	ldr	r0, [pc, #256]	; (80076c8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80075c6:	f7ff fca3 	bl	8006f10 <_PreparePacket>
 80075ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d8:	e00b      	b.n	80075f2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e0:	1c59      	adds	r1, r3, #1
 80075e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80075e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	09db      	lsrs	r3, r3, #7
 80075f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	2b7f      	cmp	r3, #127	; 0x7f
 80075f6:	d8f0      	bhi.n	80075da <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80075fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	637b      	str	r3, [r7, #52]	; 0x34
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	633b      	str	r3, [r7, #48]	; 0x30
 8007610:	e00b      	b.n	800762a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	b2da      	uxtb	r2, r3
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	6379      	str	r1, [r7, #52]	; 0x34
 800761c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	09db      	lsrs	r3, r3, #7
 8007628:	633b      	str	r3, [r7, #48]	; 0x30
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2b7f      	cmp	r3, #127	; 0x7f
 800762e:	d8f0      	bhi.n	8007612 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	637a      	str	r2, [r7, #52]	; 0x34
 8007636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28
 8007648:	e00b      	b.n	8007662 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	1c59      	adds	r1, r3, #1
 8007652:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	09db      	lsrs	r3, r3, #7
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	2b7f      	cmp	r3, #127	; 0x7f
 8007666:	d8f0      	bhi.n	800764a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800766e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
 800767c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767e:	623b      	str	r3, [r7, #32]
 8007680:	e00b      	b.n	800769a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	b2da      	uxtb	r2, r3
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	6279      	str	r1, [r7, #36]	; 0x24
 800768c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	09db      	lsrs	r3, r3, #7
 8007698:	623b      	str	r3, [r7, #32]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	2b7f      	cmp	r3, #127	; 0x7f
 800769e:	d8f0      	bhi.n	8007682 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	627a      	str	r2, [r7, #36]	; 0x24
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	6979      	ldr	r1, [r7, #20]
 80076b4:	69b8      	ldr	r0, [r7, #24]
 80076b6:	f7ff fd15 	bl	80070e4 <_SendPacket>
  RECORD_END();
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f383 8811 	msr	BASEPRI, r3
}
 80076c0:	bf00      	nop
 80076c2:	3740      	adds	r7, #64	; 0x40
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200044bc 	.word	0x200044bc

080076cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08c      	sub	sp, #48	; 0x30
 80076d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80076d2:	4b58      	ldr	r3, [pc, #352]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80076d8:	f3ef 8311 	mrs	r3, BASEPRI
 80076dc:	f04f 0120 	mov.w	r1, #32
 80076e0:	f381 8811 	msr	BASEPRI, r1
 80076e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80076e6:	4b53      	ldr	r3, [pc, #332]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	220a      	movs	r2, #10
 80076ec:	4952      	ldr	r1, [pc, #328]	; (8007838 <SEGGER_SYSVIEW_Start+0x16c>)
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f8 fd2e 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80076fa:	200a      	movs	r0, #10
 80076fc:	f7ff fe2a 	bl	8007354 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007700:	f3ef 8311 	mrs	r3, BASEPRI
 8007704:	f04f 0120 	mov.w	r1, #32
 8007708:	f381 8811 	msr	BASEPRI, r1
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	484b      	ldr	r0, [pc, #300]	; (800783c <SEGGER_SYSVIEW_Start+0x170>)
 8007710:	f7ff fbfe 	bl	8006f10 <_PreparePacket>
 8007714:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771e:	4b45      	ldr	r3, [pc, #276]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
 8007724:	e00b      	b.n	800773e <SEGGER_SYSVIEW_Start+0x72>
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	1c59      	adds	r1, r3, #1
 800772e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	09db      	lsrs	r3, r3, #7
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	2b7f      	cmp	r3, #127	; 0x7f
 8007742:	d8f0      	bhi.n	8007726 <SEGGER_SYSVIEW_Start+0x5a>
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800774a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
 8007758:	4b36      	ldr	r3, [pc, #216]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	e00b      	b.n	8007778 <SEGGER_SYSVIEW_Start+0xac>
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	b2da      	uxtb	r2, r3
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	1c59      	adds	r1, r3, #1
 8007768:	6279      	str	r1, [r7, #36]	; 0x24
 800776a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	09db      	lsrs	r3, r3, #7
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2b7f      	cmp	r3, #127	; 0x7f
 800777c:	d8f0      	bhi.n	8007760 <SEGGER_SYSVIEW_Start+0x94>
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	627a      	str	r2, [r7, #36]	; 0x24
 8007784:	6a3a      	ldr	r2, [r7, #32]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	4b28      	ldr	r3, [pc, #160]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e00b      	b.n	80077b2 <SEGGER_SYSVIEW_Start+0xe6>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	1c59      	adds	r1, r3, #1
 80077a2:	61f9      	str	r1, [r7, #28]
 80077a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	09db      	lsrs	r3, r3, #7
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b7f      	cmp	r3, #127	; 0x7f
 80077b6:	d8f0      	bhi.n	800779a <SEGGER_SYSVIEW_Start+0xce>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	61fa      	str	r2, [r7, #28]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e00b      	b.n	80077ea <SEGGER_SYSVIEW_Start+0x11e>
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	1c59      	adds	r1, r3, #1
 80077da:	6179      	str	r1, [r7, #20]
 80077dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	09db      	lsrs	r3, r3, #7
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b7f      	cmp	r3, #127	; 0x7f
 80077ee:	d8f0      	bhi.n	80077d2 <SEGGER_SYSVIEW_Start+0x106>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	617a      	str	r2, [r7, #20]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007800:	2218      	movs	r2, #24
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fc6d 	bl	80070e4 <_SendPacket>
      RECORD_END();
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <SEGGER_SYSVIEW_Start+0x168>)
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800781e:	f000 f9eb 	bl	8007bf8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007822:	f000 f9b1 	bl	8007b88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007826:	f000 fc81 	bl	800812c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800782a:	bf00      	nop
 800782c:	3730      	adds	r7, #48	; 0x30
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	2000448c 	.word	0x2000448c
 8007838:	08008440 	.word	0x08008440
 800783c:	200044bc 	.word	0x200044bc

08007840 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007846:	f3ef 8311 	mrs	r3, BASEPRI
 800784a:	f04f 0120 	mov.w	r1, #32
 800784e:	f381 8811 	msr	BASEPRI, r1
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	480b      	ldr	r0, [pc, #44]	; (8007884 <SEGGER_SYSVIEW_Stop+0x44>)
 8007856:	f7ff fb5b 	bl	8006f10 <_PreparePacket>
 800785a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <SEGGER_SYSVIEW_Stop+0x48>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007864:	220b      	movs	r2, #11
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6838      	ldr	r0, [r7, #0]
 800786a:	f7ff fc3b 	bl	80070e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800786e:	4b06      	ldr	r3, [pc, #24]	; (8007888 <SEGGER_SYSVIEW_Stop+0x48>)
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f383 8811 	msr	BASEPRI, r3
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200044bc 	.word	0x200044bc
 8007888:	2000448c 	.word	0x2000448c

0800788c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	; 0x30
 8007890:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007892:	f3ef 8311 	mrs	r3, BASEPRI
 8007896:	f04f 0120 	mov.w	r1, #32
 800789a:	f381 8811 	msr	BASEPRI, r1
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	4845      	ldr	r0, [pc, #276]	; (80079b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80078a2:	f7ff fb35 	bl	8006f10 <_PreparePacket>
 80078a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b0:	4b42      	ldr	r3, [pc, #264]	; (80079bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078b6:	e00b      	b.n	80078d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	1c59      	adds	r1, r3, #1
 80078c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	09db      	lsrs	r3, r3, #7
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b7f      	cmp	r3, #127	; 0x7f
 80078d4:	d8f0      	bhi.n	80078b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ea:	4b34      	ldr	r3, [pc, #208]	; (80079bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	623b      	str	r3, [r7, #32]
 80078f0:	e00b      	b.n	800790a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	1c59      	adds	r1, r3, #1
 80078fa:	6279      	str	r1, [r7, #36]	; 0x24
 80078fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	09db      	lsrs	r3, r3, #7
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	2b7f      	cmp	r3, #127	; 0x7f
 800790e:	d8f0      	bhi.n	80078f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	627a      	str	r2, [r7, #36]	; 0x24
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	4b25      	ldr	r3, [pc, #148]	; (80079bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	e00b      	b.n	8007944 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	61f9      	str	r1, [r7, #28]
 8007936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	09db      	lsrs	r3, r3, #7
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b7f      	cmp	r3, #127	; 0x7f
 8007948:	d8f0      	bhi.n	800792c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	61fa      	str	r2, [r7, #28]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e00b      	b.n	800797c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	1c59      	adds	r1, r3, #1
 800796c:	6179      	str	r1, [r7, #20]
 800796e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	09db      	lsrs	r3, r3, #7
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b7f      	cmp	r3, #127	; 0x7f
 8007980:	d8f0      	bhi.n	8007964 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	617a      	str	r2, [r7, #20]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007992:	2218      	movs	r2, #24
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	68b8      	ldr	r0, [r7, #8]
 8007998:	f7ff fba4 	bl	80070e4 <_SendPacket>
  RECORD_END();
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	4798      	blx	r3
  }
}
 80079b0:	bf00      	nop
 80079b2:	3730      	adds	r7, #48	; 0x30
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200044bc 	.word	0x200044bc
 80079bc:	2000448c 	.word	0x2000448c

080079c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b092      	sub	sp, #72	; 0x48
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80079c8:	f3ef 8311 	mrs	r3, BASEPRI
 80079cc:	f04f 0120 	mov.w	r1, #32
 80079d0:	f381 8811 	msr	BASEPRI, r1
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	486a      	ldr	r0, [pc, #424]	; (8007b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80079d8:	f7ff fa9a 	bl	8006f10 <_PreparePacket>
 80079dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4b66      	ldr	r3, [pc, #408]	; (8007b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	643b      	str	r3, [r7, #64]	; 0x40
 80079f2:	e00b      	b.n	8007a0c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80079f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fa:	1c59      	adds	r1, r3, #1
 80079fc:	6479      	str	r1, [r7, #68]	; 0x44
 80079fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a08:	09db      	lsrs	r3, r3, #7
 8007a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a10:	d8f0      	bhi.n	80079f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	647a      	str	r2, [r7, #68]	; 0x44
 8007a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2c:	e00b      	b.n	8007a46 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a34:	1c59      	adds	r1, r3, #1
 8007a36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	09db      	lsrs	r3, r3, #7
 8007a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4a:	d8f0      	bhi.n	8007a2e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	4619      	mov	r1, r3
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff fa07 	bl	8006e78 <_EncodeStr>
 8007a6a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007a6c:	2209      	movs	r2, #9
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6938      	ldr	r0, [r7, #16]
 8007a72:	f7ff fb37 	bl	80070e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b40      	ldr	r3, [pc, #256]	; (8007b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30
 8007a8a:	e00b      	b.n	8007aa4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	6379      	str	r1, [r7, #52]	; 0x34
 8007a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	09db      	lsrs	r3, r3, #7
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa8:	d8f0      	bhi.n	8007a8c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	637a      	str	r2, [r7, #52]	; 0x34
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac4:	e00b      	b.n	8007ade <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	09db      	lsrs	r3, r3, #7
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ae2:	d8f0      	bhi.n	8007ac6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	623b      	str	r3, [r7, #32]
 8007afe:	e00b      	b.n	8007b18 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	6279      	str	r1, [r7, #36]	; 0x24
 8007b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	09db      	lsrs	r3, r3, #7
 8007b16:	623b      	str	r3, [r7, #32]
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b1c:	d8f0      	bhi.n	8007b00 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	627a      	str	r2, [r7, #36]	; 0x24
 8007b24:	6a3a      	ldr	r2, [r7, #32]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e00b      	b.n	8007b50 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	1c59      	adds	r1, r3, #1
 8007b40:	61f9      	str	r1, [r7, #28]
 8007b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b46:	b2d2      	uxtb	r2, r2
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	09db      	lsrs	r3, r3, #7
 8007b4e:	61bb      	str	r3, [r7, #24]
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b7f      	cmp	r3, #127	; 0x7f
 8007b54:	d8f0      	bhi.n	8007b38 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007b66:	2215      	movs	r2, #21
 8007b68:	68f9      	ldr	r1, [r7, #12]
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f7ff faba 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f383 8811 	msr	BASEPRI, r3
}
 8007b76:	bf00      	nop
 8007b78:	3748      	adds	r7, #72	; 0x48
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200044bc 	.word	0x200044bc
 8007b84:	2000448c 	.word	0x2000448c

08007b88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007b9e:	4b03      	ldr	r3, [pc, #12]	; (8007bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	4798      	blx	r3
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000448c 	.word	0x2000448c

08007bb0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bbc:	f04f 0120 	mov.w	r1, #32
 8007bc0:	f381 8811 	msr	BASEPRI, r1
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	480b      	ldr	r0, [pc, #44]	; (8007bf4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007bc8:	f7ff f9a2 	bl	8006f10 <_PreparePacket>
 8007bcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bce:	2280      	movs	r2, #128	; 0x80
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	6938      	ldr	r0, [r7, #16]
 8007bd4:	f7ff f950 	bl	8006e78 <_EncodeStr>
 8007bd8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007bda:	220e      	movs	r2, #14
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	6938      	ldr	r0, [r7, #16]
 8007be0:	f7ff fa80 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f383 8811 	msr	BASEPRI, r3
}
 8007bea:	bf00      	nop
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200044bc 	.word	0x200044bc

08007bf8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d019      	beq.n	8007c3a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007c06:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d014      	beq.n	8007c3a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007c10:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4798      	blx	r3
 8007c18:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007c1c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007c1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	f04f 0400 	mov.w	r4, #0
 8007c2a:	0013      	movs	r3, r2
 8007c2c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4601      	mov	r1, r0
 8007c32:	200d      	movs	r0, #13
 8007c34:	f7ff fbe8 	bl	8007408 <SEGGER_SYSVIEW_RecordU32x2>
 8007c38:	e005      	b.n	8007c46 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	200c      	movs	r0, #12
 8007c42:	f7ff fba5 	bl	8007390 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	2000448c 	.word	0x2000448c
 8007c54:	e0001004 	.word	0xe0001004

08007c58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c62:	f04f 0120 	mov.w	r1, #32
 8007c66:	f381 8811 	msr	BASEPRI, r1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	4819      	ldr	r0, [pc, #100]	; (8007cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007c6e:	f7ff f94f 	bl	8006f10 <_PreparePacket>
 8007c72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007c78:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	e00b      	b.n	8007ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	1c59      	adds	r1, r3, #1
 8007c94:	6179      	str	r1, [r7, #20]
 8007c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	09db      	lsrs	r3, r3, #7
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca8:	d8f0      	bhi.n	8007c8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	617a      	str	r2, [r7, #20]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007cba:	2202      	movs	r2, #2
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	68b8      	ldr	r0, [r7, #8]
 8007cc0:	f7ff fa10 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f383 8811 	msr	BASEPRI, r3
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200044bc 	.word	0x200044bc
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8007ce6:	f04f 0120 	mov.w	r1, #32
 8007cea:	f381 8811 	msr	BASEPRI, r1
 8007cee:	607b      	str	r3, [r7, #4]
 8007cf0:	4807      	ldr	r0, [pc, #28]	; (8007d10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007cf2:	f7ff f90d 	bl	8006f10 <_PreparePacket>
 8007cf6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007cf8:	2203      	movs	r2, #3
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6838      	ldr	r0, [r7, #0]
 8007cfe:	f7ff f9f1 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f383 8811 	msr	BASEPRI, r3
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	200044bc 	.word	0x200044bc

08007d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d1e:	f04f 0120 	mov.w	r1, #32
 8007d22:	f381 8811 	msr	BASEPRI, r1
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	4807      	ldr	r0, [pc, #28]	; (8007d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007d2a:	f7ff f8f1 	bl	8006f10 <_PreparePacket>
 8007d2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007d30:	2212      	movs	r2, #18
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6838      	ldr	r0, [r7, #0]
 8007d36:	f7ff f9d5 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f383 8811 	msr	BASEPRI, r3
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200044bc 	.word	0x200044bc

08007d4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d52:	f3ef 8311 	mrs	r3, BASEPRI
 8007d56:	f04f 0120 	mov.w	r1, #32
 8007d5a:	f381 8811 	msr	BASEPRI, r1
 8007d5e:	607b      	str	r3, [r7, #4]
 8007d60:	4807      	ldr	r0, [pc, #28]	; (8007d80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007d62:	f7ff f8d5 	bl	8006f10 <_PreparePacket>
 8007d66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007d68:	2211      	movs	r2, #17
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6838      	ldr	r0, [r7, #0]
 8007d6e:	f7ff f9b9 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f383 8811 	msr	BASEPRI, r3
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	200044bc 	.word	0x200044bc

08007d84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8007d90:	f04f 0120 	mov.w	r1, #32
 8007d94:	f381 8811 	msr	BASEPRI, r1
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	4819      	ldr	r0, [pc, #100]	; (8007e00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007d9c:	f7ff f8b8 	bl	8006f10 <_PreparePacket>
 8007da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007da6:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	e00b      	b.n	8007dd2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	1c59      	adds	r1, r3, #1
 8007dc2:	61f9      	str	r1, [r7, #28]
 8007dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	09db      	lsrs	r3, r3, #7
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd6:	d8f0      	bhi.n	8007dba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	61fa      	str	r2, [r7, #28]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007de8:	2208      	movs	r2, #8
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	6938      	ldr	r0, [r7, #16]
 8007dee:	f7ff f979 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f383 8811 	msr	BASEPRI, r3
}
 8007df8:	bf00      	nop
 8007dfa:	3720      	adds	r7, #32
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200044bc 	.word	0x200044bc
 8007e04:	2000448c 	.word	0x2000448c

08007e08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e10:	f3ef 8311 	mrs	r3, BASEPRI
 8007e14:	f04f 0120 	mov.w	r1, #32
 8007e18:	f381 8811 	msr	BASEPRI, r1
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	4819      	ldr	r0, [pc, #100]	; (8007e84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007e20:	f7ff f876 	bl	8006f10 <_PreparePacket>
 8007e24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e2a:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e00b      	b.n	8007e56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	1c59      	adds	r1, r3, #1
 8007e46:	61f9      	str	r1, [r7, #28]
 8007e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	09db      	lsrs	r3, r3, #7
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b7f      	cmp	r3, #127	; 0x7f
 8007e5a:	d8f0      	bhi.n	8007e3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	61fa      	str	r2, [r7, #28]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	6938      	ldr	r0, [r7, #16]
 8007e72:	f7ff f937 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f383 8811 	msr	BASEPRI, r3
}
 8007e7c:	bf00      	nop
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	200044bc 	.word	0x200044bc
 8007e88:	2000448c 	.word	0x2000448c

08007e8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e94:	f3ef 8311 	mrs	r3, BASEPRI
 8007e98:	f04f 0120 	mov.w	r1, #32
 8007e9c:	f381 8811 	msr	BASEPRI, r1
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	4819      	ldr	r0, [pc, #100]	; (8007f08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007ea4:	f7ff f834 	bl	8006f10 <_PreparePacket>
 8007ea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007eae:	4b17      	ldr	r3, [pc, #92]	; (8007f0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	61bb      	str	r3, [r7, #24]
 8007ec0:	e00b      	b.n	8007eda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	61f9      	str	r1, [r7, #28]
 8007ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	09db      	lsrs	r3, r3, #7
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ede:	d8f0      	bhi.n	8007ec2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	61fa      	str	r2, [r7, #28]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007ef0:	2206      	movs	r2, #6
 8007ef2:	68f9      	ldr	r1, [r7, #12]
 8007ef4:	6938      	ldr	r0, [r7, #16]
 8007ef6:	f7ff f8f5 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f383 8811 	msr	BASEPRI, r3
}
 8007f00:	bf00      	nop
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	200044bc 	.word	0x200044bc
 8007f0c:	2000448c 	.word	0x2000448c

08007f10 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f1e:	f04f 0120 	mov.w	r1, #32
 8007f22:	f381 8811 	msr	BASEPRI, r1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	4827      	ldr	r0, [pc, #156]	; (8007fc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007f2a:	f7fe fff1 	bl	8006f10 <_PreparePacket>
 8007f2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f34:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	e00b      	b.n	8007f60 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	1c59      	adds	r1, r3, #1
 8007f50:	6279      	str	r1, [r7, #36]	; 0x24
 8007f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	09db      	lsrs	r3, r3, #7
 8007f5e:	623b      	str	r3, [r7, #32]
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	2b7f      	cmp	r3, #127	; 0x7f
 8007f64:	d8f0      	bhi.n	8007f48 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f6c:	6a3a      	ldr	r2, [r7, #32]
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e00b      	b.n	8007f98 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	1c59      	adds	r1, r3, #1
 8007f88:	61f9      	str	r1, [r7, #28]
 8007f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	09db      	lsrs	r3, r3, #7
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f9c:	d8f0      	bhi.n	8007f80 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	61fa      	str	r2, [r7, #28]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007fae:	2207      	movs	r2, #7
 8007fb0:	68f9      	ldr	r1, [r7, #12]
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f7ff f896 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f383 8811 	msr	BASEPRI, r3
}
 8007fbe:	bf00      	nop
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200044bc 	.word	0x200044bc
 8007fcc:	2000448c 	.word	0x2000448c

08007fd0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	1ad3      	subs	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	2000448c 	.word	0x2000448c

08007ff0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	; 0x30
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007ffa:	4b3b      	ldr	r3, [pc, #236]	; (80080e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d06d      	beq.n	80080de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008002:	4b39      	ldr	r3, [pc, #228]	; (80080e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008008:	2300      	movs	r3, #0
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
 800800c:	e008      	b.n	8008020 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	3301      	adds	r3, #1
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008024:	429a      	cmp	r2, r3
 8008026:	d3f2      	bcc.n	800800e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008028:	e000      	b.n	800802c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800802a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d055      	beq.n	80080de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008032:	f3ef 8311 	mrs	r3, BASEPRI
 8008036:	f04f 0120 	mov.w	r1, #32
 800803a:	f381 8811 	msr	BASEPRI, r1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	482a      	ldr	r0, [pc, #168]	; (80080ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008042:	f7fe ff65 	bl	8006f10 <_PreparePacket>
 8008046:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	e00b      	b.n	800806e <SEGGER_SYSVIEW_SendModule+0x7e>
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1c59      	adds	r1, r3, #1
 800805e:	6279      	str	r1, [r7, #36]	; 0x24
 8008060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	09db      	lsrs	r3, r3, #7
 800806c:	623b      	str	r3, [r7, #32]
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b7f      	cmp	r3, #127	; 0x7f
 8008072:	d8f0      	bhi.n	8008056 <SEGGER_SYSVIEW_SendModule+0x66>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	627a      	str	r2, [r7, #36]	; 0x24
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	e00b      	b.n	80080a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	b2da      	uxtb	r2, r3
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	1c59      	adds	r1, r3, #1
 8008098:	61f9      	str	r1, [r7, #28]
 800809a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	09db      	lsrs	r3, r3, #7
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b7f      	cmp	r3, #127	; 0x7f
 80080ac:	d8f0      	bhi.n	8008090 <SEGGER_SYSVIEW_SendModule+0xa0>
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	61fa      	str	r2, [r7, #28]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2280      	movs	r2, #128	; 0x80
 80080c4:	4619      	mov	r1, r3
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7fe fed6 	bl	8006e78 <_EncodeStr>
 80080cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80080ce:	2216      	movs	r2, #22
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	6938      	ldr	r0, [r7, #16]
 80080d4:	f7ff f806 	bl	80070e4 <_SendPacket>
      RECORD_END();
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80080de:	bf00      	nop
 80080e0:	3730      	adds	r7, #48	; 0x30
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200044b4 	.word	0x200044b4
 80080ec:	200044bc 	.word	0x200044bc

080080f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00f      	beq.n	800811e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f2      	bne.n	8008104 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200044b4 	.word	0x200044b4

0800812c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008132:	f3ef 8311 	mrs	r3, BASEPRI
 8008136:	f04f 0120 	mov.w	r1, #32
 800813a:	f381 8811 	msr	BASEPRI, r1
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	4817      	ldr	r0, [pc, #92]	; (80081a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008142:	f7fe fee5 	bl	8006f10 <_PreparePacket>
 8008146:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	e00b      	b.n	8008170 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	1c59      	adds	r1, r3, #1
 8008160:	6179      	str	r1, [r7, #20]
 8008162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	09db      	lsrs	r3, r3, #7
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b7f      	cmp	r3, #127	; 0x7f
 8008174:	d8f0      	bhi.n	8008158 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	617a      	str	r2, [r7, #20]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008186:	221b      	movs	r2, #27
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	68b8      	ldr	r0, [r7, #8]
 800818c:	f7fe ffaa 	bl	80070e4 <_SendPacket>
  RECORD_END();
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f383 8811 	msr	BASEPRI, r3
}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200044bc 	.word	0x200044bc
 80081a4:	200044b8 	.word	0x200044b8

080081a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80081b0:	f3ef 8311 	mrs	r3, BASEPRI
 80081b4:	f04f 0120 	mov.w	r1, #32
 80081b8:	f381 8811 	msr	BASEPRI, r1
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	4827      	ldr	r0, [pc, #156]	; (800825c <SEGGER_SYSVIEW_Warn+0xb4>)
 80081c0:	f7fe fea6 	bl	8006f10 <_PreparePacket>
 80081c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	6938      	ldr	r0, [r7, #16]
 80081cc:	f7fe fe54 	bl	8006e78 <_EncodeStr>
 80081d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
 80081d6:	2301      	movs	r3, #1
 80081d8:	623b      	str	r3, [r7, #32]
 80081da:	e00b      	b.n	80081f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	6279      	str	r1, [r7, #36]	; 0x24
 80081e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	09db      	lsrs	r3, r3, #7
 80081f2:	623b      	str	r3, [r7, #32]
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	2b7f      	cmp	r3, #127	; 0x7f
 80081f8:	d8f0      	bhi.n	80081dc <SEGGER_SYSVIEW_Warn+0x34>
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	627a      	str	r2, [r7, #36]	; 0x24
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	2300      	movs	r3, #0
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	e00b      	b.n	800822c <SEGGER_SYSVIEW_Warn+0x84>
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	61f9      	str	r1, [r7, #28]
 800821e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	09db      	lsrs	r3, r3, #7
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b7f      	cmp	r3, #127	; 0x7f
 8008230:	d8f0      	bhi.n	8008214 <SEGGER_SYSVIEW_Warn+0x6c>
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	61fa      	str	r2, [r7, #28]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008242:	221a      	movs	r2, #26
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	6938      	ldr	r0, [r7, #16]
 8008248:	f7fe ff4c 	bl	80070e4 <_SendPacket>
  RECORD_END();
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f383 8811 	msr	BASEPRI, r3
}
 8008252:	bf00      	nop
 8008254:	3728      	adds	r7, #40	; 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200044bc 	.word	0x200044bc

08008260 <__libc_init_array>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	2500      	movs	r5, #0
 8008264:	4e0c      	ldr	r6, [pc, #48]	; (8008298 <__libc_init_array+0x38>)
 8008266:	4c0d      	ldr	r4, [pc, #52]	; (800829c <__libc_init_array+0x3c>)
 8008268:	1ba4      	subs	r4, r4, r6
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	42a5      	cmp	r5, r4
 800826e:	d109      	bne.n	8008284 <__libc_init_array+0x24>
 8008270:	f000 f83c 	bl	80082ec <_init>
 8008274:	2500      	movs	r5, #0
 8008276:	4e0a      	ldr	r6, [pc, #40]	; (80082a0 <__libc_init_array+0x40>)
 8008278:	4c0a      	ldr	r4, [pc, #40]	; (80082a4 <__libc_init_array+0x44>)
 800827a:	1ba4      	subs	r4, r4, r6
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	42a5      	cmp	r5, r4
 8008280:	d105      	bne.n	800828e <__libc_init_array+0x2e>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008288:	4798      	blx	r3
 800828a:	3501      	adds	r5, #1
 800828c:	e7ee      	b.n	800826c <__libc_init_array+0xc>
 800828e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008292:	4798      	blx	r3
 8008294:	3501      	adds	r5, #1
 8008296:	e7f2      	b.n	800827e <__libc_init_array+0x1e>
 8008298:	0800844c 	.word	0x0800844c
 800829c:	0800844c 	.word	0x0800844c
 80082a0:	0800844c 	.word	0x0800844c
 80082a4:	08008450 	.word	0x08008450

080082a8 <memcmp>:
 80082a8:	b530      	push	{r4, r5, lr}
 80082aa:	2400      	movs	r4, #0
 80082ac:	42a2      	cmp	r2, r4
 80082ae:	d101      	bne.n	80082b4 <memcmp+0xc>
 80082b0:	2000      	movs	r0, #0
 80082b2:	e007      	b.n	80082c4 <memcmp+0x1c>
 80082b4:	5d03      	ldrb	r3, [r0, r4]
 80082b6:	3401      	adds	r4, #1
 80082b8:	190d      	adds	r5, r1, r4
 80082ba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80082be:	42ab      	cmp	r3, r5
 80082c0:	d0f4      	beq.n	80082ac <memcmp+0x4>
 80082c2:	1b58      	subs	r0, r3, r5
 80082c4:	bd30      	pop	{r4, r5, pc}

080082c6 <memcpy>:
 80082c6:	b510      	push	{r4, lr}
 80082c8:	1e43      	subs	r3, r0, #1
 80082ca:	440a      	add	r2, r1
 80082cc:	4291      	cmp	r1, r2
 80082ce:	d100      	bne.n	80082d2 <memcpy+0xc>
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082da:	e7f7      	b.n	80082cc <memcpy+0x6>

080082dc <memset>:
 80082dc:	4603      	mov	r3, r0
 80082de:	4402      	add	r2, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <memset+0xa>
 80082e4:	4770      	bx	lr
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <memset+0x4>

080082ec <_init>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	bf00      	nop
 80082f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f2:	bc08      	pop	{r3}
 80082f4:	469e      	mov	lr, r3
 80082f6:	4770      	bx	lr

080082f8 <_fini>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr
